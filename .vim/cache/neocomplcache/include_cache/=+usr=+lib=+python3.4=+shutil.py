[{'word': 'Error', 'kind': 'c', 'abbr': 'Error(OSError): <class>', 'dup': 1}, {'word': 'ExecError', 'kind': 'c', 'abbr': 'ExecError(OSError): <class>', 'dup': 1}, {'word': 'ReadError', 'kind': 'c', 'abbr': 'ReadError(OSError): <class>', 'dup': 1}, {'word': 'RegistryError', 'kind': 'c', 'abbr': 'RegistryError(Exception): <class>', 'dup': 1}, {'word': 'SameFileError', 'kind': 'c', 'abbr': 'SameFileError(Error): <class>', 'dup': 1}, {'word': 'SpecialFileError', 'kind': 'c', 'abbr': 'SpecialFileError(OSError): <class>', 'dup': 1}, {'word': '_ARCHIVE_FORMATS', 'kind': 'v', 'abbr': '_ARCHIVE_FORMATS = {', 'dup': 1}, {'word': '_BZ2_SUPPORTED', 'kind': 'v', 'abbr': '_BZ2_SUPPORTED', 'dup': 1}, {'word': '_UNPACK_FORMATS', 'kind': 'v', 'abbr': '_UNPACK_FORMATS = {', 'dup': 1}, {'word': '__all__', 'kind': 'v', 'abbr': '__all__', 'dup': 1}, {'word': '_access_check', 'kind': 'f', 'abbr': 'def _access_check(fn, mode):', 'dup': 1}, {'word': '_basename', 'kind': 'f', 'abbr': 'def _basename(path):', 'dup': 1}, {'word': '_call_external_zip', 'kind': 'f', 'abbr': 'def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):', 'dup': 1}, {'word': '_check_unpack_options', 'kind': 'f', 'abbr': 'def _check_unpack_options(extensions, function, extra_args):', 'dup': 1}, {'word': '_copyxattr', 'kind': 'f', 'abbr': 'def _copyxattr(*args, **kwargs):', 'dup': 1}, {'word': '_destinsrc', 'kind': 'f', 'abbr': 'def _destinsrc(src, dst):', 'dup': 1}, {'word': '_ensure_directory', 'kind': 'f', 'abbr': 'def _ensure_directory(path):', 'dup': 1}, {'word': '_find_unpack_format', 'kind': 'f', 'abbr': 'def _find_unpack_format(filename):', 'dup': 1}, {'word': '_get_gid', 'kind': 'f', 'abbr': 'def _get_gid(name):', 'dup': 1}, {'word': '_get_uid', 'kind': 'f', 'abbr': 'def _get_uid(name):', 'dup': 1}, {'word': '_ignore_patterns', 'kind': 'f', 'abbr': 'def _ignore_patterns(path, names):', 'dup': 1}, {'word': '_make_tarball', 'kind': 'f', 'abbr': '_make_tarball', 'dup': 1}, {'word': '_make_zipfile', 'kind': 'f', 'abbr': '_make_zipfile', 'dup': 1}, {'word': '_nop', 'kind': 'f', 'abbr': 'def _nop(*args, ns=None, follow_symlinks=None):', 'dup': 1}, {'word': '_ntuple_diskusage', 'kind': 'v', 'abbr': '_ntuple_diskusage = collections.namedtuple(''usage'', ''total used free'')', 'dup': 1}, {'word': '_rmtree_safe_fd', 'kind': 'f', 'abbr': 'def _rmtree_safe_fd(topfd, path, onerror):', 'dup': 1}, {'word': '_rmtree_unsafe', 'kind': 'f', 'abbr': 'def _rmtree_unsafe(path, onerror):', 'dup': 1}, {'word': '_samefile', 'kind': 'f', 'abbr': 'def _samefile(src, dst):', 'dup': 1}, {'word': '_set_uid_gid', 'kind': 'f', 'abbr': 'def _set_uid_gid(tarinfo):', 'dup': 1}, {'word': '_unpack_tarfile', 'kind': 'f', 'abbr': 'def _unpack_tarfile(filename, extract_dir):', 'dup': 1}, {'word': '_unpack_zipfile', 'kind': 'f', 'abbr': 'def _unpack_zipfile(filename, extract_dir):', 'dup': 1}, {'word': '_use_fd_functions', 'kind': 'v', 'abbr': '_use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=', 'dup': 1}, {'word': 'chown', 'kind': 'f', 'abbr': 'def chown(path, user=None, group=None):', 'dup': 1}, {'word': 'copy', 'kind': 'f', 'abbr': 'def copy(src, dst, *, follow_symlinks=True):', 'dup': 1}, {'word': 'copy2', 'kind': 'f', 'abbr': 'copy2', 'dup': 1}, {'word': 'copyfile', 'kind': 'f', 'abbr': 'def copyfile(src, dst, *, follow_symlinks=True):', 'dup': 1}, {'word': 'copyfileobj', 'kind': 'f', 'abbr': 'copyfileobj', 'dup': 1}, {'word': 'copymode', 'kind': 'f', 'abbr': 'def copymode(src, dst, *, follow_symlinks=True):', 'dup': 1}, {'word': 'copystat', 'kind': 'f', 'abbr': 'def copystat(src, dst, *, follow_symlinks=True):', 'dup': 1}, {'word': 'copytree', 'kind': 'f', 'abbr': 'copytree', 'dup': 1}, {'word': 'disk_usage', 'kind': 'f', 'abbr': 'def disk_usage(path):', 'dup': 1}, {'word': 'get_archive_formats', 'kind': 'f', 'abbr': 'def get_archive_formats():', 'dup': 1}, {'word': 'get_terminal_size', 'kind': 'f', 'abbr': 'get_terminal_size', 'dup': 1}, {'word': 'get_unpack_formats', 'kind': 'f', 'abbr': 'def get_unpack_formats():', 'dup': 1}, {'word': 'getgrnam', 'kind': 'v', 'abbr': 'getgrnam = None', 'dup': 1}, {'word': 'getpwnam', 'kind': 'v', 'abbr': 'getpwnam = None', 'dup': 1}, {'word': 'ignore_patterns', 'kind': 'f', 'abbr': 'def ignore_patterns(*patterns):', 'dup': 1}, {'word': 'lookup', 'kind': 'f', 'abbr': 'def lookup(name):', 'dup': 1}, {'word': 'make_archive', 'kind': 'f', 'abbr': 'make_archive', 'dup': 1}, {'word': 'move', 'kind': 'f', 'abbr': 'def move(src, dst):', 'dup': 1}, {'word': 'onerror', 'kind': 'f', 'abbr': 'def onerror(*args):', 'dup': 1}, {'word': 'register_archive_format', 'kind': 'f', 'abbr': 'def register_archive_format(name, function, extra_args=None, description=''''):', 'dup': 1}, {'word': 'register_unpack_format', 'kind': 'f', 'abbr': 'def register_unpack_format(name, extensions, function, extra_args=None,', 'dup': 1}, {'word': 'rmtree', 'kind': 'f', 'abbr': 'def rmtree(path, ignore_errors=False, onerror=None):', 'dup': 1}, {'word': 'unpack_archive', 'kind': 'f', 'abbr': 'def unpack_archive(filename, extract_dir=None, format=None):', 'dup': 1}, {'word': 'unregister_archive_format', 'kind': 'f', 'abbr': 'def unregister_archive_format(name):', 'dup': 1}, {'word': 'unregister_unpack_format', 'kind': 'f', 'abbr': 'def unregister_unpack_format(name):', 'dup': 1}, {'word': 'which', 'kind': 'f', 'abbr': 'def which(cmd, mode=os.F_OK | os.X_OK, path=None):', 'dup': 1}]
