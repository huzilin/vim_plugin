[{'word': 'P_WAIT', 'kind': 'v', 'abbr': 'P_WAIT', 'dup': 1}, {'word': 'SEEK_CUR', 'kind': 'v', 'abbr': 'SEEK_CUR', 'dup': 1}, {'word': 'SEEK_END', 'kind': 'v', 'abbr': 'SEEK_END', 'dup': 1}, {'word': 'SEEK_SET', 'kind': 'v', 'abbr': 'SEEK_SET', 'dup': 1}, {'word': '_Environ', 'kind': 'c', 'abbr': '_Environ(MutableMapping): <class>', 'dup': 1}, {'word': '__all__', 'kind': 'v', 'abbr': '__all__ = ["altsep", "curdir", "pardir", "sep", "pathsep", "linesep",', 'dup': 1}, {'word': '__init__', 'menu': '_Environ', 'kind': 'm', 'abbr': 'def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):', 'dup': 1}, {'word': '_add', 'kind': 'f', 'abbr': 'def _add(str, fn):', 'dup': 1}, {'word': '_check_bytes', 'kind': 'f', 'abbr': 'def _check_bytes(value):', 'dup': 1}, {'word': '_createenviron', 'kind': 'f', 'abbr': 'def _createenviron():', 'dup': 1}, {'word': '_execvpe', 'kind': 'f', 'abbr': 'def _execvpe(file, args, env=None):', 'dup': 1}, {'word': '_exists', 'kind': 'f', 'abbr': 'def _exists(name):', 'dup': 1}, {'word': '_fscodec', 'kind': 'f', 'abbr': 'def _fscodec():', 'dup': 1}, {'word': '_fwalk', 'kind': 'f', 'abbr': 'def _fwalk(topfd, toppath, topdown, onerror, follow_symlinks):', 'dup': 1}, {'word': '_get_exports_list', 'kind': 'f', 'abbr': 'def _get_exports_list(module):', 'dup': 1}, {'word': '_globals', 'kind': 'v', 'abbr': '_globals = globals()', 'dup': 1}, {'word': '_names', 'kind': 'v', 'abbr': '_names = sys.builtin_module_names', 'dup': 1}, {'word': '_putenv', 'kind': 'v', 'abbr': '_putenv = lambda key, value: None', 'dup': 1}, {'word': '_set', 'kind': 'v', 'abbr': '_set = set()', 'dup': 1}, {'word': '_spawnvef', 'kind': 'f', 'abbr': 'def _spawnvef(mode, file, args, env, func):', 'dup': 1}, {'word': '_unsetenv', 'kind': 'v', 'abbr': '_unsetenv = lambda key: _putenv(key, "")', 'dup': 1}, {'word': '_wrap_close', 'kind': 'c', 'abbr': '_wrap_close: <class>', 'dup': 1}, {'word': 'check_str', 'kind': 'f', 'abbr': 'def check_str(value):', 'dup': 1}, {'word': 'close', 'menu': '_wrap_close', 'kind': 'm', 'abbr': 'def close(self):', 'dup': 1}, {'word': 'copy', 'menu': '_Environ', 'kind': 'm', 'abbr': 'def copy(self):', 'dup': 1}, {'word': 'decode', 'kind': 'f', 'abbr': 'def decode(value):', 'dup': 1}, {'word': 'encode', 'kind': 'f', 'abbr': 'def encode(value):', 'dup': 1}, {'word': 'encodekey', 'kind': 'f', 'abbr': 'def encodekey(key):', 'dup': 1}, {'word': 'environ', 'kind': 'v', 'abbr': 'environ = {}', 'dup': 1}, {'word': 'execl', 'kind': 'f', 'abbr': 'def execl(file, *args):', 'dup': 1}, {'word': 'execle', 'kind': 'f', 'abbr': 'def execle(file, *args):', 'dup': 1}, {'word': 'execlp', 'kind': 'f', 'abbr': 'def execlp(file, *args):', 'dup': 1}, {'word': 'execlpe', 'kind': 'f', 'abbr': 'def execlpe(file, *args):', 'dup': 1}, {'word': 'execvp', 'kind': 'f', 'abbr': 'def execvp(file, args):', 'dup': 1}, {'word': 'execvpe', 'kind': 'f', 'abbr': 'def execvpe(file, args, env):', 'dup': 1}, {'word': 'fdopen', 'kind': 'f', 'abbr': 'def fdopen(fd, *args, **kwargs):', 'dup': 1}, {'word': 'fsdecode', 'kind': 'f', 'abbr': 'def fsdecode(filename):', 'dup': 1}, {'word': 'fsencode', 'kind': 'f', 'abbr': 'def fsencode(filename):', 'dup': 1}, {'word': 'fwalk', 'kind': 'f', 'abbr': 'def fwalk(top=".", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):', 'dup': 1}, {'word': 'get_exec_path', 'kind': 'f', 'abbr': 'def get_exec_path(env=None):', 'dup': 1}, {'word': 'getenv', 'kind': 'f', 'abbr': 'def getenv(key, default=None):', 'dup': 1}, {'word': 'getenvb', 'kind': 'f', 'abbr': 'def getenvb(key, default=None):', 'dup': 1}, {'word': 'linesep', 'kind': 'v', 'abbr': 'linesep = ''\r\n''', 'dup': 1}, {'word': 'makedirs', 'kind': 'f', 'abbr': 'makedirs', 'dup': 1}, {'word': 'name', 'kind': 'v', 'abbr': 'name = ''ce''', 'dup': 1}, {'word': 'popen', 'kind': 'f', 'abbr': 'popen', 'dup': 1}, {'word': 'removedirs', 'kind': 'f', 'abbr': 'def removedirs(name):', 'dup': 1}, {'word': 'renames', 'kind': 'f', 'abbr': 'def renames(old, new):', 'dup': 1}, {'word': 'setdefault', 'menu': '_Environ', 'kind': 'm', 'abbr': 'def setdefault(self, key, value):', 'dup': 1}, {'word': 'spawnl', 'kind': 'f', 'abbr': 'def spawnl(mode, file, *args):', 'dup': 1}, {'word': 'spawnle', 'kind': 'f', 'abbr': 'def spawnle(mode, file, *args):', 'dup': 1}, {'word': 'spawnlp', 'kind': 'f', 'abbr': 'def spawnlp(mode, file, *args):', 'dup': 1}, {'word': 'spawnlpe', 'kind': 'f', 'abbr': 'def spawnlpe(mode, file, *args):', 'dup': 1}, {'word': 'spawnv', 'kind': 'f', 'abbr': 'def spawnv(mode, file, args):', 'dup': 1}, {'word': 'spawnve', 'kind': 'f', 'abbr': 'def spawnve(mode, file, args, env):', 'dup': 1}, {'word': 'spawnvp', 'kind': 'f', 'abbr': 'def spawnvp(mode, file, args):', 'dup': 1}, {'word': 'spawnvpe', 'kind': 'f', 'abbr': 'def spawnvpe(mode, file, args, env):', 'dup': 1}, {'word': 'supports_bytes_environ', 'kind': 'v', 'abbr': 'supports_bytes_environ = (name != ''nt'')', 'dup': 1}, {'word': 'supports_dir_fd', 'kind': 'v', 'abbr': 'supports_dir_fd = _set', 'dup': 1}, {'word': 'supports_effective_ids', 'kind': 'v', 'abbr': 'supports_effective_ids = _set', 'dup': 1}, {'word': 'supports_fd', 'kind': 'v', 'abbr': 'supports_fd = _set', 'dup': 1}, {'word': 'supports_follow_symlinks', 'kind': 'v', 'abbr': 'supports_follow_symlinks = _set', 'dup': 1}, {'word': 'walk', 'kind': 'f', 'abbr': 'def walk(top, topdown=True, onerror=None, followlinks=False):', 'dup': 1}]
