[{'word': 'ERROR', 'menu': 'IOLoop', 'kind': 'v', 'abbr': 'ERROR = _EPOLLERR | _EPOLLHUP', 'dup': 1}, {'word': 'IOLoop', 'kind': 'c', 'abbr': 'IOLoop(Configurable): <class>', 'dup': 1}, {'word': 'NONE', 'menu': 'IOLoop', 'kind': 'v', 'abbr': 'NONE', 'dup': 1}, {'word': 'PeriodicCallback', 'kind': 'c', 'abbr': 'PeriodicCallback(object): <class>', 'dup': 1}, {'word': 'PollIOLoop', 'kind': 'c', 'abbr': 'PollIOLoop(IOLoop): <class>', 'dup': 1}, {'word': 'READ', 'menu': 'IOLoop', 'kind': 'v', 'abbr': 'READ = _EPOLLIN', 'dup': 1}, {'word': 'TimeoutError', 'kind': 'c', 'abbr': 'TimeoutError(Exception): <class>', 'dup': 1}, {'word': 'WRITE', 'menu': 'IOLoop', 'kind': 'v', 'abbr': 'WRITE = _EPOLLOUT', 'dup': 1}, {'word': '_EPOLLERR', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLERR', 'dup': 1}, {'word': '_EPOLLET', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLET', 'dup': 1}, {'word': '_EPOLLHUP', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLHUP', 'dup': 1}, {'word': '_EPOLLIN', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLIN', 'dup': 1}, {'word': '_EPOLLONESHOT', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLONESHOT', 'dup': 1}, {'word': '_EPOLLOUT', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLOUT', 'dup': 1}, {'word': '_EPOLLPRI', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLPRI', 'dup': 1}, {'word': '_EPOLLRDHUP', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_EPOLLRDHUP', 'dup': 1}, {'word': '_Timeout', 'kind': 'c', 'abbr': '_Timeout(object): <class>', 'dup': 1}, {'word': '__init__', 'menu': 'PeriodicCallback', 'kind': 'm', 'abbr': 'def __init__(self, callback, callback_time, io_loop=None):', 'dup': 1}, {'word': '__slots__', 'menu': '_Timeout', 'kind': 'v', 'abbr': '__slots__ = [''deadline'', ''callback'']', 'dup': 1}, {'word': '_current', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_current = threading.local()', 'dup': 1}, {'word': '_instance_lock', 'menu': 'IOLoop', 'kind': 'v', 'abbr': '_instance_lock = threading.Lock()', 'dup': 1}, {'word': '_run', 'menu': 'PeriodicCallback', 'kind': 'm', 'abbr': 'def _run(self):', 'dup': 1}, {'word': '_run_callback', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def _run_callback(self, callback):', 'dup': 1}, {'word': '_schedule_next', 'menu': 'PeriodicCallback', 'kind': 'm', 'abbr': 'def _schedule_next(self):', 'dup': 1}, {'word': 'add_callback', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def add_callback(self, callback, *args, **kwargs):', 'dup': 1}, {'word': 'add_callback_from_signal', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def add_callback_from_signal(self, callback, *args, **kwargs):', 'dup': 1}, {'word': 'add_future', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def add_future(self, future, callback):', 'dup': 1}, {'word': 'add_handler', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def add_handler(self, fd, handler, events):', 'dup': 1}, {'word': 'add_timeout', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def add_timeout(self, deadline, callback):', 'dup': 1}, {'word': 'clear_current', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def clear_current():', 'dup': 1}, {'word': 'close', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def close(self, all_fds=False):', 'dup': 1}, {'word': 'configurable_base', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def configurable_base(cls):', 'dup': 1}, {'word': 'configurable_default', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def configurable_default(cls):', 'dup': 1}, {'word': 'current', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def current():', 'dup': 1}, {'word': 'handle_callback_exception', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def handle_callback_exception(self, callback):', 'dup': 1}, {'word': 'initialize', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def initialize(self):', 'dup': 1}, {'word': 'initialized', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def initialized():', 'dup': 1}, {'word': 'install', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def install(self):', 'dup': 1}, {'word': 'instance', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def instance():', 'dup': 1}, {'word': 'log_stack', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def log_stack(self, signal, frame):', 'dup': 1}, {'word': 'make_current', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def make_current(self):', 'dup': 1}, {'word': 'remove_handler', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def remove_handler(self, fd):', 'dup': 1}, {'word': 'remove_timeout', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def remove_timeout(self, timeout):', 'dup': 1}, {'word': 'run_sync', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def run_sync(self, func, timeout=None):', 'dup': 1}, {'word': 'set_blocking_log_threshold', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def set_blocking_log_threshold(self, seconds):', 'dup': 1}, {'word': 'set_blocking_signal_threshold', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def set_blocking_signal_threshold(self, seconds, action):', 'dup': 1}, {'word': 'signal', 'kind': 'v', 'abbr': 'signal = None', 'dup': 1}, {'word': 'start', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def start(self):', 'dup': 1}, {'word': 'stop', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def stop(self):', 'dup': 1}, {'word': 'time', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def time(self):', 'dup': 1}, {'word': 'timedelta_to_seconds', 'menu': '_Timeout', 'kind': 'm', 'abbr': 'def timedelta_to_seconds(td):', 'dup': 1}, {'word': 'update_handler', 'menu': 'IOLoop', 'kind': 'm', 'abbr': 'def update_handler(self, fd, events):', 'dup': 1}]
