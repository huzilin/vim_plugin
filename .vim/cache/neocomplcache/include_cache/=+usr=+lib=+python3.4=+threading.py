[{'word': 'Barrier', 'kind': 'c', 'abbr': 'Barrier: <class>', 'dup': 1}, {'word': 'BoundedSemaphore', 'kind': 'c', 'abbr': 'BoundedSemaphore(Semaphore): <class>', 'dup': 1}, {'word': 'BrokenBarrierError', 'kind': 'c', 'abbr': 'BrokenBarrierError(RuntimeError): <class>', 'dup': 1}, {'word': 'Condition', 'kind': 'c', 'abbr': 'Condition: <class>', 'dup': 1}, {'word': 'Event', 'kind': 'c', 'abbr': 'Event: <class>', 'dup': 1}, {'word': 'Lock', 'kind': 'v', 'abbr': 'Lock = _allocate_lock', 'dup': 1}, {'word': 'RLock', 'kind': 'f', 'abbr': 'def RLock(*args, **kwargs):', 'dup': 1}, {'word': 'Semaphore', 'kind': 'c', 'abbr': 'Semaphore: <class>', 'dup': 1}, {'word': 'TIMEOUT_MAX', 'kind': 'v', 'abbr': 'TIMEOUT_MAX = _thread.TIMEOUT_MAX', 'dup': 1}, {'word': 'Thread', 'kind': 'c', 'abbr': 'Thread: <class>', 'dup': 1}, {'word': 'ThreadError', 'kind': 'v', 'abbr': 'ThreadError = _thread.error', 'dup': 1}, {'word': 'Timer', 'kind': 'c', 'abbr': 'Timer(Thread): <class>', 'dup': 1}, {'word': '_CRLock', 'kind': 'v', 'abbr': '_CRLock = None', 'dup': 1}, {'word': '_DummyThread', 'kind': 'c', 'abbr': '_DummyThread(Thread): <class>', 'dup': 1}, {'word': '_MainThread', 'kind': 'c', 'abbr': '_MainThread(Thread): <class>', 'dup': 1}, {'word': '_PyRLock', 'kind': 'v', 'abbr': '_PyRLock = _RLock', 'dup': 1}, {'word': '_RLock', 'kind': 'c', 'abbr': '_RLock: <class>', 'dup': 1}, {'word': '__all__', 'kind': 'v', 'abbr': '__all__ = [''active_count'', ''Condition'', ''current_thread'', ''enumerate'', ''Event'',', 'dup': 1}, {'word': '__enter__', 'menu': 'Semaphore', 'kind': 'v', 'abbr': '__enter__ = acquire', 'dup': 1}, {'word': '__exc_info', 'menu': 'Thread', 'kind': 'v', 'abbr': '__exc_info = _sys.exc_info', 'dup': 1}, {'word': '__init__', 'menu': 'Event', 'kind': 'm', 'abbr': 'def __init__(self):', 'dup': 1}, {'word': '__initialized', 'menu': 'Thread', 'kind': 'v', 'abbr': '__initialized = False', 'dup': 1}, {'word': '_acquire_restore', 'menu': '_RLock', 'kind': 'm', 'abbr': 'def _acquire_restore(self, state):', 'dup': 1}, {'word': '_active', 'kind': 'v', 'abbr': '_active = {} # maps thread id to Thread object', 'dup': 1}, {'word': '_active_limbo_lock', 'kind': 'v', 'abbr': '_active_limbo_lock = _allocate_lock()', 'dup': 1}, {'word': '_after_fork', 'kind': 'f', 'abbr': 'def _after_fork():', 'dup': 1}, {'word': '_allocate_lock', 'kind': 'v', 'abbr': '_allocate_lock = _thread.allocate_lock', 'dup': 1}, {'word': '_bootstrap', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _bootstrap(self):', 'dup': 1}, {'word': '_bootstrap_inner', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _bootstrap_inner(self):', 'dup': 1}, {'word': '_break', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def _break(self):', 'dup': 1}, {'word': '_counter', 'kind': 'v', 'abbr': '_counter', 'dup': 1}, {'word': '_dangling', 'kind': 'v', 'abbr': '_dangling = WeakSet()', 'dup': 1}, {'word': '_delete', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _delete(self):', 'dup': 1}, {'word': '_enter', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def _enter(self):', 'dup': 1}, {'word': '_enumerate', 'kind': 'f', 'abbr': 'def _enumerate():', 'dup': 1}, {'word': '_exit', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def _exit(self):', 'dup': 1}, {'word': '_is_owned', 'menu': 'Condition', 'kind': 'm', 'abbr': 'def _is_owned(self):', 'dup': 1}, {'word': '_limbo', 'kind': 'v', 'abbr': '_limbo = {}', 'dup': 1}, {'word': '_main_thread', 'kind': 'v', 'abbr': '_main_thread = _MainThread()', 'dup': 1}, {'word': '_newname', 'kind': 'f', 'abbr': 'def _newname(template="Thread-%d"):', 'dup': 1}, {'word': '_pickSomeNonDaemonThread', 'kind': 'f', 'abbr': 'def _pickSomeNonDaemonThread():', 'dup': 1}, {'word': '_profile_hook', 'kind': 'v', 'abbr': '_profile_hook = None', 'dup': 1}, {'word': '_release', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def _release(self):', 'dup': 1}, {'word': '_release_save', 'menu': 'Condition', 'kind': 'm', 'abbr': 'def _release_save(self):', 'dup': 1}, {'word': '_reset_internal_locks', 'menu': 'Event', 'kind': 'm', 'abbr': 'def _reset_internal_locks(self):', 'dup': 1}, {'word': '_set_ident', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _set_ident(self):', 'dup': 1}, {'word': '_set_sentinel', 'kind': 'v', 'abbr': '_set_sentinel = _thread._set_sentinel', 'dup': 1}, {'word': '_set_tstate_lock', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _set_tstate_lock(self):', 'dup': 1}, {'word': '_shutdown', 'kind': 'f', 'abbr': 'def _shutdown():', 'dup': 1}, {'word': '_start_new_thread', 'kind': 'v', 'abbr': '_start_new_thread = _thread.start_new_thread', 'dup': 1}, {'word': '_stop', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def _stop(self):', 'dup': 1}, {'word': '_trace_hook', 'kind': 'v', 'abbr': '_trace_hook = None', 'dup': 1}, {'word': '_wait', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def _wait(self, timeout):', 'dup': 1}, {'word': '_wait_for_tstate_lock', 'menu': 'Thread', 'kind': 'm', 'abbr': '_wait_for_tstate_lock', 'dup': 1}, {'word': 'abort', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def abort(self):', 'dup': 1}, {'word': 'acquire', 'menu': '_RLock', 'kind': 'm', 'abbr': 'acquire', 'dup': 1}, {'word': 'activeCount', 'kind': 'v', 'abbr': 'activeCount = active_count', 'dup': 1}, {'word': 'active_count', 'kind': 'f', 'abbr': 'def active_count():', 'dup': 1}, {'word': 'broken', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def broken(self):', 'dup': 1}, {'word': 'cancel', 'menu': 'Timer', 'kind': 'm', 'abbr': 'def cancel(self):', 'dup': 1}, {'word': 'clear', 'menu': 'Event', 'kind': 'm', 'abbr': 'def clear(self):', 'dup': 1}, {'word': 'currentThread', 'kind': 'v', 'abbr': 'currentThread = current_thread', 'dup': 1}, {'word': 'current_thread', 'kind': 'f', 'abbr': 'def current_thread():', 'dup': 1}, {'word': 'daemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def daemon(self):', 'dup': 1}, {'word': 'enumerate', 'kind': 'f', 'abbr': 'def enumerate():', 'dup': 1}, {'word': 'getName', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def getName(self):', 'dup': 1}, {'word': 'get_ident', 'kind': 'v', 'abbr': 'get_ident = _thread.get_ident', 'dup': 1}, {'word': 'ident', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def ident(self):', 'dup': 1}, {'word': 'isAlive', 'menu': 'Thread', 'kind': 'v', 'abbr': 'isAlive = is_alive', 'dup': 1}, {'word': 'isDaemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def isDaemon(self):', 'dup': 1}, {'word': 'isSet', 'menu': 'Event', 'kind': 'v', 'abbr': 'isSet = is_set', 'dup': 1}, {'word': 'is_alive', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def is_alive(self):', 'dup': 1}, {'word': 'is_set', 'menu': 'Event', 'kind': 'm', 'abbr': 'def is_set(self):', 'dup': 1}, {'word': 'join', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def join(self, timeout=None):', 'dup': 1}, {'word': 'main_thread', 'kind': 'f', 'abbr': 'def main_thread():', 'dup': 1}, {'word': 'n_waiting', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def n_waiting(self):', 'dup': 1}, {'word': 'name', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def name(self):', 'dup': 1}, {'word': 'notify', 'menu': 'Condition', 'kind': 'm', 'abbr': 'notify', 'dup': 1}, {'word': 'notifyAll', 'menu': 'Condition', 'kind': 'v', 'abbr': 'notifyAll = notify_all', 'dup': 1}, {'word': 'notify_all', 'menu': 'Condition', 'kind': 'm', 'abbr': 'def notify_all(self):', 'dup': 1}, {'word': 'parties', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def parties(self):', 'dup': 1}, {'word': 'release', 'menu': 'BoundedSemaphore', 'kind': 'm', 'abbr': 'def release(self):', 'dup': 1}, {'word': 'reset', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def reset(self):', 'dup': 1}, {'word': 'setDaemon', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def setDaemon(self, daemonic):', 'dup': 1}, {'word': 'setName', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def setName(self, name):', 'dup': 1}, {'word': 'setprofile', 'kind': 'f', 'abbr': 'def setprofile(func):', 'dup': 1}, {'word': 'settrace', 'kind': 'f', 'abbr': 'def settrace(func):', 'dup': 1}, {'word': 'start', 'menu': 'Thread', 'kind': 'm', 'abbr': 'def start(self):', 'dup': 1}, {'word': 'wait', 'menu': 'Barrier', 'kind': 'm', 'abbr': 'def wait(self, timeout=None):', 'dup': 1}, {'word': 'wait_for', 'menu': 'Condition', 'kind': 'm', 'abbr': 'def wait_for(self, predicate, timeout=None):', 'dup': 1}]
