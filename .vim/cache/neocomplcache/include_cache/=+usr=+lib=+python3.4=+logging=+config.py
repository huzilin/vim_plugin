[{'word': 'BaseConfigurator', 'kind': 'c', 'abbr': 'BaseConfigurator(object): <class>', 'dup': 1}, {'word': 'CONVERT_PATTERN', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'CONVERT_PATTERN = re.compile(r''^(?P<prefix>[a-z]+)://(?P<suffix>.*)$'')', 'dup': 1}, {'word': 'ConfigSocketReceiver', 'kind': 'c', 'abbr': 'ConfigSocketReceiver(ThreadingTCPServer): <class>', 'dup': 1}, {'word': 'ConfigStreamHandler', 'kind': 'c', 'abbr': 'ConfigStreamHandler(StreamRequestHandler): <class>', 'dup': 1}, {'word': 'ConvertingDict', 'kind': 'c', 'abbr': 'ConvertingDict(dict, ConvertingMixin): <class>', 'dup': 1}, {'word': 'ConvertingList', 'kind': 'c', 'abbr': 'ConvertingList(list, ConvertingMixin): <class>', 'dup': 1}, {'word': 'ConvertingMixin', 'kind': 'c', 'abbr': 'ConvertingMixin(object): <class>', 'dup': 1}, {'word': 'ConvertingTuple', 'kind': 'c', 'abbr': 'ConvertingTuple(tuple, ConvertingMixin): <class>', 'dup': 1}, {'word': 'DEFAULT_LOGGING_CONFIG_PORT', 'kind': 'v', 'abbr': 'DEFAULT_LOGGING_CONFIG_PORT', 'dup': 1}, {'word': 'DIGIT_PATTERN', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'DIGIT_PATTERN = re.compile(r''^\d+$'')', 'dup': 1}, {'word': 'DOT_PATTERN', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'DOT_PATTERN = re.compile(r''^\.\s*(\w+)\s*'')', 'dup': 1}, {'word': 'DictConfigurator', 'kind': 'c', 'abbr': 'DictConfigurator(BaseConfigurator): <class>', 'dup': 1}, {'word': 'IDENTIFIER', 'kind': 'v', 'abbr': 'IDENTIFIER', 'dup': 1}, {'word': 'INDEX_PATTERN', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'INDEX_PATTERN = re.compile(r''^\[\s*(\w+)\s*\]\s*'')', 'dup': 1}, {'word': 'RESET_ERROR', 'kind': 'v', 'abbr': 'RESET_ERROR = errno.ECONNRESET', 'dup': 1}, {'word': 'Server', 'kind': 'c', 'abbr': 'Server(threading.Thread): <class>', 'dup': 1}, {'word': 'WORD_PATTERN', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'WORD_PATTERN = re.compile(r''^\s*(\w+)\s*'')', 'dup': 1}, {'word': '__init__', 'menu': 'listen.ConfigSocketReceiver', 'kind': 'm', 'abbr': 'def __init__(self, host=''localhost'', port=DEFAULT_LOGGING_CONFIG_PORT,', 'dup': 1}, {'word': '_create_formatters', 'kind': 'f', 'abbr': 'def _create_formatters(cp):', 'dup': 1}, {'word': '_handle_existing_loggers', 'kind': 'f', 'abbr': 'def _handle_existing_loggers(existing, child_loggers, disable_existing):', 'dup': 1}, {'word': '_install_handlers', 'kind': 'f', 'abbr': 'def _install_handlers(cp, formatters):', 'dup': 1}, {'word': '_install_loggers', 'kind': 'f', 'abbr': 'def _install_loggers(cp, handlers, disable_existing):', 'dup': 1}, {'word': '_listener', 'kind': 'v', 'abbr': '_listener = None', 'dup': 1}, {'word': '_resolve', 'kind': 'f', 'abbr': 'def _resolve(name):', 'dup': 1}, {'word': '_strip_spaces', 'kind': 'f', 'abbr': 'def _strip_spaces(alist):', 'dup': 1}, {'word': 'add_filters', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def add_filters(self, filterer, filters):', 'dup': 1}, {'word': 'add_handlers', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def add_handlers(self, logger, handlers):', 'dup': 1}, {'word': 'allow_reuse_address', 'menu': 'listen.ConfigSocketReceiver', 'kind': 'v', 'abbr': 'allow_reuse_address', 'dup': 1}, {'word': 'as_tuple', 'menu': 'BaseConfigurator', 'kind': 'm', 'abbr': 'def as_tuple(self, value):', 'dup': 1}, {'word': 'cfg_convert', 'menu': 'BaseConfigurator', 'kind': 'm', 'abbr': 'def cfg_convert(self, value):', 'dup': 1}, {'word': 'common_logger_config', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def common_logger_config(self, logger, config, incremental=False):', 'dup': 1}, {'word': 'configure', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def configure(self):', 'dup': 1}, {'word': 'configure_custom', 'menu': 'BaseConfigurator', 'kind': 'm', 'abbr': 'def configure_custom(self, config):', 'dup': 1}, {'word': 'configure_filter', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def configure_filter(self, config):', 'dup': 1}, {'word': 'configure_formatter', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def configure_formatter(self, config):', 'dup': 1}, {'word': 'configure_handler', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def configure_handler(self, config):', 'dup': 1}, {'word': 'configure_logger', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def configure_logger(self, name, config, incremental=False):', 'dup': 1}, {'word': 'configure_root', 'menu': 'DictConfigurator', 'kind': 'm', 'abbr': 'def configure_root(self, config, incremental=False):', 'dup': 1}, {'word': 'convert', 'menu': 'BaseConfigurator', 'kind': 'm', 'abbr': 'def convert(self, value):', 'dup': 1}, {'word': 'convert_with_key', 'menu': 'ConvertingMixin', 'kind': 'm', 'abbr': 'def convert_with_key(self, key, value, replace=True):', 'dup': 1}, {'word': 'dictConfig', 'kind': 'f', 'abbr': 'def dictConfig(config):', 'dup': 1}, {'word': 'dictConfigClass', 'kind': 'v', 'abbr': 'dictConfigClass = DictConfigurator', 'dup': 1}, {'word': 'ext_convert', 'menu': 'BaseConfigurator', 'kind': 'm', 'abbr': 'def ext_convert(self, value):', 'dup': 1}, {'word': 'fileConfig', 'kind': 'f', 'abbr': 'def fileConfig(fname, defaults=None, disable_existing_loggers=True):', 'dup': 1}, {'word': 'handle', 'menu': 'listen.ConfigStreamHandler', 'kind': 'm', 'abbr': 'def handle(self):', 'dup': 1}, {'word': 'importer', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'importer = staticmethod(__import__)', 'dup': 1}, {'word': 'listen', 'kind': 'f', 'abbr': 'def listen(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None):', 'dup': 1}, {'word': 'resolve', 'menu': 'BaseConfigurator', 'kind': 'm', 'abbr': 'def resolve(self, s):', 'dup': 1}, {'word': 'serve_until_stopped', 'menu': 'listen.ConfigSocketReceiver', 'kind': 'm', 'abbr': 'def serve_until_stopped(self):', 'dup': 1}, {'word': 'stopListening', 'kind': 'f', 'abbr': 'def stopListening():', 'dup': 1}, {'word': 'thread', 'kind': 'v', 'abbr': 'thread = None', 'dup': 1}, {'word': 'valid_ident', 'kind': 'f', 'abbr': 'def valid_ident(s):', 'dup': 1}, {'word': 'value_converters', 'menu': 'BaseConfigurator', 'kind': 'v', 'abbr': 'value_converters = {', 'dup': 1}]
