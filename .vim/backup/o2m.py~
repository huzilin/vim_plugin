#!/usr/bin/python
#coding: utf-8

import os
import sys
import getopt
import cx_Oracle
import MySQLdb
import multiprocessing
from multiprocessing import Process, Queue
import subprocess
import time
import threading

def usage():
    print("Usage:%s [--help|--sqlplusPath|--oracleUser|--oraclePassword|--oracleHost|--oraclePort|--oracleSid|--mysqlHost|--mysqlPort|--mysqlUser|--mysqlPassword|--mysqlDb|--mysqlCharset|--fieldsTerminated|--enclosed|--processNum] args...." % sys.argv[0])

def oracleProducer(queue, lock, pipe, sqlplusPath, user, password, mysqlHost, mysqlPort, mysqlUser, mysqlPassword, mysqlDb, mysqlCharset):
    while True:
        print pipe,queue.empty()
        lock.acquire(10)
        if not queue.empty():
            tableName, selectOutSQL = queue.get(False)
            lock.release()
            selectOutSprint = """set echo off
set newpage 0
set space 0
set linesize 32767
set pagesize 0
set feed off
set head off
set trimspool on
set termout off
set verify off
set trimout off
alter session set nls_date_format='YYYY-MM-DD HH24:MI:SS';

spool {pipe}
{selectOutSQL}
spool off
exit""".format(pipe = pipe, selectOutSQL = selectOutSQL)
            selectOutSprintFile = "out.sql"
            with open(selectOutSprintFile, 'w') as f:
                f.write(selectOutSprint)
            cmd = "{sqlplusPath} {user}/{password} @{selectOutSprintFile}".format(sqlplusPath = sqlplusPath, user = user, password = password, selectOutSprintFile = selectOutSprintFile)
            with open("/dev/null",'w') as f:
                p = subprocess.Popen([sqlplusPath, user + "/" + password, "@" + selectOutSprintFile], stdout=f)
            consumer = threading.Thread(target=mysqlConsumer, args=(pipe, tableName, mysqlHost, mysqlPort, mysqlUser, mysqlPassword, mysqlDb, mysqlCharset,))
            consumer.start()
            p.wait()
            
            consumer.join()
            print tableName + " export succeed."
        else:
            print "die"
            break

def mysqlConsumer(pipe, tableName, mysqlHost, mysqlPort, mysqlUser, mysqlPassword, mysqlDb, mysqlCharset):
    conn = MySQLdb.connect(host=mysqlHost,port=mysqlPort,user=mysqlUser,passwd=mysqlPassword,db=mysqlDb,charset=mysqlCharset)
    conn.autocommit(1)
    cursor = conn.cursor()
    sql = "LOAD DATA LOCAL INFILE '{pipe}' INTO TABLE `{tableName}` FIELDS TERMINATED BY '{fieldsTerminated}' ENCLOSED BY '{enclosed}'".format(pipe = pipe, tableName = tableName, fieldsTerminated = fieldsTerminated, enclosed = enclosed)
    n = cursor.execute(sql)
    print tableName + " load succeed."


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], [], ["help", "sqlplusPath=", "oracleUser=", "oraclePassword=", "oracleHost=", "oracleSid=", "oraclePort=", "mysqlHost=", "mysqlPort=", "mysqlUser=", "mysqlPassword=", "mysqlDb=", "mysqlCharset=","fieldsTerminated=","enclosed=","processNum="])
        for opt, arg in opts:
            if opt == ("--help"):
                usage()
                sys.exit(1)
            elif opt == ("--sqlplusPath"):
                sqlplusPath = arg
            elif opt == ("--oracleUser"):
                oracleUser = arg
            elif opt == ("--oraclePassword"):
                oraclePassword = arg
            elif opt == ("--oracleHost"):
                oracleHost = arg
            elif opt == ("--oracleSid"):
                oracleSid = arg
            elif opt == ("--oraclePort"):
                oraclePort = arg
            elif opt == ("--mysqlHost"):
                mysqlHost = arg
            elif opt == ("--mysqlPort"):
                mysqlPort = int(arg)
            elif opt == ("--mysqlUser"):
                mysqlUser = arg
            elif opt == ("--mysqlPassword"):
                mysqlPassword = arg
            elif opt == ("--mysqlDb"):
                mysqlDb = arg
            elif opt == ("--mysqlCharset"):
                mysqlCharset = arg
            elif opt == ("--fieldsTerminated"):
                fieldsTerminated = arg
            elif opt == ("--enclosed"):
                enclosed = arg
            elif opt == ("--processNum"):
                processNum = int(arg)

    except getopt.GetoptError:
        print("getopt error!")
        usage()
        sys.exit(1)


    """ Create pipe """
    pipeList = []
    for each in range(processNum):
        pipeName = str(each) + ".pipe"
        pipeList.append(pipeName)
        os.mkfifo(pipeName)

    """ Create Oracle connection """
    oracleDSN = "{user}/{password}@{host}:{port}/{sid}".format(user = oracleUser, password = oraclePassword, host = oracleHost, port = oraclePort, sid = oracleSid)
    oracleConn = cx_Oracle.connect(oracleDSN,,threaded=True)
    oracleCursor = oracleConn.cursor()

    """ Create MySQL connection """
    #mysqlConnList = []
    #mysqlCursorList = []
    #for each in range(processNum):
    #    mysqlConn = MySQLdb.connect(host=mysqlHost,port=mysqlPort,user=mysqlUser,passwd=mysqlPassword,db=mysqlDb,charset=mysqlCharset)
    #    mysqlConn.autocommit(1)
    #    mysqlCursor = mysqlConn.cursor()
    #    mysqlCursorList.append(mysqlCursor)

    """ Get table name """
#    oracleCursor.execute("SELECT table_name FROM user_tables")
#    row = oracleCursor.fetchall()
#    tableList = ["A_PAY_FLOW","A_PREPAY_FLOW","ARC_E_CONS_PRC_AMT","ARC_E_CONSPRC_SNAP","ARC_E_CONS_SNAP","ARC_E_KWH_AMT","ARC_E_MP_PARA_SNAP","ARC_E_MP_PQ","ARC_R_DATA","A_RCVBL_FLOW","A_RCVED_FLOW","A_RCVED_PL_FLOW","O_PAY_DAY","D_METER","D_DEV_STORAGE","D_IO_DET","D_REGISTER_INIT","E_PL_AMT","E_CONS_PRC_AMT","ARC_E_PL_AMT"]
    tableList = ["A_RCVBL_FLOW","A_RCVED_FLOW","A_RCVED_PL_FLOW"]
#    for tableName in row:
#        tableList.append(tableName[0])

    """ Get select out SQL """
    tableAndSQLList = []

    for eachTable in tableList:
        oracleCursor.execute("SELECT column_name FROM user_tab_cols WHERE table_name=:1",(eachTable ,))
        row = oracleCursor.fetchall()

        selectOutSQL = "SELECT "

        colSQL = "SELECT LISTAGG(column_name, '||''{fieldsTerminated}''||') WITHIN GROUP(ORDER BY COLUMN_ID) FROM (SELECT column_id,'''{enclosed}''||'||column_name||'||''{enclosed}''' as column_name fROM user_tab_cols WHERE table_name='{tableName}' ORDER BY 2 DESC)".format(fieldsTerminated = fieldsTerminated, enclosed = enclosed, tableName = eachTable)	
        oracleCursor.execute(colSQL)
        row = oracleCursor.fetchall()
        selectOutSQL += row[0][0] + " from " + eachTable + ";"
        tableAndSQLList.append((eachTable, selectOutSQL))

    oracleCursor.close()
    oracleConn.close()
    """ Create process"""
    queue = Queue(len(tableAndSQLList))

    for each in tableAndSQLList:
        queue.put(each)

    print "qsize",queue.qsize()

    process = []
    lock = multiprocessing.Lock()

    for each in range(processNum):
        #mysqlCursor = mysqlCursorList[each]
        pipe = pipeList[each]
        process.append(Process(target=oracleProducer,args=(queue, lock, pipe, sqlplusPath, oracleUser, oraclePassword, mysqlHost, mysqlPort, mysqlUser, mysqlPassword, mysqlDb, mysqlCharset)))

    for eachProcess in process:
        eachProcess.start()

    for eachProcess in process:
        while eachProcess.is_alive():
            time.sleep(5)

    for each in range(processNum):
        mysqlCursorList[each].close()
        mysqlConnList[each].close()

