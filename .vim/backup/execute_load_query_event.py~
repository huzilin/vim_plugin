import sys

sys.path.append("..")
from include.unpack_byte import *


class Execute_Load_Query_Event(Query_Event):

    """
    18
    file_id_len = 4
    start_pos_len = 4
    end_pos_len = 4
    dup_handling_flags_len = 1
    """
    payload_len = 13

    def __init__(self, post_buf):
        self.parse = unpack_byte.Parse_Byte_Stream(post_buf)
        self.post_buf = post_buf
        self.thread_id = self.parse.get_uint32()
        self.exec_time = self.parse.get_uint32()
        self.db_len_size = self.parse.get_uint8()
        self.error_code = self.parse.get_uint16()
        self.status_vars_len_size = self.parse.get_uint16()

        """status_vars"""
        self.sql_auto_is_null = 'off'
        self.foreign_key_checks = 'on'
        self.unique_checks = 'on'
        self.autocommit = 'on'
        self.auto_increment_increment = 1
        self.auto_increment_offset = 1
        self.time_zone = 'en_US'
        self.lc_time_names_number = 0
        self.charset_database_number = 0
        self.table_map_for_update = 0
        self.master_data_written = 0
        self.invoker_user = None
        self.invoker_host = None
        self.db_list = list()
        self.microseconds = 0

    def __set_load_query(self):
        self.load_query = self.parse.get_char(
            len(self.post_buf) - Execute_Load_Query_Event.post_header_len
            - Execute_Load_Query_Event.payload_len -
            self.status_vars_len_size - self.db_len_len - 1)

    def parse_post_body(self):
        self.file_id = self.parse.get_uint32()
        self.start_pos = self.parse.get_uint32()
        self.end_pos = self.parse.get_uint32()
        dump_handling_flag = self.parse.get_uint8()
        dump_handling_dic =\
            {0: 'LOAD_DUP_ERROR',
             1: 'LOAD_DUP_IGNORE',
             2: 'LOAD_DUP_REPLACE'}
        self.dump_handling = dump_handling_dic[dump_handling_flag]
        self.set_status_vars()
        self.set_db_name()
        self.__set_load_query()

    def event_output(self):
        self.parse_post_body()
        print "thread_id: %d\t" % self.thread_id,
        print "exec_time: %d\t" % self.exec_time,
        print "error_code: %d\t" % self.error_code,
        print "start_pos: %d\t" % self.start_pos,
        print "end_pos: %d\t" % self.end_pos,
        print "dump_handling: %s" % self.dump_handling

        print "sql_auto_is_null: %s\tforeign_key_checks: %s\t\
unique_checks: %s" % (self.sql_auto_is_null,
                      self.foreign_key_checks, self.foreign_key_checks)
        print "sql_mode: %s" % self.sql_mode
        print "catalog: %s" % self.catalog
        print "auto_increment_increment: %s\tauto_increment_offset: %s" %\
            (self.auto_increment_increment, self.auto_increment_offset)
        print \
            "character_set_client: %s\tcollation_connection: %s\tcollation\
_server: %s" % (self.character_set_client, self.collation_connection,
            self.collation_server)
        print "time_zone: %s" % self.time_zone
        print "lc_time_names_number: %d" % self.lc_time_names_number
        if self.charset_database_number:
            print "charset_database_number: %d" % self.charset_database_number
        if self.table_map_for_update:
            print "table_map_for_update: %d" % self.table_map_for_update
        if self.master_data_written:
            print "master_data_written: %d" % self.master_data_written
        if self.invoker_host and self.invoker_user:
            print "invoker_user: %s\ninvoker_host: %s" % (self.invoker_user,
                                                          self.invoker_host)
        if self.db_list:
            print "db_list: %s" % self.db_list
        if self.microseconds:
            print "microseconds: %d" % self.microseconds
        print "db_name: %s" % self.db_name
        print "load_query: %s" % self.load_query
