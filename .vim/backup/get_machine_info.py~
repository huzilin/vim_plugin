#!/usr/bin/python
#

# -*- coding: utf-8 -*-

import ConfigParser
import sys
import os
import logging
import logging.config
from ConfigParser import NoOptionError

from fabric.api import *
from fabric.contrib.files import exists
from fabric.state import output as fbout
from fabric.network import *

from host import *
from utils import *

current_path =  os.path.dirname(os.path.abspath(__file__))
config = None
# create logger
logging.config.fileConfig(current_path + "/logging.conf")
logger_name = "dbscale"
logger = logging.getLogger(logger_name)


### variables in config file#####
mysql_pwd = None
dbscale_pwd = None
hosts = []

host_map = {}

def init_config():
    global current_path
    global hosts
    global config
    global dbscale_pwd
    mysql_secnum = 0
    host_secnum = 0
    dbscale_secnum = 0
    ha_secnum = 0
    hbip_num = 0

    config_file = current_path + '/hosts.ini'
    loginfo(logger, "Starting to parse config file hosts.ini...")
    if os.path.isfile(config_file) == False:
        logerr(logger, "Not found hosts.ini!");
        sys.exit(2)

    config = ConfigParser.ConfigParser()
    config.read(config_file)
    sections = config.sections()
    for section in sections:
        if section == "mysql":
            mysql_pwd = config.get(section, "root-password")
            if mysql_pwd == -1 or mysql_pwd == "":
                logerr(logger, "Not set root-password option in [mysql] section!")
                sys.exit(2)
            mysql_secnum=1
        elif section == "dbscale":
            dbscale_pwd = config.get(section, "dbscale-password")
            if dbscale_pwd == -1 or dbscale_pwd == "":
                logerr(logger, "Not set dbscale-password option in [dbscale] section!")
                sys.exit(2)
            dbscale_secnum=1
        elif section == "ha":
            vip = config.get(section, "vip")
            if vip == -1 or vip == "":
                logerr(logger, "Not set vip option in [ha] section!")
                sys.exit(2)
            gateway = config.get(section, "gateway")
            if gateway == -1 or gateway == "":
                logerr(logger, "Not set gateway option in [ha] section!")
                sys.exit(2)
            ha_secnum =1
        elif section.startswith("host"):
            index = int(section[4:5])
            ip = section[6:]
            ssh_pwd = config.get(section, "ssh-password")
            if ssh_pwd == -1 or ssh_pwd == "":
                logerr(logger, "Not set ssh-password option in [%s] section!", section)
                sys.exit(2)
            ssh_port = config.get(section, "ssh-port")
            if ssh_port == -1 or ssh_port == "":
                logerr(logger, "Not set ssh-port option in [%s] section!", section)
                sys.exit(2)

            hbip = None
            if index == 1 or index == 4:
                try:
                    hbip = config.get(section, "hb-ip")
                    if hbip == -1 or hbip == "":
                        logerr(logger, "Not set hb-ip option in [%s] section!", section)
                        sys.exit(2)
                except NoOptionError:
                    hbip = None
            else:
                hbip_num = hbip_num + 1

            host = None
            host = Host(ip, ssh_pwd, ssh_port, index, hbip)
            host_secnum = host_secnum + 1

            hosts.append(host)
        else:
            logerr(logger, "Invalid section name [%s]" , section)
            sys.exit(2)

    if hbip_num != 0 and hbip_num != 2:
        logerr(logger, "hb-ip option is not set in both [host1] and [host4]!")
        sys.exit(2)

    if mysql_secnum == 0:
        logerr(logger, "Can not find [mysql] section")
        sys.exit(2)
    if dbscale_secnum == 0:
        logerr(logger, "Can not find [dbscale] section")
        sys.exit(2)
    if host_secnum != 4:
        logerr(logger, "Need host1 host2 host3 host4 sections, but found %d host sections!", host_secnum)
        sys.exit(2)
    if ha_secnum == 0:
        logerr(logger, "Can not find [ha] section!", host_secnum)
        sys.exit(2)

    loginfo(logger, "Parse hosts.ini successfully!")

def check_host(host):
    env.host_string=host.user + "@" + host.ip + ":" + host.ssh_port
    env.password = host.ssh_pwd
    failed = False

    loginfo(logger, "Checking [%s]...", host.ip)
    with settings(warn_only=True):
      loginfo(logger, "1. Checking connect to [%s]...", host.ip)
      if run("uname -s").failed:
          logerr(logger, "Can not connect to [%s]:[%s]", host.ip, host.ssh_port)
          failed = True

      loginfo(logger, "2. Checking port used on [%s]...", host.ip)
      ports = [4001,4002,4003,4004,4005,1120, 23306, 23307, 23308, 23309, 23310]
      for port in ports:
        command = 'nc -z 127.0.0.1 ' + str(port)
        if run(command).failed == False:
          logerr(logger, "Port %d  on %s is taken up!", port, host.ip)
          failed = True

      loginfo(logger, "3. Checking /sgb /sgc /sgd Directory on [%s]...", host.ip)
      data_dir_list=['/sgb','/sgc','/sgd']
      for data in data_dir_list:
        if exists(data) == False:
          logerr(logger, "Directory [%s] on [%s] Not existed!", data, host.ip)
          failed = True

      loginfo(logger, "4. Checking Data Directory on [%s]...", host.ip)
      data_dir_list=['/sgb/data3307','/sgb/data3309','/sgb/data3310','/sgc/data3308']
      for data in data_dir_list:
        if exists(data):
          logerr(logger, "Directory [%s] on [%s] is already existed!", data, host.ip)
          failed = True

      loginfo(logger, "5. Checking Backup Directory on [%s]...", host.ip)
      backup_dir_list=['/sgd/sgrdb/backup3309','/sgd/sgrdb/backup3310','/sgd/sgrdb/backup3307','/sgd/sgrdb/backup3308']
      for data in backup_dir_list:
        if exists(data):
          logerr(logger, "Directory [%s] on %s is already exists!", data, host.ip)
          failed = True

      if exists('/etc/cron.d/backup.cron'):
        loginfo(logger, "/etc/cron.d/backup.cron has installed on [%s]!", host.ip)

      loginfo(logger, "6. Checking sgrdb Directory on [%s]...", host.ip)
      data = '/app/dbcluster/sgrdb/mysql'
      if exists(data):
        logerr(logger, "Directory [%s] on [%s] is already exists!", data, host.ip)
        failed = True

      loginfo(logger, "7. Checking dbscale Directory on [%s]...", host.ip)
      data = '/app/dbcluster/sgrdb/dbscale'
      if exists(data):
        logerr(logger, "Directory [%s] on [%s] is already exists!", data, host.ip)
        failed = True

      loginfo(logger, "8. Checking rpm installed on [%s]...", host.ip)
      rpm_list=['^perl-[0-9]','^perl-devel','libaio-[0-9]', 'perl-Time-HiRes','perl-DBD-MySQL','perl-DBI-', 'libdbi-dbd-mysql', '^net-snmp-[0-9]']
      need_install = [False, False, False, False, False, False, False, False]
      rpm_install_name = ['perl', 'perl-devel', 'libaio', 'perl-Time-HiRes', 'perl-DBD-MySQL', 'perl-DBI', 'libdbi-dbd-mysql', 'net-snmp']
      i = 0
      for rpm in rpm_list:
        command = 'rpm -qa | grep ' + rpm
        if run(command).failed:
          need_install[i] = True
        i = i + 1

      i = 0
      for need in need_install:
        if need == True:
          rpm = rpm_install_name[i]
          command = 'yum -y install ' + rpm
          if run(command).failed:
            logerr(logger, "rpm [%s] can not install on [%s]!", rpm, host.ip)
            failed = True
        i = i + 1

      if run('which nc').failed == True:
        if run('yum -y install nc').failed:
            logerr(logger, "rpm [nc] can not install on [%s]!", host.ip)
            failed = True

      loginfo(logger, "9. Checking ha installed on [%s]...", host.ip)

      if run('which cluadmin').failed == False:
          logerr(logger, "HA already installed on [%s]!", host.ip)
          failed = True

      loginfo(logger, "10. Checking hostname on [%s]...", host.ip)

      output = run('hostname')
      if output.failed:
          logerr(logger, "run hostname failed!")
          failed = True

      if output in host_map:
          logerr(logger, "hostname is duplicated on [%s] and [%s]!", host.ip, host_map[output])
          failed = True
      else:
          host_map[output] = host.ip

    return failed

def check_hosts():
    loginfo(logger, "Start to check all hosts...")
    failed = False
    for host in hosts:
        if check_host(host) == True:
            failed = True
    if failed == True:
        logerr(logger, "Check hosts Failed, PLEASE CHECK ERROR OUTPUT!")
    else:
        loginfo(logger, "Check all hosts successfully!")


def get_machine_code(host):
    env.host_string=host.user + "@" + host.ip + ":" + host.ssh_port
    env.password = host.ssh_pwd
    output = None
    loginfo(logger, "Getting [%s] machine code...", host.ip)
    if put(current_path + '/get_hardid', '/tmp/').failed:
        logerr(logger, "copy get_hardid failed!")
        sys.exit(2)
    if run('chmod +x /tmp/get_hardid').failed:
        logerr(logger, "chmod get_hardid failed!")
        sys.exit(2)
    output = run('/tmp/get_hardid')
    if output.failed:
        logerr(logger, "run get_hardid failed!")
        sys.exit(2)
    logger.debug(output)
    host.mc = output[13:]
    section = "host" + str(host.index) + "-" + host.ip
    config.set(section, "machine-code", host.mc)

    output = None
    output = run('hostname')
    if output.failed:
        logerr(logger, "run hostname failed!")
        sys.exit(2)
    logger.debug(output)
    config.set(section, "host-name", output)

    output = run('cat /etc/redhat-release')
    if output.failed:
        logerr(logger, "get os version failed!")
        sys.exit(2)
    logger.debug(output)
    if "CentOS" in output:
        config.set(section, "os", "16")
        config.set("ha", "os", "16")
    elif "Red Hat" in output:
        config.set(section, "os", "12")
        config.set("ha", "os", "12")

    command = "ifconfig | grep -C 1 " + host.ip + " | head -n 1 | awk '{print $1}'"
    netcard = run(command)
    config.set(section, "network-card", netcard)

    if host.is_dbscale() and host.hbip is not None:
        command = "ifconfig | grep -C 1 " + host.hbip + " | head -n 1 | awk '{print $1}'"
        hbnetcard = run(command)
        config.set(section, "hb-network-card", hbnetcard)

def get_all_machine_code():
    loginfo(logger, "Start to get all host machine code...")
    for host in hosts:
        get_machine_code(host)
    loginfo(logger, "Get all host machine code successfully!")

def write_machine_info():
    cfgfile = open("install.ini",'w')
    config.write(cfgfile)
    cfgfile.close()
    loginfo(logger, "PLEASE SEND THE install.ini FILE TO GuoDianTong!")

def gen_mc():
    set_env()
    disconnect_all()
    suppress_fabric_out()
    init_config()
    get_all_machine_code()
    disconnect_all()
    write_machine_info()

def check_pwd():
    global dbscale_pwd
    loginfo(logger, "Start to check password...")
    # check dbscale password
    for s in dbscale_pwd:
      if s in ['#', '\\', '/', '$', '!', '\'', '\"']:
        logerr(logger, "Check dbscale password Failed, INCLUDE ["+ s + "]")
    loginfo(logger, "Check password Success!")

def check_all_hosts(with_detail):
    set_env()
    disconnect_all()
    if with_detail == False:
      suppress_fabric_out()
    init_config()
    check_hosts()
    check_pwd()
    disconnect_all()
