#!/usr/bin/python2
#coding:utf-8
import binascii


global DIG_PER_DEC1, decimal_digit_t, dig2bytes
DIG_PER_DEC1 = 9
decimal_digit_t = 4
dig2bytes = (0, 1, 1, 2, 2, 3, 3, 4, 4, 4)

def bin2decimal(buf, begin, precision, scale):
    intg = precision - scale
    intg0 = intg / DIG_PER_DEC1
    frac0 = scale / DIG_PER_DEC1
    intg0x = intg - intg0 * DIG_PER_DEC1
    frac0x = scale - frac0 * DIG_PER_DEC1
    intg1 = intg0 + (intg0x > 0)
    frac1 = frac0 + (frac0x > 0)
    #bin_size= decimal_bin_size(precision, scale)
    mask= 0 if (int(binascii.b2a_hex(buf[begin]),16) & 0x80) else -1;

    pos = begin
    intg0x_num = str()
    intg0_num = str()
    frac0x_num = str()
    frac0_num = str()

    if mask == 0:
        if intg0x:
            intg0x_num = str(int(binascii.b2a_hex(buf[pos: pos + dig2bytes[intg0x]]), 16) ^ int(('0x80' + (dig2bytes[intg0x] -1) * '00'), 16)).zfill(intg0x)
            pos += dig2bytes[intg0x]

        if intg0:
            for each in range(0, intg0):
                intg0_num += str(int(binascii.b2a_hex(buf[pos: pos + decimal_digit_t]), 16)).zfill(decimal_digit_t)
                pos += decimal_digit_t

        if frac0:
            for each in range(0, frac0):
                frac0_num += str(int(binascii.b2a_hex(buf[pos: pos + decimal_digit_t]), 16)).zfill(decimal_digit_t)
                pos += decimal_digit_t

        if frac0x:
            frac0x_num = str(int(binascii.b2a_hex(buf[pos: pos + dig2bytes[frac0x]]), 16)).zfill(frac0x)
            pos += dig2bytes[frac0x]
            
        if scale:
            decimal_num = intg0x_num + intg0_num + '.' + frac0_num + frac0x_num
        else:
            decimal_num = intg0x_num + intg0_num

    elif mask == -1:
        if intg0x:
            #intg0x_num = str(int('ff' * dig2bytes[intg0x], 16) - int(binascii.b2a_hex(buf[pos: pos + dig2bytes[intg0x]]), 16) ^ int(('0x80' + (dig2bytes[intg0x] -1) * '00'), 16)).zfill(intg0x)
            intg0x_num = str(int(binascii.b2a_hex(buf[pos: pos + dig2bytes[intg0x]]), 16) ^ int(('0x80' + (dig2bytes[intg0x] -1) * '00'), 16)).zfill(intg0x)
            print intg0x_num
            print binascii.b2a_hex(buf[pos: pos + dig2bytes[intg0x]])
            print intg0x
            pos += dig2bytes[intg0x]

        if intg0:
            for each in range(0, intg0):
                intg0_num += str(int('ff' * decimal_digit_t, 16) - int(binascii.b2a_hex(buf[pos: pos + decimal_digit_t]), 16)).zfill(decimal_digit_t)
                pos += decimal_digit_t

        if frac0:
            for each in range(0, frac0):
                frac0_num += str(int('ff' * decimal_digit_t, 16) - int(binascii.b2a_hex(buf[pos: pos + decimal_digit_t]), 16)).zfill(decimal_digit_t)
                pos += decimal_digit_t

        if frac0x:
            frac0x_num = str(int('ff' * dig2bytes[frac0x], 16) - int(binascii.b2a_hex(buf[pos: pos + dig2bytes[frac0x]]), 16)).zfill(frac0x)
        print frac0x

        if scale:
            decimal_num = '-' + intg0x_num + intg0_num + '.' + frac0_num + frac0x_num
        else:
            decimal_num = '-' + intg0x_num + intg0_num

    #return decimal_num
    return frac0x
    

#def decimal_bin_size(precision, scale):
#    intg = precision - scale
#    intg0 = intg / DIG_PER_DEC1
#    frac0 = scale / DIG_PER_DEC1
#    intg0x = intg - intg0 * DIG_PER_DEC1
#    frac0x = scale - frac0 * DIG_PER_DEC1
#    return intg0 * decimal_digit_t + dig2bytes[intg0x] + frac0 * decimal_digit_t + dig2bytes[frac0x];
#
#f = open('/opt/mysql/data/mybinlog.000003','rb')
#f.seek(13881,0)
#a=f.read(12)
##print type(a)
#global buf
#buf = buffer(a)
#print binascii.b2a_hex(a)
#bin2decimal(0,26,13)
