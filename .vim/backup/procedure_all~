DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_ticket_left`(IN `train_info_in` varchar(50),IN `purpose_code_in` VARCHAR(255),IN `inner_code_in` Char(3),IN `range_in` tinyint,IN `sale_mode_in` Char(1),IN `table_name_in` VARCHAR(50),IN `flag_in` tinyint,IN `out_in` tinyint,IN `screen_flag_in` TINYINT,OUT `return_out` int)
BEGIN

DECLARE  l_version   VARCHAR(30);
DECLARE  l_start_time  CHAR(4); Declare  l_belong_seat_type   CHAR(1);
Declare  l_station_no CHAR(2) ; Declare l_share_train_flag Integer; 
Declare  l_coach_no CHAR(2) ; Declare    l_city_code  CHAR(4) ;
Declare  l_from_station_no CHAR(2); Declare   l_to_station_no CHAR(2)     ;
Declare  l_start_station_telecode CHAR(3)  ; Declare    l_end_station_telecode CHAR(3)   ;
Declare  l_original_station_telecode CHAR(3)     ;Declare   l_share_flag CHAR(1)    ;
Declare   l_limit_station    CHAR(2)    ;Declare  l_transform_no CHAR(2) ; 
Declare   l_share_string VARCHAR(8192);Declare  l_transform_date CHAR(8)      ;
Declare   l_seat_type_code   CHAR(1)    ;Declare   l_board_bureau_code  CHAR(1)    ;
Declare   l_board_subbureau_code  CHAR(2)    ;Declare   l_Rowcount INTEGER    ;
Declare   l_ticket_bureau   CHAR(1)    ;Declare    l_sale_subbureau CHAR(2)   ;
Declare   l_diff_day  INTEGER     ;Declare      l_error  INTEGER ;
Declare   l_max_day INTEGER    ;Declare    l_seat_feature   CHAR(1)    ;
Declare   l_today  CHAR(8)    ;Declare  l_start_datetime  DATETIME   ;
Declare   l_ticket_quantity  INTEGER;Declare   l_ahead_time INTEGER ;
Declare   l_up_quantity  INTEGER;Declare l_station_name CHAR(10)  ;
Declare   l_mid_quantity  INTEGER;Declare l_sale_bureau CHAR(1) ;
Declare   l_down_quantity  Integer ;Declare  l_location_code  CHAR(2);
Declare   l_far_from_station_no CHAR(2) ;Declare  l_my_center_code  CHAR(2) ;
Declare   l_assign_station  CHAR(3);Declare l_min_station_no CHAR(2)  ;
Declare   l_train_code CHAR(12)  ;Declare l_start_station_name CHAR(10)  ;
Declare   l_From_Range TINYINT ;Declare  l_end_station_name CHAR(10)  ;
Declare   l_To_Range INTEGER ;Declare l_train_type  CHAR(1)  ;
Declare   l_day_difference_from INTEGER  ;Declare l_start_sale_time CHAR(4)   ;
Declare   l_day_difference_to INTEGER ;Declare  l_purpose_num INTEGER ;
Declare   l_tmp_range CHAR(1)   ;Declare  l_union_flag CHAR(1)  ;
Declare   l_tmp_start_coach_no CHAR(2) ;Declare  Is_Bed  INTEGER;
Declare   l_tmp_end_coach_no CHAR(2) ;Declare l_bed_code_list VARCHAR(30)  ;
Declare   l_sql  VARCHAR(1600)  ;Declare l_left_base_name VARCHAR(40) ;
Declare   ls_from_range  CHAR(1) ;Declare ls_to_range CHAR(1)  ;
Declare   l_w_seat_type_code  CHAR(1) ;Declare  l_w_flag CHAR(1) ;
Declare   l_command_code CHAR(1)  ;Declare l_arrive_train_date CHAR(8)  ;
Declare   l_fetch_w_seat INTEGER ;Declare l_ticket_source CHAR(1) ;
Declare   l_wseat_type_code CHAR(1)   ;Declare l_d1 DATETIME ;
Declare   l_show_time  INTEGER ;Declare  l_share_to_wseat CHAR(1) ;
Declare   ls_ticket_quantity  VARCHAR(5) ;Declare ls_up_quantity VARCHAR(5) ;
Declare   ls_mid_quantity VARCHAR(5) ;Declare ls_down_quantity VARCHAR(5) ;
Declare   ls_range   CHAR(1) ;Declare l_TVM_flag  INTEGER ;
Declare   l_purpose_code_cache  VARCHAR(255) ;Declare l_arrive_date CHAR(8) ;
Declare   l_to_station_no_limit CHAR(2)  ;Declare l_train_date CHAR(8) ;
Declare   l_train_no CHAR(12)  ;Declare l_from_station CHAR(3) ;
Declare   l_to_station CHAR(3)  ;Declare  l_start_date CHAR(8) ;
Declare   l_Row  INTEGER ;Declare l_stop_date CHAR(8)  ;
Declare   l_tmp_purpose VARCHAR(255)  ;Declare  l_start_train_date CHAR(8) ;
Declare   l_schedule_coach CHAR(2)  ;Declare l_return_code INTEGER ;
Declare   l_ticket_range INTEGER  ;Declare l_delete_flag INTEGER ;
Declare   l_running_style  INTEGER ;Declare l_running_rule INTEGER ;
Declare   l_date_after  INTEGER ;Declare l_original_bureau_code CHAR(1) ;
Declare   t_train_no char(12)  ;Declare t_train_date char(8)  ;
Declare   t_station_no char(2)  ;Declare t_assign_station char(3) ;
Declare   t_far_from_station_no  char(2) ;Declare t_limit_station char(2) ;
Declare   t_coach_no  char(2) ;Declare  t_seat_type_code char(1) ;
Declare   t_purpose_code char(2)  ;Declare t_range Integer ;
Declare   t_ticket_quantity int   ;Declare t_up_quantity  int;
Declare   t_mid_quantity Int  ;Declare  t_down_quantity Int ;
Declare   t_wseat_type_code  CHAR(1) ;Declare t_seat_feature CHAR(1) ;
Declare   t_ticket_source CHAR(1)  ;Declare t_inner_code CHAR(3) ;
Declare   l_w_seat_type CHAR(1)  ;Declare  l_train_type_code CHAR(1);
Declare   l_train_period  TINYINT ;Declare  tmp_start_time CHAR(4);
Declare   tmp_start_datetime DATETIME  ;Declare l_center_notice VARCHAR(30) ;
Declare   l_station_list VARCHAR(512)  ;Declare l_purpose_cache VARCHAR(255) ;
Declare   l_purpose_list  VARCHAR(255) ;Declare l_start_bureau_code CHAR(1) ;
Declare   l_min_train_date CHAR(8)  ;Declare l_max_train_date  CHAR(8) ;
Declare   temp_board_station CHAR(10)   ;Declare temp_end_station CHAR(10) ;
Declare   temp_board_train_date CHAR(8)   ;Declare  temp_directions CHAR(10) ;
Declare   temp_telecode_list VARCHAR(255)  ;Declare temp_station_train_code VARCHAR(255);
Declare   temp_purposes VARCHAR(255)  ;Declare temp_inner_code CHAR(3) ;
Declare   temp_range  INTEGER ;Declare  temp_flag Integer ;
Declare   temp_seat_type_list  VARCHAR(255) ;Declare  temp_out INTEGER;
Declare   temp_kind  CHAR(10) ;
Declare   l_t0 INTEGER  ;Declare  l_t1 INTEGER;
Declare   l_t2 INTEGER  ;Declare l_t3 INTEGER ;
Declare   l_t4 INTEGER  ;Declare l_t5 INTEGER  ;
Declare   l_t6 INTEGER  ;Declare  l_t7 INTEGER;
Declare   l_t8 INTEGER  ;Declare  l_t9 INTEGER;
Declare   l_d2 datetime  ;Declare  l_d3 datetime;
Declare   l_d4 datetime  ;Declare l_d5 datetime ;
Declare   l_d6 datetime  ;
Declare   l_seat_type_list varchar(40)  ;Declare l_relation_code  CHAR(3);
Declare   l_start_name varchar(10) ;Declare l_auto_share  CHAR(1);
Declare   l_end_name varchar(10)  ;Declare l_cancel_purpose VARCHAR(255) ;
Declare   l_local_bureau  char(1) ;Declare l_purpose_init char(2)  ;
Declare   l_train_class_code char(1)   ;Declare  C_from_period tinyint ;
Declare   C_control_min_date char(8)  ;Declare C_start_date char(8) ;
Declare   C_train_period TINYINT  ;Declare l_now_datetime VARCHAR(30) ;
Declare record_not_found Integer Default 0;
Declare lab1_s Integer;
Declare lab_lable_s Integer;

declare ccount1 int default 0;
declare ccount2 int default 0;
declare tmp_train_group_count int ;-- 李杨优化用，统计tmp_train_group数量


Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;
      
Set Transaction Isolation Level Read uncommitted;

Set l_version = 'Ver.20150114.11:24';

-- 加一个判断传入的临时表是否为空如果为空则直接返回
empty_tmp_table_lab:loop
 begin
  declare train_info_in_count int;
  set @train_info_in_count=null;
  Set @l_sql = concat('select count(*) into @train_info_in_count from ',train_info_in);
  prepare stmt_1 from @l_sql;
  EXECUTE stmt_1;
  set train_info_in_count=@train_info_in_count;
  set @train_info_in_count=null;
  drop PREPARE stmt_1;
   if out_in=9 then
   select 'DS60_ticket_left.0000====come in tmp table count=',train_info_in_count;
   end if;
  if train_info_in_count=0 then
   leave empty_tmp_table_lab;
  end if;
 end; 

If train_info_in Is Null Then
   Set train_info_in = '';
End If;
If purpose_code_in Is Null Then
   Set purpose_code_in = '';
End If;
If inner_code_in Is Null Then
   Set inner_code_in = '';
End If;
If range_in Is Null Then
   Set range_in = 4;
End If;
If sale_mode_in Is Null Then
   Set sale_mode_in = 'A';
End If;
If table_name_in Is Null Then
   Set table_name_in = '';
End If;
If flag_in Is Null Then
   Set flag_in = 0;
End If;
If out_in Is Null Then
   Set out_in = 0;
End If;
If @screen_flag Is Null Then
   Set @screen_flag = 0;
End If;

/*计时开始*/
Set l_d1 = NOW(),l_seat_type_list = '0123456789ABCDEFGHIJKLMNOPQRS';

/*增加预售的控制.20100122.zzq*/
-- drop temporary table if exists tmp_query_train_info;
CREATE Temporary TABLE if not exists  tmp_query_train_info
 (train_date   CHAR(8) NOT NULL,
  train_no   CHAR(12) NOT NULL,
  train_code   CHAR(8) NOT NULL,
  from_station  CHAR(10) NOT NULL,
  to_station   CHAR(10) NOT NULL,
  flag     INTEGER NOT NULL
  );
delete from  tmp_query_train_info;
-- drop temporary table if exists tmp_query_info;
CREATE Temporary TABLE if not exists tmp_query_info
 ( train_no   CHAR(12) NOT NULL,
  train_code   CHAR(8) NOT NULL
  );
    delete from tmp_query_info;

/*增加预售的控制.20100122.zzq*/
 -- drop Temporary table  If  Exists DS60_ticket_left_tmp_train_para_define;
CREATE Temporary TABLE if not exists   DS60_ticket_left_tmp_train_para_define
 (
  inner_code char(3)   NOT NULL,
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_code char(8)   NOT NULL,
  start_station_name char(10)   NOT NULL,
  end_station_name char(10)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  train_type char(1)   NOT NULL,
  seat_type_code char(1)   NOT NULL,
  ticket_type tinyint   NOT NULL,
  purpose_code char(2)   NOT NULL,
  table_range tinyint   NOT NULL,
  control_day tinyint   NOT NULL,
  control_train_day char(8)   NOT NULL,
  ahead_time int   NOT NULL,
  location_code char(2)   NOT NULL,
  office_no char(7)   NOT NULL,
  window_no tinyint   NOT NULL,
  operater_no char(4)   NOT NULL,
  operater_time datetime   NOT NULL,
  flag1 char(10)   NOT NULL,
  flag2 char(10)   NOT NULL,
  group_code         char(20) NOT NULL,
  level_flag         char(1)  NOT NULL,
  from_period        tinyint  NOT NULL,
  control_min_date   char(8)  NOT NULL,
  train_class        char(1)  NOT NULL,
  demand_id          char(18) NOT NULL,
  flag3              char(30) NOT NULL,
  flag4              char(30) NOT NULL,
  flag5              char(30) NOT NULL,
  flag6              char(30) NOT NULL,
  flag7              char(30) NOT NULL,
  flag8              char(30) NOT NULL

 );
    delete from DS60_ticket_left_tmp_train_para_define;

-- drop temporary table if exists tmp_union_station;
create Temporary table if not exists  tmp_union_station
(station_telecode char(3) NOT NULL);
delete from tmp_union_station;

create Temporary table If Not Exists tmp_seat_info 
( seat_type_code char(1) NOT NULL,
 purpose_code CHAR(2) NOT NULL,
 table_range   INTEGER NOT Null 
);
Truncate Table tmp_seat_info;

CREATE Temporary TABLE If Not Exists tmp_left_center
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) );
Truncate Table tmp_left_center;

CREATE Temporary TABLE If Not Exists tmp_left_base_center
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) );
Truncate Table tmp_left_base_center;

CREATE Temporary TABLE If Not Exists tmp_left_base
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) 
,index tmp_left_base_idx(train_date,train_no)
);
Truncate Table tmp_left_base;

/*CREATE Temporary TABLE If Not Exists tmp_left_base2
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) );
Truncate Table tmp_left_base2;*/

-- drop temporary table if exists tmp_stop_time;
CREATE Temporary TABLE if not exists tmp_stop_time
(
start_date char(8)   NOT NULL,
stop_date char(8)   NOT NULL,
train_no char(12)   NOT NULL,
station_name char(10)   NOT NULL,
station_telecode char(3)   NOT NULL,
station_no varchar(2)   NOT NULL,
station_train_code char(8)   NOT NULL,
bureau_code char(1)   NOT NULL,
subbureau_code char(2)   NOT NULL,
day_difference INTEGER   NOT NULL,
arrive_time char(4)   NOT NULL,
start_time char(4)   NOT Null
);
delete from  tmp_stop_time;

-- drop temporary table if exists tmp_train_dir;
CREATE Temporary TABLE if not exists tmp_train_dir
(
 start_date char(8)   NOT NULL,
 stop_date char(8)   NOT NULL,
 train_code char(8)   NOT NULL,
 subbureau_code char(2)   NOT NULL,
 double_id char(1)   NOT NULL,
 schema_id char(1)   NOT NULL,
 running_style INTEGER   NOT NULL,
 running_rule int   NOT NULL,
 start_station_name char(10)   NOT NULL,
 end_station_name char(10)   NOT NULL,
 train_type_code char(1)   NOT NULL,
 train_class_code char(1)   NOT NULL,
 seat_types int   NOT NULL,
 train_group INTEGER   NOT NULL,
 belong_line1 INTEGER   NOT NULL,
 price_style1 char(1)   NOT NULL,
 belong_line2 INTEGER   NOT NULL,
 price_style2 char(1)   NOT NULL,
 belong_line3 INTEGER   NOT NULL,
 price_style3 char(1)   NOT NULL,
 belong_line4 INTEGER   NOT NULL,
 price_style4 char(1)   NOT NULL,
 belong_line5 INTEGER   NOT NULL,
 price_style5 char(1)   NOT NULL,
 service_type char(1)   NOT NULL,
 price_style char(1)   NOT NULL,
 origin char(2)   NOT NULL
);
delete from tmp_train_dir;

CREATE Temporary TABLE If Not Exists tmp_center_notice
(
 inner_code char(3)   NOT NULL,
 start_date char(8)   NOT NULL,
 stop_date char(8)   NOT NULL,
 train_no char(12)   NOT NULL,
 running_style INTEGER   NOT NULL,
 running_rule int   NOT NULL,
 station_no char(2)   NOT NULL,
 station_telecode char(3)   NOT NULL,
 station_name char(10)   NOT NULL,
 board_train_code char(8)   NOT NULL,
 command_no char(7)   NOT NULL,
 command_code char(1)   NOT NULL,
 inform_type char(1)   NOT NULL,
 day_difference INTEGER   NOT NULL,
 arrive_time char(4)   NOT NULL,
 start_time char(4)   NOT NULL,
 time_interval INTEGER   NOT NULL,
 command_id char(16)   NOT NULL,
 operate_time datetime   NOT NULL,
 operater_no char(4)   NOT NULL,
 operater_name char(8)   NOT NULL,
 command_enable INTEGER   NOT NULL
);
Truncate Table tmp_center_notice;

-- drop temporary table if exists tmp_center_notice1;
CREATE Temporary TABLE if not exists  tmp_center_notice1
(
 inner_code char(3)   NOT NULL,
 start_date char(8)   NOT NULL,
 stop_date char(8)   NOT NULL,
 train_no char(12)   NOT NULL,
 running_style INTEGER   NOT NULL,
 running_rule int   NOT NULL,
 station_no char(2)   NOT NULL,
 station_telecode char(3)   NOT NULL,
 station_name char(10)   NOT NULL,
 board_train_code char(8)   NOT NULL,
 command_no char(7)   NOT NULL,
 command_code char(1)   NOT NULL,
 inform_type char(1)   NOT NULL,
 day_difference INTEGER   NOT NULL,
 arrive_time char(4)   NOT NULL,
 start_time char(4)   NOT NULL,
 time_interval INTEGER   NOT NULL,
 command_id char(16)   NOT NULL,
 operate_time datetime   NOT NULL,
 operater_no char(4)   NOT NULL,
 operater_name char(8)   NOT NULL,
 command_enable INTEGER   NOT NULL
);
delete from  tmp_center_notice1;

-- drop temporary table if exists tmp_cancel_limit_define;
CREATE Temporary TABLE if not exists  tmp_cancel_limit_define
(
inner_code char(3)   NOT NULL,
start_date char(8)   NOT NULL,
stop_date char(8)   NOT NULL,
train_code char(8)   NOT NULL,
start_station_name char(10)   NOT NULL,
end_station_name char(10)   NOT NULL,
station_telecode char(3)   NOT NULL,
cancel_office_no char(7)   NOT NULL,
cancel_window_no tinyint   NOT NULL,
ahead_time int   NOT Null,  
location_code char(2)   NOT NULL,
office_no char(7)   NOT NULL,
window_no tinyint   NOT NULL,
operater_no char(4)   NOT NULL,
operater_time datetime   NOT NULL,
flag1 char(10)   NOT NULL,
flag2 char(10)   NOT NULL,
running_style tinyint DEFAULT  '1' NOT NULL,
running_rule int DEFAULT  '1' NOT NULL,
seat_type_code char(1) DEFAULT  '*' NOT NULL,
purpose_code char(2) DEFAULT  '*' NOT NULL,
train_type char(1) DEFAULT  '*' NOT NULL,
sale_mode char(1) DEFAULT  '*' NOT NULL,
far_from_station char(3) DEFAULT  '*' NOT NULL,
level_flag int DEFAULT  0 NOT NULL
);
delete from tmp_cancel_limit_define;

CREATE Temporary TABLE If Not Exists tmp_train_group
(
 group_code   char(20)
 );
delete from tmp_train_group;

/*建立临时表时间*/
Set @d2 = now(),l_today = CURDATE()+0;
if out_in=9 then
select '22===',purpose_code_in;
end if;

/*-----------------------------------------增加用途自动关联的查询处理.20130717.zzq-----------------------------------------------------------*/
/*获取取票用途的关联代码，指定车站的优先，每个用途只能在一个组中存在，不能交叉出现在两组中.20071226.zzq*/
/*charindex(purpose_code,purpose_code_in) % 2 = 1    指定用途*/
/*ltrim(rtrim(obligate1)) = '1'   增加主用途的处理,为了往返票和联程票增加,一个用途可以出现在不同的组中,但是不能同时是主用途.20090223*/
Select  relation_code Into l_relation_code FROM basic.DG50_purpose_relate_define 
WHERE inner_code = 'AD' AND start_date <= l_today AND stop_date  >= l_today AND station_telecode = '***' 
AND instr(purpose_code_in,purpose_code) % 2 = 1 AND trim(obligate1) = '1' 
ORDER BY relation_code Limit 1;

set l_error =  @@error_count,l_rowcount = found_rows();

#select l_relation_code;

set record_not_found = 0;
if out_in=9 then
 select '23===',l_today,l_relation_code;
end if;
begin -- 处理游标代码块
/*本局定义需要窗口赋相应的用途权限,全路定义不需要赋相应的权限.20130717.zzq*/
 DECLARE purpose_cursor CURSOR FOR
  SELECT  purpose_code FROM basic.DG50_purpose_relate_define
   WHERE inner_code = 'AD' 
     AND start_date <= l_today
     AND stop_date  >= l_today
     AND relation_code = l_relation_code
     AND trim(obligate1) >= '1'
    
     ORDER BY obligate1;
 OPEN purpose_cursor;

 loop_purpose: 
 WHILE 1 = 1 do
  FETCH purpose_cursor INTO t_purpose_code;
  if out_in=9 then
  select '24_1===',t_purpose_code;
  end if;
  if record_not_found = 1 THEN
    leave loop_purpose;
   end IF;

  IF instr(purpose_code_in,t_purpose_code) % 2 = 0 THEN 
    set purpose_code_in = concat(purpose_code_in,t_purpose_code);
    
  end if;
  if out_in=9 then
  select '24_2===',t_purpose_code,purpose_code_in;
  end if;
 End While loop_purpose;

 CLOSE purpose_cursor;
end; -- 结束游标purpose_cursor代码块
if out_in=9 then
select '20===',purpose_code_in;
end if;

/*-----------------------------------------增加用途自动关联的查询处理.20130717.zzq----------------------------------------------------------------*/

/*用途转换.20120528.zzq*/
Set l_tmp_purpose = purpose_code_in,l_purpose_list = '';
loop_purpose_list:
WHILE 1 = 1 do
 Set t_purpose_code = LEFT(ltrim(l_tmp_purpose),2);
 Set l_tmp_purpose  = INSERT(ltrim(l_tmp_purpose),1,2,'  ');

 IF t_purpose_code = '' OR t_purpose_code IS NULL Then
     leave loop_purpose_list;
  End If;
 Set l_purpose_list = concat(rtrim(l_purpose_list),t_purpose_code, ',');

End While loop_purpose_list;
/*20120528.zzq*/
if out_in=9 then
select '21_1==',l_purpose_list,purpose_code_in,l_purpose_list;
end if;
/*update for 席位自动预分.20100814.zzq.zlj*/
IF instr(l_purpose_list,'00') > 0 AND instr(l_purpose_list,'02') = 0 Then
   Set purpose_code_in = concat(rtrim(purpose_code_in),'02'),l_purpose_list = concat(rtrim(l_purpose_list),'02,');
End If;
if out_in=9 then
select '21_1_1==',l_purpose_list,purpose_code_in,l_purpose_list;
end if;
/*update for 残疾人用途.20120426.zzq.sxh*/
IF instr(l_purpose_list,'1C') > 0 AND instr(l_purpose_list,'2C') = 0 Then
   set purpose_code_in = concat(rtrim(purpose_code_in),'2C'),l_purpose_list = concat(rtrim(l_purpose_list),'2C,');
End If;
 if out_in=9 then
 select '21_2==',l_purpose_list,purpose_code_in,l_purpose_list;
 end if;

Set l_to_Range = range_in,l_bed_code_list = '3456',l_share_train_flag = 0,l_purpose_code_cache = purpose_code_in;

IF out_in IN (3,9) Then 
   -- Set out_in = 1,l_show_time = 1;-- 李杨20160120修改，测试完毕记得修改回来
   select 'commenting out one row code ,if modify finish please restore 20160120 by liyang';
ELSE 
   IF out_in = 4 Then
      Set out_in = 0 ,l_show_time = 1;
   ELSE 
      Set l_show_time = 0;
   End If;
End If;

SELECT my_center_code Into l_my_center_code FROM center.DG30_my_center;

IF @show_time = 1 then
 SELECT '------------------------------------------------DBG.001.查询所有用途-----------------------------------------------------------------';
 SELECT char_length(trim(purpose_code_in))/2 AS purpose_num,Left(rtrim(purpose_code_in),50) AS purpose_code,Left(rtrim(l_purpose_list),50) AS purpose_list;
END if;

/*获取车次信息*/
begin
 -- declare st_start_time datetime;
 -- declare st_end_time datetime;
 -- set st_start_time=now();
 -- select 'st_start_time=',st_start_time;
 Set @l_sql = concat('INSERT INTO tmp_query_train_info SELECT *,0 FROM ',train_info_in);

 #select  @l_sql;

 prepare stmt_1 from @l_sql;

 EXECUTE stmt_1;

 set l_error =  @@error_count,l_rowcount = row_count();

 drop PREPARE stmt_1;
 
 -- set st_end_time=now();
 -- select 'stmt exectue time:',TIMESTAMPDIFF(second,st_start_time,st_end_time);
end ;
set lab1_s = 1;
lab1:loop
if lab1_s = 0 THEN
  leave lab1;
end if;

IF l_rowcount = 0 OR l_error !=0 then 
 -- select 'leave lab1;';
 LEAVE lab1;
end if;
set temp_out = l_rowcount;
  if out_in=9 then 
  select '25===select * from tmp_query_train_info';
-- select * from tmp_query_train_info;
  end if;

/*************************************************begin.批量缓存相关的查询判断数据20100801.zzq*********************************************/
/*发站须一致或同城*/
Select train_date,from_station,to_station Into l_train_date,l_from_station,l_to_station 
FROM tmp_query_train_info Limit 1;
set l_error =  @@error_count,l_rowcount = row_count();
IF l_rowcount = 0 OR l_error !=0 Then
 select '26===leave lab1;';
   LEAVE lab1;
End If;

/*获取车次列表的最小日期和最大日期.20130329.zzq*/
SELECT min(train_date),max(train_date) Into l_min_train_date,l_max_train_date FROM tmp_query_train_info;

/*获取查询车站的信息*/
Select bureau_code,subbureau_code,city_code 
Into l_sale_bureau,l_sale_subbureau,l_city_code 
FROM basic.station_dictionary 
WHERE station_telecode = inner_code_in;

set l_error =  @@error_count,l_rowcount = row_count();

IF l_rowcount = 0 OR l_error !=0 Then
   LEAVE lab1;
ELSE 
 /*优化.20090414.zzq*/
  /*售票站的联合站*/
  INSERT INTO tmp_union_station  
   SELECT station_telecode FROM basic.DG50_same_city_dictionary 
    WHERE start_date <= l_train_date 
      AND stop_date >= l_train_date
      AND city_code =  l_city_code
      AND station_telecode <> inner_code_in
      AND union_flag = '1';
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_error !=0 Then
       LEAVE lab1;
    End If;
End If;

/*计算乘车局*/
SELECT bureau_code Into l_board_bureau_code
 FROM basic.station_dictionary
 WHERE station_telecode = l_from_station
 AND start_date  <= l_train_date
 AND stop_date   >= l_train_date;
set l_error =  @@error_count,l_rowcount = row_count();
IF l_rowcount = 0 OR l_error !=0 Then
   LEAVE lab1;
end if; 

/*记录日志使用.20110304.zzq*/
Set temp_board_station  = l_from_station           
 , temp_end_station   = l_to_station
 , temp_board_train_date  = l_train_date
 , temp_directions    = '*'  
 , temp_telecode_list   = 'DS60_ticket_left'
 , temp_station_train_code = '%'
 , temp_purposes    = purpose_code_in  
 , temp_inner_code    = inner_code_in 
 , temp_range     = range_in   
 , temp_flag      = 0  
 , temp_seat_type_list  = '%'
 , temp_out      = temp_out
 , temp_kind      = concat(sale_mode_in , ':' , trim(CONVERT(temp_out,CHAR)) , ' Rows');

/*************************************************end.批量缓存相关的查询判断数据20100801.zzq*********************************************/

/*下载余票信息.20100822.zzq*/
INSERT INTO tmp_query_info SELECT DISTINCT train_no,train_code FROM tmp_query_train_info;
 if out_in=9 then
  select '31====select * from tmp_query_info';
  -- select * from tmp_query_info;
 end if;
/*缓存停靠站表*/
INSERT INTO tmp_stop_time
 SELECT DISTINCT a.start_date ,a.stop_date ,a.train_no ,a.station_name ,a.station_telecode ,a.station_no,
 a.station_train_code ,a.bureau_code ,a.subbureau_code ,a.day_difference ,a.arrive_time ,a.start_time 
 FROM basic.stop_time a,tmp_query_info b 
 WHERE a.train_no = b.train_no;

 if out_in=9 then
   select '31_1====select * from tmp_stop_time';
--   select * from tmp_stop_time;
--  select '31_2===select * from tmp_query_info';
--  select * from tmp_query_info;
 end if;

INSERT INTO tmp_train_dir 
 SELECT DISTINCT a.* FROM basic.train_dir a,tmp_query_info b
 WHERE a.train_code = b.train_code;
 
 if out_in=9 then
   select '31_1_1====select * from DJ50_train_sale_define',l_board_bureau_code,l_today,sale_mode_in;
--   select * from tmp_stop_time;
 -- show create table DS60_ticket_left_tmp_train_para_define;
 
--  select '31_2===select * from tmp_query_info';
--  select * from tmp_query_info;
 end if;
/*查询车次预售期,判断车次的预售期*/
INSERT INTO DS60_ticket_left_tmp_train_para_define 
 SELECT * FROM basic.DJ50_train_sale_define 
   WHERE inner_code   = l_board_bureau_code 
   AND start_date  <= l_today
   AND stop_date   >= l_today
   AND ticket_type NOT IN (3,12) 
   AND flag1 IN ('*',sale_mode_in)
   AND flag2 IN ('*','');

 if out_in=9 then
  select '31_2====select * from DS60_ticket_left_tmp_train_para_define';
--  select * from DS60_ticket_left_tmp_train_para_define;
 end if;

/*下载始发管理的车次售票时间定义.20121025.zzq*/
INSERT INTO DS60_ticket_left_tmp_train_para_define 
 SELECT * FROM basic.DJ50_train_sale_define 
   WHERE start_date  <= l_today
   AND stop_date   >= l_today
   AND train_code  IN (SELECT train_code FROM tmp_query_info)
   AND station_telecode = '*'
   AND flag1 IN ('*',sale_mode_in)
   AND flag2 = '1';

 if out_in=9 then
 select '31_3====select * from DS60_ticket_left_tmp_train_para_define';
  select * from DS60_ticket_left_tmp_train_para_define;
 end if;
/*为上海大卖场大屏余票显示增加的特殊处理,提前20分钟显示余票.20110111.zzq*/
UPDATE DS60_ticket_left_tmp_train_para_define SET ahead_time = 0
WHERE inner_code = 'H';

#select * from tmp_query_info;
#select count(*) from tmp_stop_time;
#select count(*) from tmp_train_dir;
#select * from DS60_ticket_left_tmp_train_para_define;

/*获取车次的调令*/
INSERT INTO tmp_center_notice1 SELECT a.* FROM basic.CJ30_center_notice a,tmp_query_info b 
 WHERE a.train_no = b.train_no
 AND a.command_code IN ('S','U','Q','R','V','W','0','1','M')        
 AND a.command_enable = 0 
 AND a.stop_date  >= date_add(now(),interval -2 day)
 AND ((l_to_station != '%') OR (l_to_station = '%' AND a.station_telecode IN (l_from_station,'*')));

/*-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_center_notice1' and INDEX_NAME='notice_idx';
-- select @cnt;
-- if @cnt=0 THEN
select count(*),'tmp_center_notice1' from tmp_center_notice1;
  CREATE INDEX notice_idx ON tmp_center_notice1(train_no,station_telecode);
-- end if;*/

#select purpose_code_in;

/*增加取消以远站的缓存.20091121.zzq*/
/*优化口径改成乘车局或站.20150114.zzq*/
/*改成乘车日期段.20130329.zzq*/
-- select '31_1====';
INSERT INTO tmp_cancel_limit_define 
 SELECT a.* FROM basic.DJ50_cancel_limit_define a , tmp_query_train_info b
 WHERE a.inner_code IN (l_from_station,l_board_bureau_code)
   AND a.start_date <= l_max_train_date    
   AND a.stop_date  >= l_min_train_date
   AND (a.train_code = b.train_code OR a.train_code = '*' OR b.train_code LIKE a.train_code)  
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (a.purpose_code   = '*' OR instr( purpose_code_in,a.purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND a.cancel_office_no   = '%'
   AND a.cancel_window_no   = 0;
-- select '31_2====';
INSERT INTO tmp_cancel_limit_define
 SELECT a.* FROM basic.DJ50_cancel_limit_define a  , tmp_query_train_info b
 WHERE inner_code IN (SELECT station_telecode FROM tmp_stop_time where station_telecode<>l_from_station) 
   AND a.start_date <= l_max_train_date    
   AND a.stop_date  >= l_min_train_date
   AND (a.train_code = b.train_code OR a.train_code = '*' OR b.train_code LIKE a.train_code)  
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (a.purpose_code   = '*' OR instr( purpose_code_in,a.purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND a.cancel_office_no   = '%'
   AND a.cancel_window_no   = 0;
-- select '31_3====';
/*INSERT INTO tmp_cancel_limit_define 
 SELECT * FROM basic.DJ50_cancel_limit_define a
 WHERE inner_code IN (l_from_station,l_board_bureau_code)
   AND start_date <= l_max_train_date    
   AND stop_date  >= l_min_train_date
   AND (train_code IN (SELECT train_code FROM tmp_query_train_info) OR train_code = '*' OR EXISTS(SELECT 1 FROM tmp_query_train_info WHERE train_code LIKE a.train_code))  
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (purpose_code   = '*' OR instr( purpose_code_in,purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND cancel_office_no   = '%'
   AND cancel_window_no   = 0
 UNION                              #改成UNION,相同的自动排除掉.20130526.zzq 
 SELECT * FROM basic.DJ50_cancel_limit_define a
 WHERE inner_code IN (SELECT station_telecode FROM tmp_stop_time) 
   AND start_date <= l_max_train_date 
   AND stop_date  >= l_min_train_date
   AND (train_code IN (SELECT train_code FROM tmp_query_train_info) OR train_code = '*' OR EXISTS(SELECT 1 FROM tmp_query_train_info WHERE train_code LIKE a.train_code)) 
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (purpose_code   = '*' OR instr( purpose_code_in,purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND cancel_office_no   = '%'
   AND cancel_window_no   = 0;
*/


/*-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_cancel_limit_define' and INDEX_NAME='cancel_limit_idx';
-- if @cnt=0 THEN
select count(*),'tmp_cancel_limit_define' from tmp_cancel_limit_define;
  CREATE INDEX cancel_limit_idx ON tmp_cancel_limit_define (train_code,station_telecode);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_train_dir' and INDEX_NAME='train_dir_idx';
-- if @cnt=0 THEN
select count(*),'tmp_train_dir' from tmp_train_dir;
  CREATE INDEX train_dir_idx ON tmp_train_dir (train_code);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_stop_time' and INDEX_NAME='stop_time_idx';
-- if @cnt=0 THEN
select count(*),'tmp_stop_time' from tmp_stop_time;
  CREATE INDEX stop_time_idx ON tmp_stop_time (train_no,station_telecode);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_union_station' and INDEX_NAME='union_idx';
-- if @cnt=0 THEN
select count(*),'tmp_union_station' from tmp_union_station;
  CREATE INDEX union_idx ON tmp_union_station (station_telecode);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='DS60_ticket_left_tmp_train_para_define' and INDEX_NAME='define_idx';
-- if @cnt=0 THEN
select count(*),'DS60_ticket_left_tmp_train_para_define' from DS60_ticket_left_tmp_train_para_define;
  CREATE INDEX define_idx ON DS60_ticket_left_tmp_train_para_define (inner_code,station_telecode,purpose_code);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_query_train_info' and INDEX_NAME='query_idx';
-- if @cnt=0 THEN
select count(*),'tmp_query_train_info' from tmp_query_train_info;
  CREATE INDEX query_idx ON tmp_query_train_info (train_date,train_no,train_code,from_station,to_station);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_query_info' and INDEX_NAME='query_idx';
-- if @cnt=0 THEN
select count(*),'tmp_query_info' from tmp_query_info;
  CREATE INDEX query_idx ON tmp_query_info (train_no,train_code);
-- end if;*/



#select * from tmp_center_notice1;
#select * from tmp_cancel_limit_define;

/*建缓存时间*/
set l_t2 = 0
 ,  l_d2 = now()
 ,  l_t3 = 0
 ,  l_t4 = 0
 ,  l_t5 = 0
 ,  l_t6 = 0
 ,  l_t7 = 0
 ,  l_t8 = 0
 ,  l_t9 = 0;

/*************************************************begin.逐趟车计算余票信息*****************************************************************/
if out_in=9 then
 select '101====select * from tmp_query_train_info';
  select * from tmp_query_train_info;
end if;
lab_left:
WHILE 1 = 1 do
 if out_in=9 then
  select '101_1 is here';
  end if;
 IF NOT EXISTS(SELECT 1 FROM tmp_query_train_info WHERE flag = 0 ) Then
    --  if out_in=9 THEN
   --   select '101===is here';
   -- end if;
       LEAVE lab_left;
  End If;

 set l_d3 = now(),l_cancel_purpose = '';

 /*获取车次基本信息*/
 SELECT train_date,train_no,from_station,to_station,train_code
 into l_train_date,l_train_no,l_from_station,l_to_station,l_train_code
  FROM tmp_query_train_info
  WHERE flag = 0 limit 1;

#select l_train_date,l_train_no,l_from_station,l_to_station,l_train_code;

 UPDATE tmp_query_train_info SET flag = 1
  WHERE train_date  = l_train_date 
    AND train_no  = l_train_no
    AND train_code = l_train_code
    AND from_station = l_from_station
    AND to_station  = l_to_station
    AND flag = 0;

 /*计算最小站序*/
 SELECT min(station_no) 
 into l_min_station_no
  FROM tmp_stop_time
  WHERE train_no = l_train_no;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 OR l_error !=0 Then
    if out_in=9 THEN
    select '101_2===is here';
    end if;
   Iterate lab_left;
 end if; 

 /*获取乘车站及乘车站信息*/
 IF l_from_station != '%' THEN 
  SELECT start_time,day_difference,subbureau_code,station_no
   into l_start_time,l_day_difference_from,l_board_subbureau_code,l_from_station_no
   FROM tmp_stop_time 
   WHERE train_no = l_train_no
    AND station_telecode = l_from_station LIMIT 1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 OR l_error !=0 Then
      if out_in=9 THEN
        select '101_3===is here';
      end if;
     Iterate lab_left;
   end if; 

#select '1',l_start_time,l_day_difference_from,l_board_subbureau_code,l_from_station_no;

 ELSE #没有输入发站时按照售票站(车站必须是车次的停靠站)查询站车次等信息
  SELECT station_telecode,station_no,start_time,day_difference,subbureau_code
   into l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code
   FROM  tmp_stop_time
   WHERE train_no = l_train_no
    AND station_telecode = inner_code_in ;
  set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error !=0 Then
      if out_in=9 THEN
       select '101_4===is here';
      end if;
     Iterate lab_left;
   end if; 

#select '2',l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code;

  IF l_rowcount = 0 then #按照售票站同城车站(车站必须是车次的停靠站)查询站车次等信息,否则按照始发站查询
   SELECT station_telecode,station_no,start_time,day_difference,subbureau_code
    into l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code
    FROM  tmp_stop_time
    WHERE train_no = l_train_no
     AND station_telecode IN (SELECT station_telecode FROM tmp_union_station)
    ORDER BY station_no DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error !=0 Then
      if out_in=9 THEN
       select '101_5===is here';
      end if;
     Iterate lab_left;
   end if; 

#select '3',l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code;

   IF l_rowcount = 0 THEN
    SELECT station_telecode,station_no,start_time,day_difference,subbureau_code
     into l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code
     FROM  tmp_stop_time
     WHERE train_no = l_train_no
       AND station_no = l_min_station_no LIMIT 1;
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount = 0 OR l_error !=0 Then
       if out_in=9 THEN
        select '101_6===is here';
       end if;
      Iterate lab_left;
    end if; 

#select '4',l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code;

   END if;
  END if;
 End if;

#----------------------------------------------------------------------------modify by hzp 20140930 begin-------------------------------
#delete from tmp_train_group;
-- select 'inser into tmp_train_group';
-- set ccount1=ccount1+1;
-- select ccount1;
insert into tmp_train_group
select group_code
  from basic.DJ52_train_group_define
 where inner_code = l_board_bureau_code 
   and module_code='J' 
   and type_code='T' 
   and start_station_telecode = l_from_station;
     

#insert into tmp_train_group values ('*');

#select * from tmp_train_group;

#----------------------------------------------------------------------------modify by hzp 20140930 end-------------------------------

 set l_start_datetime = str_to_date( concat(l_train_date,l_start_time) ,'%Y%m%d%H%i');

 /*过滤掉过点的车次*/
 IF out_in != 1 THEN #大屏需要显示所有的余票
  IF l_train_date <= l_today THEN
   /*当天开车后10分钟的车次不再显示*/
   IF timediff( l_start_datetime , NOW()) <= -10 THEN
    -- if out_in=9 THEN
      --  select '101_7===is here';
      -- end if;
     Iterate lab_left;
   end if;
  END if;
 END if;
 /*计算始发日期.20110111.zzq*/
 set l_start_train_date = date_format(date_add(l_train_date, INTERVAL 0 - l_day_difference_from DAY),'%Y%m%d');
if out_in=9 THEN
 select '110=====select * from tmp_stop_time',l_to_station;
 select * from  tmp_stop_time;
end if; 
 /*获取到站信息*/
 IF l_to_station != '%' THEN
  SELECT day_difference,station_no
   into l_day_difference_to,l_to_station_no
   FROM  tmp_stop_time
   WHERE train_no = l_train_no
    AND station_telecode = l_to_station
   ORDER BY station_no  LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 OR l_error !=0 Then
     -- if out_in=9 THEN
      --  select '101_8===is here';
      -- end if;
     Iterate lab_left;
   end if; 
 END if;

 /*获取车次目录信息*/
 SELECT start_station_name,end_station_name,train_type_code,start_date 
  #增加开行规律的处理.20110218.zzq
  ,running_style,running_rule,train_class_code
  into l_start_station_name,l_end_station_name,l_train_type,l_start_date,l_running_style,l_running_rule,l_train_class_code
  FROM tmp_train_dir 
   WHERE train_code  = l_train_code
     AND subbureau_code = substring(l_train_no,1,2)
     AND double_id  = substring(l_train_no,11,1)
     AND schema_id  = substring(l_train_no,12,1);
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_rowcount = 0 OR l_error !=0 Then
    -- if out_in=9 THEN
      --  select '101_9===is here';
      --  select * from tmp_train_dir;
      -- end if;
    Iterate lab_left;
  end if; 

 /*增加开行规律的判断.20110218.zzq*/
 IF l_running_style != 1 THEN
  SET l_date_after = datediff(l_train_date,l_start_date) - l_day_difference_from ;
  SET l_date_after = l_date_after % l_running_style ;
  IF l_running_rule & power(2,l_date_after) = 0 THEN
   -- if out_in=9 THEN
     --   select '101_10===is here';
      -- end if;
    Iterate lab_left;
  end if; 
 END if;

 /*获取始发车次及始发终到站*/
 set l_train_code = l_train_no;
 if out_in=9 then
  select 'call arith.CS50_Get_Train_Parameter',l_train_code,l_start_station_telecode,l_end_station_telecode;
 end if;
 CALL arith.CS50_Get_Train_Parameter(l_train_code, l_start_station_telecode, l_end_station_telecode,NULL) ;
 if out_in=9 then
    select 'end call arith.CS50_Get_Train_Parameter';
 end if;

#select l_train_code,l_start_station_telecode,l_end_station_telecode;

 /*计算可查询票额的范围*/
 IF l_sale_bureau != l_board_bureau_code then 
   set l_From_Range = 4;
 ELSEIF l_sale_subbureau != l_board_subbureau_code THEN 
     set l_From_Range = 3;
 ELSEIF inner_code_in != l_from_station THEN
  if out_in=9 then
   select 'call arith.CS50_Same_City',l_train_date,inner_code_in,l_from_station,'1',return_out;
  end if;
  CALL arith.CS50_Same_City(l_train_date,inner_code_in,l_from_station,'1',return_out); #判断是否同城通售:1-同城通售,0-不同城通售
  if out_in=9 then
   select 'end call arith.CS50_Same_City',l_train_date,inner_code_in,l_from_station,'1',return_out;
  end if;
  IF return_out = 1 THEN 
    set l_From_Range = 1;              #可同城互售,联合站级,即同城通售
  ELSE 
    set l_From_Range = 2;
  end if;
 ELSE 
  set l_From_Range = 0;
 end if;

#select return_out,l_From_Range;

 /*获取指定车次在指定车站的管理局码(目前全部为始发管理).20121025.zzq*/
 SELECT inner_code into l_start_bureau_code
  FROM basic.DG50_train_admin_auth
   WHERE train_code      = l_train_code
     AND start_station_telecode = l_start_station_telecode
     AND end_station_telecode   = l_end_station_telecode
     AND station_telecode    = l_from_station;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 then 
   set l_start_bureau_code = l_board_bureau_code;
  end if;
 
 #增加铁道部级查询主机的功能.20140111.zzq
 IF l_my_center_code = 'AD' THEN
  #异地票不允许查余票
  IF l_sale_bureau != l_board_bureau_code THEN
    -- if out_in=9 THEN
      --  select '101_11===is here';
      -- end if;
    Iterate lab_left;
  end if;
 END if;

#select l_start_bureau_code,l_rowcount,l_board_bureau_code,l_sale_bureau;

 IF l_show_time = 1 THEN
  select  '------------------------------------------------DBG.010.查询参数-----------------------------------------------------------------';
  SELECT l_train_date AS train_date,l_train_no AS train_no,l_from_station AS from_station,l_to_station AS to_station,l_train_code AS train_code
   , l_start_bureau_code AS start_bureau_code,l_From_Range AS From_Range;
 END if;
 -- select count(*) ,'tmp_cneter_notiec' from tmp_center_notice;
 delete from  tmp_center_notice;
 INSERT INTO tmp_center_notice SELECT * FROM tmp_center_notice1 WHERE train_no = l_train_no;
 IF row_count() = 0 THEN
   SET l_center_notice = '';
 ELSE 
   set l_center_notice = 'tmp_center_notice';
 end if;

#select count(*) from tmp_center_notice;

 /*发站的调令处理*/
 IF l_center_notice = 'tmp_center_notice' THEN #普通查询要判断发站是否封站
  SELECT command_code into l_command_code
   FROM  tmp_center_notice 
    WHERE train_no = l_train_no
    AND station_telecode = l_from_station
    AND command_code IN ('Q','R') #发站的封站&解封
    AND start_date   <= l_train_date
    AND stop_date    >= l_train_date
    AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
   ORDER BY operate_time DESC LIMIT 1;
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_error != 0 THEN 
   -- if out_in=9 THEN
      --  select '101_12===is here';
      -- end if;
    Iterate lab_left;
  end if;
  IF l_rowcount >= 1 AND l_command_code = 'Q' THEN
   
    Iterate lab_left;
  end if;

  /*增加停运及恢复的处理.20130619.zzq*/
  SELECT command_code into l_command_code
   FROM  tmp_center_notice 
    WHERE train_no = l_train_no
    AND command_code IN ('0','1') 
    AND start_date   <= l_start_train_date
    AND stop_date    >= l_start_train_date
    AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
   ORDER BY operate_time DESC limit 1;
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_error != 0 THEN 
    Iterate lab_left;
  end if;
  IF l_rowcount >= 1 AND l_command_code = '0'  THEN
    Iterate lab_left;
  end if;
  /*end.20130619.zzq*/

  /*指定到站的调令判断*/
  IF l_to_station != '%' THEN
   set l_arrive_date = date_format(Date_add(l_train_date,INTERVAL l_day_difference_to - l_day_difference_from DAY),'%Y%m%d');
   SELECT command_code into l_command_code
    FROM  tmp_center_notice 
     WHERE train_no = l_train_no
     AND station_telecode = l_to_station
     AND command_code   IN ('Q','R') #到站的封站&解封
     AND start_date   <= l_arrive_date
     AND stop_date    >= l_arrive_date
     AND running_rule & (power(2,datediff(l_arrive_date,start_date) % running_style)) > 0 
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'Q' THEN
     Iterate lab_left;
   end if;

   SELECT command_code into l_command_code
    FROM  tmp_center_notice 
     WHERE train_no = l_train_no
     AND station_telecode = l_to_station
     AND command_code   IN ('V','W') #到站的不可售到&恢复
     AND start_date   <= l_arrive_date
     AND stop_date    >= l_arrive_date
     AND running_rule & (power(2,datediff(l_arrive_date,start_date) % running_style)) > 0 
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'V' THEN
     Iterate lab_left;
   end if;


   #指定区间停售功能.20131022.zzq
   SELECT command_code into l_command_code
    FROM  basic.CJ30_center_notice 
     WHERE inner_code   = l_start_bureau_code    #管理局(目前为始发管理)
     AND train_no     IN (l_train_no,'*')
     AND station_telecode IN (l_from_station,'*')   #指定区间停售的发站电报码
     AND station_name   IN (l_to_station,'*')    #指定区间停售的到站电报码
     AND command_code   = 'M'          #指定车次及区间停售标志码
     AND start_date   <= l_start_train_date    #始发日期
     AND stop_date    >= l_start_train_date
     AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
    ORDER BY operate_time DESC limit 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'M' THEN
     Iterate lab_left;
   end if;

   SELECT command_code into l_command_code
    FROM  basic.CJ30_center_notice 
     WHERE inner_code   = l_start_train_date       #管理局(目前为始发管理)  start_train_date???
     AND l_train_code   LIKE train_no         #始发车次train_code
     AND station_telecode  = '*'            #指定区间停售的发站电报码
     AND station_name    = '*'            #指定区间停售的到站电报码
     AND command_code   = 'M'             #指定车次及区间停售标志码
     AND start_date   <= l_start_train_date       
     AND stop_date    >= l_start_train_date
     AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'M' THEN
     Iterate lab_left;
   end if;

   SELECT command_code into l_command_code
    FROM  basic.CJ30_center_notice 
     WHERE train_no    = '*'
     AND station_telecode  = l_from_station
     AND command_code   = 'Z'  #指定站停售
     AND start_date   <= l_train_date    #乘车日期
     AND stop_date    >= l_train_date
     AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'Z' THEN
     Iterate lab_left;
   end if;

  END if;
  IF EXISTS(SELECT 1 FROM tmp_center_notice WHERE command_code IN ('S','U')) THEN  #优化停售的处理.20120316.zzq
   DELETE FROM tmp_center_notice WHERE command_code NOT IN ('S','U');
  ELSE
   set l_center_notice = '';
  end if;
 END if;

 IF l_show_time = 1 THEN
  select  '------------------------------------------------DBG.020.指定车次查询用途-----------------------------------------------------------------';
  SELECT l_train_date AS train_date,l_train_no AS train_no,l_from_station AS from_station,l_to_station AS to_station,l_train_code AS train_code
   , l_purpose_code_cache AS purpose_code_cache,l_purpose_list AS purpose_list;
 END if;
 /*--------------------------------------------新增预售期的判断.20100122.zzq---------------------------------------------------*/
 /*逐个用途判断.20120327.zzq*/
 set l_tmp_purpose = l_purpose_code_cache
  ,  l_purpose_cache = '';
 lab_control_day:
 WHILE NOT (l_tmp_purpose IS NULL OR l_tmp_purpose = '') DO
  set purpose_code_in = substring(l_tmp_purpose,1,2);
  set l_tmp_purpose  = ltrim(INSERT(l_tmp_purpose,1,2,''));

#select purpose_code_in,l_tmp_purpose;

  /*按席别判断预售期.20120107.zzq*/
  set l_train_period = 0;   #0-未到预售期,1-超过预售期

  /*增加车次售票时间始发管理的功能.20121025.zzq*/
  -- select '31_4====';
  SELECT control_day
   ,  lpad(ahead_time,4,'0')
   ,  control_train_day,
    from_period,
     control_min_date,
     start_date 
   , purpose_code    #update.20150114.zzq
   into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date,t_purpose_code
   FROM DS60_ticket_left_tmp_train_para_define
   WHERE inner_code   = l_start_bureau_code
    AND  train_code   = l_train_code AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name
    AND (station_telecode  in (l_from_station,'*')  and  group_code = '*'  #add  by hzp 20141116
       or                                                                 #add  by hzp 20141116
       station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) #add  by hzp 20141116
    AND train_type     IN (l_train_type,'*')
    AND purpose_code   IN (purpose_code_in,'*')
    AND flag1      IN (sale_mode_in,'*')   #售票方式
    AND flag2       = '1'        #始发管理标记.20121025.zzq
 #   AND seat_type_code   IN ('*')
 #   ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/

#----------------------------------------------------------------------------modify by hzp 20140930 begin-------------------------------
  #--cancel by zzq.20150114
  #  AND seat_type_code   IN (@seat_type_code,'*')
  #  AND group_code in ( select group_code from #train_group)
   AND (train_class = l_train_class_code OR train_class = "*")
    ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,table_range,seat_type_code,train_type,train_class,flag1;

#----------------------------------------------------------------------------modify by hzp 20140930 end-------------------------------
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_rowcount = 0 AND l_error = 0 THEN
   -- select '31_5====';
   SELECT control_day
    ,  lpad(ahead_time,4,'0')
    ,  control_train_day,
     from_period,
       control_min_date,
       start_date 
    , purpose_code    #update.20150114.zzq
    into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date,t_purpose_code
    FROM DS60_ticket_left_tmp_train_para_define
    WHERE inner_code = l_board_bureau_code
           AND (station_telecode  in (l_from_station,'*')  and  group_code = '*'  #add  by hzp 20141116
          or                                                                  #add  by hzp 20141116
          station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) #add  by hzp 20141116
     AND train_type     IN (l_train_type,'*')
     AND (train_code    IN (l_train_code,'*') OR (train_code != l_train_code AND l_train_code LIKE train_code) )
     AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
     AND flag1      IN (sale_mode_in,'*')   #售票方式
     AND flag2      IN ('*','')      #始发管理标记.20121025.zzq
  #   AND seat_type_code   IN ('*')
  #   ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/
#----------------------------------------------------------------------------modify by hzp 20140930 begin-------------------------------
  #cancel by zzq.20150114
  #  AND seat_type_code   IN (@seat_type_code,'*')
   #AND group_code in ( select group_code from #train_group)
    AND (train_class = l_train_class_code OR train_class = "*")
     ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,table_range ,seat_type_code,train_type,train_class,flag1 LIMIT 1;

#----------------------------------------------------------------------------modify by hzp 20140930 end-------------------------------
   set l_error =  @@error_count,l_rowcount = row_count();
  END if;

#select l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date,t_purpose_code,l_show_time,l_rowcount;

  IF l_show_time = 1 THEN
   select  '------------------------------------------------DBG.021.根据用途查询预售期.20150114.zzq-----------------------------------------------------------------';
   SELECT left(purpose_code_in,6) AS '查询用途',t_purpose_code AS '定义的用途',l_rowcount AS '查到的条数',l_max_day AS '预售期天数',tmp_start_time AS '起售时间',l_stop_date '截止时间';  
   SELECT flag2 AS '是否管理管理(1-是,其他-否)',purpose_code,control_day,control_train_day,DS60_ticket_left_tmp_train_para_define.* FROM DS60_ticket_left_tmp_train_para_define
    WHERE inner_code = l_board_bureau_code
           AND (station_telecode  in (l_from_station,'*')  and  group_code = '*'  #add  by hzp 20141116
          or                                                                  #add  by hzp 20141116
          station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) #add  by hzp 20141116
     AND train_type     IN (l_train_type,'*')
     AND (train_code    IN (l_train_code,'*') OR (train_code != @train_code AND @train_code LIKE train_code) )
     AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
     AND flag1      IN (sale_mode_in,'*')   #售票方式
    AND (train_class = l_train_class_code OR train_class = "*")
     ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,table_range ,seat_type_code,train_type,train_class,flag1;
  END if;

  IF l_rowcount > 0 THEN
   SET C_train_period = 0;
   -- SET l_date_after = datediff(l_train_date,now());
   SET l_date_after = timestampdiff(day,now(),l_train_date);
   IF l_date_after = l_max_day THEN
     SET tmp_start_datetime = str_to_date( concat(CURDATE(),tmp_start_time),'%Y-%m-%d%H%i' );
     IF (timediff( tmp_start_datetime, now()) < 0) THEN   #未到起售时间
      SET l_max_day = l_max_day - 1 ; #相对天数－1
     END if;
   END if;
   -- select l_date_after,l_max_day,l_train_date,l_stop_date;
   IF l_date_after > l_max_day THEN 
     set l_train_period = 1; #超过预售期的退出.20100920.zzq
   end if;
   IF l_train_date > l_stop_date then
     set l_train_period = 1;
   end if;

#select l_train_period;

#--------------以上判断是否超出变点后的预售期 20141011 hzp add begin ---------------------------
   SET l_now_datetime = DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s');
   SET l_start_datetime = str_to_date( concat(CURDATE() ,tmp_start_time),'%Y-%m-%d%H%i');
   
   if C_start_date = l_today and tmp_start_time <> "0000" THEN
    IF timediff(l_now_datetime,l_start_datetime) < 0 and l_train_date > C_control_min_date THEN  
      -- set l_max_day = datediff(C_control_min_date,now());
      set l_max_day = timestampdiff(day,now(),C_control_min_date);
    end if;
    if l_date_after > l_max_day then
      Set C_train_period = 1;
    end if;
   END if;

#select  l_max_day,C_train_period;

#--------------以上判断是否超出变点后的预售期 20141011 hzp add end ---------------------------
 
   /*预售期未到.20110929.zzq*/
   IF l_train_period = 1 or C_train_period = 1 THEN 
     set purpose_code_in = ''; #丢弃掉的用途 --20141011 hzp add 超出变点后预售期  或  变点前预售期有限制
   end if;
  END if;
  set l_purpose_cache = concat(rtrim(l_purpose_cache) , purpose_code_in , ',');

#select count(*) FROM tmp_cancel_limit_define;
#select l_to_station;
  
  /******************/
  -- select '31_6====';
  IF l_to_station  <> '%' then #@sale_bureau = @board_bureau_code and 
   SELECT ahead_time into l_ahead_time FROM tmp_cancel_limit_define
    WHERE inner_code IN (l_board_bureau_code,l_from_station)                        #口径改成乘车局或站.20150114.zzq
     and (train_code = l_train_code AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name OR train_code = '*' OR train_code != l_train_code AND l_train_code LIKE train_code) 
     AND  station_telecode IN (l_from_station,'*')
     AND  train_type IN ('*',l_train_type)                                #车次类型处理.20130526.zzq
     AND  purpose_code   IN ('*',purpose_code_in )                            #增加用途处理.20130526.zzq 
     AND start_date <= l_train_date      #增加乘车日期的处理.20130329.zzq
     AND stop_date >= l_train_date
     AND  sale_mode   IN ('*',sale_mode_in )
     AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
    ORDER BY level_flag ,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc ,ahead_time desc LIMIT 1; #增加排序.20090423.zzq
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount = 0 then 
     set l_ahead_time = 0;
   end if;

   /*5.0规定时间内取消限售站的限制.20050418.zzq*/
   IF time_to_sec(timediff( l_start_datetime,now() ))/60 <= l_ahead_time THEN 
     set l_cancel_purpose = concat(l_cancel_purpose , purpose_code_in);      #@to_station_no_limit = '99'
   END if;
  END if;

  IF l_to_station  = '%' THEN
    set l_to_station_no = l_from_station_no,l_to_station_no_limit = '99';
  ELSE 
    set l_to_station_no_limit = l_to_station_no;   
  end if;

#select l_to_station_no,l_to_station_no_limit,l_cancel_purpose;

 END while lab_control_day;
 set purpose_code_in = l_purpose_cache;

#select purpose_code_in;

 IF l_show_time = 1 THEN
  select '------------------------------------------------DBG.020.指定车次可用的查询用途-----------------------------------------------------------------';
  SELECT purpose_code_in AS purpose_code,l_purpose_list AS purpose_list;
 END if;

 /*车次计算时间*/
 set l_d4 = now();
 set l_t3 = l_t3 ;

 /***************************************下载余票.20110228.zzq********************************************************/
 
 
 set l_start_date = l_start_train_date;

#select l_start_date,l_train_date;

/*SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
  ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
FROM center.left_base_center a
WHERE  a.train_no    = l_train_no
 AND a.train_date    = l_start_date
 AND a.station_no   <= l_from_station_no
 AND a.limit_station>= l_to_station_no
 AND a.range    >= l_From_Range
 AND a.range    <= l_To_Range
 AND instr(purpose_code_in,a.purpose_code) > 0
 AND a.ticket_quantity > 0
 AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
UNION ALL
SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
  ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
FROM center.left_base_AD a
WHERE  a.train_no    = l_train_no
 AND a.train_date    = l_start_date
 AND a.station_no   <= l_from_station_no 
 AND a.limit_station>= l_to_station_no
 AND a.range    >= l_From_Range
 AND a.range    <= l_To_Range
 AND instr(purpose_code_in,a.purpose_code) > 0
 AND a.ticket_quantity > 0
 AND a.station_no  < a.limit_station;*/

 WHILE l_start_date <= l_train_date DO 
 
   if out_in=9 then 
   select '51====',l_train_no,l_start_date,l_from_station_no,l_to_station_no,l_From_Range,l_To_Range,purpose_code_in;
   SELECT sql_no_cache a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
   ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
    UNION ALL
    SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_AD a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no 
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station;
   end if;
  -- select '1====',screen_flag_in;
  IF screen_flag_in = 0 THEN 
    
   set record_not_found = 0;
   begin -- 处理游标代码块
    DECLARE cursor_get_left CURSOR FOR 
    SELECT sql_no_cache a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
    UNION ALL
    SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_AD a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no 
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station; #优化到站为%的处理.20120411.zzq

    OPEN cursor_get_left;

    lab_get_left:
    WHILE 1 = 1 DO 
     FETCH cursor_get_left INTO
      t_train_no ,
      t_train_date ,
      t_station_no, 
      t_assign_station,
      t_far_from_station_no,
      t_limit_station,
      t_coach_no ,
      t_seat_type_code ,
      t_purpose_code ,
      t_range ,
      t_ticket_quantity ,
      t_up_quantity ,
      t_mid_quantity ,
      t_down_quantity ,
      t_wseat_type_code, 
      t_seat_feature,
      t_inner_code,
      t_ticket_source;
    
     if record_not_found = 1 THEN
       -- if out_in=9 THEN
       --  select '102===is here';
       -- end if;
       leave lab_get_left;
     end IF;
       
     INSERT INTO tmp_left_base VALUES
      (
       t_assign_station,
       t_train_no ,
       t_train_date ,
       t_station_no, 
       t_far_from_station_no,
       t_limit_station,
       t_coach_no ,
       t_seat_type_code ,
       t_purpose_code ,
       t_ticket_quantity ,
       t_up_quantity ,
       t_mid_quantity ,
       t_down_quantity ,
       t_ticket_source,
       t_range ,
       t_inner_code,
       t_wseat_type_code, 
       t_seat_feature
      );
    END while lab_get_left;
    CLOSE cursor_get_left;
   end;-- 结束游标cursor_get_left代码块
  ELSE #大屏调用.20130124.zzq

/*select '51====',l_train_no,l_start_date,l_from_station_no,l_to_station_no,l_From_Range,l_To_Range,purpose_code_in;
SELECT *
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station ;*/

/*INSERT INTO tmp_left_base(assign_station) SELECT assign_station FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station;
*/

   INSERT INTO  tmp_left_base(assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,
                purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,
                wseat_type_code,seat_feature) 
    SELECT sql_no_cache a.assign_station,a.train_no,a.train_date,a.station_no,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.ticket_source,a.range as table_range,a.inner_code,a.wseat_type_code,a.seat_feature
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
    UNION 
    SELECT  a.assign_station,a.train_no,a.train_date,a.station_no,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.ticket_source,a.range,a.inner_code,a.wseat_type_code,a.seat_feature
    FROM center.left_base_AD a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no 
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station;  #优化到站为%的处理.20120411.zzq

  END if;
 
  set l_start_date = date_format(Date_add(l_start_date,interval 1 day),'%Y%m%d');
 END while;
 -- insert into tmp_left_base2 select * from tmp_left_base;
 
   if out_in=9 then
  select '52=====select * from tmp_left_base;';
  select * from tmp_left_base order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity;
   end if;

 /*下载余票时间*/
 set l_t4 = l_t4;
 /*无票的过滤*/
 IF NOT EXISTS(SELECT 1 FROM tmp_left_base) THEN 
   ITERATE lab_left;
 end if;
 set l_d5 = now();

 

 /**********************************************begin.查询余票信息*****************************************************/
 /*乘车站及乘车站联合站余票*/
 set l_cancel_purpose = trim(l_cancel_purpose);
  if out_in=9 then
  select '54===',l_train_date,l_train_no,l_from_station,l_to_station_no,l_to_station_no_limit,purpose_code_in,l_cancel_purpose,l_From_Range,l_To_Range;
  select * from tmp_left_base;
  
  select '54===查询完毕';
  select '54_1===select * from tmp_left_base_center';
        select * from tmp_left_base_center;
  end if;
  INSERT INTO tmp_left_base_center 
 SELECT * FROM tmp_left_base 
  WHERE train_date  = l_train_date
     AND train_no   = l_train_no
    AND assign_station = l_from_station
    AND limit_station >= l_to_station_no
    AND (far_from_station_no <= l_to_station_no_limit AND instr( l_cancel_purpose,purpose_code) % 2 = 0 or far_from_station_no <= '99' AND instr( l_cancel_purpose,purpose_code) % 2 = 1 ) 
    AND instr( purpose_code_in,purpose_code ) > 0 
   
    AND table_range >= l_From_Range
    AND table_range <= l_To_Range
    AND ticket_quantity >  0;
 /*INSERT INTO tmp_left_base_center 
 SELECT * FROM tmp_left_base 
  WHERE train_date  = l_train_date
     AND train_no   = l_train_no
    AND assign_station = l_from_station
    AND limit_station >= l_to_station_no
    AND far_from_station_no <= l_to_station_no_limit 
    AND instr( purpose_code_in,purpose_code ) > 0 
   AND instr( l_cancel_purpose,purpose_code) % 2 = 0
    AND table_range >= l_From_Range
    AND table_range <= l_To_Range
    AND ticket_quantity >  0
 UNION
 SELECT * FROM tmp_left_base2
  WHERE train_date = l_train_date
     AND train_no = l_train_no
    AND assign_station = l_from_station
    AND limit_station >= l_to_station_no
    AND far_from_station_no <= '99'  
    AND instr( purpose_code_in,purpose_code) > 0 
   AND instr( l_cancel_purpose,purpose_code) % 2 = 1 
    AND table_range >= l_From_Range
    AND table_range <= l_To_Range
    AND ticket_quantity >  0;*/
     
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN
   ITERATE lab_left;
 end if;
 /*取消限售以远后的以远站改成乘车站*/
 IF l_to_station != '%' AND l_to_station_no_limit = '99' then 
  UPDATE tmp_left_base_center 
   SET far_from_station_no = l_from_station_no;
 END if;
 if out_in=9 then 
  select '53===select * from tmp_left_base_center';
  select * from tmp_left_base_center;
 end if;

 set l_d6 = now();
 /*计算乘车站余票时间*/
 set l_t5 = l_t5;

 IF l_show_time = 1 then
  SELECT '------------------------------------------------DBG.030.指定车次本站余票信息-----------------------------------------------------------------';
  SELECT * FROM tmp_left_base_center;
 END if;

#select l_from_station_no,l_min_station_no;

 /**********************************************************begin.改造票额共用*********************************************************/
 IF flag_in = 0 AND l_from_station_no > l_min_station_no THEN #非始发站的共用查询
   SET l_transform_date   = l_train_date
    ,  l_transform_no   = l_from_station_no
    ,  range_in      = l_From_Range  
    ,  l_fetch_w_seat   = 0
    ,  l_seat_type_code   = '%'
    ,  l_share_flag    = '0' 
    ,  l_share_string   = '';

#SELECT l_transform_date ,l_train_no, l_from_station, l_seat_type_code, l_purpose_code_cache, range_in ,l_share_string , out_in, sale_mode_in , l_show_time,l_return_code;

  /*执行票额共用处理过程*/
     if out_in=9 then
    select '61=====call arith.DS50_Proc_Share_Pre',l_transform_date,l_train_no,l_from_station,l_seat_type_code,l_purpose_code_cache,
       range_in,l_share_string,out_in,sale_mode_in,l_show_time,l_return_code;
     end if;
   -- 为了调试方便，暂时将out_in写死了1了,liyang 20160128
   CALL arith.DS50_Proc_Share_Pre (l_transform_date ,l_train_no
    , l_from_station, l_seat_type_code
    , l_purpose_code_cache, range_in ,l_share_string 
    , 0,sale_mode_in #售票方式.20100317.zzq
    , l_show_time,l_return_code); 
    if out_in=9 then
    select '61====end call arith.DS50_Proc_Share_Pre',l_transform_date,l_train_no,l_from_station,l_seat_type_code,l_purpose_code_cache,
       range_in,l_share_string,out_in,sale_mode_in,l_show_time,l_return_code;
    end if;
   IF trim(l_share_string) IS NULL OR l_share_string = '' THEN
     SET l_share_flag = '0';
   ELSE 
     set l_share_flag = '1';
   end if;

   IF l_show_time = 1 THEN
    SELECT '########################DBG.040.共用定义查询################################-';
    SELECT train_date = l_transform_date,train_no = l_train_no,from_telecode = l_from_station,seat_type_code = l_seat_type_code
    , purpose_code = l_purpose_code_cache,table_range = range_in;
    SELECT '共用定义结果:' = concat('站码[3]日期[8]站序[2]无座席[1]范围[1]始车厢[2]止车厢[2]例外车厢[2]自动共用标记[1][1][1]用途[2]席别[1]' , char(10) , l_share_string);
   END if;

   IF l_share_flag = '1' THEN
     /*有票额共享定义*/
     /*获取车次类型.20110919.zzq*/
     -- select '31_7====';
     SELECT special_flag into l_train_type_code
     FROM basic.CG52_train_dir_appendix
      WHERE train_no = l_train_no;
     set l_error =  @@error_count,l_rowcount = row_count(); #缺省种类－普通车次.20100310.zzq

     set l_row = 0 ,l_to_station_no_limit = l_to_station_no;
     IF l_to_station = '%' THEN 
      set l_to_station_no_limit = '99';     #modify by zzq.20130725.zzq
     end if;
    --  select count(*),'tmp_left_center' from tmp_left_center;
     delete from tmp_left_center;
    if out_in=9 then
     select '55=========';
    end if;
     lab2:
     WHILE l_row < char_length(rtrim(l_share_string)) / 27  DO
      
      /*增加一位席别.借用end_seat_no字段.20100326.zzq*/
      set  l_original_station_telecode = substring(l_share_string,l_row * 27 + 1,3);
      set  l_transform_date      = substring(l_share_string,l_row * 27 + 1 + 3, 8);
      set  l_transform_no      = substring(l_share_string,l_row * 27 + 1 + 3 + 8, 2);
      set  l_fetch_w_seat      = CONVERT(substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2, 1),signed);
      set  l_tmp_range       = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1, 1);
      set  l_tmp_start_coach_no    = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1, 2);
      set  l_tmp_end_coach_no    = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2, 2);
      set  l_schedule_coach     = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2, 2); #车厢例外的处理.20110215.zzq
      set  l_auto_share      = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 4, 1);    #end_seat_no的第一位为:表示是按以远站自动共用的.20131105.zzq
      set  l_tmp_purpose      = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 5, 2);
      set  l_seat_type_code     = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 7, 1);
      /*席别为全部的处理*/
      IF l_seat_type_code = 'z' THEN set  l_seat_type_code = '%'; end if;
      IF l_tmp_purpose  = '**' then set  l_tmp_purpose  = l_purpose_code_cache; end if;
      set  l_cancel_purpose = '';

      /*共享票额查询20070530.zzq*/
      IF l_original_station_telecode <> l_from_station THEN
        #IF charindex(l_original_station_telecode,l_station_list) > 0 goto lab2 /*优化加快速度.20120316.zzq*/

        /*如果车站没有预分票额则直接计算下一条共用定义.20110303.zzq*/
        IF NOT EXISTS(SELECT  1 FROM tmp_left_base 
         WHERE train_date   = l_transform_date 
          AND train_no   = l_train_no 
          AND assign_station = l_original_station_telecode) then 
         set  l_row = l_row + 1;
         ITERATE lab2;
        end if;
        -- select '31_8====';
        SELECT bureau_code,start_time
        into l_original_bureau_code,l_start_time
        FROM tmp_stop_time 
        WHERE train_no  = l_train_no 
         AND station_no  = l_transform_no; 
             
        set  l_purpose_cache = '';
        
       -- select count(*) from tmp_train_group;
         --  李杨优化，如果没有数据不再truncate
         /*select count(*) into tmp_train_group_count from tmp_train_group;
         if tmp_train_group_count>0 then 
        -- set ccount2=ccount2+1;
        -- select ccount2;
        truncate table tmp_train_group;
         end if;*/
         delete from tmp_train_group;
        
        insert into tmp_train_group
        select group_code
         from basic.DJ52_train_group_define
        where inner_code = l_original_bureau_code 
         and module_code='J' 
         and type_code='T' 
         and start_station_telecode = l_original_station_telecode;
        
        /*begin.while.001*/  
        lab_while_001:
        WHILE NOT (l_tmp_purpose IS NULL OR l_tmp_purpose = '') DO
         -- select '1===';
         set  purpose_code_in = substring(l_tmp_purpose,1,2);           
         set  l_tmp_purpose  = Insert(l_tmp_purpose,1,2,null);
        
         /*按席别判断预售期.20120107.zzq*/
         set  l_train_period = 0;   #0-未到预售期,1-超过预售期
         /*逐个用途判断预售期 .20120704.hzp begin*/
         -- select '2===';
          -- select '31_8====';
         SELECT control_day
          ,  lpad(ahead_time,4,'0')
          ,  control_train_day,from_period,control_min_date,start_date    
          
          into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date
          FROM DS60_ticket_left_tmp_train_para_define a
          WHERE inner_code   = l_start_bureau_code
          AND  train_code   = l_train_code AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name
           AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'  ##add  by hzp 20141116
            or                                                                  ##add  by hzp 20141116
            station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) ##add  by hzp 20141116
          AND train_type     IN (l_train_type,'*')
          AND purpose_code   IN (purpose_code_in,'*')
          AND flag1      IN (sale_mode_in,'*')   #售票方式
          AND flag2       = '1'        #始发管理标记.20121025.zzq
         #   AND seat_type_code   IN ('*')
          #ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/

      ######################################modify by hzp 20140930 begin###############-
          #update.20150114.zzq
          AND (l_seat_type_code != '%' AND seat_type_code   IN (l_seat_type_code,'*') OR l_seat_type_code = '%')
          #AND group_code in ( select group_code from #train_group)
         ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,a.table_range,seat_type_code,train_type,train_class,flag1;
         -- select '3===';
      ######################################modify by hzp 20140930 begin###############-
         set l_error =  @@error_count,l_rowcount = row_count();
         IF l_rowcount = 0 AND l_error = 0 THEN
           /* select '31_10====';
            SELECT  *
            FROM DS60_ticket_left_tmp_train_para_define a
            WHERE inner_code = l_board_bureau_code
             AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'  ##add  by hzp 20141116
              or                                                                  ##add  by hzp 20141116
              station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) ##add  by hzp 20141116
            AND train_type     IN (l_train_type,'*')
            AND (train_code    IN (l_train_code,'*') OR (train_code != l_train_code AND l_train_code LIKE train_code) )
            AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
            AND flag1      IN (sale_mode_in,'*')   #售票方式
            AND flag2      IN ('*','')  
            AND (l_seat_type_code != '%' AND seat_type_code   IN (l_seat_type_code,'*') OR l_seat_type_code = '%');*/
           SELECT  control_day
            ,  lpad(ahead_time,4,'0')
            ,  control_train_day,
            from_period,
              control_min_date,
              start_date
            into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date
            FROM DS60_ticket_left_tmp_train_para_define a
            WHERE inner_code = l_board_bureau_code
             AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'  ##add  by hzp 20141116
              or                                                                  ##add  by hzp 20141116
              station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) ##add  by hzp 20141116
            AND train_type     IN (l_train_type,'*')
            AND (train_code    IN (l_train_code,'*') OR (train_code != l_train_code AND l_train_code LIKE train_code) )
            AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
            AND flag1      IN (sale_mode_in,'*')   #售票方式
            AND flag2      IN ('*','')      #始发管理标记.20121025.zzq
           #   AND seat_type_code   IN ('*')
            #ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/
       ######################################modify by hzp 20140930 begin###############-
           #update.20150114.zzq
           AND (l_seat_type_code != '%' AND seat_type_code   IN (l_seat_type_code,'*') OR l_seat_type_code = '%')
            #AND group_code in ( select group_code from #train_group)
           ORDER BY level_flag desc ,train_code desc ,station_telecode desc,group_code desc,ticket_type desc,purpose_code desc,a.table_range desc,seat_type_code desc,train_type desc,train_class desc,flag1 desc limit 1;
           -- select '6===';
       ######################################modify by hzp 20140930 begin###############-
           set l_error =  @@error_count,l_rowcount = row_count();
         END if;
         -- select '7===';
         IF l_rowcount > 0  then
           set  C_train_period = 0;
           -- set  l_date_after = datediff(l_transform_date,now());
           set  l_date_after = timestampdiff(day,now(),l_transform_date);
           IF l_date_after = l_max_day THEN
             set  tmp_start_datetime = str_to_date( concat(CURDATE() , tmp_start_time),'%Y-%m-%d%H%i' );
             IF (timestampdiff(minute, tmp_start_datetime,now()) < 0) THEN 
               #未到起售时间
               set  l_max_day = l_max_day - 1; #相对天数－1
             END if;
           END if;
           IF l_date_after > l_max_day  THEN set  l_train_period = 1; end if;#超过预售期的退出.20100920.zzq
           IF l_transform_date > l_stop_date THEN set  l_train_period = 1; end if;

           -- set  l_now_datetime = concat(trim(date_format(now(),'%Y/%m/%d')) , ' ' ,  trim(date_format(now(),'%H:%i:%s')));
           set  l_now_datetime = date_format(now(),'%Y/%m/%d %H:%i:%s');
           set  l_start_datetime = str_to_date( concat(CURDATE() , tmp_start_time) ,'%Y-%m-%d%H%i');
           
           if C_start_date = l_today and tmp_start_time <> "0000" THEN
            IF timestampdiff( second,l_start_datetime,l_now_datetime) < 0 and l_train_date > C_control_min_date THEN  
              -- set  l_max_day = datediff(C_control_min_date,now());
              set  l_max_day = timestampdiff(day,now(),C_control_min_date);
            end if;
            if l_date_after > l_max_day THEN
              set  C_train_period = 1;
            end if;
           END if;


         
           /*预售期未到.20110929.zzq*/
           IF l_train_period = 1 or C_train_period = 1 THEN 
             set  purpose_code_in = ''; #丢弃掉的用途
           end if;
         END if;
         -- select '8===';
         set  l_purpose_cache = concat(rtrim(l_purpose_cache) , purpose_code_in , ',');          
         /*逐个用途判断预售期 .20120704.hzp end*/
         
         /*逐个判断取消限售 .20120704.hzp begin*/
         set  l_start_datetime = str_to_date( concat(l_transform_date, l_start_time) ,'%Y%m%d%H%i' );
         
         IF l_to_station  <> '%' THEN  #l_sale_bureau = l_original_bureau_code and  
         -- select '31_11====';
          SELECT ahead_time into l_ahead_time FROM tmp_cancel_limit_define
          WHERE inner_code IN (l_original_bureau_code,l_original_station_telecode)               #口径改成被共用站及局码.20150114.zzq
           and (train_code = l_train_code 
             AND start_station_name = l_start_station_name 
             AND end_station_name = l_end_station_name 
            OR train_code = '*' 
            OR l_train_code LIKE train_code) 
           AND  station_telecode IN (l_original_station_telecode,'*')
           AND  train_type IN ('*',l_train_type)                                       #车次类型处理.20130526.zzq
           AND  purpose_code   IN ('*',purpose_code_in )                            #增加用途处理.20130526.zzq 
           AND start_date <= l_transform_date      #增加乘车日期的处理.20130329.zzq
           AND stop_date >= l_transform_date
           AND  sale_mode   IN ('*',sale_mode_in )
           AND running_rule & (power(2,datediff(l_transform_date,start_date) % running_style)) > 0 
          ORDER BY level_flag ,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc,ahead_time desc limit 1; #增加排序.20090423.zzq
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_error != 0 THEN ITERATE lab_while_001; end if;
          IF l_rowcount = 0 THEN set  l_ahead_time = 0; end if;
         
          /*5.0规定时间内取消限售站的限制.20050418.zzq*/
          IF timediff( l_start_datetime,now() ) <= l_ahead_time THEN
           set  l_cancel_purpose = concat(trim(l_cancel_purpose) , purpose_code_in);                  #l_to_station_no_limit = '99'
           #-hzphzp
          END if;
         END if;
         /*****************/
        END WHILE lab_while_001;
        /*end.while.001*/
        set  purpose_code_in = l_purpose_cache;
        set  l_cancel_purpose = trim(l_cancel_purpose);
        /****************/
       -- select '10===',l_auto_share;
        IF l_auto_share = ':' THEN   #按以远站自动共用处理.20131105.zzq
         IF l_show_time = 1 THEN
           SELECT '########################DBG.045.以远站作为乘车站自动共用的余票################################-';
           SELECT * FROM tmp_left_base
           WHERE train_date      = l_transform_date
           AND train_no       = l_train_no
           AND assign_station    = l_original_station_telecode
           AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
           AND far_from_station_no  = l_from_station_no
           AND instr( purpose_code_in,purpose_code ) > 0
           AND coach_no    >= l_tmp_start_coach_no
           AND coach_no     <= l_tmp_end_coach_no
           AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq
           AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
           AND table_range      >= l_From_Range
           AND table_range      <= l_To_Range
           AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
           AND ticket_quantity   >= 1
           AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);
         END if;
         -- select '11===';
         INSERT INTO tmp_left_center 
         SELECT * FROM tmp_left_base
          WHERE train_date      = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          AND far_from_station_no  = l_from_station_no
          AND instr( purpose_code,purpose_code_in ) > 0
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
          OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
          OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);
         -- select '12===';
        ELSE
          /*select '13===',l_transform_date,l_train_no,l_original_station_telecode,l_to_station_no,l_to_station_no_limit,
             purpose_code_in,l_cancel_purpose,l_tmp_start_coach_no,l_tmp_end_coach_no,l_schedule_coach,l_fetch_w_seat,l_seat_type_code,
             l_From_Range,l_To_Range,l_tmp_range,l_to_station;*/
         -- select '13====';
         INSERT INTO tmp_left_center 
         SELECT distinct * FROM tmp_left_base
          WHERE train_date       = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          
          AND instr( purpose_code_in,purpose_code ) > 0
          AND (far_from_station_no <= l_to_station_no_limit AND instr( l_cancel_purpose,purpose_code) % 2 = 0   or
            far_from_station_no <= '99' AND instr( l_cancel_purpose,purpose_code) % 2 = 1
           )
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq    
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);
         -- select '14===';
         /*SELECT  * FROM tmp_left_base
          WHERE train_date       = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          
          AND instr( purpose_code_in,purpose_code ) > 0
          AND far_from_station_no <= l_to_station_no_limit AND instr( l_cancel_purpose,purpose_code) % 2 = 0 
            
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq    
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no)
         UNION
         SELECT * FROM tmp_left_base2
          WHERE train_date       = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          AND far_from_station_no <= '99'
          AND instr( purpose_code_in,purpose_code ) > 0
          AND instr( l_cancel_purpose,purpose_code) % 2 = 1
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);*/
            
        END if;
        set l_error =  @@error_count,l_rowcount = row_count();
        IF l_rowcount = 0 OR l_error != 0 THEN 
        set  l_row = l_row + 1;
        ITERATE lab2; 
       end if;
        set  l_station_list = concat(rtrim(l_station_list) , ',' , l_original_station_telecode); #缓存已经算过共用余票的车站.20120316.zzq
       -- select '16======',count(*) from tmp_left_center;
       IF out_in=9 then
        select '15===',l_transform_date,l_train_no,l_original_station_telecode;
       --  select * from tmp_left_center;
        select * from tmp_left_center 
        WHERE train_date    = l_transform_date 
         AND train_no    = l_train_no 
         AND assign_station = l_original_station_telecode;
        end if;
        /*****************************************逐个席别,用途计算是否有停售和预售期是否未到.20110218.zzq********************************************/
        /*如果没有符合条件的记录,直接计算下一个站的余票.20110218.zzq*/
        IF NOT EXISTS(SELECT 1 FROM tmp_left_center 
        WHERE train_date    = l_transform_date 
         AND train_no    = l_train_no 
         AND assign_station = l_original_station_telecode) THEN
          -- select '15_1===';
          set  l_row = l_row + 1;
          ITERATE lab2; 
        end if;
       --  select '16===';
        /******************************增加按席别停售及预售期判断的处理.20110218.zzq*********************************************/
      
        /************************************************************************************************************************
            begin.增加硬座和混编硬座共用时有座自动变成无座是否执行的判断处理.20101228.zzq
            share_to_wseat = 0:生成有座；1:生成无座
        *************************************************************************************************************************/
        /*计算票额共用是否要有座席变成无座.20110111.zzq*/
         -- select '31_12====',l_start_train_date,l_train_code,l_start_station_telecode,l_end_station_telecode;
        SELECT reuse_flag into l_share_to_wseat FROM basic.DJ50_reuse_train_define
        WHERE  train_code      = l_train_code
        AND start_station_telecode = l_start_station_telecode
        AND end_station_telecode  = l_end_station_telecode
        AND start_date      <= l_start_train_date
        AND stop_date      >= l_start_train_date
        
        AND seat_type_code     IN ('1','B','*') 
        AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
        ORDER BY seat_type_code desc limit 1;
        -- select '17===';
        set l_error =  @@error_count,l_rowcount = row_count();
        IF l_rowcount = 0 AND l_error = 0 THEN
          /*没有定义时读取缺省定义*/
          -- select '31_13====';
          SELECT reuse_flag INTO l_share_to_wseat FROM basic.DJ60_reuse_para_define
          WHERE start_date   <= l_start_train_date
          AND stop_date   >= l_start_train_date
          AND start_train_code  IN (l_train_code,'*')
          AND special_flag   = l_train_type_code   #增加动车类型的处理.20110919.zzq
          AND seat_type_code  IN ('1','B','*')
          ORDER BY seat_type_code desc limit 1;
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount = 0 AND l_error = 0 THEN set  l_share_to_wseat = '0';  end if; #1->0,缺省共用成有座.20131011.zzq
        END if;
       -- select '31_13====';
        IF l_share_to_wseat = '1' THEN
          /*增加'同城车站'共用不按照复用策略执行的例外处理.20110104.zzq*/
          SELECT city_code into l_city_code FROM basic.station_divide_dictionary 
          WHERE station_telecode = l_original_station_telecode #被共用车站
          AND start_date     <= l_train_date
          AND   stop_date    >= l_train_date;
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount != 0 AND l_error = 0 THEN
            SELECT city_code INTO l_city_code FROM basic.station_divide_dictionary 
            WHERE station_telecode = l_from_station    #共用车站
            AND city_code   = l_city_code
            AND start_date     <= l_train_date
            AND   stop_date    >= l_train_date;
            set l_error =  @@error_count,l_rowcount = row_count();
            IF l_rowcount != 0 AND l_error = 0 THEN set  l_share_to_wseat = '0'; end if;
          END if;
        END if;
       -- select '19===',l_train_date,l_from_station,l_from_station_no,l_transform_date,l_train_no,l_original_station_telecode;
          -- select * from tmp_left_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
        /*将共用票额变成乘车站票额*/
        UPDATE tmp_left_center 
         SET train_date  = l_train_date
         , assign_station = l_from_station         
         , inner_code  = concat(trim(inner_code) , station_no , far_from_station_no , limit_station) -- 记录原来票额的信息,防止distinct丢数.20110218.zzq
         , far_from_station_no = 
         ( CASE 
          WHEN far_from_station_no < l_from_station_no THEN l_from_station_no
          ELSE far_from_station_no
          END
         )
         , seat_type_code = (CASE WHEN l_share_to_wseat = '1' AND seat_type_code IN ('1','B','O') THEN 'W' ELSE seat_type_code END)
         , station_no  = l_from_station_no
         WHERE train_date    = l_transform_date 
         AND train_no    = l_train_no 
         AND assign_station = l_original_station_telecode;
       -- select '19_2===';
       -- select * from tmp_left_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
      END if;
     set  l_row = l_row + 1;
     END WHILE lab2;  ######while end for share
    -- select '21===';
     IF l_show_time = 1 THEN
     SELECT '########################DBG.049.指定车次的乘车余票信息################################-';
     SELECT * FROM tmp_left_base_center;
     END if;
      
      if out_in=9 then 
      -- select '71===select * from tmp_left_base_center';
                        -- select * from tmp_left_base_center;
                        select '72===select * from  tmp_left_center';
                         select * from tmp_left_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
     end if;
     /*过滤掉重复的信息.20100125.zzq*/
     INSERT INTO tmp_left_base_center SELECT DISTINCT * FROM tmp_left_center;
     if out_in=9 then 
     select '73===select * from tmp_left_base_center';
                    select * from tmp_left_base_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
                      
     end if;
    -- select '23===';
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount > 0 AND l_error = 0 THEN set  l_share_train_flag = 1 ; end if; #有共用票额表示

     /*恢复inner_code的值.20110218.zzq*/
     UPDATE tmp_left_base_center SET inner_code = substring(inner_code,1,1)
     where length(trim(inner_code)) > 1;

     IF l_show_time = 1 THEN
     SELECT '########################DBG.050.指定车次共用余票信息################################-';
     SELECT * FROM tmp_left_base_center;
     END if;
   END if;
 END if;
 /*计算共用余票时间*/
 set  l_t6 = l_t6;
 set  l_d6 = now();
 /*******************************************************end.余票查询中的票额共用处理.20070530.zzq*********************************************/

#select * from tmp_center_notice WHERE train_no = l_train_no;

  /*#####################大屏余票查询指定区间停售处理.20130730.zzq#############################-*/
  IF EXISTS(SELECT 1 FROM tmp_center_notice WHERE train_no = l_train_no) THEN 
  DELETE a
   FROM tmp_left_base_center a,tmp_center_notice b
   WHERE a.train_no    = b.train_no
   AND a.assign_station  = b.station_telecode
   AND a.limit_station  = b.station_no
   AND b.command_code  = 'M'
   AND a.train_date   >= b.start_date
   AND a.train_date  <= b.stop_date
   AND running_rule & (power(2,datediff(a.train_date,b.start_date) % running_style)) > 0 ;
  END if;
  /*****************************************逐个席别,用途计算是否有停售和预售期是否未到.20110218.zzq********************************************/
  -- TRUNCATE TABLE tmp_seat_info ;
  delete from tmp_seat_info;
  INSERT INTO tmp_seat_info 
  SELECT DISTINCT seat_type_code,purpose_code,table_range 
   FROM tmp_left_base_center
   WHERE train_date   = l_train_date 
    AND train_no   = l_train_no
    AND assign_station = l_from_station;

#select * from tmp_seat_info;
  
  /*获取无座席的归属席别.20110907.zzq*/
  SELECT wseat_type_code into l_w_seat_type
  FROM tmp_left_base_center
   WHERE train_date   = l_train_date 
    AND train_no   = l_train_no
    AND assign_station = l_from_station
    AND seat_type_code = 'W' LIMIT 1;

#select l_w_seat_type;

  /*逐条处理*/
  WHILE EXISTS(SELECT 1 FROM tmp_seat_info) DO
   SELECT seat_type_code,purpose_code,table_range INTO l_seat_type_code,l_tmp_purpose,l_ticket_range FROM tmp_seat_info LIMIT 1;
   DELETE from tmp_seat_info WHERE seat_type_code = l_seat_type_code AND purpose_code = l_tmp_purpose AND table_range = l_ticket_range;

   /******************************增加按席别停售及预售期判断的处理.20110218.zzq*********************************************/
   SET l_fetch_w_seat = 0
    ,  l_delete_flag  = 0;
   if out_in=9 then
     select 'call arith.DS60_Notice_Period',l_train_date
        , l_train_no
        , l_train_code
        , l_from_station
        , l_seat_type_code
        , l_fetch_w_seat   
        , l_tmp_purpose
        , l_ticket_range
        , sale_mode_in
        , l_center_notice   #调令缓存表
        , ''       #预售期缓存表
        , l_train_type
        , l_board_bureau_code 
        , l_return_code;
  end if;
   CALL arith.DS60_Notice_Period
    (l_train_date
    , l_train_no
    , l_train_code
    , l_from_station
    , l_seat_type_code
    , l_fetch_w_seat   
    , l_tmp_purpose
    , l_ticket_range
    , sale_mode_in
    , l_center_notice   #调令缓存表
    , ''       #预售期缓存表
    , l_train_type
    , l_board_bureau_code 
    , l_return_code);
    if out_in=9 then
   select 'end call arith.DS60_Notice_Period',l_train_date
        , l_train_no
        , l_train_code
        , l_from_station
        , l_seat_type_code
        , l_fetch_w_seat   
        , l_tmp_purpose
        , l_ticket_range
        , sale_mode_in
        , l_center_notice   #调令缓存表
        , ''       #预售期缓存表
        , l_train_type
        , l_board_bureau_code 
        , l_return_code;
   end if;
#select l_return_code,l_fetch_w_seat,l_seat_type_code;

   set lab_lable_s = 1;
   lab_lable:loop
   if lab_lable_s = 0 THEN
     -- if out_in=9 THEN
      --  select '103===is here';
      -- end if;
     leave lab_lable;
   end if;

   /*停售*/
   IF l_return_code = 0 THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '104===is here';
       end if;
    leave lab_lable;
   /*未到预售期*/
   ELSEIF l_return_code = 1 THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '105===is here';
       end if;
    leave lab_lable;
   END if;
   
   /*只售有座席*/
   IF l_fetch_w_seat = 1 AND l_seat_type_code = 'W' THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '107===is here';
       end if;
    leave lab_lable;
   /*只售无座席*/
   ELSEIF l_fetch_w_seat = 9 AND l_seat_type_code != 'W' THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '108===is here';
       end if;
    leave lab_lable;
   END if;

   /*无座席归属席别有票时,清理掉无座席.20110907.zzq*/
  #  IF l_w_seat_type = l_seat_type_code BEGIN
  #   DELETE FROM #tmp_left_base_center 
  #    WHERE train_date   = l_train_date 
  #      AND train_no   = l_train_no 
  #      AND assign_station = l_from_station
  #      AND seat_type_code = 'W'
  #  END

   set lab_lable_s = 0;
   end loop lab_lable;

   IF l_delete_flag = 1 THEN
    /*删除不符合条件的余票*/
    DELETE FROM tmp_left_base_center 
    WHERE train_date   = l_train_date 
     AND train_no   = l_train_no 
     AND assign_station = l_from_station
     AND seat_type_code = l_seat_type_code 
     AND purpose_code  = l_tmp_purpose 
     AND table_range    = l_ticket_range;
   END if;
  END WHILE;
  /******************************增加按席别停售及预售期判断的处理.20110218.zzq*********************************************/
  /*按席别计算停售及预售期时间*/
  SET l_t7 = l_t7 + timediff(now(),l_d6);







End While lab_left;

set lab1_s = 0;
end loop lab1;

#SELECT * FROM tmp_left_base_center WHERE limit_station > station_no;
-- if out_in=9 THEN
-- select * from tmp_left_base_center;
-- end if;
IF table_name_in != '' THEN
 SET @l_SQL = concat('INSERT INTO ' , table_name_in , ' SELECT * FROM tmp_left_base_center WHERE limit_station > station_no');
END if;

IF out_in = 2 THEN
 /*直接输出结果select结果级*/
  SELECT * FROM tmp_left_base_center WHERE limit_station > station_no;
ELSE 
 prepare stmt_1 from @l_SQL;
 EXECUTE stmt_1;
 DROP prepare stmt_1;

 SET l_rowcount = row_count();
END if;

/*调优20060713.BXP.zzq*/
/*truncate table DS60_ticket_left_tmp_train_para_define;
-- drop table DS60_ticket_left_tmp_train_para_define;
truncate table tmp_union_station;
-- drop table tmp_union_station;
truncate table tmp_left_center;
-- drop table tmp_left_center;
truncate table tmp_left_base_center;
-- drop table tmp_left_base_center;
truncate table tmp_cancel_limit_define;
-- drop table tmp_cancel_limit_define;
truncate table tmp_center_notice;
-- drop table tmp_center_notice;
truncate table tmp_center_notice1;
-- drop table tmp_center_notice1;*/

/*耗费总时间*/
SET l_t0 = timediff( now(),l_d1);

#IF object_id('center..DS50_Train_Info_Statist') IS NOT NULL
# INSERT INTO center..DS50_Train_Info_Statist VALUES
# (
#   @temp_board_station
#  , @temp_end_station
#  , @temp_board_train_date
#  , @temp_directions                         
#  , @temp_telecode_list
#  , @temp_station_train_code
#  , @temp_purposes
#  , @temp_inner_code
#  , @temp_range
#  , @temp_flag
#  , @temp_seat_type_list
#    ,  0
#  , @temp_kind
#    ,  getdate()
#    ,rtrim(CONVERT(CHAR,@t0))   /*t0-总时间*/
#    ,rtrim(CONVERT(CHAR,@t1))   /*t1-建立缓存表时间*/
#    ,rtrim(CONVERT(CHAR,@t2))   /*t2-建调令,停靠站等表缓存时间*/
#    ,rtrim(CONVERT(CHAR,@t3))    /*t3-计算车次时间*/
#    ,rtrim(CONVERT(CHAR,@t4))    /*t4-余票缓存时间*/
#  ,@rowcount        /*计算后的余票数量*/
#      ,@t5          /*t5-计算乘车站余票时间*/
#    ,@t6          /*t6-计算共用余票时间*/
#      ,@t7          /*t7-按席别计算停售及预售期时间*/
#      ,@t8          /*t8-*/
#      ,@t9          /*t9-*/
# )


IF l_show_time = 1 THEN
 SET l_SQL = concat('车次计算时间:' , rtrim(CONVERT(l_t3,CHAR)) , 'ms,下载余票时间:' , rtrim(CONVERT(l_t4,CHAR)) , 'ms,计算共用时间:' , rtrim(CONVERT(l_t6,CHAR))
    , 'ms,分席别计算预售期和停售时间:' , rtrim(CONVERT(l_t7,CHAR)));
 SET l_SQL = concat(rtrim(l_SQL) , 'Consume Time:' , rtrim(CONVERT(datediff( NOW(), l_d1),CHAR)) , 'mi');
 SELECT l_SQL;
END if;



SET return_out = l_share_train_flag; #0-没有共用票额go1-有共用票额
#select return_out;

Commit;
leave empty_tmp_table_lab;
end loop empty_tmp_table_lab;

End

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`localhost` PROCEDURE `CJ30_train_code`(train_date CHAR(8),
 INOUT train_no CHAR(12) ,
 INOUT station CHAR(10) ,  
 out_flag TINYINT UNSIGNED,
 inner_code CHAR(3),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE t_train_no CHAR(12); 
   DECLARE t_station_name CHAR(10);
   DECLARE station_telecode CHAR(3); 
   DECLARE station_code CHAR(5);
   DECLARE station_name CHAR(10); 
   DECLARE return_code INT;
   DECLARE l_match_string CHAR(12);
   DECLARE train_code CHAR(8);


   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE cursor_no int ;
   DECLARE SWV_CurNum INT DEFAULT 0;
   
   
   
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   
   
   
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   IF LENGTH(ltrim(rtrim(train_date))) < 8 then 
      LEAVE SWL_return;
   end if;
   SET train_code = ltrim(rtrim(train_no));
   SET train_no = '000000000000';
   SET return_code = LENGTH(ltrim(rtrim(station)));
   IF return_code = 3 then

      SET station_telecode = upper(ltrim(rtrim(station)));
      
      select   station_dictionary.station_name 
      INTO station_name 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = station_telecode
       AND station_dictionary.start_date <= train_date
       AND station_dictionary.stop_date >= train_date;
   ELSE 
      IF return_code = 5 then

         SET station_code = ltrim(rtrim(station));
         
         select   station_dictionary.station_name 
   INTO station_name 
   FROM basic.station_dictionary 
   WHERE station_dictionary.station_code = station_code
          AND station_dictionary.start_date <= train_date
          AND station_dictionary.stop_date >= train_date;
      ELSE 
         IF return_code = 7 then

            SET station_code = INSERT(ltrim(rtrim(station)),6,2,'');
            
            select   station_name.station_name 
   INTO station_name 
   FROM station_dictionary 
   WHERE station_name.station_code = station_code
             AND station_name.start_date <= train_date
             AND station_name.stop_date >= train_date;
         ELSE
            SET station_name = station;
         end if;
      end if;
   end if;
   
   IF station_name IS NULL then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;
 
   SET l_match_string = CONCAT('__',right(CONCAT('00000000',ltrim(rtrim(train_code))),8),'__');
   
 set NO_DATA=0;
   IF return_code = 1 then
     begin
  
    DECLARE get_train CURSOR FOR 
    SELECT stop_time.train_no,
     stop_time.station_name 
    FROM basic.stop_time
    WHERE stop_time.train_no LIKE l_match_string
     AND stop_time.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     AND stop_time.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     AND station_name IN
    (SELECT start_station_name
         FROM basic.train_dir
         WHERE train_dir.train_code = train_code
         AND train_dir.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0+5,train_date),'%Y%m%d')
         AND  train_dir.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -5,train_date),'%Y%m%d')
   )
    ORDER BY stop_time.stop_date DESC,stop_time.station_no ASC,stop_time.train_no ASC;
    OPEN get_train;
  FETCH get_train INTO t_train_no,t_station_name;
  SWL_Label:loop
    WHILE NO_DATA = 0 DO
   
    CALL CJ30_train(train_date,t_train_no,t_station_name,0,@SWV_RetVal);
    
    SET train_no = t_train_no;
    SET station = t_station_name;
    IF t_train_no <> '000000000000' then
    LEAVE SWL_Label;
    end if;
    
    
    FETCH get_train INTO t_train_no,t_station_name;
  
    
     
    END WHILE;
    leave SWL_Label;
    end loop SWL_Label;
  CLOSE get_train;
  
  end;
   ELSE
  begin
     
    DECLARE get_train CURSOR  FOR 
    SELECT stop_time.train_no,
     stop_time.station_name 
    FROM basic.stop_time
    WHERE ((stop_time.train_no LIKE l_match_string)
    
      OR (stop_time.station_train_code = train_code))
     AND stop_time.station_name = station_name
     AND stop_time.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     AND stop_time.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     ORDER BY stop_time.stop_date DESC,stop_time.station_no ASC,stop_time.train_no ASC;
  
     OPEN get_train;
  FETCH get_train INTO t_train_no,t_station_name;
  SWL_Label:loop
     WHILE NO_DATA = 0 DO
    
     CALL CJ30_train(train_date,t_train_no,t_station_name,0,@SWV_RetVal);
     
     SET train_no = t_train_no;
     SET station = t_station_name;
     IF t_train_no <> '000000000000' then
     LEAVE SWL_Label;
     end if;
     
     
     FETCH get_train INTO t_train_no,t_station_name;
   
     
   
     END WHILE;
     leave SWL_Label;
     end loop SWL_Label;
  CLOSE get_train;
  end;
   end if;
     
 
   

   IF out_flag = 1 then
      SELECT train_no,station;
   end if;
   IF train_no = '000000000000' then
      SET return_code = -1;
   ELSE 
      SET return_code = 1;
   end if;
   SET SWP_Ret_Value = return_code;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `CG40_fetch_price`(total_distance INT
,train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,seat_feature CHAR(1)
,special_visa TINYINT UNSIGNED
,relay_ticket_type TINYINT UNSIGNED


,INOUT preference_style CHAR(1)

,INOUT preference_rate DECIMAL(4,3)
,preference_flag CHAR(1) 
,INOUT distance SMALLINT
,INOUT ticket_price SMALLINT
,INOUT belong_line1 TINYINT UNSIGNED
,INOUT distance1 SMALLINT
,INOUT ticket_price1 SMALLINT
,INOUT belong_line2 TINYINT UNSIGNED
,INOUT distance2 SMALLINT
,INOUT ticket_price2 SMALLINT
,INOUT belong_line3 TINYINT UNSIGNED
,INOUT distance3 SMALLINT
,INOUT ticket_price3 SMALLINT
,INOUT belong_line4 TINYINT UNSIGNED
,INOUT distance4 SMALLINT
,INOUT ticket_price4 SMALLINT
,INOUT belong_line5 TINYINT UNSIGNED
,INOUT distance5 SMALLINT
,INOUT ticket_price5 SMALLINT
,INOUT relay_distance SMALLINT
,INOUT relay_price SMALLINT
,INOUT addition_cost SMALLINT
,INOUT bed_reserve_cost SMALLINT
,INOUT service_cost SMALLINT
,INOUT air_condition_price SMALLINT
,INOUT train_air_condition SMALLINT
,INOUT total_base_price SMALLINT
,price1_difference SMALLINT
,price2_difference SMALLINT
,price3_difference SMALLINT
,price4_difference SMALLINT
,price5_difference SMALLINT
,INOUT discount SMALLINT
,INOUT agent_fee SMALLINT
,INOUT preference_price SMALLINT
,INOUT basic_price SMALLINT

,INOUT ticket_price_obtion SMALLINT
,INOUT preference_word CHAR(2)

,INOUT qz_add_price SMALLINT
,output2 TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE p_seat SMALLINT;
   DECLARE p_new_seat SMALLINT;
   DECLARE p_fast SMALLINT;
   DECLARE p_new_fast SMALLINT;
   DECLARE pp_fast SMALLINT;
   DECLARE pp_new_fast SMALLINT;
   DECLARE p_soft_seat SMALLINT;
   DECLARE p_new_soft_seat SMALLINT;
   DECLARE p_up_bed SMALLINT;
   DECLARE p_new_up_bed SMALLINT;
   DECLARE p_middle_bed SMALLINT;
   DECLARE p_new_middle_bed SMALLINT;
   DECLARE p_down_bed SMALLINT;
   DECLARE p_new_down_bed SMALLINT;
   DECLARE p_up_soft SMALLINT;
   DECLARE p_new_up_soft SMALLINT;
   DECLARE p_down_soft SMALLINT;
   DECLARE p_new_down_soft SMALLINT;
   DECLARE p_up_super SMALLINT;
   DECLARE p_new_up_super SMALLINT;
   DECLARE p_down_super SMALLINT;
   DECLARE p_new_down_super SMALLINT;
   DECLARE p_up_soft_super SMALLINT;
   DECLARE p_new_up_soft_super SMALLINT;
   DECLARE p_down_soft_super SMALLINT;
   DECLARE p_new_down_soft_super SMALLINT;
   DECLARE p_air SMALLINT;
   DECLARE p_new_air SMALLINT;
   DECLARE p_new_double_seat SMALLINT;
   DECLARE p_new_double_bed SMALLINT;
   DECLARE p_new_double_fast SMALLINT;
   DECLARE pp_new_double_fast SMALLINT;
   DECLARE p_new_double_air SMALLINT;
   DECLARE from_station_name CHAR(10);
   DECLARE change_station_name CHAR(10);
   DECLARE to_station_name CHAR(10);
   DECLARE change_station_no CHAR(2);
   DECLARE free_station_name CHAR(10);
   DECLARE from_stations SMALLINT;
   DECLARE free_station_no CHAR(2);
   DECLARE to_stations SMALLINT;
   DECLARE subbureau_code CHAR(2);
   DECLARE train_class CHAR(1);
   DECLARE co_train_date CHAR(8);
   DECLARE train_code CHAR(8);
   DECLARE train_class1 CHAR(1);
   DECLARE co_train_no CHAR(12);
   DECLARE double_id CHAR(1);
   DECLARE train_class2 CHAR(1);
   DECLARE co_seat_type CHAR(1);
   DECLARE schema_id CHAR(1);
   DECLARE train_class_level SMALLINT;
   DECLARE start_date CHAR(8);
   DECLARE start_train_date CHAR(8);
   DECLARE stop_date CHAR(8);
   DECLARE day_diff TINYINT UNSIGNED;
   DECLARE service_type CHAR(1);
   DECLARE new_type CHAR(1);
   DECLARE temp_seat_type CHAR(1);
   DECLARE seat_type0 CHAR(1);
   DECLARE ticket_type_power INT;
   DECLARE tmp_ticket_type INT;
   DECLARE s_seat1 TINYINT UNSIGNED;
   DECLARE s_seat2 TINYINT UNSIGNED;
   DECLARE s_u TINYINT UNSIGNED;
   DECLARE s_shu TINYINT UNSIGNED;
   DECLARE s_hu TINYINT UNSIGNED;
   DECLARE s_su TINYINT UNSIGNED;
   DECLARE s_m TINYINT UNSIGNED;
   DECLARE s_shd TINYINT UNSIGNED;
   DECLARE s_hd TINYINT UNSIGNED;
   DECLARE s_sd TINYINT UNSIGNED;
   DECLARE s_d TINYINT UNSIGNED;
   DECLARE s_bed TINYINT UNSIGNED;
   DECLARE bed_only TINYINT UNSIGNED;
   DECLARE half DECIMAL(4,3);
   DECLARE home TINYINT UNSIGNED;
   DECLARE student DECIMAL(4,3);
   DECLARE free TINYINT UNSIGNED;
   DECLARE child DECIMAL(4,3);
   DECLARE small_child DECIMAL(4,3);
   DECLARE style0 CHAR(1);
   DECLARE style1 CHAR(1);
   DECLARE line1 TINYINT UNSIGNED;
   DECLARE style2 CHAR(1);
   DECLARE line2 TINYINT UNSIGNED;
   DECLARE style3 CHAR(1);
   DECLARE line3 TINYINT UNSIGNED;
   DECLARE style4 CHAR(1);
   DECLARE line4 TINYINT UNSIGNED;
   DECLARE style_use CHAR(1);
   DECLARE style5 CHAR(1);
   DECLARE line5 TINYINT UNSIGNED;
   DECLARE line_use TINYINT UNSIGNED;

   DECLARE rate0 CHAR(6);
   DECLARE rate_a0 CHAR(6);
   DECLARE rate_x0 CHAR(6);
   DECLARE rate_a_x0 CHAR(6);
   DECLARE rate1 CHAR(6);
   DECLARE rate_a1 CHAR(6);
   DECLARE rate_x1 CHAR(6);
   DECLARE rate_a_x1 CHAR(6);
   DECLARE rate2 CHAR(6);
   DECLARE rate_a2 CHAR(6);
   DECLARE rate_x2 CHAR(6);
   DECLARE rate_a_x2 CHAR(6);
   DECLARE rate3 CHAR(6);
   DECLARE rate_a3 CHAR(6);
   DECLARE rate_x3 CHAR(6);
   DECLARE rate_a_x3 CHAR(6);
   DECLARE rate4 CHAR(6);
   DECLARE rate_a4 CHAR(6);
   DECLARE rate_x4 CHAR(6);
   DECLARE rate_a_x4 CHAR(6);
   DECLARE rate5 CHAR(6);
   DECLARE rate_a5 CHAR(6);
   DECLARE rate_x5 CHAR(6);
   DECLARE rate_a_x5 CHAR(6);

   DECLARE rate_seat0 CHAR(6);
   DECLARE rate_seat_x0 CHAR(6);
   DECLARE rate_seat_a0 CHAR(6);
   DECLARE rate_seat_a_x0 CHAR(6);
   DECLARE rate_seat1 CHAR(6);
   DECLARE rate_seat_x1 CHAR(6);
   DECLARE rate_seat_a1 CHAR(6);
   DECLARE rate_seat_a_x1 CHAR(6);
   DECLARE rate_seat2 CHAR(6);
   DECLARE rate_seat_x2 CHAR(6);
   DECLARE rate_seat_a2 CHAR(6);
   DECLARE rate_seat_a_x2 CHAR(6);
   DECLARE rate_seat3 CHAR(6);
   DECLARE rate_seat_x3 CHAR(6);
   DECLARE rate_seat_a3 CHAR(6);
   DECLARE rate_seat_a_x3 CHAR(6);
   DECLARE rate_seat4 CHAR(6);
   DECLARE rate_seat_x4 CHAR(6);
   DECLARE rate_seat_a4 CHAR(6);
   DECLARE rate_seat_a_x4 CHAR(6);
   DECLARE rate_seat5 CHAR(6);
   DECLARE rate_seat_x5 CHAR(6);
   DECLARE rate_seat_a5 CHAR(6);
   DECLARE rate_seat_a_x5 CHAR(6);

   DECLARE rate_seat_use CHAR(6);
   DECLARE rate_seat DECIMAL(4,3);
   DECLARE rate_seat_a_use CHAR(6);
   DECLARE rate_seat_a DECIMAL(4,3);
   DECLARE rate_seat_aa_use CHAR(6);
   DECLARE rate_seat_aa DECIMAL(4,3);
   DECLARE rate_use CHAR(6);
   DECLARE rate DECIMAL(4,3);
   DECLARE rate_a_use CHAR(6);
   DECLARE rate_a DECIMAL(4,3);
   DECLARE rate_aa_use CHAR(6);
   DECLARE rate_aa DECIMAL(4,3);
   DECLARE rate_to_400 DECIMAL(4,3);
   DECLARE d_0 SMALLINT;
   DECLARE dd_0 SMALLINT;
   DECLARE d_free0 SMALLINT;
   DECLARE d_free SMALLINT;
   DECLARE d_1 SMALLINT;
   DECLARE dd_1 SMALLINT;
   DECLARE d_free1 SMALLINT;
   DECLARE d_seat SMALLINT;
   DECLARE d_2 SMALLINT;
   DECLARE dd_2 SMALLINT;
   DECLARE d_free2 SMALLINT;
   DECLARE dd_seat SMALLINT;
   DECLARE d_3 SMALLINT;
   DECLARE dd_3 SMALLINT;
   DECLARE d_free3 SMALLINT;
   DECLARE d_bed SMALLINT;
   DECLARE d_4 SMALLINT;
   DECLARE dd_4 SMALLINT;
   DECLARE d_free4 SMALLINT;
   DECLARE d_relay SMALLINT;
   DECLARE d_5 SMALLINT;
   DECLARE dd_5 SMALLINT;
   DECLARE d_free5 SMALLINT;
   DECLARE d_total SMALLINT;
   DECLARE d_use SMALLINT;
   DECLARE dd_use SMALLINT;
   DECLARE d_tmp INT;
   DECLARE p_0 SMALLINT;
   DECLARE p_basic_seat0 SMALLINT;
   DECLARE p_relay_fast0 SMALLINT;
   DECLARE p_1 SMALLINT;
   DECLARE p_basic_seat1 SMALLINT;
   DECLARE p_relay_fast1 SMALLINT;
   DECLARE p_2 SMALLINT;
   DECLARE p_basic_seat2 SMALLINT;
   DECLARE p_relay_fast2 SMALLINT;
   DECLARE p_3 SMALLINT;
   DECLARE p_basic_seat3 SMALLINT;
   DECLARE p_relay_fast3 SMALLINT;
   DECLARE p_4 SMALLINT;
   DECLARE p_basic_seat4 SMALLINT;
   DECLARE p_relay_fast4 SMALLINT;
   DECLARE p_5 SMALLINT;
   DECLARE p_basic_seat5 SMALLINT;
   DECLARE p_relay_fast5 SMALLINT;
   DECLARE p_float SMALLINT;
   DECLARE p_basic SMALLINT;
   DECLARE p_add SMALLINT;
   DECLARE p_float_seat SMALLINT;
   DECLARE p_basic_seat SMALLINT;
   DECLARE p_float_bed SMALLINT;
   DECLARE p_basic_bed SMALLINT;
   DECLARE p_paper SMALLINT;
   DECLARE p_float_fast SMALLINT;
   DECLARE p_basic_fast SMALLINT;
   DECLARE p_bed_reserve SMALLINT;
   DECLARE p_float_air SMALLINT;
   DECLARE p_basic_air SMALLINT;
   DECLARE p_relay SMALLINT;
   DECLARE p_float_new SMALLINT;
   DECLARE p_float_total SMALLINT;
   DECLARE p_total SMALLINT;

   DECLARE paper CHAR(1);
   DECLARE st_air CHAR(1);
   DECLARE times SMALLINT;
   DECLARE p_tmp INT;
   DECLARE p_000 INT;
   DECLARE p_fast_900 INT;
   DECLARE gz_version TINYINT UNSIGNED;
   DECLARE p_p_bed_only TINYINT UNSIGNED;
   DECLARE p_basic_tmp SMALLINT;
   DECLARE p_000_tmp SMALLINT;
   DECLARE p_p_time INT;


   DECLARE p_base_seat SMALLINT;
   DECLARE p_base_fast SMALLINT;

   DECLARE p_1_0 SMALLINT;
   DECLARE p_2_0 SMALLINT;
   DECLARE p_3_0 SMALLINT;
   DECLARE p_4_0 SMALLINT;
   DECLARE p_5_0 SMALLINT;
   DECLARE break TINYINT UNSIGNED;
   DECLARE p_diff SMALLINT;
   DECLARE p_state SMALLINT;
   DECLARE p_basic_state SMALLINT;

   DECLARE discount_rate DECIMAL(4,3);
   DECLARE left_start_date INT;
   DECLARE left_end_date INT;
   DECLARE left_start_time INT;
   DECLARE left_end_time INT;
   DECLARE current_date2 CHAR(8);
   DECLARE start_time CHAR(4);
   DECLARE end_time CHAR(4);
   DECLARE l_start_time CHAR(4);
   DECLARE l_end_time CHAR(4);
   DECLARE diff1 TINYINT UNSIGNED;
   DECLARE diff2 TINYINT UNSIGNED;
   DECLARE diff TINYINT UNSIGNED;
   DECLARE p_bed SMALLINT;


   DECLARE basic_rate DECIMAL(4,3); 
   DECLARE p_basic_discount SMALLINT;

   DECLARE p_tmp_seat INT;  
   DECLARE p_tmp_fast INT;  
   DECLARE p_111 INT;  
   DECLARE p_222 INT;  

   DECLARE p_basic_fast_0 INT; 
   DECLARE p_basic_seat_0 INT; 
   DECLARE p_basic_air_0 INT; 
   DECLARE p_base_seat_total INT;   
   DECLARE p_basic_seat5_0 INT;
   DECLARE p_basic_fast5_0 INT;
   DECLARE p_basic_air5_0 INT; 
   DECLARE p_basic_seat4_0 INT;
   DECLARE p_basic_fast4_0 INT;
   DECLARE p_basic_air4_0 INT;
   DECLARE p_basic_seat3_0 INT;
   DECLARE p_basic_fast3_0 INT;
   DECLARE p_basic_air3_0 INT;
   DECLARE p_basic_seat2_0 INT;
   DECLARE p_basic_fast2_0 INT;
   DECLARE p_basic_air2_0 INT;
   DECLARE p_basic_seat1_0 INT;
   DECLARE p_basic_fast1_0 INT;
   DECLARE p_basic_air1_0 INT;
   DECLARE p_basic_seat0_0 INT;
   DECLARE p_basic_fast0_0 INT;
   DECLARE p_basic_air0_0 INT;

   DECLARE p_total_fast INT;
   DECLARE p_new_total_fast INT;

   DECLARE temp_preference_style CHAR(1);
   DECLARE temp_preference_rate DECIMAL(4,2);
   DECLARE error_code SMALLINT;

   DECLARE discount_flag CHAR(1);

   DECLARE train_class_rate DECIMAL(4,2);
   DECLARE train_class1_rate DECIMAL(4,2);
   DECLARE train_class2_rate DECIMAL(4,2);

   DECLARE qz_distance SMALLINT;

   DECLARE start_station_name CHAR(10);
   DECLARE end_station_name CHAR(10);
   DECLARE gj_preference CHAR(6);
   DECLARE rate_exchange CHAR(6);
   DECLARE rate_exchange_HK DECIMAL(5,3);

   DECLARE sp_id SMALLINT;


   DECLARE p_float_seat0 SMALLINT;
   DECLARE p_seat0 SMALLINT;
   DECLARE p_float_seat1 SMALLINT;
   DECLARE p_seat1 SMALLINT;
   DECLARE p_float_seat2 SMALLINT;
   DECLARE p_seat2 SMALLINT;
   DECLARE p_float_seat3 SMALLINT;
   DECLARE p_seat3 SMALLINT;
   DECLARE p_float_seat4 SMALLINT;
   DECLARE p_seat4 SMALLINT;
   DECLARE p_float_seat5 SMALLINT;
   DECLARE p_seat5 SMALLINT;
   DECLARE p_seat_total SMALLINT;


   DECLARE d_real_free SMALLINT; 


   DECLARE tax_rate DECIMAL(5,4);
   DECLARE error INT;
   DECLARE rowcount INT;

   DECLARE discount_seat_type CHAR(1);
   DECLARE discount_bed_level CHAR(1);
   DECLARE sleeper_style CHAR(1);
   DECLARE sleeper_rate DECIMAL(4,3);

   DECLARE ls_train_no_part CHAR(6);
   DECLARE belong_seat_type_code CHAR(1);
   DECLARE tmp_rate_z DECIMAL(4,3);
   DECLARE tmp_rate_w DECIMAL(4,3);
   DECLARE tmp_add_price SMALLINT;                         
   DECLARE insurance_price DECIMAL(6,2);
   DECLARE insurance_price1 SMALLINT;
   DECLARE insurance_price2 SMALLINT;
   DECLARE insurance_price3 SMALLINT;
   DECLARE insurance_price4 SMALLINT;
   DECLARE insurance_price5 SMALLINT;
   DECLARE error_no INT;
   DECLARE SWV_train_code_Str VARCHAR(255);
   DECLARE belong_line1_relay CHAR(1);
   DECLARE belong_line2_relay CHAR(1);
   DECLARE belong_line3_relay CHAR(1);
   DECLARE belong_line4_relay CHAR(1);
   DECLARE belong_line5_relay CHAR(1);
   declare call_pr_return_code smallint;
 
   BEGIN
      SET @SWV_Error = 1;
   END;

   
   PRICING_FINISH:loop
   BEGIN
      
         IF special_visa is null then
            set special_visa = 0;
         END IF;
         IF relay_ticket_type is null then
            set relay_ticket_type = 0;
         END IF;
         IF preference_style is null then
            set preference_style = '0';
         END IF;
         IF preference_rate is null then
            set preference_rate = 0;
         END IF;
         IF preference_flag is null then
            set preference_flag = '0';
         END IF;
         IF distance is null then
            set distance = 0;
         END IF;
         
         IF ticket_price is null then
            set ticket_price = 0;
         END IF;
         IF belong_line1 is null then
            set belong_line1 = 0;
         END IF;
         IF distance1 is null then
            set distance1 = 0;
         END IF;
         IF ticket_price1 is null then
            set ticket_price1 = 0;
         END IF;
         IF belong_line2 is null then
            set belong_line2 = 0;
         END IF;
         IF distance2 is null then
            set distance2 = 0;
         END IF;
         IF ticket_price2 is null then
            set ticket_price2 = 0;
         END IF;
         IF belong_line3 is null then
            set belong_line3 = 0;
         END IF;
         IF distance3 is null then
            set distance3 = 0;
         END IF;
         IF ticket_price3 is null then
            set ticket_price3 = 0;
         END IF;
         IF belong_line4 is null then
            set belong_line4 = 0;
         END IF;
         IF distance4 is null then
            set distance4 = 0;
         END IF;
         IF ticket_price4 is null then
            set ticket_price4 = 0;
         END IF;
         IF belong_line5 is null then
            set belong_line5 = 0;
         END IF;
         IF distance5 is null then
            set distance5 = 0;
         END IF;
         IF ticket_price5 is null then
            set ticket_price5 = 0;
         END IF;
         IF relay_distance is null then
            set relay_distance = 0;
         END IF;
         IF relay_price is null then
            set relay_price = 0;
         END IF;
         IF addition_cost is null then
            set addition_cost = 0;
         END IF;
         IF bed_reserve_cost is null then
            set bed_reserve_cost = 0;
         END IF;
         IF service_cost is null then
            set service_cost = 0;
         END IF;
         IF air_condition_price is null then
            set air_condition_price = 0;
         END IF;
         IF train_air_condition is null then
            set train_air_condition = 0;
         END IF;
         IF total_base_price is null then
            set total_base_price = 0;
         END IF;
         IF price1_difference is null then
            set price1_difference = 0;
         END IF;
         IF price2_difference is null then
            set price2_difference = 0;
         END IF;
         IF price3_difference is null then
            set price3_difference = 0;
         END IF;
         IF price4_difference is null then
            set price4_difference = 0;
         END IF;
         IF price5_difference is null then
            set price5_difference = 0;
         END IF;
         IF discount is null then
            set discount = 0;
         END IF;
         IF agent_fee is null then
            set agent_fee = 0;
         END IF;
         IF preference_price is null then
            set preference_price = 0;
         END IF;
         IF basic_price is null then
            set basic_price = 0;
         END IF;
         IF ticket_price_obtion is null then
            set ticket_price_obtion = 0;
         END IF;
         IF preference_word is null then
            set preference_word = '';
         END IF;
         IF qz_add_price is null then
            set qz_add_price = 0;
         END IF;
         IF output2 is null then
            set output2 = 0;
         END IF;
         SET p_float_seat0 = 0;
         SET p_seat0 = 0;
         SET p_float_seat1 = 0;
         SET p_seat1 = 0;
         SET p_float_seat2 = 0;
         SET p_seat2 = 0;
         SET p_float_seat3 = 0;
         SET p_seat3 = 0;
         SET p_float_seat4 = 0;
         SET p_seat4 = 0;
         SET p_float_seat5 = 0;
         SET p_seat5 = 0;
         SET p_seat_total = 0;
         SET discount_flag = '0';
         SET temp_preference_style = '0';
         SET temp_preference_rate = 0;
         SET error_code = 0;
         SET train_class_rate = 0;
         SET train_class2_rate = 0;
         SET train_class2_rate = 0;
         SET p_total_fast = 0;
         SET p_new_total_fast = 0;
         SET p_basic_fast_0 = 0;
         SET p_basic_seat_0 = 0;
         SET p_basic_air_0 = 0;
         SET p_base_seat_total = 0;
         SET p_basic_seat5_0 = 0;
         SET p_basic_fast5_0 = 0;
         SET p_basic_air5_0 = 0;
         SET p_basic_seat4_0 = 0;
         SET p_basic_fast4_0 = 0;
         SET p_basic_air4_0 = 0;
         SET p_basic_seat3_0 = 0;
         SET p_basic_fast3_0 = 0;
         SET p_basic_air3_0 = 0;
         SET p_basic_seat2_0 = 0;
         SET p_basic_fast2_0 = 0;
         SET p_basic_air2_0 = 0;
         SET p_basic_seat1_0 = 0;
         SET p_basic_fast1_0 = 0;
         SET p_basic_air1_0 = 0;
         SET p_basic_seat0_0 = 0;
         SET p_basic_fast0_0 = 0;
         SET p_basic_air0_0 = 0;


         SET basic_rate = 0;
         SET p_basic_discount = 0;
         SET p_tmp_seat = 0;
         SET p_tmp_fast = 0;
         SET p_111 = 0;
         SET p_222 = 0;

         SET p_float = 0;
         SET p_float_seat = 0;
         SET p_float_bed = 0;
         SET p_float_fast = 0;
         SET p_float_air = 0;
         SET p_float_new = 0;
         SET p_float_total = 0;
         SET rate0 = '0';
         SET rate_a0 = '0';
         SET rate_x0 = '0';
         SET rate_a_x0 = '0';
         SET rate1 = '0';
         SET rate_a1 = '0';
         SET rate_x1 = '0';
         SET rate_a_x1 = '0';
         SET rate2 = '0';
         SET rate_a2 = '0';
         SET rate_x2 = '0';
         SET rate_a_x2 = '0';
         SET rate3 = '0';
         SET rate_a3 = '0';
         SET rate_x3 = '0';
         SET rate_a_x3 = '0';
         SET rate4 = '0';
         SET rate_a4 = '0';
         SET rate_x4 = '0';
         SET rate_a_x4 = '0';
         SET rate5 = '0';
         SET rate_a5 = '0';
         SET rate_x5 = '0';
         SET rate_a_x5 = '0';
         SET rate_seat0 = '0';
         SET rate_seat_x0 = '0';
         SET rate_seat_a0 = '0';
         SET rate_seat_a_x0 = '0';
         SET rate_seat1 = '0';
         SET rate_seat_x1 = '0';
         SET rate_seat_a1 = '0';
         SET rate_seat_a_x1 = '0';
         SET rate_seat2 = '0';
         SET rate_seat_x2 = '0';
         SET rate_seat_a2 = '0';
         SET rate_seat_a_x2 = '0';
         SET rate_seat3 = '0';
         SET rate_seat_x3 = '0';
         SET rate_seat_a3 = '0';
         SET rate_seat_a_x3 = '0';
         SET rate_seat4 = '0';
         SET rate_seat_x4 = '0';
         SET rate_seat_a4 = '0';
         SET rate_seat_a_x4 = '0';

         set transaction isolation level read unCOMMITTED;
         SET p_p_time = -1;

         if relay_ticket_type = 2 then 
            SET relay_ticket_type = 9;
         end if;
         SET gz_version = 1;
         SET ticket_type_power = power(2,ticket_type -1);
         if ticket_type in(5,6,8,9) then 
            SET relay_ticket_type = 9;
         end if;
         if relay_ticket_type = 2 then 
            SET relay_ticket_type = 9;
            SET special_visa = 255;
         else 
            if relay_ticket_type = 8 then 
               SET relay_ticket_type = 2;
            end if;
         end if;
  if output2=2 then
    select '101===';
  end if;

         SET subbureau_code = SUBSTRING(train_no,1,2);
         SET train_code = SUBSTRING(train_no,3,8);
         SET double_id = SUBSTRING(train_no,11,1);
         SET schema_id = SUBSTRING(train_no,12,1);
         WHILE SUBSTRING(train_code,1,1) = '0' DO
            SET SWV_train_code_Str = SUBSTRING(train_code,2,LENGTH(train_code) -1);
            SET train_code = SWV_train_code_Str;
         END WHILE;
   if output2=2 then
    select '101_1===';
  end if;

         select   stop_time.start_date, stop_time.stop_date, stop_time.day_difference INTO start_date,stop_date,day_diff 
   from basic.stop_time 
  where stop_time.train_no = train_no and 
   stop_time.station_no = start_station_no and
   (DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date and
           DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date)   LIMIT 1;

         if ROW_COUNT() = 0 then

            SET ticket_price = -2;
            SET SWP_Ret_Value = -2;
            LEAVE SWL_return;
         end if;
   if output2=2 then
    select '101_2===';
  end if;
         SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(day_diff as signed),STR_TO_DATE(train_date,'%Y%m%d')),'%Y%m%d');
         if not(start_date <= start_train_date and stop_date >= start_train_date) then

            SET ticket_price = -3;
            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;
   if output2=2 then
    select '101_3===';
  end if;

         select   train_dir.train_class_code, train_dir.price_style, 
   train_dir.belong_line1, train_dir.price_style1, 
  train_dir.belong_line2, train_dir.price_style2, 
  train_dir.belong_line3, train_dir.price_style3, 
  train_dir.belong_line4, train_dir.price_style4, 
  train_dir.belong_line5, train_dir.price_style5, 
  train_dir.service_type, train_dir.start_station_name, 
  train_dir.end_station_name 
  INTO train_class,style0,
   line1,style1,
  line2,style2,
  line3,style3,
  line4,style4,
          line5,style5,
  service_type,start_station_name,
  end_station_name 
  from basic.train_dir 
  where train_dir.subbureau_code = subbureau_code and train_dir.train_code = train_code
          and train_dir.double_id = double_id and train_dir.schema_id = schema_id
          and train_dir.start_date <= start_train_date and train_dir.stop_date >= start_train_date  
   LIMIT 1;
  
  if output2=2 then
    select '102===';
  end if;
  
         if ROW_COUNT() = 0 then

            SET ticket_price = -10;
            SET SWP_Ret_Value = -10;
            LEAVE SWL_return;
         end if;
         if train_class = '6' then 
            SET train_class = '4';
         end if;
         SET d_free = -1;
         if d_free = 0 then

            select   stop_time.station_name INTO from_station_name 
     from basic.stop_time 
     where stop_time.train_no = train_no and stop_time.station_no = start_station_no
             and stop_time.start_date <= start_train_date 
  and stop_time.stop_date >= start_train_date   LIMIT 1;
            if ROW_COUNT() = 0 then
  
               SET ticket_price = -20;
               SET SWP_Ret_Value = -20;
               LEAVE SWL_return;
            end if;
            select   stop_time.station_name INTO to_station_name 
     from basic.stop_time 
     where stop_time.train_no = train_no and stop_time.station_no = to_station_no
             and stop_time.start_date <= start_train_date 
  and stop_time.stop_date >= start_train_date   LIMIT 1;
            if ROW_COUNT() = 0 then
  
               SET ticket_price = -25;
               SET SWP_Ret_Value = -25;
               LEAVE SWL_return;
            end if;
            select   max(stop_time.station_no) INTO start_station_no 
     from basic.stop_time 
     where stop_time.train_no = train_no and stop_time.station_no < to_station_no
             and stop_time.start_date <= start_train_date 
  and stop_time.stop_date >= start_train_date
             and stop_time.station_name = from_station_name   LIMIT 1;
            select   min(stop_time.station_no) INTO to_station_no 
     from basic.stop_time 
     where stop_time.train_no = train_no and stop_time.station_no > start_station_no
             and stop_time.start_date <= start_train_date and stop_time.stop_date >= start_train_date
             and stop_time.station_name = to_station_name   LIMIT 1;
         end if;
   if output2=2 then
    select '103===';
  end if;

         SET d_0 = 0;
         SET d_1 = 0;
         SET d_2 = 0;
         SET d_3 = 0;
         SET d_4 = 0;
         SET d_5 = 0;
         select   stop_time.station_name, 
   IFNULL(stop_time.distance,0), IFNULL(stop_time.distance1,0), 
  IFNULL(stop_time.distance2,0), IFNULL(stop_time.distance3,0), 
  IFNULL(stop_time.distance4,0), IFNULL(stop_time.distance5,0) 
  INTO from_station_name,d_0,d_1,d_2,d_3,d_4,d_5 
  from basic.stop_time 
  where stop_time.train_no = train_no and stop_time.station_no = start_station_no
          and stop_time.start_date <= start_train_date 
  and stop_time.stop_date >= start_train_date   LIMIT 1;
         if ROW_COUNT() = 0 then

            SET ticket_price = -21;
            SET SWP_Ret_Value = -21;
            LEAVE SWL_return;
         end if;
         select   stop_time.station_name, 
   IFNULL(stop_time.distance,0), IFNULL(stop_time.distance1,0), 
  IFNULL(stop_time.distance2,0), IFNULL(stop_time.distance3,0), 
  IFNULL(stop_time.distance4,0), IFNULL(stop_time.distance5,0) 
  INTO to_station_name,dd_0,dd_1,dd_2,dd_3,dd_4,dd_5 
  from basic.stop_time 
  where stop_time.train_no = train_no and station_no = to_station_no
          and stop_time.start_date <= start_train_date 
  and stop_time.stop_date >= start_train_date   LIMIT 1;
         if ROW_COUNT() = 0 then

            SET ticket_price = -26;
            SET SWP_Ret_Value = -26;
            LEAVE SWL_return;
         end if;
         SET d_0 = dd_0 -d_0;
         SET d_1 = dd_1 -d_1;
         SET d_2 = dd_2 -d_2;
         SET d_3 = dd_3 -d_3;
         SET d_4 = dd_4 -d_4;
         SET d_5 = dd_5 -d_5;
   if output2=2 then
    select '104===';
  end if;

         if preference_flag = '0' and preference_style not in('7','8','9','A','B','C','D') then

   if output2=2 then
    select '1===call arith.DG50_fetch_preference';
   end if;
            CALL arith.DG50_fetch_preference(train_date,
    train_no,start_station_no,to_station_no,
    seat_type_code,ticket_type_power,
             temp_preference_style,temp_preference_rate,error_code,0,call_pr_return_code);
   if output2=2 then
    select '1_1===end call arith.DG50_fetch_preference';
   end if;
            if error_code < 0 then
 
               SET ticket_price = error_code;
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            if temp_preference_rate <= preference_rate then
               SET preference_rate = temp_preference_rate;
               SET preference_style = temp_preference_style;
            end if;
         end if;
         if preference_flag = '0' and preference_style in('7','8','9','A','B','C','D') and ticket_type not in(2,4) then


            if not exists(select 1 from basic.CG52_train_dir_appendix where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag = '6') then
 
               SET ticket_price = -33; 
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            SET gj_preference = '';
            select   IFNULL(discount,'') INTO gj_preference 
     from basic.DG50_special_discount_define
     where DG50_special_discount_define.special_code = '3' and DG50_special_discount_define.discount_code = preference_style
             and DG50_special_discount_define.train_code = train_code and DG50_special_discount_define.start_station_name = start_station_name
             and DG50_special_discount_define.end_station_name = end_station_name
             and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
             and DG50_special_discount_define.start_date <= start_train_date 
  and DG50_special_discount_define.stop_date >= start_train_date  
    order by DG50_special_discount_define.seat_type_code LIMIT 1;
            if gj_preference = '' then
               select   IFNULL(DG50_special_discount_define.discount,'') INTO gj_preference 
        from basic.DG50_special_discount_define 
        where DG50_special_discount_define.special_code = '3' and DG50_special_discount_define.discount_code = preference_style
                 and DG50_special_discount_define.train_code = '%'
                 and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
                 and DG50_special_discount_define.start_date <= start_train_date 
   and DG50_special_discount_define.stop_date >= start_train_date   
        order by DG50_special_discount_define.seat_type_code LIMIT 1;
            end if;
            if gj_preference = '' then
               SET preference_rate = 0;
            else
               SET preference_rate = CAST(gj_preference AS DECIMAL(4,3)) -1.0;
            end if;
   if output2=2 then
    select '2===call arith.DG50_fetch_preference';
   end if;
            CALL arith.DG50_fetch_preference(train_date,
    train_no,start_station_no,to_station_no,
    seat_type_code,ticket_type_power,
             temp_preference_style,temp_preference_rate,error_code,0,call_pr_return_code);
   if output2=2 then
    select '2===end call arith.DG50_fetch_preference';
   end if;
            if error_code < 0 then
 
               SET ticket_price = error_code;
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            if temp_preference_rate <= preference_rate then
               SET preference_rate = temp_preference_rate;
               SET preference_style = temp_preference_style;
            end if;
         end if;
         if preference_flag = '1' and preference_style in('7','8','9','A','B','C','D') and ticket_type not in(2,4) then


            if not exists(select 1 from basic.CG52_train_dir_appendix where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag = '6') then
 
               SET ticket_price = -34; 
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            SET gj_preference = '';
            select   IFNULL(discount,'') INTO gj_preference 
     from basic.DG50_special_discount_define 
     where DG50_special_discount_define.special_code = '3' and DG50_special_discount_define.discount_code = preference_style
             and DG50_special_discount_define.train_code = train_code and DG50_special_discount_define.start_station_name = start_station_name
             and DG50_special_discount_define.end_station_name = end_station_name
             and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
             and DG50_special_discount_define.start_date <= start_train_date 
  and DG50_special_discount_define.stop_date >= start_train_date  
     order by DG50_special_discount_define.seat_type_code LIMIT 1;
            if gj_preference = '' then
               select   IFNULL(discount,'') INTO gj_preference 
        from basic.DG50_special_discount_define 
        where DG50_special_discount_define.special_code = '3' and DG50_special_discount_define.discount_code = preference_style
                 and DG50_special_discount_define.train_code = '%'
                 and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
                 and DG50_special_discount_define.start_date <= start_train_date 
   and DG50_special_discount_define.stop_date >= start_train_date   
        order by DG50_special_discount_define.seat_type_code LIMIT 1;
            end if;
            if gj_preference = '' then
               SET preference_rate = 0;
            else
               SET preference_rate = CAST(gj_preference AS DECIMAL(4,3)) -1.0;
            end if;
         end if;




         SET train_class1 = 'z';
         SET train_class2 = 'z';
         if train_class = '9' then

            select   multi_class_train.train_class1, multi_class_train.train_class2, multi_class_train.station_no 
     INTO train_class1,train_class2,change_station_no 
     from basic.multi_class_train 
     where multi_class_train.train_no = train_no
             and multi_class_train.start_date <= start_train_date 
   and multi_class_train.stop_date >= start_train_date   LIMIT 1;
            if ROW_COUNT() = 0 then
  
               SET ticket_price = -30;
               SET SWP_Ret_Value = -30;
               LEAVE SWL_return;
            end if;
            if start_station_no >= change_station_no then
  
               SET train_class = train_class2;
               SET dd_0 = 0;
               SET dd_1 = 0;
               SET dd_2 = 0;
               SET dd_3 = 0;
               SET dd_4 = 0;
               SET dd_5 = 0;
            end if;
            if to_station_no <= change_station_no then
  
               SET train_class = train_class1;
               SET dd_0 = 0;
               SET dd_1 = 0;
               SET dd_2 = 0;
               SET dd_3 = 0;
               SET dd_4 = 0;
               SET dd_5 = 0;
            end if;
            if start_station_no < change_station_no and to_station_no > change_station_no then
  
               select   dd_0 -IFNULL(stop_time.distance,0), 
          dd_1 -IFNULL(stop_time.distance1,0), 
   dd_2 -IFNULL(stop_time.distance2,0), 
   dd_3 -IFNULL(stop_time.distance3,0), 
   dd_4 -IFNULL(stop_time.distance4,0), 
   dd_5 -IFNULL(stop_time.distance5,0) 
        INTO dd_0,dd_1,dd_2,dd_3,dd_4,dd_5 
        from basic.stop_time 
        where stop_time.train_no = train_no 
          and stop_time.station_no = change_station_no
                 and stop_time.start_date <= start_train_date 
   and stop_time.stop_date >= start_train_date   LIMIT 1;
               if ROW_COUNT() = 0 then
    
                  SET ticket_price = -22;
                  SET SWP_Ret_Value = -22;
                  LEAVE SWL_return;
               end if;
            end if;
         else 
            SET dd_0 = 0;
            SET dd_1 = 0;
            SET dd_2 = 0;
            SET dd_3 = 0;
            SET dd_4 = 0;
            SET dd_5 = 0;
         end if;

         select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
   INTO train_class_rate 
  from basic.DG50_train_class_rate 
  where DG50_train_class_rate.train_class_code = train_class   LIMIT 1;
         if train_class1 <> 'z' and train_class2 <> 'z' then

            select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
     INTO train_class1_rate 
     from basic.DG50_train_class_rate 
     where DG50_train_class_rate.train_class_code = train_class1   LIMIT 1;
            
     select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
     INTO train_class2_rate 
     from basic.DG50_train_class_rate 
     where DG50_train_class_rate.train_class_code = train_class2   LIMIT 1;
         end if;

         if train_class = '0' or train_class = '1' then 
            SET train_class = '2';
         end if;
         if train_class1 = '0' or train_class1 = '1' then 
            SET train_class1 = '2';
         end if;
         if train_class2 = '0' or train_class2 = '1' then 
            SET train_class2 = '2';
         end if;

 FREE_END:loop
 BEGIN    
         if EXISTS(SELECT 1 FROM basic.CG30_free_distance
          where CG30_free_distance.train_no = train_no 
   and CG30_free_distance.start_date <= start_train_date 
   and CG30_free_distance.stop_date >= start_train_date) then

            SET sp_id = CONNECTION_ID()%30000;
     
 
            delete from basic.DG50_free_distance
            where DG50_free_distance.sp_id = sp_id 
      and DG50_free_distance.train_no = train_no 
  and DG50_free_distance.start_date <= start_train_date 
  and DG50_free_distance.stop_date >= start_train_date;
            insert into basic.DG50_free_distance
             select CG30_free_distance.start_date, CG30_free_distance.stop_date, 
   CG30_free_distance.train_no, CG30_free_distance.station_name, 
   CG30_free_distance.free_distance, 
   CG30_free_distance.origin ,sp_id
             from basic.CG30_free_distance
             where CG30_free_distance.train_no = train_no
              and CG30_free_distance.start_date <= start_train_date 
   and CG30_free_distance.stop_date >= start_train_date;
     
     
      
            while EXISTS(SELECT 1 FROM basic.DG50_free_distance 
       WHERE DG50_free_distance.sp_id = sp_id 
    and DG50_free_distance.train_no = train_no) DO
               select   DG50_free_distance.free_distance, DG50_free_distance.station_name 
        INTO d_free,free_station_name 
        from basic.DG50_free_distance 
        where DG50_free_distance.sp_id = sp_id 
          and DG50_free_distance.train_no = train_no   
        LIMIT 1;
        
               delete from basic.DG50_free_distance LIMIT 1;
               SET d_real_free = 0;
               if d_free > 0 then
  
                  select   stop_time.station_no, 
     IFNULL(stop_time.distance,0), 
   IFNULL(stop_time.distance1,0), 
   IFNULL(stop_time.distance2,0), 
   IFNULL(stop_time.distance3,0), 
   IFNULL(stop_time.distance4,0), 
   IFNULL(stop_time.distance5,0) 
    INTO free_station_no,d_free0,
     d_free1,d_free2,d_free3,
   d_free4,d_free5 
    from basic.stop_time 
    where stop_time.train_no = train_no 
     and stop_time.station_name = free_station_name
                   and stop_time.station_no > start_station_no 
   and stop_time.station_no < to_station_no
                   and stop_time.start_date <= start_train_date 
   and stop_time.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     LEAVE FREE_END;
                  end if;
                  select   d_free0 -IFNULL(distance,0), 
     d_free1 -IFNULL(distance1,0), 
   d_free2 -IFNULL(distance2,0), 
   d_free3 -IFNULL(distance3,0), 
   d_free4 -IFNULL(distance4,0), 
   d_free5 -IFNULL(distance5,0) 
    INTO d_free0,d_free1,
     d_free2,d_free3,
   d_free4,d_free5 
    from basic.stop_time 
    where train_no = train_no 
     and station_no = start_station_no
                   and start_date <= start_train_date 
   and stop_date >= start_train_date   
    LIMIT 1;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
                  SET d_real_free = 0;
                  if d_free0 > 0 and d_free0 < d_0 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free0 then 
                        SET d_real_free = d_free0;
                     end if;
                     if d_real_free > d_0 -d_free0 then 
                        SET d_real_free = d_0 -d_free0;
                     end if;
                     SET d_0 = d_0 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_0 = dd_0 -2*d_real_free;
                     end if;
                  end if;
                  if d_free1 > 0 and d_free1 < d_1 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free1 then 
                        SET d_real_free = d_free1;
                     end if;
                     if d_real_free > d_1 -d_free1 then 
                        SET d_real_free = d_1 -d_free1;
                     end if;
                     SET d_1 = d_1 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_1 = dd_1 -2*d_real_free;
                     end if;
                  end if;
                  if d_free2 > 0 and d_free2 < d_2 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free2 then 
                        SET d_real_free = d_free2;
                     end if;
                     if d_real_free > d_2 -d_free2 then 
                        SET d_real_free = d_2 -d_free2;
                     end if;
                     SET d_2 = d_2 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_1 = dd_2 -2*d_real_free;
                     end if;
                  end if;
                  if d_free3 > 0 and d_free3 < d_3 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free3 then 
                        SET d_real_free = d_free3;
                     end if;
                     if d_real_free > d_3 -d_free3 then 
                        SET d_real_free = d_3 -d_free3;
                     end if;
                     SET d_3 = d_3 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_3 = dd_3 -2*d_real_free;
                     end if;
                  end if;
                  if d_free4 > 0 and d_free4 < d_4 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free4 then 
                        SET d_real_free = d_free4;
                     end if;
                     if d_real_free > d_4 -d_free4 then 
                        SET d_real_free = d_4 -d_free4;
                     end if;
                     SET d_4 = d_4 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_4 = dd_4 -2*d_real_free;
                     end if;
                  end if;
                  if d_free5 > 0 and d_free5 < d_5 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free5 then 
                        SET d_real_free = d_free5;
                     end if;
                     if d_real_free > d_5 -d_free5 then 
                        SET d_real_free = d_5 -d_free5;
                     end if;
                     SET d_5 = d_5 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_5 = dd_5 -2*d_real_free;
                     end if;
                  end if;
               end if;
            END WHILE;
     
     
         end if;
  end;
  leave FREE_END;
  END loop FREE_END;
      
   
      SET d_total = d_0+d_1+d_2+d_3+d_4+d_5;
      SET distance = d_total;


      SET error_code = 0;
      SET sleeper_style = '0';
      SET sleeper_rate = 0;
      SET discount_seat_type = '';
      SET discount_bed_level = '';
   if output2=2 then
    select '3===call arith.DG50_fetch_sleeper_discount';
  end if;
      CALL arith.DG50_fetch_sleeper_discount(train_date,train_no,
       start_station_no,to_station_no,
 distance,seat_type_code,
       bed_level,ticket_type_power,
 sleeper_style,sleeper_rate,
 discount_seat_type,
      discount_bed_level,error_code,0);
   if output2=2 then
    select '3===end call arith.DG50_fetch_sleeper_discount';
  end if;

      if sleeper_style = 'E' then

         SET seat_type_code = discount_seat_type;
         SET bed_level = discount_bed_level;
      end if;



      select   CG30_price_migrate.co_train_date, CG30_price_migrate.co_train_no, 
       CG30_price_migrate.co_seat_type 
      INTO co_train_date,co_train_no,co_seat_type 
      from basic.CG30_price_migrate 
      where CG30_price_migrate.train_no = train_no
       and CG30_price_migrate.start_date <= start_train_date 
 and CG30_price_migrate.stop_date >= start_train_date
       and CG30_price_migrate.seat_type in(seat_type_code,'z')
       and CG30_price_migrate.ticket_type & ticket_type_power = ticket_type_power
       and power(2,TIMESTAMPDIFF(DAY,STR_TO_DATE(CG30_price_migrate.start_date,'%Y%m%d'),STR_TO_DATE(train_date,'%Y%m%d'))%CG30_price_migrate.running_style) & CG30_price_migrate.running_rule
        = power(2,TIMESTAMPDIFF(DAY,STR_TO_DATE(CG30_price_migrate.start_date,'%Y%m%d'),STR_TO_DATE(train_date,'%Y%m%d'))%CG30_price_migrate.running_style)   
 order by CG30_price_migrate.seat_type LIMIT 1;
      if ROW_COUNT() = 1 then

         if co_seat_type < 'z' then 
            SET seat_type_code = co_seat_type;
         end if;
         if co_train_date < '99999999' then 
            SET start_train_date = co_train_date;
         end if;
         if train_no <> co_train_no then
  
            SET train_no = co_train_no;
    
            SET subbureau_code = SUBSTRING(train_no,1,2);
            SET train_code = SUBSTRING(train_no,3,8);
            SET double_id = SUBSTRING(train_no,11,1);
            SET schema_id = SUBSTRING(train_no,12,1);
            WHILE SUBSTRING(train_code,1,1) = '0' DO
               SET SWV_train_code_Str = SUBSTRING(train_code,2,LENGTH(train_code) -1);
               SET train_code = SWV_train_code_Str;
            END WHILE;
    
            select   train_dir.price_style, train_dir.price_style1, train_dir.price_style2, train_dir.price_style3, train_dir.price_style4, train_dir.price_style5 INTO style0,style1,style2,style3,style4,style5 
     from basic.train_dir 
     where train_dir.subbureau_code = train_dir.subbureau_code and train_dir.train_code = train_code
             and train_dir.double_id = double_id and train_dir.schema_id = schema_id
            and train_dir.start_date <= start_train_date and train_dir.stop_date >= start_train_date   LIMIT 1;
            if ROW_COUNT() = 0 then
    
               SET ticket_price = -32;
               SET SWP_Ret_Value = -32;
               LEAVE SWL_return;
            end if;
         end if;
      end if;

      SET d_seat = d_0;
      SET dd_seat = dd_0;
      SET d_bed = d_0;
      IF style1 in('2','3') then 
         SET d_seat = d_seat+d_1;
         SET dd_seat = dd_seat+dd_1;
         SET d_bed = d_bed+d_1;
      end if;
      IF style2 in('2','3') then 
         SET d_seat = d_seat+d_2;
         SET dd_seat = dd_seat+dd_2;
         SET d_bed = d_bed+d_2;
      end if;
      IF style3 in('2','3') then 
         SET d_seat = d_seat+d_3;
         SET dd_seat = dd_seat+dd_3;
         SET d_bed = d_bed+d_3;
      end if;
      IF style4 in('2','3') then 
         SET d_seat = d_seat+d_4;
         SET dd_seat = dd_seat+dd_4;
         SET d_bed = d_bed+d_4;
      end if;
      IF style5 in('2','3') then 
         SET d_seat = d_seat+d_5;
         SET dd_seat = dd_seat+dd_5;
         SET d_bed = d_bed+d_5;
      end if;
      IF style1 in('5','6','8','9') then 
         SET d_bed = d_bed+d_1;
      end if;
      IF style2 in('5','6','8','9') then 
         SET d_bed = d_bed+d_2;
      end if;
      IF style3 in('5','6','8','9') then 
         SET d_bed = d_bed+d_3;
      end if;
      IF style4 in('5','6','8','9') then 
         SET d_bed = d_bed+d_4;
      end if;
      IF style5 in('5','6','8','9') then 
         SET d_bed = d_bed+d_5;
      end if;

      SET s_seat1 = 0;
      SET s_seat2 = 0;
      SET s_u = 0;
      SET s_m = 0;
      SET s_d = 0;
      SET s_su = 0;
      SET s_sd = 0;
      SET s_hu = 0;
      SET s_hd = 0;
      SET s_shu = 0;
      SET s_shd = 0;
      SET s_bed = 0;

      SET student = 1;
      SET child = 1;
      SET half = 1;
      SET bed_only = 1;
      SET home = 1;
      SET free = 1;
      SET small_child = 0;
      SET tmp_ticket_type = ticket_type;
   if output2=2 then
    select '4===call arith.CG40_price_para';
  end if;
      CALL arith.CG40_price_para(seat_type_code,
       bed_level,
       tmp_ticket_type, 
      0,
       s_seat1,
 s_seat2,
 s_u,
 s_m,
 s_d,
       s_su,
 s_sd,
 s_hu,
 s_hd,
 s_shu,
 s_shd,
 s_bed,
 child,
 student,
 half,
 free,
 home,
 bed_only,
       small_child);
   if output2=2 then
    select '4_1===end call arith.CG40_price_para',train_no;
  end if;

      SET rate0 = '0';
      SET rate_a0 = '0';
      SET rate1 = '0';
      SET rate_a1 = '0';
      SET rate2 = '0';
      SET rate_a2 = '0';
      SET rate3 = '0';
      SET rate_a3 = '0';
      SET rate4 = '0';
      SET rate_a4 = '0';
      SET rate5 = '0';
      SET rate_a5 = '0';
      select   IFNULL(CG30_price_rate.price_add,0), 
        IFNULL(CG30_price_rate.st_air,'0'), 
  IFNULL(CG30_price_rate.paper,'0'), 
  lower(CG30_price_rate.price_rate), 
  CG30_price_rate.another_price_rate, 
  lower(CG30_price_rate.price_rate1), 
  CG30_price_rate.another_price_rate1, 
  lower(CG30_price_rate.price_rate2), 
  CG30_price_rate.another_price_rate2, 
  lower(CG30_price_rate.price_rate3), 
  CG30_price_rate.another_price_rate3, 
  lower(CG30_price_rate.price_rate4), 
  CG30_price_rate.another_price_rate4, 
  lower(CG30_price_rate.price_rate5), 
  CG30_price_rate.another_price_rate5 
      INTO 
        p_add,
        st_air,
  paper,
  rate0,
  rate_a0,
  rate1,
  rate_a1,
  rate2,
  rate_a2,
  rate3,
  rate_a3,
        rate4,
  rate_a4,
  rate5,
  rate_a5 
      from basic.CG30_price_rate 
      where CG30_price_rate.train_no = train_no 
        and CG30_price_rate.start_date <= start_train_date 
  and CG30_price_rate.stop_date >= start_train_date   
      LIMIT 1;
      if p_add < 0 or p_add IS NULL then 
         SET p_add = 0;
      end if;
      if paper IS NULL then 
         SET paper = '0';
      end if;
      if st_air IS NULL then 
         SET st_air = '0';
      end if;
      SET rate_seat0 = rate0;
      SET rate_seat_a0 = rate_a0;
      SET rate_seat1 = rate1;
      SET rate_seat_a1 = rate_a1;
      SET rate_seat2 = rate2;
      SET rate_seat_a2 = rate_a2;
      SET rate_seat3 = rate3;
      SET rate_seat_a3 = rate_a3;
      SET rate_seat4 = rate4;
      SET rate_seat_a4 = rate_a4;
      SET rate_seat5 = rate5;
      SET rate_seat_a5 = rate_a5;


      if rtrim(rate0) = 'x' or rtrim(rate1) = 'x' or rtrim(rate2) = 'x' or rtrim(rate3) = 'x' or rtrim(rate4) = 'x' or rtrim(rate5) = 'x' or rtrim(rate_a0) = 'x' or rtrim(rate_a1) = 'x' or rtrim(rate_a2) = 'x' or rtrim(rate_a3) = 'x' or rtrim(rate_a4) = 'x' or rtrim(rate_a5) = 'x' then

         SET rate_x0 = '0';
         SET rate_a_x0 = '0';
         SET rate_x1 = '0';
         SET rate_a_x1 = '0';
         SET rate_x2 = '0';
         SET rate_a_x2 = '0';
         SET rate_x3 = '0';
         SET rate_a_x3 = '0';
         SET rate_x5 = '0';
         SET rate_a_x5 = '0';
         select   CG30_price_rate_seat.price_rate, 
   CG30_price_rate_seat.another_price_rate, 
  CG30_price_rate_seat.price_rate1, 
  CG30_price_rate_seat.another_price_rate1, 
  CG30_price_rate_seat.price_rate2, 
  CG30_price_rate_seat.another_price_rate2, 
  CG30_price_rate_seat.price_rate3, 
  CG30_price_rate_seat.another_price_rate3, 
  CG30_price_rate_seat.price_rate4, 
  CG30_price_rate_seat.another_price_rate4, 
  CG30_price_rate_seat.price_rate5, 
  CG30_price_rate_seat.another_price_rate5 
  INTO rate_x0,
   rate_a_x0,
  rate_x1,
  rate_a_x1,
  rate_x2,
  rate_a_x2,
  rate_x3,
  rate_a_x3,
          rate_x4,
  rate_a_x4,
  rate_x5,
  rate_a_x5 
  from basic.CG30_price_rate_seat 
  where CG30_price_rate_seat.train_no = train_no
          and CG30_price_rate_seat.start_date <= start_train_date 
  and CG30_price_rate_seat.stop_date >= start_train_date
          and CG30_price_rate_seat.seat_type_code in(seat_type_code,'z')
          and CG30_price_rate_seat.ticket_type & ticket_type_power = ticket_type_power   
  order by seat_type_code 
  LIMIT 1;
         if seat_type_code in('7','8','D') then
            SET rate_seat_x0 = rate_x0;
            SET rate_seat_a_x0 = rate_a_x0;
            SET rate_seat_x1 = rate_x1;
            SET rate_seat_a_x1 = rate_a_x1;
            SET rate_seat_x2 = rate_x2;
            SET rate_seat_a_x2 = rate_a_x2;
            SET rate_seat_x3 = rate_x3;
            SET rate_seat_a_x3 = rate_a_x3;
            SET rate_seat_x4 = rate_x4;
            SET rate_seat_a_x4 = rate_a_x4;
            SET rate_seat_x5 = rate_x5;
            SET rate_seat_a_x5 = rate_a_x5;
         else
            if seat_type_code in('9','A') then 
               SET temp_seat_type = '9';
            else 
               if seat_type_code in('B','C') then 
                  SET temp_seat_type = 'B';
               else 
                  if seat_type_code in('K','L') then 
                     SET temp_seat_type = 'K';
                  else 
                     SET temp_seat_type = CAST(cast(s_seat2 as SIGNED INTEGER)+1 AS char(1));
                  end if;
               end if;
            end if;
            SET rate_seat_x0 = '0';
            SET rate_seat_a_x0 = '0';
            SET rate_seat_x1 = '0';
            SET rate_seat_a_x1 = '0';
            SET rate_seat_x2 = '0';
            SET rate_seat_a_x2 = '0';
            SET rate_seat_x3 = '0';
            SET rate_seat_a_x3 = '0';
            SET rate_seat_x5 = '0';
            SET rate_seat_a_x5 = '0';
            select   CG30_price_rate_seat.price_rate, 
      CG30_price_rate_seat.another_price_rate, 
  CG30_price_rate_seat.price_rate1, 
  CG30_price_rate_seat.another_price_rate1, 
  CG30_price_rate_seat.price_rate2, 
  CG30_price_rate_seat.another_price_rate2, 
  CG30_price_rate_seat.price_rate3, 
  CG30_price_rate_seat.another_price_rate3, 
  CG30_price_rate_seat.price_rate4, 
  CG30_price_rate_seat.another_price_rate4, 
  CG30_price_rate_seat.price_rate5, 
  CG30_price_rate_seat.another_price_rate5 
     INTO rate_seat_x0,
      rate_seat_a_x0,
  rate_seat_x1,
  rate_seat_a_x1,
  rate_seat_x2,
  rate_seat_a_x2,
             rate_seat_x3,
  rate_seat_a_x3,
  rate_seat_x4,
  rate_seat_a_x4,
             rate_seat_x5,
  rate_seat_a_x5 
     from basic.CG30_price_rate_seat 
     where CG30_price_rate_seat.train_no = train_no 
  and CG30_price_rate_seat.start_date <= start_train_date 
  and CG30_price_rate_seat.stop_date >= start_train_date
             and CG30_price_rate_seat.seat_type_code in(temp_seat_type,'z')
             and CG30_price_rate_seat.ticket_type & ticket_type_power = ticket_type_power   
     order by CG30_price_rate_seat.seat_type_code LIMIT 1;
         end if;
      end if;
      SET ticket_type = tmp_ticket_type;

      if special_visa = 1 then 
         SET bed_only = 0;
      end if;

      if seat_feature in('2','3') then 
         SET new_type = '1'; 
      else 
         SET new_type = '0';
      end if;

      SET p_total = 0;
      SET p_relay = 0;
      SET p_float_total = 0;
      SET p_bed_reserve = 0;
      SET p_0 = 0;
      SET p_1 = 0;
      SET p_2 = 0;
      SET p_3 = 0;
      SET p_4 = 0;
      SET p_5 = 0;
      SET p_basic_seat0 = 0;
      SET p_basic_seat1 = 0;
      SET p_basic_seat2 = 0;
      SET p_basic_seat3 = 0;
      SET p_basic_seat4 = 0;
      SET p_basic_seat5 = 0;
      SET p_relay_fast0 = 0;
      SET p_relay_fast1 = 0;
      SET p_relay_fast2 = 0;
      SET p_relay_fast3 = 0;
      SET p_relay_fast4 = 0;
      SET p_relay_fast5 = 0;

      SET p_1_0 = 0;
      SET p_2_0 = 0;
      SET p_3_0 = 0;
      SET p_4_0 = 0;
      SET p_5_0 = 0;
      SET p_state = 0;
      SET p_bed = 0;
      SET p_basic = 0;
   if output2=2 then
  select '12===',p_basic;
   end if;
      SET p_float = 0;


      if preference_style in('5','6') and preference_rate <> -1 then

         SET ticket_price = -70;
         SET SWP_Ret_Value = -70;
         LEAVE SWL_return;
      end if;




      if special_visa = 3 or ticket_type = 9 or (preference_style in('5','6'))
      or ticket_type = 5 and (s_seat1 = 1 or s_seat2 = 1 and special_visa <> 2)
      or ticket_type = 6 and  s_seat1 = 1 and s_bed = 0 then
         LEAVE PRICING_FINISH;
      end if;

      if ticket_type <> 5 and ticket_type <> 6 then 
   if output2=2 then
   select '22===',p_float_total,p_add;
   end if;
         SET p_float_total = p_add;
      end if;
      SET times = 5;
      SWL_Label4:
      while times >= -1 DO
         BEGIN
   if output2=2 then
    select '12_1===',p_basic,times,rate5,rate_x5,rate_a5,rate4,rate_x4,rate_a4,rate3,rate_x3,rate_a3,
    rate2,rate_x2,rate_a2,rate1,rate_x1,rate_a1,rate0,rate_x0,rate_a0;
     end if;

            if times = 5 then
  
               SET d_use = d_5;
               SET dd_use = dd_5;
               SET line_use = line5;
               SET style_use = style5;
               if rtrim(rate5) = 'x' then
                  SET rate_use = rate_x5;
                  SET rate_seat_use = rate_seat_x5;
                  SET rate_a_use = rate_a_x5;
                  SET rate_seat_a_use = rate_seat_a_x5;
                  SET rate_aa_use = rate_a5;
                  SET rate_seat_aa_use = rate_seat_a5;
               else 
                  if rtrim(rate_a5) = 'x' then
                     SET rate_use = rate5;
                     SET rate_seat_use = rate_seat5;
                     SET rate_a_use = rate_x5;
                     SET rate_seat_a_use = rate_seat_x5;
                     SET rate_aa_use = rate_a_x5;
                     SET rate_seat_aa_use = rate_seat_a_x5;
                  else
                     SET rate_use = rate5;
                     SET rate_seat_use = rate_seat5;
                     SET rate_a_use = rate_a5;
                     SET rate_seat_a_use = rate_seat_a5;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 4 then
  
               SET p_5 = p_basic;
               SET p_basic_seat5 = p_basic_seat;
               SET p_relay_fast5 = p_fast;
               SET p_5_0 = p_diff;
    
               SET p_float_seat5 = IFNULL(p_float_seat,0);
               SET p_seat5 = IFNULL(p_seat,0);
               SET d_use = d_4;
               SET dd_use = dd_4;
               SET line_use = line4;
               SET style_use = style4;
    
               SET p_basic_seat5_0 = p_basic_seat_0;
               SET p_basic_fast5_0 = p_basic_fast_0;
               SET p_basic_air5_0 = p_basic_air_0;
               if rtrim(rate4) = 'x' then
                  SET rate_use = rate_x4;
                  SET rate_seat_use = rate_seat_x4;
                  SET rate_a_use = rate_a_x4;
                  SET rate_seat_a_use = rate_seat_a_x4;
                  SET rate_aa_use = rate_a4;
                  SET rate_seat_aa_use = rate_seat_a4;
               else 
                  if rtrim(rate_a4) = 'x' then
                     SET rate_use = rate4;
                     SET rate_seat_use = rate_seat4;
                     SET rate_a_use = rate_x4;
                     SET rate_seat_a_use = rate_seat_x4;
                     SET rate_aa_use = rate_a_x4;
                     SET rate_seat_aa_use = rate_seat_a_x4;
                  else
                     SET rate_use = rate4;
                     SET rate_seat_use = rate_seat4;
                     SET rate_a_use = rate_a4;
                     SET rate_seat_a_use = rate_seat_a4;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 3 then
  
               SET p_4 = p_basic;
               SET p_basic_seat4 = p_basic_seat;
               SET p_relay_fast4 = p_fast;
               SET p_4_0 = p_diff;
    
               SET p_float_seat4 = IFNULL(p_float_seat,0);
               SET p_seat4 = IFNULL(p_seat,0);
               SET d_use = d_3;
               SET dd_use = dd_3;
               SET line_use = line3;
               SET style_use = style3;
    
               SET p_basic_seat4_0 = p_basic_seat_0;
               SET p_basic_fast4_0 = p_basic_fast_0;
               SET p_basic_air4_0 = p_basic_air_0;
               if rtrim(rate3) = 'x' then
                  SET rate_use = rate_x3;
                  SET rate_seat_use = rate_seat_x3;
                  SET rate_a_use = rate_a_x3;
                  SET rate_seat_a_use = rate_seat_a_x3;
                  SET rate_aa_use = rate_a3;
                  SET rate_seat_aa_use = rate_seat_a3;
               else 
                  if rtrim(rate_a3) = 'x' then
                     SET rate_use = rate3;
                     SET rate_seat_use = rate_seat3;
                     SET rate_a_use = rate_x3;
                     SET rate_seat_a_use = rate_seat_x3;
                     SET rate_aa_use = rate_a_x3;
                     SET rate_seat_aa_use = rate_seat_a_x3;
                  else
                     SET rate_use = rate3;
                     SET rate_seat_use = rate_seat3;
                     SET rate_a_use = rate_a3;
                     SET rate_seat_a_use = rate_seat_a3;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 2 then
  
               SET p_3 = p_basic;
               SET p_basic_seat3 = p_basic_seat;
               SET p_relay_fast3 = p_fast;
               SET p_3_0 = p_diff;
    
               SET p_float_seat3 = IFNULL(p_float_seat,0);
               SET p_seat3 = IFNULL(p_seat,0);
               SET d_use = d_2;
               SET dd_use = dd_2;
               SET line_use = line2;
               SET style_use = style2;
    
               SET p_basic_seat3_0 = p_basic_seat_0;
               SET p_basic_fast3_0 = p_basic_fast_0;
               SET p_basic_air3_0 = p_basic_air_0;
               if rtrim(rate2) = 'x' then
                  SET rate_use = rate_x2;
                  SET rate_seat_use = rate_seat_x2;
                  SET rate_a_use = rate_a_x2;
                  SET rate_seat_a_use = rate_seat_a_x2;
                  SET rate_aa_use = rate_a2;
                  SET rate_seat_aa_use = rate_seat_a2;
               else 
                  if rtrim(rate_a2) = 'x' then
                     SET rate_use = rate2;
                     SET rate_seat_use = rate_seat2;
                     SET rate_a_use = rate_x2;
                     SET rate_seat_a_use = rate_seat_x2;
                     SET rate_aa_use = rate_a_x2;
                     SET rate_seat_aa_use = rate_seat_a_x2;
                  else
                     SET rate_use = rate2;
                     SET rate_seat_use = rate_seat2;
                     SET rate_a_use = rate_a2;
                     SET rate_seat_a_use = rate_seat_a2;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 1 then
  
               SET p_2 = p_basic;
               SET p_basic_seat2 = p_basic_seat;
               SET p_relay_fast2 = p_fast;
               SET p_2_0 = p_diff;
    
               SET p_float_seat2 = IFNULL(p_float_seat,0);
               SET p_seat2 = IFNULL(p_seat,0);
               SET d_use = d_1;
               SET dd_use = dd_1;
               SET line_use = line1;
               SET style_use = style1;
    
               SET p_basic_seat2_0 = p_basic_seat_0;
               SET p_basic_fast2_0 = p_basic_fast_0;
               SET p_basic_air2_0 = p_basic_air_0;
               if rtrim(rate1) = 'x' then
                  SET rate_use = rate_x1;
                  SET rate_seat_use = rate_seat_x1;
                  SET rate_a_use = rate_a_x1;
                  SET rate_seat_a_use = rate_seat_a_x1;
                  SET rate_aa_use = rate_a1;
                  SET rate_seat_aa_use = rate_seat_a1;
               else 
                  if rtrim(rate_a1) = 'x' then
                     SET rate_use = rate1;
                     SET rate_seat_use = rate_seat1;
                     SET rate_a_use = rate_x1;
                     SET rate_seat_a_use = rate_seat_x1;
                     SET rate_aa_use = rate_a_x1;
                     SET rate_seat_aa_use = rate_seat_a_x1;
                  else
                     SET rate_use = rate1;
                     SET rate_seat_use = rate_seat1;
                     SET rate_a_use = rate_a1;
                     SET rate_seat_a_use = rate_seat_a1;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 0 then
  
               if style0 <> '7' and style0 <> '0' then  
                  SET style0 = '1';
               end if;
               SET p_1 = p_basic;
               SET p_basic_seat1 = p_basic_seat;
               SET p_relay_fast1 = p_fast;
               SET p_1_0 = p_diff;
    
               SET p_float_seat1 = IFNULL(p_float_seat,0);
               SET p_seat1 = IFNULL(p_seat,0);
               SET d_use = d_seat;
               SET dd_use = dd_seat;
               SET line_use = 0;
               SET style_use = style0;
    
               SET p_basic_seat1_0 = p_basic_seat_0;
               SET p_basic_fast1_0 = p_basic_fast_0;
               SET p_basic_air1_0 = p_basic_air_0;
               
               if rtrim(rate0) = 'x' then
                  SET rate_use = rate_x0;
                  SET rate_seat_use = rate_seat_x0;
                  SET rate_a_use = rate_a_x0;
                  SET rate_seat_a_use = rate_seat_a_x0;
                  SET rate_aa_use = rate_a0;
                  SET rate_seat_aa_use = rate_seat_a0;
               else 
                  if rtrim(rate_a0) = 'x' then
                     SET rate_use = rate0;
                     SET rate_seat_use = rate_seat0;
                     SET rate_a_use = rate_x0;
                     SET rate_seat_a_use = rate_seat_x0;
                     SET rate_aa_use = rate_a_x0;
                     SET rate_seat_aa_use = rate_seat_a_x0;
                  else
                   
                     SET rate_use = rate0;
                     SET rate_seat_use = rate_seat0;
                     SET rate_a_use = rate_a0;
                     SET rate_seat_a_use = rate_seat_a0;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = -1 then
    if output2=2 then
     select '11===',p_0,p_basic;
    end if;
               SET p_0 = p_basic;
               SET p_basic_seat0 = p_basic_seat;
               SET p_relay_fast0 = p_fast;
    
               SET p_float_seat0 = IFNULL(p_float_seat,0);
               SET p_seat0 = IFNULL(p_basic_seat,0);
               SET d_use = d_bed;
               SET dd_use = 0;
               SET style_use = style0;
    
               SET p_basic_seat0_0 = p_basic_seat_0;
               SET p_basic_fast0_0 = p_basic_fast_0;
               SET p_basic_air0_0 = p_basic_air_0;
               if d_bed = d_seat or style0 = '7' then 
                  SET d_use = 0;
               end if;
            end if;

  
            SET p_basic = 0;
            SET p_basic_seat = 0;
            SET p_fast = 0;
            SET p_float = 0;
            SET p_diff = 0;
  

            if d_use <= 0 or style_use = '2' or style_use = '3' or style_use < '0' or style_use > '9' then
  
               SET times = times -1;
               ITERATE SWL_Label4;
            end if;
            GZ_VERSION_AGAIN: LOOP
      
               if seat_feature in('2','3') then 
                  SET new_type = '1'; 
               else 
                  SET new_type = '0';
               end if;
  
               SET p_seat = 0;
               SET p_fast = 0;
               SET pp_fast = 0;
               SET p_soft_seat = 0;
               SET p_up_bed = 0;
               SET p_middle_bed = 0;
               SET p_down_bed = 0;
               SET p_up_soft = 0;
               SET p_down_soft = 0;
               SET p_up_super = 0;
               SET p_down_super = 0;
               SET p_up_soft_super = 0;
               SET p_down_soft_super = 0;
               SET p_air = 0;
               SET p_new_seat = 0;
               SET p_new_fast = 0;
               SET pp_new_fast = 0;
               SET p_new_soft_seat = 0;
               SET p_new_up_bed = 0;
               SET p_new_middle_bed = 0;
               SET p_new_down_bed = 0;
               SET p_new_up_soft = 0;
               SET p_new_down_soft = 0;
               SET p_new_up_super = 0;
               SET p_new_down_super = 0;
               SET p_new_up_soft_super = 0;
               SET p_new_down_soft_super = 0;
               SET p_new_air = 0;
               SET p_new_double_seat = 0;
               SET p_new_double_bed = 0;
               SET p_new_double_fast = 0;
               SET pp_new_double_fast = 0;
               SET p_new_double_air = 0;
  
               SET p_total_fast = 0;
               SET p_new_total_fast = 0;
  
  
               IF seat_type_code in('7','8') or (seat_type_code >= 'D' and seat_type_code not in('K','L')) then 
                  SET style_use = '7';
               end if;
  
               IF style_use = '0' then
  
                  select   distance_price.seat_price, 
     distance_price.fast_price, 
   distance_price.soft_seat_price, 
   distance_price.up_bed_price, 
   distance_price.middle_bed_price, 
   distance_price.down_bed_price, 
   distance_price.up_soft_bed_price, 
   distance_price.down_soft_bed_price, 
   distance_price.up_super_price, 
   distance_price.down_super_price, 
   distance_price.up_soft_super_price, 
   distance_price.down_soft_super_price, 
   distance_price.air_condition_price 
    INTO p_seat,
     p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                   p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air 
    from basic.distance_price 
    where distance_price.distance0 <= d_use+900 
     and distance_price.distance >= d_use+900
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     SET ticket_price = -36;
                     SET SWP_Ret_Value = -36;
                     LEAVE SWL_return;
                  end if;
                  select   distance_price.fast_price, 
     p_seat -distance_price.seat_price, 
   p_fast -distance_price.fast_price, 
   p_soft_seat -distance_price.soft_seat_price, 
   p_up_bed -distance_price.up_bed_price, 
   p_middle_bed -distance_price.middle_bed_price, 
   p_down_bed -distance_price.down_bed_price, 
   p_up_soft -distance_price.up_soft_bed_price, 
   p_down_soft -distance_price.down_soft_bed_price, 
   p_up_super -distance_price.up_super_price, 
   p_down_super -distance_price.down_super_price, 
   p_up_soft_super -distance_price.up_soft_super_price, 
   p_down_soft_super -distance_price.down_soft_super_price, 
   p_air -distance_price.air_condition_price 
    INTO p_fast_900,
     p_seat,
   p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
                   p_up_soft,
   p_down_soft,
   p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
                   p_air 
    from basic.distance_price 
    where distance_price.distance0 <= 900 
     and distance_price.distance >= 900
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     SET ticket_price = -37;
                     SET SWP_Ret_Value = -37;
                     LEAVE SWL_return;
                  end if;
                  if p_down_bed < p_middle_bed then 
                     SET p_down_bed = p_middle_bed;
                  end if;
                  if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
     
                     select   IFNULL(distance_price.fast_price,0)
       INTO p_total_fast 
       from basic.distance_price 
       where distance_price.distance0 <= d_total+900 
        and distance_price.distance >= d_total+900
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if ROW_COUNT() = 0 then
   
                        SET ticket_price = -35;
                        SET SWP_Ret_Value = -35;
                        LEAVE SWL_return;
                     end if;
                     select   distance_price.fast_price -p_fast_900 
       INTO p_fast 
       from basic.distance_price 
       where distance_price.distance0 <= d_use -dd_use+900 
        and distance_price.distance >= d_use -dd_use+900
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     select   distance_price.fast_price -p_fast_900 
       INTO pp_fast 
       from baisc.distance_price 
       where distance_price.distance0 <= dd_use+900 
        and distance_price.distance >= dd_use+900
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if pp_fast <= 0 then 
                        SET pp_fast = 10;
                     end if;
                  end if;
    
    
                  if p_fast <= 0 then 
                     SET p_fast = 10;
                  end if;
                  if p_air <= 0 then 
                     SET p_air = 10;
                  end if;
               end if;
  
               SET rate_to_400 = 1;
               IF style_use = '1' then
  
                  if train_class = '5' then
    
                     select   CG30_suburb_distance_price.suburb_single_price, 
        0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0 
       INTO p_seat,
        p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                      p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air 
       from basic.CG30_suburb_distance_price 
       where CG30_suburb_distance_price.distance0 <= d_use 
        and CG30_suburb_distance_price.distance >= d_use
                      and CG30_suburb_distance_price.start_date <= start_train_date 
   and CG30_suburb_distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -39;
                        SET SWP_Ret_Value = -39;
                        LEAVE SWL_return;
                     end if;
                  else
      
                     if train_class = '9' then
   
                        select   distance_price.fast_price 
   INTO p_total_fast 
   from basic.distance_price 
   where distance_price.distance0 <= d_total 
    and distance_price.distance >= d_total
                         and distance_price.start_date <= start_train_date 
    and distance_price.stop_date >= start_train_date   
   LIMIT 1;
                        if ROW_COUNT() = 0 then
      
                           SET ticket_price = -38;
                           SET SWP_Ret_Value = -38;
                           LEAVE SWL_return;
                        end if;
                     end if;
                     select   distance_price.seat_price, 
        distance_price.fast_price, 
   distance_price.soft_seat_price, 
   distance_price.up_bed_price, 
   distance_price.middle_bed_price, 
   distance_price.down_bed_price, 
   distance_price.up_soft_bed_price, 
   distance_price.down_soft_bed_price, 
   distance_price.up_super_price, 
   distance_price.down_super_price, 
   distance_price.up_soft_super_price, 
   distance_price.down_soft_super_price, 
   distance_price.air_condition_price 
       INTO p_seat,
        p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                      p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air 
       from basic.distance_price 
       where distance_price.distance0 <= d_use 
        and distance_price.distance >= d_use
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -40;
                        SET SWP_Ret_Value = -40;
                        LEAVE SWL_return;
                     end if;
                  end if;
                  if d_use < d_0+d_1+d_2+d_3+d_4+d_5 and d_use < 400 then
    
                     if d_use <= 100 then 
                        SET rate_to_400 = 0.25;
                     else 
                        if d_use <= 200 then 
                           SET rate_to_400 = 0.50;
                        else 
                           if d_use <= 300 then 
                              SET rate_to_400 = 0.75;
                           end if;
                        end if;
                     end if;
                     select   CAST(price_rate_400.rate_to_400 AS DECIMAL(4,3)) 
       INTO rate_to_400 
       from basic.price_rate_400 
       where train_no = train_no
                      and price_rate_400.distance0 <= d_use 
   and price_rate_400.distance >= d_use
                      and price_rate_400.start_date <= start_train_date 
   and price_rate_400.stop_date >= start_train_date   
       LIMIT 1;
                  end if;
                  if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
                     select   distance_price.fast_price 
       INTO p_fast 
       from basic.distance_price 
       where distance_price.distance0 <= d_use -dd_use 
        and distance_price.distance >= d_use -dd_use
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     select   distance_price.fast_price 
       INTO pp_fast 
       from basic.distance_price 
       where distance_price.distance0 <= dd_use 
        and distance_price.distance >= dd_use
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                  end if;
               end if;
  
               IF style_use in('4','5','6') then
  
                  if train_class = '9' then
   
                     select   IFNULL(local_distance_price.fast_price,0), 
        IFNULL(local_distance_price.new_fast,0) 
       INTO p_total_fast,
        p_new_total_fast 
       from basic.local_distance_price 
       where local_distance_price.distance0 <= d_total+900 
        and local_distance_price.distance >= d_total+900
                      and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if ROW_COUNT() = 0 then
     
                        SET ticket_price = -49;
                        SET SWP_Ret_Value = -49;
                        LEAVE SWL_return;
                     end if;
                  end if;
                  select   local_distance_price.seat_price, 
     local_distance_price.fast_price, 
   local_distance_price.soft_seat_price, 
   local_distance_price.up_bed_price, 
   local_distance_price.middle_bed_price, 
   local_distance_price.down_bed_price, 
   local_distance_price.up_soft_bed_price, 
   local_distance_price.down_soft_bed_price, 
   local_distance_price.up_super_price, 
   local_distance_price.down_super_price, 
   local_distance_price.up_soft_super_price, 
   local_distance_price.down_soft_super_price, 
   local_distance_price.air_condition_price, 
   IFNULL(local_distance_price.new_seat,0), 
   IFNULL(local_distance_price.new_fast,0), 
   IFNULL(local_distance_price.new_soft_seat,0), 
   IFNULL(local_distance_price.new_up_bed,0), 
   IFNULL(local_distance_price.new_middle_bed,0), 
   IFNULL(local_distance_price.new_down_bed,0), 
   IFNULL(local_distance_price.new_up_soft_bed,0), 
   IFNULL(local_distance_price.new_down_soft_bed,0), 
   IFNULL(local_distance_price.new_up_super,0), 
   IFNULL(local_distance_price.new_down_super,0), 
   IFNULL(local_distance_price.new_up_soft_super,0), 
   IFNULL(local_distance_price.new_down_soft_super,0), 
   IFNULL(local_distance_price.new_air_condition,0), 
   IFNULL(local_distance_price.new_double_soft_seat,0), 
   IFNULL(local_distance_price.new_double_bed,0), 
   IFNULL(local_distance_price.new_double_fast,0), 
   IFNULL(local_distance_price.new_double_air,0) 
    INTO p_seat,
     p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                   p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air,
                   p_new_seat,
   p_new_fast,
   p_new_soft_seat,
   p_new_up_bed,
   p_new_middle_bed,
                   p_new_down_bed,
   p_new_up_soft,
   p_new_down_soft,
   p_new_up_super,
   p_new_down_super,
                   p_new_up_soft_super,
   p_new_down_soft_super,
   p_new_air,
   p_new_double_seat,
                   p_new_double_bed,
   p_new_double_fast,
   p_new_double_air 
    from basic.local_distance_price 
    where local_distance_price.belong_line = line_use
                   and local_distance_price.distance0 <= d_use and distance >= d_use
                   and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     SET ticket_price = -50;
                     SET SWP_Ret_Value = -50;
                     LEAVE SWL_return;
                  end if;
                  if d_use = d_0+d_1+d_2+d_3+d_4+d_5 and d_use < 400 and style_use = '4'
                  and line_use not in(145,146,147,148,149) then
    
                     select   local_distance_price.up_bed_price, 
        local_distance_price.middle_bed_price, 
   local_distance_price.down_bed_price, 
   local_distance_price.up_soft_bed_price, 
   local_distance_price.down_soft_bed_price, 
   local_distance_price.up_super_price, 
   local_distance_price.down_super_price, 
   local_distance_price.up_soft_super_price, 
   local_distance_price.down_soft_super_price, 
   IFNULL(local_distance_price.new_up_bed,0), 
   IFNULL(local_distance_price.new_middle_bed,0), 
   IFNULL(local_distance_price.new_down_bed,0), 
   IFNULL(local_distance_price.new_up_soft_bed,0), 
   IFNULL(local_distance_price.new_down_soft_bed,0), 
   IFNULL(local_distance_price.new_up_super,0), 
   IFNULL(local_distance_price.new_down_super,0), 
   IFNULL(local_distance_price.new_up_soft_super,0), 
   IFNULL(local_distance_price.new_down_soft_super,0), 
   IFNULL(local_distance_price.new_double_bed,0) 
       INTO p_up_bed,
        p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
   p_up_super,
   p_down_super,
                      p_up_soft_super,
   p_down_soft_super,
   p_new_up_bed,
   p_new_middle_bed,
                      p_new_down_bed,
   p_new_up_soft,
   p_new_down_soft,
   p_new_up_super,
   p_new_down_super,
                      p_new_up_soft_super,
   p_new_down_soft_super,
   p_new_double_bed 
       from basic.local_distance_price 
       where local_distance_price.belong_line = line_use
                      and local_distance_price.distance0 <= 400 
   and local_distance_price.distance >= 400
                      and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -55;
                        SET SWP_Ret_Value = -55;
                        LEAVE SWL_return;
                     end if;
                  end if;
                  if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
                     select   local_distance_price.fast_price, 
        IFNULL(local_distance_price.new_fast,0), 
   IFNULL(local_distance_price.new_double_fast,0) 
       INTO p_fast,
        p_new_fast,
   p_new_double_fast 
       from basic.local_distance_price 
       where local_distance_price.belong_line = line_use
                      and local_distance_price.distance0 <= d_use -dd_use 
   and local_distance_price.distance >= d_use -dd_use
                      and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     select   local_distance_price.fast_price, 
        IFNULL(local_distance_price.new_fast,0), 
   IFNULL(local_distance_price.new_double_fast,0) 
       INTO pp_fast,
        pp_new_fast,
   pp_new_double_fast 
       from basic.local_distance_price 
       where local_distance_price.belong_line = line_use
                      and local_distance_price.distance0 <= d_use 
   and local_distance_price.distance >= d_use
                      and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     SET pp_fast = pp_fast -p_fast;
                     SET pp_new_fast = pp_new_fast -p_new_fast;
                     SET pp_new_double_fast = pp_new_double_fast -p_new_double_fast;
                  end if;
               end if;
        
               IF style_use <= '6' then
                  BEGIN
     SET p_float_new = 0;
                     LOCAL_NEW_TYPE:loop
                     
     
                     If gz_version <= 1 then
    
                        SET p_basic_fast = 0;
                        if train_class <> '9' then 
       
                           SET p_basic_fast = round(p_fast*train_class_rate*student*child*half*bed_only*home*free,0);
                        end if;
                        if train_class = '9' then
                           SET p_basic_fast = round((p_fast*train_class1_rate+pp_fast*train_class2_rate)*student*child*half*bed_only*home*free,0);
                        end if;
                        SET p_basic_seat = round((p_seat*s_seat1*student+p_soft_seat*s_seat2)*child*half*bed_only -p_seat*(2 -home -free),0);
      if output2=2 then
       select '16===',p_basic_air,seat_feature,p_air,student,child,half,bed_only,small_child,home,free;
      end if ;
      if trim(seat_feature) ='' then
       set seat_feature='0';
      end if;
                        SET p_basic_air = round(((cast(seat_feature as SIGNED INTEGER))%2)*p_air*student*child*half*(bed_only+small_child)*home*free,0);
      if output2=2 then
       select '16_1===',p_basic_air,seat_feature,p_air,student,child,half,bed_only,small_child,home,free;
      end if ;
                        SET p_basic_bed = p_up_bed*s_u+p_middle_bed*s_m+p_down_bed*s_d+p_up_super*s_hu+p_down_super*s_hd+p_up_soft*s_su+p_down_soft*s_sd+p_up_soft_super*s_shu+p_down_soft_super*s_shd;
                        SET p_basic_bed = round(half*round(p_basic_bed*rate_to_400,-1),0) -s_seat2*s_bed*round(p_middle_bed*rate_to_400,-1)*(1 -free);
      
                        if (times = 0 and d_seat < d_bed) or style_use in('5','6') then 
                           SET p_basic_bed = 0;
                        end if;
      
                        if times = -1 then 
                           SET p_basic_seat = 0;
                           SET p_basic_fast = 0;
                           SET p_basic_air = 0;
                        end if;
      
                        if style_use = '1' and seat_type_code in('9','A') then
                           SET p_basic_fast = 2*p_basic_fast;
                           SET p_basic_air = 2*p_basic_air;
                           SET p_basic_seat = 2*p_basic_seat;
                           SET p_basic_bed = 2*p_basic_bed;
                        end if;
      
                        if new_type = '2' then 
       if output2=2 then
        select '27_1===',p_float_new,p_basic_seat,p_basic_fast,p_basic_air,p_basic_bed;
       end if;
                           SET p_float_new = p_float_new+p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed;
                        end if;
                        if new_type <> '2' and seat_type_code in('9','A') and style_use in('4','5','6') then
      
                           SET new_type = '2';
         if output2=2 then
        select '27_2===',p_float_new,p_basic_seat,p_basic_fast,p_basic_air,p_basic_bed;
       end if;
                           SET p_float_new = p_float_new -2*(p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed);
                           SET p_soft_seat = p_new_double_seat;
                           SET p_down_soft_super = p_new_double_bed;
                           SET p_fast = p_new_double_fast;
                           SET pp_fast = pp_new_double_fast;
                           SET p_air = p_new_double_air;
                           iterate LOCAL_NEW_TYPE;
                        end if;
      
                        if new_type = '1' and seat_type_code <= '6' and (style_use = '4' or style_use = '5' or style_use = '6') then
      
                           SET new_type = '2';
         if output2=2 then
        select '27_3===',p_float_new,p_basic_seat,p_basic_fast,p_basic_air,p_basic_bed;
       end if;
                           SET p_float_new = p_float_new -(p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed);
                           SET p_seat = p_new_seat;
                           SET p_fast = p_new_fast;
                           SET pp_fast = pp_new_fast;
                           SET p_soft_seat = p_new_soft_seat;
                           SET p_up_bed = p_new_up_bed;
                           SET p_middle_bed = p_new_middle_bed;
                           SET p_down_bed = p_new_down_bed;
                           SET p_up_soft = p_new_up_soft;
                           SET p_down_soft = p_new_down_soft;
                           SET p_up_super = p_new_up_super;
                           SET p_down_super = p_new_down_super;
                           SET p_up_soft_super = p_new_up_soft_super;
                           SET p_down_soft_super = p_new_down_soft_super;
                           SET p_air = p_new_air;
                           iterate LOCAL_NEW_TYPE;
                        end if;
                     end if;
    
                     If special_visa = 1 then
    
                        SET p_basic_fast_0 = 0;
                        if train_class <> '9' then
                           SET p_basic_fast_0 = round(p_fast*train_class_rate*student*child*half*home*free,0);
                        end if;
                        if train_class = '9' then
                           SET p_basic_fast_0 = round((p_fast*train_class1_rate+pp_fast*train_class2_rate)*student*child*half*home*free,0);
                        end if;
                        SET p_basic_seat_0 = round((p_seat*s_seat1*student+p_soft_seat*s_seat2)*child*half -p_seat*(2 -home -free),0);
                        SET p_basic_air_0 = round(((cast(seat_feature as SIGNED INTEGER))%2)*p_air*student*child*half*(1+small_child)*home*free,0);
                     end if;
    
    
      if output2=2 then
       select '29_0====',rate_use,rate;
      end if;
                     SET p_float = 0;
                     if rtrim(rate_use) = 'g' then    
                        SET rate = 1;
                     else 
      if  trim(rate_use)='' then
       set rate_use='0';
      end if;
      if output2=2 then
         select '29_0_1====',rate_use,rate;
        end if;
                        SET rate = CAST(rate_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_a_use) = 'g' then 
                        SET rate_a = 1;
                     else 
      if  trim(rate_a_use)='' then
       set rate_a_use='0';
      end if;
                        SET rate_a = CAST(rate_a_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_aa_use) = 'g' then 
                        SET rate_aa = 1;
                     else 
      if  trim(rate_aa_use)='' then
       set rate_aa_use='0';
      end if;
                        SET rate_aa = CAST(rate_aa_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_seat_use) = 'g' then 
                        SET rate_seat = 1;
                     else 
      if  trim(rate_seat_use)='' then
       set rate_seat_use='0';
      end if;
                        SET rate_seat = CAST(rate_seat_use AS DECIMAL(4,3))+1;
                     end if;
      if output2=2 then
      select '29===',rate_seat_a_use,rate_seat_aa_use;
      if rate_seat_a_use is null then
       select 'rate_seat_a_use is null';
      else
       select 'rate_seat_a_use is not null',concat(':',rate_seat_a_use,':');
      end if ;
      end if;
                     if rtrim(rate_seat_a_use) = 'g' then 
                        SET rate_seat_a = 1;
                     else 
      if  trim(rate_seat_a_use)='' then
       set rate_seat_a_use='0';
      end if;
                        SET rate_seat_a = CAST(rate_seat_a_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_seat_aa_use) = 'g' then 
                        SET rate_seat_aa = 1;
                     else 
      if  trim(rate_seat_aa_use)='' then
       set rate_seat_aa_use='0';
      end if;
                        SET rate_seat_aa = CAST(rate_seat_aa_use AS DECIMAL(4,3))+1;
                     end if;
      if output2=2 then
      select '29_1====',rate_seat_a,rate_seat_aa,CAST(rate_seat_a_use AS DECIMAL(4,3)),CAST(rate_seat_aa_use AS DECIMAL(4,3));
      end if;
                     IF rate <> 1 then
                    
    
      
                        if not (d_use <= 40 and style_use = '0') then
      
                           if train_class <> '9' then
                              SET p_float_fast = round((round(round(round(p_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_fast)*train_class_rate*student*child*half*bed_only*home*free,0);
                           end if;
                           if train_class = '9' then
                              SET p_float_fast = round(((round(round(round(p_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_fast)*train_class1_rate+(round(round(round(pp_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1)
                              -pp_fast)*train_class2_rate)*student*child*half*bed_only*home*free,0);
                           end if;
                        else
                           SET p_float_fast = 0;
                        end if;
      
      if output2=2 then
       select '28_2===',seat_feature,p_air,rate_seat,rate_seat_a,rate_seat_aa,half,p_soft_seat,p_down_soft_super;
      end if;
                        SET p_float_air = cast(seat_feature as SIGNED INTEGER)%2*p_air;
                        SET p_float_air = round((round(round(round(p_float_air*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_float_air)*student*child*half*(bed_only+small_child)*home*free,0);
                        if train_class = '5' then
                           SET p_float_seat = round(round(round(p_seat*rate_seat,0)*rate_seat_a,0)*rate_seat_aa,0) -p_seat;
                        else
                           SET p_float_seat = round(round(round(p_seat*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_seat;
                        end if;
      
      
                        SET p_float_seat = round(s_seat1*p_float_seat*student*child*half*bed_only+s_seat2*(round(round(round(p_soft_seat*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_soft_seat)*child*half*bed_only -p_float_seat*(2 -home -free),0);
      if output2=2 then
       select '28_3====',p_float_bed,p_up_bed,s_u,p_middle_bed,s_m,p_down_bed,s_d,p_up_super,s_hu,p_down_super,s_hd,free,p_up_soft,s_su,p_down_soft,s_sd,p_up_soft_super,s_shu,p_down_soft_super,s_shd;
      end if;
                        SET p_float_bed =(p_up_bed*s_u+p_middle_bed*s_m+p_down_bed*s_d+p_up_super*s_hu+p_down_super*s_hd)*free+p_up_soft*s_su+p_down_soft*s_sd+p_up_soft_super*s_shu+p_down_soft_super*s_shd;
      
                        SET p_float_bed = round((round(round(round(round(p_float_bed*rate,-1)*rate_a,-1)*rate_aa,-1)*rate_to_400,-1)
                        -round(p_float_bed*rate_to_400,-1))*half
                        -s_seat2*s_bed*(round(round(round(round(p_middle_bed*rate,-1)*rate_a,-1)*rate_aa,-1)*rate_to_400,-1)
                        -round(p_middle_bed*rate_to_400,-1))*(1 -free),0);
      
      
      
                        if style_use = '1' and seat_type_code in('9','A') then
      
                           if train_class <> '9' then
        
                              SET p_float_fast = round((round(round(round(p_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                              -1)
                              -2*p_fast)*train_class_rate*half,0);
                           end if;
                           if train_class = '9' then
        
                              SET p_float_fast = round(((round(round(round(p_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                              -1)
                              -2*p_fast)*train_class1_rate+(round(round(round(pp_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                              -1)
                              -2*pp_fast)*train_class2_rate)*half,0);
                           end if;
         if output2=2 then
        select '28_1===',seat_feature,p_air,rate_seat,rate_seat_a,rate_seat_aa,half,p_soft_seat,p_down_soft_super;
       end if;
                           SET p_float_air = cast(seat_feature as SIGNED INTEGER)%2*p_air;
                           SET p_float_air = round((round(round(round(p_float_air*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,-1) -2*p_float_air)*half,0);
                           SET p_float_seat = round((round(round(round(p_soft_seat*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,-1) -2*p_soft_seat)*half,0);
                           SET p_float_bed = round((round(round(round(round(p_down_soft_super*rate,-1)*rate_a,-1)*rate_aa, -1)*rate_to_400,-1)*2 - 2*round(p_down_soft_super*rate_to_400,-1))*s_shd*half,0);
                        end if;
      
                        if (times = 0 and d_seat < d_bed) or style_use in('5','6') then 
                           SET p_float_bed = 0;
                        end if;
      
                        if times = -1 then 
                           SET p_float_seat = 0;
                           SET p_float_fast = 0;
                           SET p_float_air = 0;
                        end if;
        if output2=2 then
       select '28===',p_float,p_float_seat,p_float_fast,p_float_bed,p_float_air;
      end if;
                        SET p_float = p_float_seat+p_float_fast+p_float_bed+p_float_air;
                     end if;
      if output2=2 then
      select '25==',gz_version;
      end if;
                     if gz_version <= 1 then
      if output2=2 then
       select '13===',p_basic,p_basic_seat,p_basic_fast,p_basic_air,p_basic_bed,p_float_new,p_float;
      end if ;
                        SET p_basic = p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed-p_float_new;
                        SET p_float = p_float+p_float_new;
      
                        if p_float IS NULL then 
                           SET p_float = 0;
                        end if;
      if output2=2 then
       select '26===',p_float,service_type,train_class,gz_version,style_use,seat_type_code,seat_type_code;
      end if;
                        if p_float <= 0 or service_type < '1' or train_class = '5' then
       if output2=2 then
        select '14===',p_basic,p_float;
       end if ;
                           SET p_basic = p_basic+p_float;
                        else 
       
                           if (gz_version = 1 or gz_version = 0 and style_use = '0')
          and seat_type_code not in('7','8')
          and seat_type_code < 'D' 
         then
        if output2=2 then
         select '15===',p_basic,p_float;
        end if ;
                              SET p_basic = p_basic+p_float;
                              SET gz_version = gz_version+2;
                              if rtrim(rate0) = 'x' then
                                 SET rate_use = rate_x0;
                                 SET rate_seat_use = rate_seat_x0;
                                 SET rate_a_use = rate_a_x0;
                                 SET rate_seat_a_use = rate_seat_a_x0;
                                 SET rate_aa_use = rate_a0;
                                 SET rate_seat_aa_use = rate_seat_a0;
                              else 
                                 if rtrim(rate_a0) = 'x' then
                                    SET rate_use = rate0;
                                    SET rate_seat_use = rate_seat0;
                                    SET rate_a_use = rate_x0;
                                    SET rate_seat_a_use = rate_seat_x0;
                                    SET rate_aa_use = rate_a_x0;
                                    SET rate_seat_aa_use = rate_seat_a_x0;
                                 else
                                    SET rate_use = rate0;
                                    SET rate_seat_use = rate_seat0;
                                    SET rate_a_use = rate_a0;
                                    SET rate_seat_a_use = rate_seat_a0;
                                    SET rate_aa_use = '0';
                                    SET rate_seat_aa_use = '0';
                                 end if;
                              end if;
                              if style_use <> '0' then 
                                 SET style_use = '1';
                              end if; 
                              ITERATE GZ_VERSION_AGAIN;
                           else 
        if output2=2 then 
         select '23===',p_float_total,p_float;
        end if;
                              SET p_float_total = p_float_total+p_float;
                           end if;
                        end if;
    
                     else 
      if output2=2 then
       select '24==',p_basic,p_float,gz_version,p_float_total;
      end if ;
                        SET p_basic = p_basic -p_float;
                        SET gz_version = gz_version -2;
                        SET p_float_total = p_float_total+p_float;
                     end if;
      leave LOCAL_NEW_TYPE;
      END LOOP LOCAL_NEW_TYPE;
                  END;
               end if;
  
  
  
  
  
               IF style_use in('7','8','9') then
                  BEGIN
    
                     SET p_basic = 0;
                     SET p_basic_seat = 0;
                     SET p_fast = 0;
                     SET p_000 = 0;
                     SET seat_type0 = seat_type_code;
                     if style_use in('8','9') and s_bed = 1 then 
                        SET seat_type0 = CAST(s_seat1+2*s_seat2 AS char(1));
                     end if;
     
    
 
 
                     SET p_p_bed_only = 1;
                     BED_ONLY_AGAIN: LOOP
      if output2=2 then
       select '16==',p_basic,p_000,train_no,line_use,from_station_name,to_station_name,start_train_date,ticket_type_power,seat_type0,bed_level,s_bed;
      end if ;
                        select max(CG30_p_p_price.price),
             max(CG30_p_p_price.service_cost)
             into p_basic,p_000
                        from basic.CG30_p_p_price
                        where CG30_p_p_price.train_no = train_no 
             and CG30_p_p_price.belong_line = line_use
                         and CG30_p_p_price.from_station_name = from_station_name
                         and CG30_p_p_price.to_station_name = to_station_name
                         and CG30_p_p_price.start_date <= start_train_date and stop_date >= start_train_date
                         and CG30_p_p_price.ticket_type & ticket_type_power = ticket_type_power
                         and CG30_p_p_price.seat_type_code = seat_type0
                         and (CG30_p_p_price.bed_level = bed_level or s_bed = 0)
      LIMIT 1;
      if output2=2 then
       select '16_2==',p_basic,p_000;
      end if ;
 
   
     

                        if p_p_bed_only = 1 and special_visa = 1 and p_basic IS NOT NULL then
    
                           SET p_p_bed_only = 2;
                           SET seat_type0 = CAST(s_seat1+2*s_seat2 AS char(1));
                           SET p_basic_tmp = p_basic;
                           SET p_000_tmp = p_000;
                           ITERATE BED_ONLY_AGAIN;
                        end if;
                        LEAVE BED_ONLY_AGAIN;
                     END LOOP BED_ONLY_AGAIN;
                     if p_p_bed_only = 2 then 
            if output2=2 then
             select '17==',p_basic,p_basic_tmp;
            end if ;
                        SET p_basic = p_basic_tmp -p_basic;
                        SET p_000 = p_000_tmp -p_000;
                     end if;
                      if output2=2 then
             select '17_1==',p_basic,ticket_type,s_seat2,special_visa,s_seat1,s_bed,seat_type_code;
            end if ;
                     if p_basic is null and (ticket_type not in(5,6,9)
                      or ticket_type = 5 and (s_seat2 = 1 and special_visa = 2)
                      or ticket_type = 6 and (s_seat1 = 1 and s_bed = 1 or s_seat2 = 1
                      or seat_type_code in('7','8') or seat_type_code >= 'D')) then
    
                        SET ticket_price = -60;
                        SET SWP_Ret_Value = -60;
                        LEAVE SWL_return;
                     end if;
      if output2=2 then
      select '21===',p_float_total,p_000;
      end if;
                     SET p_float_total = p_float_total+IFNULL(p_000,0);
      if output2=2 then
       select '18==',p_basic,p_000,IFNULL(p_basic,0) ,IFNULL(p_000,0),IFNULL(p_basic,0) -IFNULL(p_000,0);
      end if ;
                     SET p_basic = IFNULL(p_basic,0) -IFNULL(p_000,0);
                     if times > -1 and p_basic > 0 then 
                        SET p_p_time = times;
                     end if;
                  END;
               end if;
               LEAVE GZ_VERSION_AGAIN;
            END LOOP GZ_VERSION_AGAIN;
  
            if relay_ticket_type < 9 then
  
               if style_use in('7','8','9') or s_seat1 = 0 then
                  select   seat_price*student*child*half, fast_price INTO p_basic_seat,p_fast from basic.distance_price where distance0 <= d_use
                  and distance >= d_use
                  and start_date <= start_train_date
                  and stop_date >= start_train_date   LIMIT 1;
               end if;
               if train_class <> '9' then
    
                  SET train_class_level = train_class_rate;
                  if train_class_level > relay_ticket_type then
                     SET train_class_level = relay_ticket_type;
                  end if;
                  SET p_fast = p_fast*train_class_level;
               end if;
               if train_class = '9' then
    
                  if train_class1 <> '9' then
      
                     SET train_class_level = train_class1_rate;
                     if train_class_level > relay_ticket_type then
                        SET train_class_level = relay_ticket_type;
                     end if;
                     SET p_fast = p_fast*train_class_level;
                  end if;
                  if train_class2 <> '9' then
      
                     SET train_class_level = train_class2_rate;
                     if train_class_level > relay_ticket_type then
                        SET train_class_level = relay_ticket_type;
                     end if;
                     SET pp_fast = pp_fast*train_class_level;
                  end if;
                  SET p_fast = p_fast+pp_fast;
               end if;
               SET p_fast = round(p_fast*student*child*half,0);
            end if;
  
  

  
  
            SET times = times -1;
         END;
      END WHILE;




      if d_seat > 0 then

         SET p_tmp = p_0;
         SET d_tmp = d_seat;
         SET p_tmp_seat = p_basic_seat0;
         SET p_tmp_fast = p_relay_fast0;
         if style5 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_5/d_tmp,-1);
            SET p_5 = p_5+p_000;
            SET p_111 = round(p_tmp_seat*d_5/d_tmp,-1);
            SET p_basic_seat5 = p_basic_seat5+p_111;
            SET p_222 = round(p_tmp_fast*d_5/d_tmp,-1);
            SET p_relay_fast5 = p_relay_fast5+p_222;
            SET d_tmp = d_tmp -d_5;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style4 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_4/d_tmp,-1);
            SET p_4 = p_4+p_000;
            SET p_111 = round(p_tmp_seat*d_4/d_tmp,-1);
            SET p_basic_seat4 = p_basic_seat4+p_111;
            SET p_222 = round(p_tmp_fast*d_4/d_tmp,-1);
            SET p_relay_fast4 = p_relay_fast4+p_222;
            SET d_tmp = d_tmp -d_4;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style3 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_3/d_tmp,-1);
            SET p_3 = p_3+p_000;
            SET p_111 = round(p_tmp_seat*d_3/d_tmp,-1);
            SET p_basic_seat3 = p_basic_seat3+p_111;
            SET p_222 = round(p_tmp_fast*d_3/d_tmp,-1);
            SET p_relay_fast3 = p_relay_fast3+p_222;
            SET d_tmp = d_tmp -d_3;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style2 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_2/d_tmp,-1);
            SET p_2 = p_2+p_000;
            SET p_111 = round(p_tmp_seat*d_2/d_tmp,-1);
            SET p_basic_seat2 = p_basic_seat2+p_111;
            SET p_222 = round(p_tmp_fast*d_2/d_tmp,-1);
            SET p_relay_fast2 = p_relay_fast2+p_222;
            SET d_tmp = d_tmp -d_2;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style1 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_1/d_tmp,-1);
            SET p_1 = p_1+p_000;
            SET p_111 = round(p_tmp_seat*d_1/d_tmp,-1);
            SET p_basic_seat1 = p_basic_seat1+p_111;
            SET p_222 = round(p_tmp_fast*d_1/d_tmp,-1);
            SET p_relay_fast1 = p_relay_fast1+p_222;
            SET d_tmp = d_tmp -d_1;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
  
         if p_tmp < 0 then 
            SET p_tmp = 0;
         end if;
   if output2=2 then
   select '10===',p_0,p_tmp;
   end if;
         SET p_0 = p_tmp;
         SET p_basic_seat0 = p_tmp_seat;
         SET p_relay_fast0 = p_tmp_fast;
      end if;

      IF d_seat < d_bed then

         SET p_tmp = p_basic_bed;
         SET d_tmp = d_bed;
         if style5 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_5/d_tmp,-1);
            SET p_5 = p_5+p_000;
            SET d_tmp = d_tmp -d_5;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style4 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_4/d_tmp,-1);
            SET p_4 = p_4+p_000;
            SET d_tmp = d_tmp -d_4;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style3 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_3/d_tmp,-1);
            SET p_3 = p_3+p_000;
            SET d_tmp = d_tmp -d_3;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style2 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_2/d_tmp,-1);
            SET p_2 = p_2+p_000;
            SET d_tmp = d_tmp -d_2;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style1 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_1/d_tmp,-1);
            SET p_1 = p_1+p_000;
            SET d_tmp = d_tmp -d_1;
            SET p_tmp = p_tmp -p_000;
         end if;
  
         if p_tmp < 0 then 
            SET p_tmp = 0;
         end if;
   if output2=2 then
   select '9===',p_0,p_tmp;
  end if;
         SET p_0 = p_0+p_tmp;
      end if;

  if output2=2 then
   select '5===',p_total,p_0,p_1,p_2,p_3,p_4,p_5,p_float_total,s_bed,ticket_type,train_no;
  end if;
      SET p_total = p_0+p_1+p_2+p_3+p_4+p_5+p_float_total;

      if s_bed = 1 and p_total > 0 and ticket_type <> 5 and not exists(select 1 from basic.CG52_train_dir_appendix where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag = '6') then
         SET p_bed_reserve = 100;
      else
         SET p_bed_reserve = 0;
      end if;
      SET ls_train_no_part = SUBSTRING(train_no,1,6);
      if (line1 = 145 or line1 = 146 or line1 = 147 or line1 = 148 or line1 = 149) and ls_train_no_part != '760000T126' and ls_train_no_part != '7600001216' and ls_train_no_part != '760000K352' then

         if exists(select 1 
    from basic.line_station
           where (line_station.belong_line = line1 and line_station.station_name = from_station_name)
            or (line_station.belong_line = 150 and line_station.station_name = from_station_name)
           )
         and exists(select 1 from basic.line_station
           where (line_station.belong_line = line1 and line_station.station_name = to_station_name)
            or (line_station.belong_line = 150 and line_station.station_name = to_station_name)
  ) then
            SET p_bed_reserve = 0;
         end if;
      end if;


      if start_train_date >= '20130101' then
         SET p_bed_reserve = p_bed_reserve*half;
      end if;

  if output2=2 then
   select '6===',p_total,p_bed_reserve;
  end if;
      SET p_total = p_total+p_bed_reserve;

      if total_distance = 0 and relay_ticket_type < 9 and special_visa = 0 then

  
         SET p_total = p_total
         -p_basic_seat0 -p_basic_seat1 -p_basic_seat2
         -p_basic_seat3 -p_basic_seat4 -p_basic_seat5;
         SET p_0 = p_0 -p_basic_seat0;
         SET p_1 = p_1 -p_basic_seat1;
         SET p_2 = p_2 -p_basic_seat2;
         SET p_3 = p_3 -p_basic_seat3;
         SET p_4 = p_4 -p_basic_seat4;
         SET p_5 = p_5 -p_basic_seat5;
  
         if relay_ticket_type >= 1 then
   if output2=2 then
    select '6_1===';
   end if;
            SET p_total = p_total
            -p_relay_fast0 -p_relay_fast1 -p_relay_fast2
            -p_relay_fast3 -p_relay_fast4 -p_relay_fast5;
            SET p_0 = p_0 -p_relay_fast0;
            SET p_1 = p_1 -p_relay_fast1;
            SET p_2 = p_2 -p_relay_fast2;
            SET p_3 = p_3 -p_relay_fast3;
            SET p_4 = p_4 -p_relay_fast4;
            SET p_5 = p_5 -p_relay_fast5;
         end if;
   if output2=2 then
    select '6_2===';
   end if;
         if p_0 < 0 then 
            SET p_total = p_total -p_0;
            SET p_0 = 0;
         end if;
         if p_1 < 0 then 
            SET p_total = p_total -p_1;
            SET p_1 = 0;
         end if;
         if p_2 < 0 then 
            SET p_total = p_total -p_2;
            SET p_2 = 0;
         end if;
         if p_3 < 0 then 
            SET p_total = p_total -p_3;
            SET p_3 = 0;
         end if;
         if p_4 < 0 then 
            SET p_total = p_total -p_4;
            SET p_4 = 0;
         end if;
         if p_5 < 0 then 
            SET p_total = p_total -p_5;
            SET p_5 = 0;
         end if;
      end if;
      SET p_relay = 0;
      SET total_base_price = 0;

  if output2=2 then
    select '6_3===',total_distance,d_total;
  end if;
      if total_distance > d_total then

  
  
         SET error_code = 0;
         SET belong_line1_relay = '0';
         SET belong_line2_relay = '0';
         SET belong_line3_relay = '0';
         SET belong_line4_relay = '0';
         SET belong_line5_relay = '0';
   if output2=2 then
    select '6_4===CALL arith.DG50_fetch_train_special_relay';
   end if;
         CALL arith.DG50_fetch_train_special_relay(train_no,
   start_train_date,belong_line1_relay,
  belong_line2_relay,belong_line3_relay,
         belong_line4_relay,belong_line5_relay,error_code,'0');
         if error_code < 0 then
   if output2=2 then
    select '6_4===';
   end if;
            SET ticket_price = error_code;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
         if (d_1 > 0 and belong_line1_relay = '0') or (d_2 > 0 and belong_line2_relay = '0')
         or (d_3 > 0 and belong_line3_relay = '0') or (d_4 > 0 and belong_line4_relay = '0')
         or (d_5 > 0 and belong_line5_relay = '0') then
  
            SET ticket_price = -80;
            SET SWP_Ret_Value = -80;
            LEAVE SWL_return;
         end if;
  
         SET p_tmp = p_total;
  
         SET p_total = p_total
         -p_basic_seat0 -p_basic_seat1 -p_basic_seat2
         -p_basic_seat3 -p_basic_seat4 -p_basic_seat5;
  
         if relay_ticket_type >= 1 then
  
            SET p_total = p_total
            -p_relay_fast0 -p_relay_fast1 -p_relay_fast2
            -p_relay_fast3 -p_relay_fast4 -p_relay_fast5;
         end if;
  
         select   distance_price.seat_price, 
   distance_price.fast_price 
  INTO p_seat,
   p_fast 
  from basic.distance_price
  where distance_price.distance0 <= total_distance 
   and distance_price.distance >= total_distance
          and distance_price.start_date <= start_train_date 
  and distance_price.stop_date >= start_train_date   
  LIMIT 1;
   if output2=2 then
    select '6_5===';
   end if;
         if ROW_COUNT() <> 1 then
  
            SET ticket_price = -81;
            SET SWP_Ret_Value = -81;
            LEAVE SWL_return;
         end if;
         SET p_base_seat = round(p_seat*student*child*half,0);
         if relay_ticket_type >= 1 then
            SET p_base_fast = round(p_fast*relay_ticket_type*student*child*half,0);
         else
            SET p_base_fast = 0;
         end if;
  
         if ticket_type not in(5,6,9) then 
            SET total_base_price = p_base_seat+p_base_fast;
         end if;
  
   if output2=2 then
    select '7====',p_total,p_base_seat;
   end if;
         SET p_total = p_total+p_base_seat;
  
         if relay_ticket_type >= 1 then 
   if output2=2 then
    select '4====',p_total,p_base_fast;
   end if;
            SET p_total = p_total+p_base_fast;
         end if;
   if output2=2 then
   select '8===',p_total,p_tmp;
   end if;
         SET p_relay = p_total -p_tmp;
      end if;
   END;
  leave PRICING_FINISH;
  end loop PRICING_FINISH;
  if output2=2 then
   select '8_1===',p_total,p_tmp;
   end if;
  
  
   SET p_seat_total = p_float_seat0+p_seat0;
 
 
 

   if style0 in('7','8','9') then 
      SET p_seat_total = p_0;
   end if;
 
   SET p_paper = 10;
   if start_train_date >= '20130101' then

      if d_1+d_2+d_3+d_4+d_5 > d_seat -d_0 then
 
         if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
            SET p_paper = 5;
         end if;
      else
         if ticket_type = 6 then
  
            if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
               SET p_paper = 5;
            end if;
         else
            if paper = '0' and p_seat_total <= 50 or paper = '2' and p_seat_total <= 60 then 
               SET p_paper = 5;
            end if;
         end if;
      end if;
 
 
 
      if bed_only = 0 and small_child = 0.5 then
         SET p_paper = 0;
      else
         SET p_paper = CEIL((p_paper*s_seat1*student+p_paper*s_seat2)*child*half/5.0)*5;
      end if;
   else
      if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
         SET p_paper = 5;
      end if;
   end if;

if output2=2 then
   select '8_2===',p_total,p_tmp;
   end if;


   if total_distance = 0 and relay_ticket_type < 9 and ticket_type not in(5,6,9) or special_visa = 255 then
      SET p_paper = 0;
   end if;
   if ticket_type in(5,6,9) and p_total <= 10 then 
      SET p_paper = 10;
   end if;

   if exists(select 1 
     from basic.CG52_train_dir_appendix 
     where CG52_train_dir_appendix.train_no = train_no 
   and CG52_train_dir_appendix.special_flag = '6') then
      SET p_paper = 0;
   end if;

   if special_visa = 1 then
      SET p_paper = 0;
   end if;

   if paper = '0' or paper = '2' and p_p_time = -1 or ticket_type in(5,6,9) then 
      SET p_total = p_total+p_paper;
   else 
      if paper = '1' then 
         SET p_paper = 0;
      else 
         if paper = '2' then

            if p_0 >= p_paper and p_p_time = 0 then 
               SET p_0 = p_0 -p_paper;
            else 
               if p_1 >= p_paper and p_p_time = 1 then 
                  SET p_1 = p_1 -p_paper;
               else 
                  if p_2 >= p_paper and p_p_time = 2 then 
                     SET p_2 = p_2 -p_paper;
                  else 
                     if p_3 >= p_paper and p_p_time = 3 then 
                        SET p_3 = p_3 -p_paper;
                     else 
                        if p_4 >= p_paper and p_p_time = 4 then 
                           SET p_4 = p_4 -p_paper;
                        else 
                           if p_5 >= p_paper and p_p_time = 5 then 
                              SET p_5 = p_5 -p_paper;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;
   if output2=2 then
   select '8_3===',p_total,p_tmp;
   end if;

   SET d_relay = 0;
   if total_distance > d_total then

      SET d_relay = total_distance -d_total;
      SET d_total = total_distance;
   end if;



   SET air_condition_price = 0;
   if (ticket_type in(5,6) or (seat_type_code in('1','3','5','B','C')
   and d_total > 200 and (total_distance > 0 or relay_ticket_type = 9)))
   and special_visa <> 255 and not exists(select 1 
         from basic.CG52_train_dir_appendix 
      where CG52_train_dir_appendix.train_no = train_no 
       and CG52_train_dir_appendix.special_flag = '6')
   and special_visa <> 1 then

      if st_air = '0' or st_air = '2' and p_p_time = -1 or ticket_type in(5,6) then
         SET air_condition_price = 10;
      else 
         if st_air = '1' then 
            SET air_condition_price = 0;
         else 
            if st_air = '2' then
  
               SET air_condition_price = 10;
               if p_0 >= air_condition_price and p_p_time = 0 then 
                  SET p_0 = p_0 -air_condition_price;
               else 
                  if p_1 >= air_condition_price and p_p_time = 1 then 
                     SET p_1 = p_1 -air_condition_price;
                  else 
                     if p_2 >= air_condition_price and p_p_time = 2 then 
                        SET p_2 = p_2 -air_condition_price;
                     else 
                        if p_3 >= air_condition_price and p_p_time = 3 then 
                           SET p_3 = p_3 -air_condition_price;
                        else 
                           if p_4 >= air_condition_price and p_p_time = 4 then 
                              SET p_4 = p_4 -air_condition_price;
                           else 
                              if p_5 >= air_condition_price and p_p_time = 5 then 
                                 SET p_5 = p_5 -air_condition_price;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;



   if start_train_date >= '20130101' then

      SET air_condition_price = CEIL((air_condition_price*s_seat1*student+air_condition_price*s_seat2)*child*half/5.0)*5;
      if bed_only = 0 and small_child = 0.5 then
         SET air_condition_price = 0;
      end if;
   end if;
   if output2=2 then
   select '8_4===',p_total,air_condition_price;
   end if;
   SET p_total = p_total+air_condition_price;




   if total_base_price > 0 then 
      SET total_base_price = total_base_price+p_paper+air_condition_price;
   end if;


   if ticket_type = 9 or (preference_style in('5','6')) then
      SET p_total = 0;
      SET p_paper = 0;
      SET air_condition_price = 0;
   end if;

   if exists(select 1 from basic.CG52_train_dir_appendix where train_no = train_no and special_flag not in('0','')) then

      SET p_total = p_total -p_relay;
      SET basic_rate = 0;
      SET p_basic_discount = 0;
      select   IFNULL(CAST(CG40_special_rate.basic_rate AS DECIMAL(4,3)),0) 
      INTO basic_rate 
      from basic.CG40_special_rate 
      where CG40_special_rate.train_no = train_no
       and CG40_special_rate.start_date <= start_train_date 
 and CG40_special_rate.stop_date >= start_train_date
       and CG40_special_rate.seat_type_code in(seat_type_code,'z')
       and CG40_special_rate.ticket_type & ticket_type_power = ticket_type_power   
 order by CG40_special_rate.seat_type_code LIMIT 1;
      if basic_rate > 0 then
   
    
         SET p_basic_discount = round(p_total*basic_rate,-1);
         SET p_total = p_total+p_basic_discount+p_relay;
      else
         SET p_total = p_total+p_relay;
      end if;
   end if;


   SET qz_add_price = 0;
   select   IFNULL(seat_type.belong_seat_type_code,"0") 
   INTO belong_seat_type_code 
   FROM basic.seat_type 
   WHERE seat_type.seat_type_code = seat_type_code   
   LIMIT 1;
   if (LOCATE(belong_seat_type_code,'23456') > 0 AND ticket_type <> 5 AND ticket_type <> 9 OR (special_visa = 2 and ticket_type = 5))
   and not (style0 in('7','8','9') or style1 in('7','8','9') or style2 in('7','8','9') or style3 in('7','8','9') or style4 in('7','8','9') or style5 in('7','8','9')) then

   
      SET qz_distance = 0;
      SET error_code = 0;
      if output2=2 then
    select '8_5===Çà²ØÁÐ³µ,call DG50_fetch_qz_distance',train_date,
       train_no,start_station_no,
    to_station_no,qz_distance,
    error_code;
    end if;
    
      CALL arith.DG50_fetch_qz_distance(train_date,
       train_no,start_station_no,
    to_station_no,qz_distance,
    error_code, 0);
    
   if output2=2 then
     select '8_5_1===Çà²ØÁÐ³µ,end call DG50_fetch_qz_distance',train_date,
        train_no,start_station_no,
     to_station_no,qz_distance,
     error_code;
    end if;
      if error_code < 0 then
 
         SET ticket_price = error_code;
         SET SWP_Ret_Value = ticket_price;
         LEAVE SWL_return;
      end if;
      if qz_distance > 0 then
 
         if LOCATE(belong_seat_type_code,'35') > 0 then
            SET qz_add_price = ROUND(qz_distance*1,-1);
         else 
            if LOCATE(belong_seat_type_code,'2') > 0 then
               SET qz_add_price = ROUND(qz_distance*0.9,-1);
            else 
               if LOCATE(belong_seat_type_code,'46') > 0 then
  
                  if special_visa = 2 then
                     SET qz_add_price = ROUND(qz_distance*(1.6 -1),-1);
                  else
                     SET qz_add_price = ROUND(qz_distance*1.6,-1);
                  end if;
               end if;
            end if;
         end if;
      end if;

 
      if ticket_type = 2 and LOCATE(belong_seat_type_code,'2') > 0 then 
         SET qz_add_price = qz_add_price/2;
      end if;
      if ticket_type = 2 and LOCATE(belong_seat_type_code,'46') > 0 then
         SET qz_add_price = ROUND(qz_distance*1.6,-1) -ROUND(qz_distance*0.9,-1)/2;
      end if;
      if ticket_type = 4 then 
         SET qz_add_price = qz_add_price/2;
      end if;
      if qz_add_price > 0 then
         SET p_total = p_total+qz_add_price;
      end if;
   end if;

if output2=2 then
   select '8_6===',p_total,qz_add_price,p_relay;
   end if;


   SET p_total = p_total -p_relay;
   SET discount = 0;
   SET discount_rate = 0;

   select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO discount_rate 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
    and DD40_price_discount.start_date <= start_train_date 
 and DD40_price_discount.stop_date >= start_train_date
    and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
    and DD40_price_discount.seat_type_code in(seat_type_code,'z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
   if discount_rate > 0 and ticket_type = 3 and s_seat1 = 1 then
      SET discount = round((p_bed+p_bed_reserve)*discount_rate,-1);
   end if;

   SET tmp_rate_z = 0.0;
   SET tmp_rate_w = 0.0;
   SET tmp_add_price = 0;
   if special_visa = 1 then

      SET p_base_seat_total = p_basic_seat5_0+p_basic_fast5_0+p_basic_air5_0+p_basic_seat4_0+p_basic_fast4_0+p_basic_air4_0+p_basic_seat3_0+p_basic_fast3_0+p_basic_air3_0+p_basic_seat2_0+p_basic_fast2_0+p_basic_air2_0+p_basic_seat1_0+p_basic_fast1_0+p_basic_air1_0+p_basic_seat0_0+p_basic_fast0_0+p_basic_air0_0;
      if seat_type_code in('3','C') then
   
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_z 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
  and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('1','B','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_w 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
   and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('3','C','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
      end if;
      if seat_type_code in('4','A','L') then
   
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_z 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
  and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('2','9','K','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_w 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
  and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('4','A','L','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
      end if;
    
      SET tmp_add_price = round(p_base_seat_total*(tmp_rate_w -tmp_rate_z),-1);
   end if;

   if discount_rate <> 0 then

   
      if not(discount_rate > 0 and ticket_type = 3 and s_seat1 = 1) then
    
         SET discount = round(p_total*discount_rate,-1);
      end if;  
    
      if discount_rate < 0 and ticket_type = 3 and s_seat1 = 1 then
         SET discount = round((p_bed+p_bed_reserve)*discount_rate,-1)+round((p_total -p_bed -p_bed_reserve)*discount_rate,-1);
      end if;
   end if;
   SET p_total = p_total+discount+p_relay+tmp_add_price;





if output2=2 then
   select '8_7===';
   end if;


   if preference_rate <> 0 then

      SET preference_price = round(p_total*(1+preference_rate),-1) -p_total;
   end if;
   SET ticket_price_obtion = p_total; 
   SET p_total = ticket_price_obtion+preference_price;





   if sleeper_style = 'E' then
      SET preference_word = 'ÕÛ';
   end if;
 
   if preference_style = '6' then
      SET preference_word = 'ÓÅ';
   else 
      if preference_style = '5' then
         SET preference_word = 'Ôù';
      else 
         if preference_style in('1','2','3','4','7','8','9','A','B','C','D','E') and preference_rate <> 0.0 then
            SET preference_word = 'ÕÛ';
         end if;
      end if;
   end if;
   if output2=2 then
    select '71====';
 end if;
   if ltrim(rtrim(preference_word)) NOT IN('','ÓÅ','Ôù') then

      select   IFNULL(DG50_discount_train_define.discount_flag,'0') 
      INTO discount_flag 
      from basic.DG50_discount_train_define 
      where DG50_discount_train_define.train_no = train_no
       and DG50_discount_train_define.start_date <= start_train_date 
 and DG50_discount_train_define.stop_date >= start_train_date
       and DG50_discount_train_define.seat_type_code in(seat_type_code,'z')
       and DG50_discount_train_define.ticket_type & ticket_type_power = ticket_type_power   
      order by DG50_discount_train_define.seat_type_code 
      LIMIT 1;
      if discount_flag = '1' then
         SET preference_word = 'ÕÛ';
      end if;
   end if;
   if output2=2 then
    select '72====',p_total,p_base_seat;
 end if;




   SET distance = d_total;
   if output2=2 then
   select '3==',ticket_price,p_total;
 end if;
   SET ticket_price = p_total;
   SET belong_line1 = line1;
   SET distance1 = d_1;
   SET ticket_price1 = p_1;
   SET belong_line2 = line2;
   SET distance2 = d_2;
   SET ticket_price2 = p_2;
   SET belong_line3 = line3;
   SET distance3 = d_3;
   SET ticket_price3 = p_3;
   SET belong_line4 = line4;
   SET distance4 = d_4;
   SET ticket_price4 = p_4;
   SET belong_line5 = line5;
   SET distance5 = d_5;
   SET ticket_price5 = p_5;
   SET relay_distance = d_relay;
   SET relay_price = p_relay;
   SET addition_cost = p_paper;
   SET bed_reserve_cost = p_bed_reserve;
   SET service_cost = p_float_total+p_basic_discount;
   SET train_air_condition = 0;
   SET total_base_price = total_base_price;
   SET price1_difference = p_1_0;
   SET price2_difference = p_2_0;
   SET price3_difference = p_3_0;
   SET price4_difference = p_4_0;
   SET price5_difference = p_5_0;
   SET basic_price = p_0+service_cost+p_relay;
   SET service_cost = qz_add_price;





   if start_train_date >= '20130101' then

      if ((style0 in('1','2','3',' ') and style1 in('1','2','3',' ') and style2 in('1','2','3',' ') and style3 in('1','2','3',' ')
      and style4 in('1','2','3',' ') and style5 in('1','2','3',' '))
      or (style0 in('1','2','3',' ','0','4','5','6') and style1 in('1','2','3',' ','0','4','5','6') and style2 in('1','2','3',' ','0','4','5','6') and style3 in('1','2','3',' ','0','4','5','6') and style4 in('1','2','3',' ','0','4','5','6') and style5 in('1','2','3',' ','0','4','5','6') and (ticket_type = 1 or ticket_type = 10)))
      and ticket_type <> 9 and not (total_distance = 0 and relay_ticket_type < 9 and special_visa = 0) and not (s_seat2 = 1 and special_visa = 2) and special_visa <> 1
      and not (bed_only = 0 and small_child = 0.5) and ticket_type <> 6 then
 
         SET insurance_price = 0;
         SET insurance_price1 = 0;
         SET insurance_price2 = 0;
         SET insurance_price3 = 0;
         SET insurance_price4 = 0;
         SET insurance_price5 = 0;
         SET @SWV_Error = 0;
         CALL arith.DG60_fetch_insurance_price(train_date,
   start_train_date,train_no,
  start_station_no,
  to_station_no,seat_type_code,
          bed_level,ticket_type,d_total,
  style0,insurance_price,distance1,
          style1,insurance_price1,
  distance2,style2,insurance_price2,distance3,
          style3,insurance_price3,
  distance4,style4,insurance_price4,distance5,
          style5,insurance_price5,error_code,0);
         SET error_no = @SWV_Error;
         if error_no != 0 then
  
            SET ticket_price = -88;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
         if error_code < 0 then
  
            SET ticket_price = error_code;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
  
 
         SET insurance_price =(insurance_price*s_seat1*student+insurance_price*s_seat2)*child*half*free;
         if s_seat1 = 1 then 
            SET insurance_price = insurance_price*home;
         end if;
 
  
  
  
  
         if p_float_seat0+p_seat0 < 30 then 
            SET insurance_price = CEIL(insurance_price/5.0)*5;
         end if;
 
  
         SET p_total = CEIL((p_total -insurance_price)/5.0)*5;
         SET ticket_price = CEIL((ticket_price -insurance_price)/5.0)*5;
         SET ticket_price_obtion = CEIL((ticket_price_obtion -insurance_price)/5.0)*5;
      end if;
      SET ticket_price1 = 0;
      SET ticket_price2 = 0;
      SET ticket_price3 = 0;
      SET ticket_price4 = 0;
      SET ticket_price5 = 0;
      SET relay_price = 0;
      SET service_cost = 0;
      SET train_air_condition = 0;
      SET total_base_price = 0;
      SET discount = 0;
      SET agent_fee = 0;
      SET qz_add_price = 0;
      SET basic_price = 0;

      SET basic_price = ticket_price -addition_cost -air_condition_price -bed_reserve_cost;
   end if;





   if sleeper_style = 'E' then

      SET p_total = round(p_total*sleeper_rate,-1);
      if preference_style = '0' then 
         SET preference_style = sleeper_style;
      end if;
      SET ticket_price_obtion = p_total;
      SET basic_price = p_total;
   if output2=2 then
  select '1==',ticket_price,p_total;
   end if;
      SET ticket_price = p_total;
      SET ticket_price1 = 0;
      SET ticket_price2 = 0;
      SET ticket_price3 = 0;
      SET ticket_price4 = 0;
      SET ticket_price5 = 0;
      SET relay_price = 0;
      SET addition_cost = 0;
      SET bed_reserve_cost = 0;
      SET service_cost = 0;
      SET air_condition_price = 0;
      SET train_air_condition = 0;
      SET total_base_price = 0;
      SET discount = 0;
      SET agent_fee = 0;
      SET preference_price = 0;
      SET qz_add_price = 0;
   end if;




   if exists(select 1 from basic.CG52_train_dir_appendix where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag = '6') then
  select 'insert gang bi handle';
      SET rate_exchange = '';
      SET rate_exchange_HK = 0;
      select   IFNULL(DG50_rate_exchange.rate_exchange,'') 
      INTO rate_exchange 
      from basic.DG50_rate_exchange 
      where DG50_rate_exchange.currency_code = '1'
       and DG50_rate_exchange.start_date <= DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d')
       and DG50_rate_exchange.stop_date >= DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
      SET rate_exchange_HK = CAST(rate_exchange AS DECIMAL(5,3));
 
  if output2=2 then
   select '2==',ticket_price,rate_exchange_HK;
  end if;
      SET ticket_price = round(ticket_price*rate_exchange_HK,-1);
      SET ticket_price1 = round(ticket_price1*rate_exchange_HK,-1);
      SET ticket_price2 = round(ticket_price2*rate_exchange_HK,-1);
      SET ticket_price3 = round(ticket_price3*rate_exchange_HK,-1);
      SET ticket_price4 = round(ticket_price4*rate_exchange_HK,-1);
      SET ticket_price5 = round(ticket_price5*rate_exchange_HK,-1);
      SET relay_price = round(relay_price*rate_exchange_HK,-1);
      SET addition_cost = round(addition_cost*rate_exchange_HK,-1);
      SET bed_reserve_cost = round(bed_reserve_cost*rate_exchange_HK,-1);
      SET service_cost = round(service_cost*rate_exchange_HK,-1);
      SET air_condition_price = round(air_condition_price*rate_exchange_HK,-1);
      SET train_air_condition = round(train_air_condition*rate_exchange_HK,-1);
      SET total_base_price = round(total_base_price*rate_exchange_HK,-1);
      SET discount = round(discount*rate_exchange_HK,-1);
      SET agent_fee = round(agent_fee*rate_exchange_HK,-1);
      SET basic_price = round(basic_price*rate_exchange_HK,-1);
      SET ticket_price_obtion = round(ticket_price_obtion*rate_exchange_HK,-1);
      SET qz_add_price = round(qz_add_price*rate_exchange_HK,-1);
      SET p_0 = round(p_0*rate_exchange_HK,-1);
      SET p_relay = round(p_relay*rate_exchange_HK,-1);
      SET p_paper = round(p_paper*rate_exchange_HK,-1);
      SET p_bed_reserve = round(p_bed_reserve*rate_exchange_HK,-1);
      SET preference_price = ticket_price -ticket_price_obtion;
 
      if ticket_type = 5 and preference_style not in('5','6') then
         SET preference_price = 0;
         SET ticket_price = 20;
         SET ticket_price_obtion = 20;
         SET basic_price = 20;
      end if;
   end if;




   select   CAST(rtrim(SUBSTRING(DG50_little_dictionary.field_name,17,6)) AS DECIMAL(5,4)) 
   INTO tax_rate 
   from basic.DG50_little_dictionary 
   where little_code = '06' 
    And SUBSTRING(field_name,1,8) <= train_date 
 and SUBSTRING(field_name,9,8) >= train_date;
   SET rowcount = ROW_COUNT();
   SET error = @SWV_Error;
   if output2=2 then
  select '101====',rowcount,tax_rate,ticket_price;
   end if;
   if rowcount > 0 and error = 0 then
      SET train_air_condition = round(ticket_price/tax_rate,0);
   end if;


   if output2 = 1 then
      select distance distance,ticket_price/10.0 price
,d_0 d_0,p_0/10.0 price_0                ,distance1 d_1,ticket_price1/10.0 price_1
,distance2 d_2,ticket_price2/10.0 price_2,distance3 d_3,ticket_price3/10.0 price_3
,distance4 d_4,ticket_price4/10.0 price_4,distance5 d_5,ticket_price5/10.0 price_5
,d_relay d_relay,p_relay/10.0 price_relay,p_paper/10.0 paper
,air_condition_price/10.0 air_condition_price
,p_bed_reserve/10.0 reserve,service_cost/10.0 service,new_type new
,total_base_price/10.0 total_base_price

,discount/10.0 discount
,agent_fee/10.0 agent_fee
,ticket_price_obtion/10.0 ticket_price_obtion
,basic_price/10.0 basic_price
,preference_style preference_style
,preference_price/10.0 preference_price
,preference_rate preference_rate
,preference_word preference_word
,qz_add_price/10.0 qz_add_price;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `CG40_price_para`(seat_type_code CHAR(1)        
,bed_level CHAR(1)        
,INOUT ticket_type TINYINT UNSIGNED         
,output2 TINYINT UNSIGNED                
,INOUT s_seat1 TINYINT UNSIGNED                  
,INOUT s_seat2 TINYINT UNSIGNED                  
,INOUT s_u TINYINT UNSIGNED                    
,INOUT s_m TINYINT UNSIGNED                    
,INOUT s_d TINYINT UNSIGNED                    
,INOUT s_su TINYINT UNSIGNED                    
,INOUT s_sd TINYINT UNSIGNED                    
,INOUT s_hu TINYINT UNSIGNED                        
,INOUT s_hd TINYINT UNSIGNED                        
,INOUT s_shu TINYINT UNSIGNED                        
,INOUT s_shd TINYINT UNSIGNED                        
,INOUT s_bed TINYINT UNSIGNED                  
,INOUT child DECIMAL(4,3)                  
,INOUT student DECIMAL(4,3)              
,INOUT half DECIMAL(4,3)                        
,INOUT free TINYINT UNSIGNED              
,INOUT home TINYINT UNSIGNED                
,INOUT bed_only TINYINT UNSIGNED                                  
,INOUT small_child DECIMAL(4,3))
BEGIN
   IF output2 is null then
      set output2 = 0;
   END IF;
   IF s_seat1 is null then
      set s_seat1 = 0;
   END IF;
   IF s_seat2 is null then
      set s_seat2 = 0;
   END IF;
   IF s_u is null then
      set s_u = 0;
   END IF;
   IF s_m is null then
      set s_m = 0;
   END IF;
   IF s_d is null then
      set s_d = 0;
   END IF;
   IF s_su is null then
      set s_su = 0;
   END IF;
   IF s_sd is null then
      set s_sd = 0;
   END IF;
   IF s_hu is null then
      set s_hu = 0;
   END IF;
   IF s_hd is null then
      set s_hd = 0;
   END IF;
   IF s_shu is null then
      set s_shu = 0;
   END IF;
   IF s_shd is null then
      set s_shd = 0;
   END IF;
   IF s_bed is null then
      set s_bed = 0;
   END IF;
   IF child is null then
      set child = 1;
   END IF;
   IF student is null then
      set student = 1;
   END IF;
   IF half is null then
      set half = 1;
   END IF;
   IF free is null then
      set free = 1;
   END IF;
   IF home is null then
      set home = 1;
   END IF;
   IF bed_only is null then
      set bed_only = 1;
   END IF;
   IF small_child is null then
      set small_child = 0;
   END IF;
   if bed_level in('1','2','3') then 
      SET s_bed = 1;
   end if;
   if seat_type_code in('1','3','5','B','C') then
      SET s_seat1 = 1;
   else
      SET s_seat2 = 1;
   end if;
   if  seat_type_code in('3','C') then

      if bed_level = '1' then 
         SET s_d = 1;
      end if;
      if bed_level = '2' then 
         SET s_m = 1;
      end if;
      if bed_level = '3' then 
         SET s_u = 1;
      end if;
   end if;
   if seat_type_code = '4' or seat_type_code = 'L' then

      if bed_level = '1' then 
         SET s_sd = 1;
      end if;
      if bed_level = '3' then 
         SET s_su = 1;
      end if;
   end if;
   if seat_type_code = '5' then

      if bed_level = '1' then 
         SET s_hd = 1;
      end if;
      if bed_level = '3' then 
         SET s_hu = 1;
      end if;
   end if;
   if seat_type_code in('6','F') then

      if bed_level = '1' then 
         SET s_shd = 1;
      end if;
      if bed_level = '3' then 
         SET s_shu = 1;
      end if;
   end if;
   if seat_type_code in('A','G','H') then 
      SET s_shd = 1;
   end if;

   if ticket_type = 8 then

      if seat_type_code in('1','2','7','8','B','K') then 
         SET ticket_type = 2;
      else 
         SET bed_only = 0;
         SET small_child = 0.5;
      end if;
   end if;
   if ticket_type in(7,4) then         
      SET half = 0.5;
   end if;
   if ticket_type = 6 then                
      SET home = 0;
   end if;
   if ticket_type = 5 then                
      SET free = 0;
   end if;
   if ticket_type = 3 and s_seat1 = 1 then 
      SET student = 0.5;
   end if;
   if ticket_type = 2 then                
      SET child = 0.5;
   end if;
                              
   if seat_type_code in('9','A') then 
      SET student = 1;
      SET child = 1;
      SET bed_only = 1;
      SET home = 1;
      SET free = 1;
   end if;
   if output2 = 1 then
      select ticket_type ticket_type
  ,s_seat1 s_yz
  ,s_seat2 s_rz
  ,s_u s_yw_up
  ,s_m s_yw_mid
  ,s_d s_yw_down
  ,s_su s_rw_up
  ,s_sd s_rw_down
  ,s_hu s_byw_up
  ,s_hd s_byw_down
  ,s_shu s_grw_up
  ,s_shd s_grw_down
  ,s_bed s_bed
  ,child child
  ,student student
  ,half half
  ,free free
  ,home home
  ,bed_only bed_only
  ,small_child small_child;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `CJ30_check_running`(check_date CHAR(8) ,
 command_id CHAR(16) ,
 parity INT ,
 assign_station CHAR(3),
 start_date CHAR(8) ,
 stop_date CHAR(8) ,
 running_style TINYINT UNSIGNED,
 running_rule INT ,
 day_difference TINYINT UNSIGNED ,
 out_flag TINYINT UNSIGNED ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE rtn_code INT;
   DECLARE p_train_no CHAR(12);
   DECLARE l_day_difference INT;
   IF command_id is null then
      set command_id = '0';
   END IF;
   IF parity is null then
      set parity = 0;
   END IF;
   IF assign_station is null then
      set assign_station = '000';
   END IF;
   IF start_date is null then
      set start_date = '';
   END IF;
   IF stop_date is null then
      set stop_date = '';
   END IF;
   IF running_style is null then
      set running_style = 1;
   END IF;
   IF running_rule is null then
      set running_rule = 1;
   END IF;
   IF day_difference is null then
      set day_difference = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   SET rtn_code = -1;
   IF command_id <> '0' then

      select   start_date, stop_date, running_style, running_rule, train_no INTO start_date,stop_date,running_style,running_rule,p_train_no FROM CJ30_schedule_command_sta WHERE command_id = command_id
      AND parity = parity AND assign_station = assign_station;
   end if;
   IF start_date <> '' then

      SET check_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -day_difference,check_date),'%Y%m%d');
      IF running_style = 0 AND check_date >= start_date then
         SET start_date = INSERT(check_date,7,2,'01');
         SET running_style = 31;
      end if;
      IF check_date <= stop_date and check_date >= start_date then
 
         IF running_style = 1 then
            SET rtn_code = 1;
         ELSE
            SET rtn_code = running_rule & power(2,((TIMESTAMPDIFF(DAY,start_date,check_date))%running_style));
         end if;
         IF rtn_code < 1 then
            SET rtn_code = -1;
         ELSE
            SET rtn_code = 1;
         end if;
      end if;
   end if;
   IF out_flag = 1 then
      SELECT rtn_code;
   end if;
   SET SWP_Ret_Value = rtn_code;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `CJ30_train`(train_date CHAR(8),
 INOUT train_no CHAR(12) ,
 INOUT station CHAR(10) ,
 out_flag TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
BEGIN




   DECLARE train_code CHAR(8); 
   DECLARE subbureau_code CHAR(2);
   DECLARE double_id CHAR(1); 
   DECLARE schema_id CHAR(1);
   DECLARE start_date CHAR(8); 
   DECLARE stop_date CHAR(8);
   DECLARE running_rule INT; 
   DECLARE running_style TINYINT UNSIGNED;
   DECLARE running_true INT; 
   DECLARE day_diff INT;
   DECLARE date_after INT; 
   DECLARE board_train_code CHAR(8);
   DECLARE station_name CHAR(10); 
   DECLARE station_telecode CHAR(3);
   DECLARE station_code CHAR(5); 
   DECLARE station_no CHAR(2);
   DECLARE return_code INT;
   DECLARE l_count INT;
   DECLARE max_station_no CHAR(2);
   DECLARE min_station_no CHAR(2);
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   
 if out_flag=2 then 
   select '00==begin cj30_train';
  end if;
   SET running_true = -1;
   SET return_code = LENGTH(ltrim(rtrim(station)));
   IF return_code = 3 then

      SET station_telecode = upper(ltrim(rtrim(station)));
      
   
      select   station_dictionary.station_name 
      INTO station_name 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = station_telecode
        AND station_dictionary.start_date <= train_date
        AND station_dictionary.stop_date >= train_date;
   ELSE 
      IF return_code = 5 then

         SET station_code = ltrim(rtrim(station));
         
  
         select   station_dictionary.station_name 
  INTO station_name 
  FROM basic.station_dictionary 
  WHERE station_dictionary.station_code = station_code
          AND station_dictionary.start_date <= train_date
          AND station_dictionary.stop_date >= train_date;
      ELSE 
         IF return_code = 7 then

            SET station_code = INSERT(ltrim(rtrim(station)),6,2,'');
            
   
            select   station_dictionary.station_name 
     INTO station_name 
     FROM basic.station_dictionary 
     WHERE station_dictionary.station_code = station_code
             AND station_dictionary.start_date <= train_date
             AND station_dictionary.stop_date >= train_date;
         ELSE
            SET station_name = station;
         end if;
      end if;
   end if;
   
ERROROUT:loop
   IF station_name IS NULL then 
      leave ERROROUT;
   end if;
   select   max(stop_time.station_no) 
   INTO max_station_no 
   FROM basic.stop_time 
   WHERE stop_time.train_no = train_no;
   if out_flag=2 then 
   select '4==',max_station_no,train_no;
  end if;
   IF max_station_no IS NULL then 
      leave ERROROUT;
   end if;

   select   min(stop_time.station_no) 
   INTO min_station_no 
   FROM basic.stop_time 
   WHERE stop_time.train_no = train_no;
  if out_flag=2 THEN
    select '5===',min_station_no,train_no;
  end if;
   IF min_station_no IS NULL then 
      leave ERROROUT;
   end if;
 
   select   stop_time.station_no 
   INTO station_no 
   FROM basic.stop_time 
   WHERE stop_time.train_no = train_no
    AND stop_time.station_name = station_name; 
 if out_flag=2 THEN
  select '6===',station_no,train_no,station_name;
 end if;
   IF station_no IS NULL then 
      leave ERROROUT;
   end if;

   IF max_station_no = station_no then
  
      select   stop_time.station_name 
      INTO station_name 
      FROM basic.stop_time 
      WHERE stop_time.train_no = train_no
       AND stop_time.station_no = min_station_no;
   end if;

   SET station = station_name;


   SET train_code = SUBSTRING(train_no,3,8);
   SET subbureau_code = SUBSTRING(train_no,1,2);
   SET double_id = SUBSTRING(train_no,11,1);
   SET schema_id = SUBSTRING(train_no,12,1);
   SET running_true = -1;
   WHILE SUBSTRING(train_code,1,1) = '0' DO
      SET train_code = ltrim(rtrim(INSERT(train_code,1,1,'')));
   END WHILE;
   SET train_code = ltrim(rtrim(train_code));
   
   if out_flag=2 then
  select '3====',train_code,subbureau_code,double_id,schema_id;
   end if;
   
   select   train_dir.running_style, 
    train_dir.running_rule 
   INTO running_style,
    running_rule 
   FROM basic.train_dir 
   WHERE train_dir.train_code = train_code
    AND train_dir.subbureau_code = subbureau_code
    AND train_dir.double_id = double_id
    AND train_dir.schema_id = schema_id;
   IF ROW_COUNT() = 1 then



      select   IFNULL(stop_time.day_difference,0), 
        stop_time.station_train_code, 
     stop_time.start_date, 
     stop_time.stop_date 
      INTO day_diff,
        board_train_code,
     start_date,
     stop_date 
      FROM basic.stop_time 
      WHERE stop_time.train_no = train_no
        AND stop_time.station_name = station_name;
      SET train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -day_diff,train_date),'%Y%m%d');
      SET date_after = TIMESTAMPDIFF(DAY,CAST(start_date AS DATETIME),CAST(train_date AS DATETIME));
   if out_flag=2 then 
   select '1===',train_date,start_date,stop_date,running_true,running_rule,date_after,running_style,power(2,(date_after%running_style)),running_rule & power(2,(date_after%running_style));
   end if;
      IF train_date < start_date or train_date > stop_date then
         SET running_true = 0;
      ELSE
         IF running_style <> 1 then
            SET running_true = running_rule & power(2,(date_after%running_style));
         ELSE
            SET running_true = 1;
         end if;
      end if;
   end if;
leave ERROROUT;
end loop ERROROUT;
 if out_flag=2 then
  select '2===',running_true;
 end if;
   IF running_true < 1 then
      SET train_no = '000000000000';
      SET return_code = -1;
   ELSE
      SET return_code = 1;
   end if;
   IF out_flag = 1 then
      SELECT train_no,station;
   end if;
   SET SWP_Ret_Value = return_code;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`localhost` PROCEDURE `CJ30_train_code`(train_date CHAR(8),
 INOUT train_no CHAR(12) ,
 INOUT station CHAR(10) ,  
 out_flag TINYINT UNSIGNED,
 inner_code CHAR(3),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE t_train_no CHAR(12); 
   DECLARE t_station_name CHAR(10);
   DECLARE station_telecode CHAR(3); 
   DECLARE station_code CHAR(5);
   DECLARE station_name CHAR(10); 
   DECLARE return_code INT;
   DECLARE l_match_string CHAR(12);
   DECLARE train_code CHAR(8);


   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE cursor_no int ;
   DECLARE SWV_CurNum INT DEFAULT 0;
   
   
   
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   
   
   
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   IF LENGTH(ltrim(rtrim(train_date))) < 8 then 
      LEAVE SWL_return;
   end if;
   SET train_code = ltrim(rtrim(train_no));
   SET train_no = '000000000000';
   SET return_code = LENGTH(ltrim(rtrim(station)));
   IF return_code = 3 then

      SET station_telecode = upper(ltrim(rtrim(station)));
      
      select   station_dictionary.station_name 
      INTO station_name 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = station_telecode
       AND station_dictionary.start_date <= train_date
       AND station_dictionary.stop_date >= train_date;
   ELSE 
      IF return_code = 5 then

         SET station_code = ltrim(rtrim(station));
         
         select   station_dictionary.station_name 
   INTO station_name 
   FROM basic.station_dictionary 
   WHERE station_dictionary.station_code = station_code
          AND station_dictionary.start_date <= train_date
          AND station_dictionary.stop_date >= train_date;
      ELSE 
         IF return_code = 7 then

            SET station_code = INSERT(ltrim(rtrim(station)),6,2,'');
            
            select   station_name.station_name 
   INTO station_name 
   FROM station_dictionary 
   WHERE station_name.station_code = station_code
             AND station_name.start_date <= train_date
             AND station_name.stop_date >= train_date;
         ELSE
            SET station_name = station;
         end if;
      end if;
   end if;
   
   IF station_name IS NULL then
      SET SWP_Ret_Value = -1;
      LEAVE SWL_return;
   end if;
 
   SET l_match_string = CONCAT('__',right(CONCAT('00000000',ltrim(rtrim(train_code))),8),'__');
   
 set NO_DATA=0;
   IF return_code = 1 then
     begin
  
    DECLARE get_train CURSOR FOR 
    SELECT stop_time.train_no,
     stop_time.station_name 
    FROM basic.stop_time
    WHERE stop_time.train_no LIKE l_match_string
     AND stop_time.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     AND stop_time.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     AND station_name IN
    (SELECT start_station_name
         FROM basic.train_dir
         WHERE train_dir.train_code = train_code
         AND train_dir.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0+5,train_date),'%Y%m%d')
         AND  train_dir.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -5,train_date),'%Y%m%d')
   )
    ORDER BY stop_time.stop_date DESC,stop_time.station_no ASC,stop_time.train_no ASC;
    OPEN get_train;
  FETCH get_train INTO t_train_no,t_station_name;
  SWL_Label:loop
    WHILE NO_DATA = 0 DO
   
    CALL CJ30_train(train_date,t_train_no,t_station_name,0,@SWV_RetVal);
    
    SET train_no = t_train_no;
    SET station = t_station_name;
    IF t_train_no <> '000000000000' then
    LEAVE SWL_Label;
    end if;
    
    
    FETCH get_train INTO t_train_no,t_station_name;
  
    
     
    END WHILE;
    leave SWL_Label;
    end loop SWL_Label;
  CLOSE get_train;
  
  end;
   ELSE
  begin
     
    DECLARE get_train CURSOR  FOR 
    SELECT stop_time.train_no,
     stop_time.station_name 
    FROM basic.stop_time
    WHERE ((stop_time.train_no LIKE l_match_string)
    
      OR (stop_time.station_train_code = train_code))
     AND stop_time.station_name = station_name
     AND stop_time.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     AND stop_time.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(stop_time.day_difference as signed),train_date),'%Y%m%d')
     ORDER BY stop_time.stop_date DESC,stop_time.station_no ASC,stop_time.train_no ASC;
  
     OPEN get_train;
  FETCH get_train INTO t_train_no,t_station_name;
  SWL_Label:loop
     WHILE NO_DATA = 0 DO
    
     CALL CJ30_train(train_date,t_train_no,t_station_name,0,@SWV_RetVal);
     
     SET train_no = t_train_no;
     SET station = t_station_name;
     IF t_train_no <> '000000000000' then
     LEAVE SWL_Label;
     end if;
     
     
     FETCH get_train INTO t_train_no,t_station_name;
   
     
   
     END WHILE;
     leave SWL_Label;
     end loop SWL_Label;
  CLOSE get_train;
  end;
   end if;
     
 
   

   IF out_flag = 1 then
      SELECT train_no,station;
   end if;
   IF train_no = '000000000000' then
      SET return_code = -1;
   ELSE 
      SET return_code = 1;
   end if;
   SET SWP_Ret_Value = return_code;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `CS50_Get_Train_Parameter`(INOUT `train_no_in` char(20),INOUT `start_station_telecode_in` char(3),INOUT `end_station_telecode_in` char(3),IN `output_in` tinyint)
BEGIN

DECLARE l_subbureau_code CHAR(2);
DECLARE l_double_id  CHAR(1);
DECLARE l_schema_id  CHAR(1);
DECLARE l_train_code  CHAR(8);
DECLARE l_start_station_name    CHAR(10);
DECLARE l_end_station_name     CHAR(10);



If train_no_in Is Null Then
   Set train_no_in = '24000000Z100';
End If;
If start_station_telecode_in Is Null Then
   Set start_station_telecode_in = 'BJP';
End If;
If end_station_telecode_in Is Null Then
   Set end_station_telecode_in = 'SHH';
End If;
If output_in Is Null Then
   Set output_in = 0;
End If;

IF char_length(ltrim(rtrim(train_no_in)))=12 THEN
                  
    set  l_subbureau_code = substring(train_no_in,1,2)
   ,  l_train_code = substring(train_no_in,3,8)
   ,  l_double_id = substring(train_no_in,11,1)
   ,  l_schema_id = substring(train_no_in,12,1);

                   
  WHILE substring(l_train_code,1,1)='0' do
     set l_train_code = insert(ltrim(l_train_code),1,1,'');
  end while;
  set l_train_code = ltrim(l_train_code);
   IF output_in = 2 THEN
    select '1===',l_train_code,l_subbureau_code,l_double_id,l_schema_id;
   end if;
  SELECT start_station_name
   , end_station_name
  into l_start_station_name,l_end_station_name
    FROM basic.train_dir 
     WHERE  train_code = l_train_code
      AND subbureau_code = l_subbureau_code
      AND double_id = l_double_id
      AND schema_id = l_schema_id;
  IF output_in = 2 THEN
    select '2===',l_start_station_name,l_end_station_name;
   end if;                        
  SELECT station_telecode
  into start_station_telecode_in
   FROM basic.station_dictionary
    WHERE  station_name = l_start_station_name
     AND start_date <= CURDATE()+0
     AND stop_date >=  CURDATE()+0;
  IF output_in = 2 THEN
    select '3===',l_start_station_name,l_end_station_name;
   end if;  
  SELECT station_telecode
  into end_station_telecode_in
   FROM basic.station_dictionary
    WHERE  station_name = l_end_station_name
     AND start_date <= CURDATE()+0
     AND stop_date >=  CURDATE()+0;

  set train_no_in = l_train_code;
              
  IF output_in = 1 THEN
    select l_train_code,train_no_in,start_station_telecode_in,end_station_telecode_in;
  end if;

ELSE
     set  train_no_in = '-1';

END if;

Commit;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `CS50_Same_City`(IN `train_date_in` char(8),IN `start_station_in` char(12),IN `to_station_in` char(20),IN `output_in` char(1),OUT `return_out` int)
BEGIN
DECLARE l_version CHAR(30);                                               
DECLARE l_start_city_code CHAR(4);
DECLARE l_to_city_code  CHAR(4);
DECLARE l_train_no   CHAR(12);
DECLARE l_board_station  CHAR(10) default '';
DECLARE l_pos_id    TINYINT;
DECLARE l_board_station_no CHAR(2);
DECLARE NO_RETURN_s INT;
DECLARE ok_RETURN_s INT;
DECLARE lab_return_s INT;

CREATE Temporary TABLE If Not Exists tmp_union_station1
 ( station_telecode CHAR(3) NOT NULL,
  station_name   CHAR(10) NOT NULL);
Truncate Table tmp_union_station1;

SET l_version = "Ver20130507.11:36";


If train_date_in Is Null Then
   Set train_date_in = '20050413';
End If;
If start_station_in Is Null Then
   Set start_station_in = 'BJP';
End If;
If to_station_in Is Null Then
   Set to_station_in = 'SHH';
End If;
If output_in Is Null Then
   Set output_in = 0;
End If;

set lab_return_s = 1;
lab_return:loop
if lab_return_s = 0 THEN
  leave lab_return;
end if;


set NO_RETURN_s = 1;
NO_RETURN:loop
if NO_RETURN_s = 0 THEN
  leave NO_RETURN;
end if;

set ok_RETURN_s = 1;
ok_RETURN:loop
if ok_RETURN_s = 0 THEN
  leave ok_RETURN;
end if;

IF output_in = "0" OR output_in = "2" THEN
                     
 IF char_length(rtrim(ltrim(start_station_in))) = 3 AND char_length(rtrim(ltrim(to_station_in))) = 3 THEN
                      
  SELECT city_code into l_start_city_code
   FROM basic.station_dictionary
    WHERE station_telecode = start_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;

  IF l_start_city_code IS NULL OR ltrim(rtrim(l_start_city_code)) = "" THEN
    leave NO_RETURN;
  end if;

  SELECT city_code into l_to_city_code
    FROM basic.station_dictionary
     WHERE station_telecode = to_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in;

  IF l_to_city_code IS NULL OR rtrim(ltrim(l_to_city_code)) = "" THEN
    leave NO_RETURN;
  end if;

  IF l_start_city_code = l_to_city_code THEN
    leave ok_RETURN;
  ELSE
                                   
    SELECT city_code into l_start_city_code 
      FROM basic.DG50_same_city_dictionary
       WHERE station_telecode = start_station_in
        AND start_date <= train_date_in
        AND stop_date >= train_date_in;

    IF l_start_city_code IS NULL OR l_start_city_code = ""  then 
      leave NO_RETURN;
    end if;
    
    SELECT city_code into l_to_city_code 
      FROM basic.DG50_same_city_dictionary
       WHERE station_telecode = to_station_in
        AND start_date <= train_date_in
        AND stop_date >= train_date_in;

    IF l_to_city_code IS NULL OR l_to_city_code = "" THEN
      leave NO_RETURN;
    end if;
    
    IF l_start_city_code = l_to_city_code THEN 
      leave ok_RETURN;
    ELSE 
      leave NO_RETURN;
    END if;
  END if;
 ELSE
  IF char_length(rtrim(start_station_in)) = 3 THEN
   SELECT station_name into start_station_in FROM basic.station_dictionary
    WHERE station_telecode = start_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  end if;
  IF char_length(rtrim(to_station_in)) = 3 THEN
   SELECT station_name into to_station_in FROM basic.station_dictionary
    WHERE station_telecode = to_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  END if;
                      
  SELECT city_code into l_start_city_code
   FROM basic.station_dictionary
    WHERE station_name = start_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  IF l_start_city_code IS NULL OR ltrim(rtrim(l_start_city_code)) = "" THEN 
    leave NO_RETURN;
  end if;
  SELECT city_code into l_to_city_code 
    FROM basic.station_dictionary
     WHERE station_name = to_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in;
  IF l_to_city_code IS NULL OR rtrim(ltrim(l_to_city_code)) = "" THEN 
    leave NO_RETURN;
  end if;
  IF l_start_city_code = l_to_city_code THEN
    leave ok_RETURN;
  ELSE                       
   SELECT city_code into l_start_city_code
     FROM basic.DG50_same_city_dictionary
      WHERE station_name = start_station_in
       AND start_date <= train_date_in
       AND stop_date >= train_date_in;
   IF l_start_city_code IS NULL OR l_start_city_code = "" THEN
     leave NO_RETURN;
   end if;
   
   SELECT city_code into l_to_city_code 
     FROM basic.DG50_same_city_dictionary
      WHERE station_name = to_station_in
       AND start_date <= train_date_in
       AND stop_date >= train_date_in;
   IF l_to_city_code IS NULL OR l_to_city_code = "" then 
     leave NO_RETURN;
   end if;
   
   IF l_start_city_code = l_to_city_code THEN
     leave ok_RETURN;
   ELSE 
     leave NO_RETURN;
   end if;
  END if;
 end if;

ELSEIF output_in = "1" THEN
 IF char_length(rtrim(ltrim(start_station_in))) = 3 AND char_length(rtrim(ltrim(to_station_in))) = 3 THEN
                                  
  SELECT city_code into l_start_city_code
    FROM basic.DG50_same_city_dictionary
     WHERE station_telecode = start_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in
      AND union_flag = "1";
  IF l_start_city_code IS NULL OR l_start_city_code = "" THEN 
    leave NO_RETURN;
  end if;
  
  SELECT city_code into l_to_city_code
    FROM basic.DG50_same_city_dictionary
     WHERE station_telecode = to_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in
      AND union_flag = "1";
  IF l_to_city_code IS NULL OR l_to_city_code = "" THEN
    leave NO_RETURN;
  end if;
  
  IF l_start_city_code = l_to_city_code THEN
    leave ok_RETURN;
  ELSE
    leave NO_RETURN;
  end if;
 ELSE                    
                                  
  SELECT city_code into l_start_city_code 
    FROM basic.DG50_same_city_dictionary
     WHERE station_name = start_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in
      AND union_flag = "1";
  IF l_start_city_code IS NULL OR l_start_city_code = "" THEN 
    leave NO_RETURN;
  end if;
  
  SELECT city_code into l_to_city_code 
    FROM basic.DG50_same_city_dictionary
     WHERE station_name = to_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in
      AND union_flag = "1";
  IF l_to_city_code IS NULL OR l_to_city_code = "" THEN
    leave NO_RETURN;
  end if;
  
  IF l_start_city_code = l_to_city_code THEN
    leave ok_RETURN;
  ELSE
    leave NO_RETURN;
  end if;
 END if;

ELSEIF output_in IN ('3','4') THEN                                                                                             
 
 IF output_in = '4' THEN                                            
  SET l_pos_id = instr(to_station_in,':');
  IF @pos_id > 0 THEN
   set l_board_station = substring(to_station_in,l_pos_id + 1,char_length(to_station_in)- l_pos_id );
   set to_station_in = Left(to_station_in,l_pos_id - 1);
  ELSE 
   set @board_station = '';
  end if;
  set output_in = '3';
 ELSE 
  set l_board_station = '';
 end if;

 set l_train_no = start_station_in;
 set start_station_in = to_station_in;
                     
 IF char_length(rtrim(ltrim(start_station_in))) = 3 THEN
  SELECT city_code into l_start_city_code
   FROM basic.station_dictionary
    WHERE station_telecode = start_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  IF row_count() = 0 OR ltrim(rtrim(l_start_city_code)) = "" THEN
    leave NO_RETURN;
  end if;
 ELSE             
  SELECT city_code into l_start_city_code
   FROM basic.station_dictionary
    WHERE station_name = start_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  IF row_count() = 0 OR ltrim(rtrim(l_start_city_code)) = ""  THEN
    leave NO_RETURN;
  end if;
 END if;

                               
 INSERT INTO tmp_union_station1 SELECT DISTINCT station_telecode,station_name 
   FROM basic.station_divide_dictionary                                                                                   
    WHERE city_code = l_start_city_code
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
                                                                                                                                                                                                                                                                                        

 IF l_board_station = '' THEN
  SELECT A.station_name FROM basic.stop_time A,tmp_union_station1 B
    WHERE A.train_no = l_train_no
     AND A.station_name = B.station_name
     ORDER BY A.station_no DESC limit 1;
 ELSE
                                                         
  SELECT station_no into l_board_station_no FROM basic.stop_time 
   WHERE train_no = l_train_no 
   AND station_name = l_board_station;
  IF row_count() = 0 THEN
    set @board_station_no = '01';
  end if;
    
  SELECT A.station_name FROM basic.stop_time A,tmp_union_station1 B
    WHERE A.train_no    = l_train_no
    AND  A.station_name  = B.station_name
    AND  A.station_no   > l_board_station_no
     ORDER BY A.station_no ASC limit 1;                                                      
 END if;

 set return_out = 0;
 leave lab_return;

ELSEIF output_in = "5" THEN
                     
 IF char_length(rtrim(ltrim(start_station_in))) = 3 AND char_length(rtrim(ltrim(to_station_in))) = 3 THEN
                    
  SELECT city_code into l_start_city_code
    FROM basic.station_divide_dictionary
     WHERE station_telecode = start_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in;
  IF l_start_city_code IS NULL OR l_start_city_code = "" THEN
    leave NO_RETURN;
  end if;
  
  SELECT city_code into l_to_city_code 
    FROM basic.station_divide_dictionary
     WHERE station_telecode = to_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in;
  IF l_to_city_code IS NULL OR l_to_city_code = "" THEN
    leave NO_RETURN;
  end if;
  
  IF l_start_city_code = l_to_city_code THEN
    leave ok_RETURN;
  ELSE
    leave NO_RETURN;
  end if;
 ELSE                    
  IF char_length(rtrim(start_station_in)) = 3 THEN
   SELECT station_name into start_station_in FROM basic.station_dictionary
    WHERE station_telecode = start_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  END if;
  IF char_length(rtrim(to_station_in)) = 3 THEN
   SELECT station_name into to_station_in FROM basic.station_dictionary
    WHERE station_telecode = to_station_in
     AND start_date <= train_date_in
     AND stop_date >= train_date_in;
  END if;
                                  
  SELECT city_code into l_start_city_code
    FROM basic.station_divide_dictionary
     WHERE station_name = start_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in;
  IF l_start_city_code IS NULL OR l_start_city_code = ""  THEN
    leave NO_RETURN;
  end if;
  
  SELECT city_code  into l_to_city_code 
    FROM basic.station_divide_dictionary
     WHERE station_name = to_station_in
      AND start_date <= train_date_in
      AND stop_date >= train_date_in;
  IF l_to_city_code IS NULL OR l_to_city_code = "" THEN
    leave NO_RETURN;
  end if;
  
  IF l_start_city_code = l_to_city_code THEN
    leave ok_RETURN;
  ELSE
    leave NO_RETURN;
  end if;
 END if;

end if;

set ok_RETURN_s = 0;
end loop ok_RETURN;

IF output_in = "0" THEN
  SELECT 1;
end if;
set return_out = 1;
leave lab_return;

set NO_RETURN_s = 0;
end loop NO_RETURN;
IF output_in = "0" THEN 
   SELECT 0;
end if;
IF output_in = "3" then 
   SELECT "";
end if;
set return_out = 0;
leave lab_return;

set lab_return_s = 0;
end loop lab_return;


Commit;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_dcz_fetch_price`(total_distance INT
,train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,seat_feature CHAR(1)
,special_visa TINYINT UNSIGNED
,relay_ticket_type TINYINT UNSIGNED


,INOUT preference_style CHAR(1)


,INOUT preference_rate DECIMAL(4,3)

,preference_flag CHAR(1)  
,INOUT distance SMALLINT
,INOUT ticket_price SMALLINT
,INOUT belong_line1 TINYINT UNSIGNED
,INOUT distance1 SMALLINT
,INOUT ticket_price1 SMALLINT
,INOUT belong_line2 TINYINT UNSIGNED
,INOUT distance2 SMALLINT
,INOUT ticket_price2 SMALLINT
,INOUT belong_line3 TINYINT UNSIGNED
,INOUT distance3 SMALLINT
,INOUT ticket_price3 SMALLINT
,INOUT belong_line4 TINYINT UNSIGNED
,INOUT distance4 SMALLINT
,INOUT ticket_price4 SMALLINT
,INOUT belong_line5 TINYINT UNSIGNED
,INOUT distance5 SMALLINT
,INOUT ticket_price5 SMALLINT
,INOUT relay_distance SMALLINT
,INOUT relay_price SMALLINT
,INOUT addition_cost SMALLINT
,INOUT bed_reserve_cost SMALLINT
,INOUT service_cost SMALLINT
,INOUT air_condition_price SMALLINT
,INOUT train_air_condition SMALLINT
,INOUT total_base_price SMALLINT
,price1_difference SMALLINT
,price2_difference SMALLINT
,price3_difference SMALLINT
,price4_difference SMALLINT
,price5_difference SMALLINT
,INOUT discount SMALLINT
,INOUT agent_fee SMALLINT
,INOUT preference_price SMALLINT
,INOUT basic_price SMALLINT

,INOUT ticket_price_obtion SMALLINT
,INOUT preference_word CHAR(2)


,INOUT qz_add_price SMALLINT
,output2 TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE p_seat SMALLINT;
   DECLARE p_new_seat SMALLINT;
   DECLARE p_fast SMALLINT;
   DECLARE p_new_fast SMALLINT;
   DECLARE pp_fast SMALLINT;
   DECLARE pp_new_fast SMALLINT;
   DECLARE p_soft_seat SMALLINT;
   DECLARE p_new_soft_seat SMALLINT;
   DECLARE p_up_bed SMALLINT;
   DECLARE p_new_up_bed SMALLINT;
   DECLARE p_middle_bed SMALLINT;
   DECLARE p_new_middle_bed SMALLINT;
   DECLARE p_down_bed SMALLINT;
   DECLARE p_new_down_bed SMALLINT;
   DECLARE p_up_soft SMALLINT;
   DECLARE p_new_up_soft SMALLINT;
   DECLARE p_down_soft SMALLINT;
   DECLARE p_new_down_soft SMALLINT;
   DECLARE p_up_super SMALLINT;
   DECLARE p_new_up_super SMALLINT;
   DECLARE p_down_super SMALLINT;
   DECLARE p_new_down_super SMALLINT;
   DECLARE p_up_soft_super SMALLINT;
   DECLARE p_new_up_soft_super SMALLINT;
   DECLARE p_down_soft_super SMALLINT;
   DECLARE p_new_down_soft_super SMALLINT;
   DECLARE p_air SMALLINT;
   DECLARE p_new_air SMALLINT;
   DECLARE p_new_double_seat SMALLINT;
   DECLARE p_new_double_bed SMALLINT;
   DECLARE p_new_double_fast SMALLINT;
   DECLARE pp_new_double_fast SMALLINT;
   DECLARE p_new_double_air SMALLINT;
   DECLARE from_station_name CHAR(10);
   DECLARE change_station_name CHAR(10);
   DECLARE to_station_name CHAR(10);
   DECLARE change_station_no CHAR(2);
   DECLARE free_station_name CHAR(10);
   DECLARE from_stations SMALLINT;
   DECLARE free_station_no CHAR(2);
   DECLARE to_stations SMALLINT;
   DECLARE subbureau_code CHAR(2);
   DECLARE train_class CHAR(1);
   DECLARE co_train_date CHAR(8);
   DECLARE train_code CHAR(8);
   DECLARE train_class1 CHAR(1);
   DECLARE co_train_no CHAR(12);
   DECLARE double_id CHAR(1);
   DECLARE train_class2 CHAR(1);
   DECLARE co_seat_type CHAR(1);
   DECLARE schema_id CHAR(1);
   DECLARE train_class_level SMALLINT;
   DECLARE start_date CHAR(8);
   DECLARE start_train_date CHAR(8);
   DECLARE stop_date CHAR(8);
   DECLARE day_diff TINYINT UNSIGNED;
   DECLARE service_type CHAR(1);
   DECLARE new_type CHAR(1);
   DECLARE temp_seat_type CHAR(1);
   DECLARE seat_type0 CHAR(1);
   DECLARE ticket_type_power INT;
   DECLARE tmp_ticket_type INT;
   DECLARE s_seat1 TINYINT UNSIGNED;
   DECLARE s_seat2 TINYINT UNSIGNED;
   DECLARE s_u TINYINT UNSIGNED;
   DECLARE s_shu TINYINT UNSIGNED;
   DECLARE s_hu TINYINT UNSIGNED;
   DECLARE s_su TINYINT UNSIGNED;
   DECLARE s_m TINYINT UNSIGNED;
   DECLARE s_shd TINYINT UNSIGNED;
   DECLARE s_hd TINYINT UNSIGNED;
   DECLARE s_sd TINYINT UNSIGNED;
   DECLARE s_d TINYINT UNSIGNED;
   DECLARE s_bed TINYINT UNSIGNED;
   DECLARE bed_only TINYINT UNSIGNED;
   DECLARE half DECIMAL(4,3);
   DECLARE home TINYINT UNSIGNED;
   DECLARE student DECIMAL(4,3);
   DECLARE free TINYINT UNSIGNED;
   DECLARE child DECIMAL(4,3);
   DECLARE small_child DECIMAL(4,3);
   DECLARE style0 CHAR(1);
   DECLARE style1 CHAR(1);
   DECLARE line1 TINYINT UNSIGNED;
   DECLARE style2 CHAR(1);
   DECLARE line2 TINYINT UNSIGNED;
   DECLARE style3 CHAR(1);
   DECLARE line3 TINYINT UNSIGNED;
   DECLARE style4 CHAR(1);
   DECLARE line4 TINYINT UNSIGNED;
   DECLARE style_use CHAR(1);
   DECLARE style5 CHAR(1);
   DECLARE line5 TINYINT UNSIGNED;
   DECLARE line_use TINYINT UNSIGNED;

   DECLARE rate0 CHAR(6);
   DECLARE rate_a0 CHAR(6);
   DECLARE rate_x0 CHAR(6);
   DECLARE rate_a_x0 CHAR(6);
   DECLARE rate1 CHAR(6);
   DECLARE rate_a1 CHAR(6);
   DECLARE rate_x1 CHAR(6);
   DECLARE rate_a_x1 CHAR(6);
   DECLARE rate2 CHAR(6);
   DECLARE rate_a2 CHAR(6);
   DECLARE rate_x2 CHAR(6);
   DECLARE rate_a_x2 CHAR(6);
   DECLARE rate3 CHAR(6);
   DECLARE rate_a3 CHAR(6);
   DECLARE rate_x3 CHAR(6);
   DECLARE rate_a_x3 CHAR(6);
   DECLARE rate4 CHAR(6);
   DECLARE rate_a4 CHAR(6);
   DECLARE rate_x4 CHAR(6);
   DECLARE rate_a_x4 CHAR(6);
   DECLARE rate5 CHAR(6);
   DECLARE rate_a5 CHAR(6);
   DECLARE rate_x5 CHAR(6);
   DECLARE rate_a_x5 CHAR(6);

   DECLARE rate_seat0 CHAR(6);
   DECLARE rate_seat_x0 CHAR(6);
   DECLARE rate_seat_a0 CHAR(6);
   DECLARE rate_seat_a_x0 CHAR(6);
   DECLARE rate_seat1 CHAR(6);
   DECLARE rate_seat_x1 CHAR(6);
   DECLARE rate_seat_a1 CHAR(6);
   DECLARE rate_seat_a_x1 CHAR(6);
   DECLARE rate_seat2 CHAR(6);
   DECLARE rate_seat_x2 CHAR(6);
   DECLARE rate_seat_a2 CHAR(6);
   DECLARE rate_seat_a_x2 CHAR(6);
   DECLARE rate_seat3 CHAR(6);
   DECLARE rate_seat_x3 CHAR(6);
   DECLARE rate_seat_a3 CHAR(6);
   DECLARE rate_seat_a_x3 CHAR(6);
   DECLARE rate_seat4 CHAR(6);
   DECLARE rate_seat_x4 CHAR(6);
   DECLARE rate_seat_a4 CHAR(6);
   DECLARE rate_seat_a_x4 CHAR(6);
   DECLARE rate_seat5 CHAR(6);
   DECLARE rate_seat_x5 CHAR(6);
   DECLARE rate_seat_a5 CHAR(6);
   DECLARE rate_seat_a_x5 CHAR(6);

   DECLARE rate_seat_use CHAR(6);
   DECLARE rate_seat DECIMAL(4,3);
   DECLARE rate_seat_a_use CHAR(6);
   DECLARE rate_seat_a DECIMAL(4,3);
   DECLARE rate_seat_aa_use CHAR(6);
   DECLARE rate_seat_aa DECIMAL(4,3);
   DECLARE rate_use CHAR(6);
   DECLARE rate DECIMAL(4,3);
   DECLARE rate_a_use CHAR(6);
   DECLARE rate_a DECIMAL(4,3);
   DECLARE rate_aa_use CHAR(6);
   DECLARE rate_aa DECIMAL(4,3);
   DECLARE rate_to_400 DECIMAL(4,3);
   DECLARE d_0 SMALLINT;
   DECLARE dd_0 SMALLINT;
   DECLARE d_free0 SMALLINT;
   DECLARE d_free SMALLINT;
   DECLARE d_1 SMALLINT;
   DECLARE dd_1 SMALLINT;
   DECLARE d_free1 SMALLINT;
   DECLARE d_seat SMALLINT;
   DECLARE d_2 SMALLINT;
   DECLARE dd_2 SMALLINT;
   DECLARE d_free2 SMALLINT;
   DECLARE dd_seat SMALLINT;
   DECLARE d_3 SMALLINT;
   DECLARE dd_3 SMALLINT;
   DECLARE d_free3 SMALLINT;
   DECLARE d_bed SMALLINT;
   DECLARE d_4 SMALLINT;
   DECLARE dd_4 SMALLINT;
   DECLARE d_free4 SMALLINT;
   DECLARE d_relay SMALLINT;
   DECLARE d_5 SMALLINT;
   DECLARE dd_5 SMALLINT;
   DECLARE d_free5 SMALLINT;
   DECLARE d_total SMALLINT;
   DECLARE d_use SMALLINT;
   DECLARE dd_use SMALLINT;
   DECLARE d_tmp INT;
   DECLARE p_0 SMALLINT;
   DECLARE p_basic_seat0 SMALLINT;
   DECLARE p_relay_fast0 SMALLINT;
   DECLARE p_1 SMALLINT;
   DECLARE p_basic_seat1 SMALLINT;
   DECLARE p_relay_fast1 SMALLINT;
   DECLARE p_2 SMALLINT;
   DECLARE p_basic_seat2 SMALLINT;
   DECLARE p_relay_fast2 SMALLINT;
   DECLARE p_3 SMALLINT;
   DECLARE p_basic_seat3 SMALLINT;
   DECLARE p_relay_fast3 SMALLINT;
   DECLARE p_4 SMALLINT;
   DECLARE p_basic_seat4 SMALLINT;
   DECLARE p_relay_fast4 SMALLINT;
   DECLARE p_5 SMALLINT;
   DECLARE p_basic_seat5 SMALLINT;
   DECLARE p_relay_fast5 SMALLINT;
   DECLARE p_float SMALLINT;
   DECLARE p_basic SMALLINT;
   DECLARE p_add SMALLINT;
   DECLARE p_float_seat  smallint;
   DECLARE p_basic_seat SMALLINT;
   DECLARE p_float_bed SMALLINT;
   DECLARE p_basic_bed SMALLINT;
   DECLARE p_paper SMALLINT;
   DECLARE p_float_fast SMALLINT;
   DECLARE p_basic_fast SMALLINT;
   DECLARE p_bed_reserve SMALLINT;
   DECLARE p_float_air SMALLINT;
   DECLARE p_basic_air SMALLINT;
   DECLARE p_relay SMALLINT;
   DECLARE p_float_new SMALLINT;
   DECLARE p_float_total SMALLINT;
   DECLARE p_total SMALLINT;

   DECLARE paper CHAR(1);
   DECLARE st_air CHAR(1);
   DECLARE times SMALLINT;
   DECLARE p_tmp INT;
   DECLARE p_000 INT;
   DECLARE p_fast_900 INT;
   DECLARE gz_version TINYINT UNSIGNED;
   DECLARE p_p_bed_only TINYINT UNSIGNED;
   DECLARE p_basic_tmp SMALLINT;
   DECLARE p_000_tmp SMALLINT;
   DECLARE p_p_time INT;


   DECLARE p_base_seat SMALLINT;
   DECLARE p_base_fast SMALLINT;

   DECLARE p_1_0 SMALLINT;
   DECLARE p_2_0 SMALLINT;
   DECLARE p_3_0 SMALLINT;
   DECLARE p_4_0 SMALLINT;
   DECLARE p_5_0 SMALLINT;
   DECLARE break TINYINT UNSIGNED;
   DECLARE p_diff SMALLINT;
   DECLARE p_state SMALLINT;
   DECLARE p_basic_state SMALLINT;

   DECLARE discount_rate DECIMAL(4,3);
   DECLARE left_start_date INT;
   DECLARE left_end_date INT;
   DECLARE left_start_time INT;
   DECLARE left_end_time INT;
   DECLARE current_date2 CHAR(8);
   DECLARE start_time CHAR(4);
   DECLARE end_time CHAR(4);
   DECLARE l_start_time CHAR(4);
   DECLARE l_end_time CHAR(4);
   DECLARE diff1 TINYINT UNSIGNED;
   DECLARE diff2 TINYINT UNSIGNED;
   DECLARE diff TINYINT UNSIGNED;
   DECLARE p_bed SMALLINT;


   DECLARE basic_rate DECIMAL(4,3);  
   DECLARE p_basic_discount SMALLINT;

   DECLARE p_tmp_seat INT;  
   DECLARE p_tmp_fast INT;  
   DECLARE p_111 INT;  
   DECLARE p_222 INT;   

   DECLARE p_basic_fast_0 INT; 
   DECLARE p_basic_seat_0 INT; 
   DECLARE p_basic_air_0 INT;  
   DECLARE p_base_seat_total INT;  
   DECLARE p_basic_seat5_0 INT;
   DECLARE p_basic_fast5_0 INT;
   DECLARE p_basic_air5_0 INT; 
   DECLARE p_basic_seat4_0 INT;
   DECLARE p_basic_fast4_0 INT;
   DECLARE p_basic_air4_0 INT;
   DECLARE p_basic_seat3_0 INT;
   DECLARE p_basic_fast3_0 INT;
   DECLARE p_basic_air3_0 INT;
   DECLARE p_basic_seat2_0 INT;
   DECLARE p_basic_fast2_0 INT;
   DECLARE p_basic_air2_0 INT;
   DECLARE p_basic_seat1_0 INT;
   DECLARE p_basic_fast1_0 INT;
   DECLARE p_basic_air1_0 INT;
   DECLARE p_basic_seat0_0 INT;
   DECLARE p_basic_fast0_0 INT;
   DECLARE p_basic_air0_0 INT;

   DECLARE p_total_fast INT;
   DECLARE p_new_total_fast INT;

   DECLARE temp_preference_style CHAR(1);
   DECLARE temp_preference_rate DECIMAL(4,2);
   DECLARE error_code SMALLINT;

   DECLARE discount_flag CHAR(1);

   DECLARE train_class_rate DECIMAL(4,2);
   DECLARE train_class1_rate DECIMAL(4,2);
   DECLARE train_class2_rate DECIMAL(4,2);

   DECLARE qz_distance SMALLINT;

   DECLARE start_station_name CHAR(10);
   DECLARE end_station_name CHAR(10);
   DECLARE gj_preference CHAR(6);
   DECLARE rate_exchange CHAR(6);
   DECLARE rate_exchange_HK DECIMAL(5,3);

   DECLARE sp_id SMALLINT;

   DECLARE p_train_basic_price SMALLINT; 
   DECLARE p_p_basic_price SMALLINT; 



   DECLARE p_float_seat0 SMALLINT;
   DECLARE p_seat0 SMALLINT;
   DECLARE p_float_seat1 SMALLINT;
   DECLARE p_seat1 SMALLINT;
   DECLARE p_float_seat2 SMALLINT;
   DECLARE p_seat2 SMALLINT;
   DECLARE p_float_seat3 SMALLINT;
   DECLARE p_seat3 SMALLINT;
   DECLARE p_float_seat4 SMALLINT;
   DECLARE p_seat4 SMALLINT;
   DECLARE p_float_seat5 SMALLINT;
   DECLARE p_seat5 SMALLINT;
   DECLARE p_seat_total SMALLINT;


   DECLARE dw_flag CHAR(1); 
   DECLARE dw_preference_rate DECIMAL(4,3);
   DECLARE dw_preference_word CHAR(2);
   DECLARE dw_error_code SMALLINT;
   DECLARE dw_preference_style CHAR(1);


   DECLARE tax_rate DECIMAL(5,4);
   DECLARE error INT;
   DECLARE rowcount INT;

   DECLARE discount_seat_type CHAR(1);
   DECLARE discount_bed_level CHAR(1);
   DECLARE sleeper_style CHAR(1);
   DECLARE sleeper_rate DECIMAL(4,3);

   DECLARE pdl_price SMALLINT;
   DECLARE pdl_preference_word CHAR(2);
   DECLARE pdl_error_code INT;

   DECLARE pdl_ticket_price SMALLINT;
   DECLARE pdl_preference_rate DECIMAL(4,3);

   DECLARE ls_train_no_part CHAR(6);
   DECLARE p_basic_seat_pdl SMALLINT;  
   DECLARE p_fast_pdl SMALLINT;   
 
   
   DECLARE tmp_rate_z DECIMAL(4,3);
   DECLARE tmp_rate_w DECIMAL(4,3);
   DECLARE tmp_add_price SMALLINT;                           
   DECLARE insurance_price DECIMAL(6,2);
   DECLARE insurance_price1 SMALLINT;
   DECLARE insurance_price2 SMALLINT;
   DECLARE insurance_price3 SMALLINT;
   DECLARE insurance_price4 SMALLINT;
   DECLARE insurance_price5 SMALLINT;
   DECLARE error_no INT;
   DECLARE SWV_train_code_Str CHAR(8);
   DECLARE belong_line1_relay CHAR(1);
   DECLARE belong_line2_relay CHAR(1);
   DECLARE belong_line3_relay CHAR(1);
   DECLARE belong_line4_relay CHAR(1);
   DECLARE belong_line5_relay CHAR(1);
   DECLARE belong_line1_relay_pdl CHAR(1);
   DECLARE belong_line2_relay_pdl CHAR(1);
   DECLARE belong_line3_relay_pdl CHAR(1);
   DECLARE belong_line4_relay_pdl CHAR(1);
   DECLARE belong_line5_relay_pdl CHAR(1);
   declare call_pr_return_code smallint;
   
   BEGIN
      SET @SWV_Error = 1;
   END;
   IF special_visa is null then
      set special_visa = 0;
   END IF;
   IF relay_ticket_type is null then
      set relay_ticket_type = 0;
   END IF;
   IF preference_style is null then
      set preference_style = '0';
   END IF;
   IF preference_rate is null then
      set preference_rate = 0;
   END IF;
   IF preference_flag is null then
      set preference_flag = '0';
   END IF;
   IF distance is null then
      set distance = 0;
   END IF;
   IF ticket_price is null then
      set ticket_price = 0;
   END IF;
   IF belong_line1 is null then
      set belong_line1 = 0;
   END IF;
   IF distance1 is null then
      set distance1 = 0;
   END IF;
   IF ticket_price1 is null then
      set ticket_price1 = 0;
   END IF;
   IF belong_line2 is null then
      set belong_line2 = 0;
   END IF;
   IF distance2 is null then
      set distance2 = 0;
   END IF;
   IF ticket_price2 is null then
      set ticket_price2 = 0;
   END IF;
   IF belong_line3 is null then
      set belong_line3 = 0;
   END IF;
   IF distance3 is null then
      set distance3 = 0;
   END IF;
   IF ticket_price3 is null then
      set ticket_price3 = 0;
   END IF;
   IF belong_line4 is null then
      set belong_line4 = 0;
   END IF;
   IF distance4 is null then
      set distance4 = 0;
   END IF;
   IF ticket_price4 is null then
      set ticket_price4 = 0;
   END IF;
   IF belong_line5 is null then
      set belong_line5 = 0;
   END IF;
   IF distance5 is null then
      set distance5 = 0;
   END IF;
   IF ticket_price5 is null then
      set ticket_price5 = 0;
   END IF;
   IF relay_distance is null then
      set relay_distance = 0;
   END IF;
   IF relay_price is null then
      set relay_price = 0;
   END IF;
   IF addition_cost is null then
      set addition_cost = 0;
   END IF;
   IF bed_reserve_cost is null then
      set bed_reserve_cost = 0;
   END IF;
   IF service_cost is null then
      set service_cost = 0;
   END IF;
   IF air_condition_price is null then
      set air_condition_price = 0;
   END IF;
   IF train_air_condition is null then
      set train_air_condition = 0;
   END IF;
   IF total_base_price is null then
      set total_base_price = 0;
   END IF;
   IF price1_difference is null then
      set price1_difference = 0;
   END IF;
   IF price2_difference is null then
      set price2_difference = 0;
   END IF;
   IF price3_difference is null then
      set price3_difference = 0;
   END IF;
   IF price4_difference is null then
      set price4_difference = 0;
   END IF;
   IF price5_difference is null then
      set price5_difference = 0;
   END IF;
   IF discount is null then
      set discount = 0;
   END IF;
   IF agent_fee is null then
      set agent_fee = 0;
   END IF;
   IF preference_price is null then
      set preference_price = 0;
   END IF;
   IF basic_price is null then
      set basic_price = 0;
   END IF;
   IF ticket_price_obtion is null then
      set ticket_price_obtion = 0;
   END IF;
   IF preference_word is null then
      set preference_word = '';
   END IF;
   IF qz_add_price is null then
      set qz_add_price = 0;
   END IF;
   IF output2 is null then
      set output2 = 0;
   END IF;
   SET dw_preference_style = preference_style;

   SET p_train_basic_price = 0;
   SET p_p_basic_price = 0;
   SET discount_flag = '0';
   SET temp_preference_style = '0';
   SET temp_preference_rate = 0;
   SET error_code = 0;
   SET train_class_rate = 0;
   SET train_class2_rate = 0;
   SET train_class2_rate = 0;

   SET p_total_fast = 0;
   SET p_new_total_fast = 0;
   SET p_basic_fast_0 = 0;
   SET p_basic_seat_0 = 0;
   SET p_basic_air_0 = 0;
   SET p_base_seat_total = 0;
   SET p_basic_seat5_0 = 0;
   SET p_basic_fast5_0 = 0;
   SET p_basic_air5_0 = 0;
   SET p_basic_seat4_0 = 0;
   SET p_basic_fast4_0 = 0;
   SET p_basic_air4_0 = 0;
   SET p_basic_seat3_0 = 0;
   SET p_basic_fast3_0 = 0;
   SET p_basic_air3_0 = 0;
   SET p_basic_seat2_0 = 0;
   SET p_basic_fast2_0 = 0;
   SET p_basic_air2_0 = 0;
   SET p_basic_seat1_0 = 0;
   SET p_basic_fast1_0 = 0;
   SET p_basic_air1_0 = 0;
   SET p_basic_seat0_0 = 0;
   SET p_basic_fast0_0 = 0;
   SET p_basic_air0_0 = 0;


   SET basic_rate = 0;
   SET p_basic_discount = 0;
   SET p_tmp_seat = 0;
   SET p_tmp_fast = 0;
   SET p_111 = 0;
   SET p_222 = 0;

   SET p_float = 0;
   SET p_float_seat = 0;
   SET p_float_bed = 0;
   SET p_float_fast = 0;
   SET p_float_air = 0;
   SET p_float_new = 0;
   SET p_float_total = 0;
   SET rate0 = '0';
   SET rate_a0 = '0';
   SET rate_x0 = '0';
   SET rate_a_x0 = '0';
   SET rate1 = '0';
   SET rate_a1 = '0';
   SET rate_x1 = '0';
   SET rate_a_x1 = '0';
   SET rate2 = '0';
   SET rate_a2 = '0';
   SET rate_x2 = '0';
   SET rate_a_x2 = '0';
   SET rate3 = '0';
   SET rate_a3 = '0';
   SET rate_x3 = '0';
   SET rate_a_x3 = '0';
   SET rate4 = '0';
   SET rate_a4 = '0';
   SET rate_x4 = '0';
   SET rate_a_x4 = '0';
   SET rate5 = '0';
   SET rate_a5 = '0';
   SET rate_x5 = '0';
   SET rate_a_x5 = '0';
   SET rate_seat0 = '0';
   SET rate_seat_x0 = '0';
   SET rate_seat_a0 = '0';
   SET rate_seat_a_x0 = '0';
   SET rate_seat1 = '0';
   SET rate_seat_x1 = '0';
   SET rate_seat_a1 = '0';
   SET rate_seat_a_x1 = '0';
   SET rate_seat2 = '0';
   SET rate_seat_x2 = '0';
   SET rate_seat_a2 = '0';
   SET rate_seat_a_x2 = '0';
   SET rate_seat3 = '0';
   SET rate_seat_x3 = '0';
   SET rate_seat_a3 = '0';
   SET rate_seat_a_x3 = '0';
   SET rate_seat4 = '0';
   SET rate_seat_x4 = '0';
   SET rate_seat_a4 = '0';
   SET rate_seat_a_x4 = '0';

   
   set transaction isolation level read UNCOMMITTED;
   SET p_p_time = -1;

   if relay_ticket_type = 2 then 
      SET relay_ticket_type = 9;
   end if;
   SET gz_version = 1;
   SET ticket_type_power = power(2,ticket_type -1);
   if ticket_type in(5,6,8,9) then 
      SET relay_ticket_type = 9;
   end if;
   if relay_ticket_type = 2 then 
      SET relay_ticket_type = 9;
      SET special_visa = 255;
   else 
      if relay_ticket_type = 8 then 
         SET relay_ticket_type = 2;
      end if;
   end if;
 

   SET subbureau_code = SUBSTRING(train_no,1,2);
   SET train_code = SUBSTRING(train_no,3,8);
   SET double_id = SUBSTRING(train_no,11,1);
   SET schema_id = SUBSTRING(train_no,12,1);
   WHILE SUBSTRING(train_code,1,1) = '0' DO
      SET SWV_train_code_Str = SUBSTRING(train_code,2,LENGTH(train_code) -1);
      SET train_code = SWV_train_code_Str;
   END WHILE;

   select   stop_time.start_date, 
    stop_time.stop_date, 
 stop_time.day_difference 
   INTO start_date,
    stop_date,
 day_diff 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no 
 and (DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date 
  and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date) 
  LIMIT 1;

   if ROW_COUNT() = 0 then
  
      SET ticket_price = -2;
      SET SWP_Ret_Value = -2;
      LEAVE SWL_return;
   end if;
   SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(day_diff as signed),STR_TO_DATE(train_date,'%Y%m%d')),
   '%Y%m%d');
   if not(start_date <= start_train_date and stop_date >= start_train_date) then

      SET ticket_price = -3;
      SET SWP_Ret_Value = -3;
      LEAVE SWL_return;
   end if;

   select   train_dir.train_class_code, 
    train_dir.price_style, 
 train_dir.belong_line1, 
 train_dir.price_style1, 
 train_dir.belong_line2, 
 train_dir.price_style2, 
 train_dir.belong_line3, 
 train_dir.price_style3, 
 train_dir.belong_line4, 
 train_dir.price_style4, 
 train_dir.belong_line5, 
 train_dir.price_style5, 
 train_dir.service_type, 
 train_dir.start_station_name, 
 train_dir.end_station_name 
   INTO train_class,
    style0,
 line1,
 style1,
 line2,
 style2,
 line3,
 style3,
 line4,
 style4,
    line5,
 style5,
 service_type,
 start_station_name,
 end_station_name 
   from basic.train_dir 
   where train_dir.subbureau_code = subbureau_code 
    and train_dir.train_code = train_code
    and train_dir.double_id = double_id 
 and train_dir.schema_id = schema_id
    and train_dir.start_date <= start_train_date 
 and train_dir.stop_date >= start_train_date   
   LIMIT 1;
   if ROW_COUNT() = 0 then

      SET ticket_price = -10;
      SET SWP_Ret_Value = -10;
      LEAVE SWL_return;
   end if;


 if output2=2 then
  select '1===',style0,style1,style2,style3,style4,style5;
 end if;
   if style0 not in('7',' ') or style1 not in('7',' ') or style2 not in('7',' ')
   or style3 not in('7',' ') or style4 not in('7',' ') or style5 not in('7',' ') then

      SET ticket_price = -11;
      SET SWP_Ret_Value = -11;
      LEAVE SWL_return;
   end if;


   if train_class = '6' then 
      SET train_class = '4';
   end if;
   SET d_free = -1;
   if d_free = 0 then

      select   stop_time.station_name 
      INTO from_station_name 
      from basic.stop_time 
      where stop_time.train_no = train_no 
       and stop_time.station_no = start_station_no
       and stop_time.start_date <= start_train_date 
 and stop_time.stop_date >= start_train_date   
      LIMIT 1;
      if ROW_COUNT() = 0 then
  
         SET ticket_price = -20;
         SET SWP_Ret_Value = -20;
         LEAVE SWL_return;
      end if;
      select   station_name 
      INTO to_station_name 
      from basic.stop_time 
      where train_no = train_no 
       and station_no = to_station_no
       and start_date <= start_train_date 
 and stop_date >= start_train_date   
      LIMIT 1;
      if ROW_COUNT() = 0 then
  
         SET ticket_price = -25;
         SET SWP_Ret_Value = -25;
         LEAVE SWL_return;
      end if;
      select   max(stop_time.station_no) 
      INTO start_station_no 
      from basic.stop_time 
      where stop_time.train_no = train_no 
       and stop_time.station_no < to_station_no
       and stop_time.start_date <= start_train_date 
 and stop_time.stop_date >= start_train_date
       and stop_time.station_name = from_station_name   
      LIMIT 1;
      select   min(stop_time.station_no) 
      INTO to_station_no 
      from basic.stop_time 
      where stop_time.train_no = train_no 
       and stop_time.station_no > start_station_no
       and stop_time.start_date <= start_train_date 
 and stop_time.stop_date >= start_train_date
       and stop_time.station_name = to_station_name   
      LIMIT 1;
   end if;

   SET d_0 = 0;
   SET d_1 = 0;
   SET d_2 = 0;
   SET d_3 = 0;
   SET d_4 = 0;
   SET d_5 = 0;
   select   stop_time.station_name, 
    IFNULL(stop_time.distance,0), 
 IFNULL(stop_time.distance1,0), 
 IFNULL(stop_time.distance2,0), 
 IFNULL(stop_time.distance3,0), 
 IFNULL(stop_time.distance4,0), 
 IFNULL(stop_time.distance5,0) 
   INTO from_station_name,
    d_0,
 d_1,
 d_2,
 d_3,
 d_4,
 d_5 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no
    and stop_time.start_date <= start_train_date 
 and stop_time.stop_date >= start_train_date   
   LIMIT 1;
   if ROW_COUNT() = 0 then

      SET ticket_price = -21;
      SET SWP_Ret_Value = -21;
      LEAVE SWL_return;
   end if;
   select   stop_time.station_name, 
    IFNULL(stop_time.distance,0), 
 IFNULL(stop_time.distance1,0), 
 IFNULL(stop_time.distance2,0), 
 IFNULL(stop_time.distance3,0), 
 IFNULL(stop_time.distance4,0), 
 IFNULL(stop_time.distance5,0) 
   INTO to_station_name,
    dd_0,
 dd_1,
 dd_2,
 dd_3,
 dd_4,
 dd_5 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = to_station_no
    and stop_time.start_date <= start_train_date 
 and stop_time.stop_date >= start_train_date   
   LIMIT 1;
   if ROW_COUNT() = 0 then

      SET ticket_price = -26;
      SET SWP_Ret_Value = -26;
      LEAVE SWL_return;
   end if;
   SET d_0 = dd_0 -d_0;
   SET d_1 = dd_1 -d_1;
   SET d_2 = dd_2 -d_2;
   SET d_3 = dd_3 -d_3;
   SET d_4 = dd_4 -d_4;
   SET d_5 = dd_5 -d_5;


   if preference_flag = '0' and preference_style not in('7','8','9','A','B','C','D','F','G') then


      CALL arith.DG50_fetch_preference(train_date,
       train_no,
 start_station_no,
 to_station_no,
 seat_type_code,
 ticket_type_power,
       temp_preference_style,
 temp_preference_rate,
 error_code,
 0,call_pr_return_code);
      if error_code < 0 then
 
         SET ticket_price = error_code;
         SET SWP_Ret_Value = ticket_price;
         LEAVE SWL_return;
      end if;
      if temp_preference_rate <= preference_rate then
         SET preference_rate = temp_preference_rate;
         SET preference_style = temp_preference_style;
      end if;
   end if;





   SET train_class1 = 'z';
   SET train_class2 = 'z';
   if train_class = '9' then

      SET ticket_price = -27;
      SET SWP_Ret_Value = -27;
      LEAVE SWL_return;
   else 
      SET dd_0 = 0;
      SET dd_1 = 0;
      SET dd_2 = 0;
      SET dd_3 = 0;
      SET dd_4 = 0;
      SET dd_5 = 0;
   end if;

   select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
   INTO train_class_rate 
   from basic.DG50_train_class_rate 
   where DG50_train_class_rate.train_class_code = train_class   
   LIMIT 1;




   if train_class = '0' or train_class = '1' then 
      SET train_class = '2';
   end if;
   if train_class1 = '0' or train_class1 = '1' then 
      SET train_class1 = '2';
   end if;
   if train_class2 = '0' or train_class2 = '1' then 
      SET train_class2 = '2';
   end if;



   SET d_total = d_0+d_1+d_2+d_3+d_4+d_5;
   SET distance = d_total;

   SET error_code = 0;
   SET sleeper_style = '0';
   SET sleeper_rate = 0;
   SET discount_seat_type = '';
   SET discount_bed_level = '';

   CALL arith.DG50_fetch_sleeper_discount(train_date,
    train_no,
 start_station_no,
 to_station_no,
 distance,
 seat_type_code,
    bed_level,
 ticket_type_power,
 sleeper_style,
 sleeper_rate,
 discount_seat_type,
    discount_bed_level,
 error_code,
 0);


   if sleeper_style = 'E' then

      SET seat_type_code = discount_seat_type;
      SET bed_level = discount_bed_level;
   end if;




   select   CG30_price_migrate.co_train_date, 
    CG30_price_migrate.co_train_no, 
 CG30_price_migrate.co_seat_type 
   INTO co_train_date,
    co_train_no,
 co_seat_type 
   from basic.CG30_price_migrate 
   where CG30_price_migrate.train_no = train_no
    and CG30_price_migrate.start_date <= start_train_date 
 and CG30_price_migrate.stop_date >= start_train_date
    and CG30_price_migrate.seat_type in(seat_type_code,'z')
    and CG30_price_migrate.ticket_type & ticket_type_power = ticket_type_power
    and power(2,TIMESTAMPDIFF(DAY,STR_TO_DATE(CG30_price_migrate.start_date,'%Y%m%d'),STR_TO_DATE(train_date,'%Y%m%d'))%CG30_price_migrate.running_style) & CG30_price_migrate.running_rule
     = power(2,TIMESTAMPDIFF(DAY,STR_TO_DATE(CG30_price_migrate.start_date,'%Y%m%d'),STR_TO_DATE(train_date,'%Y%m%d'))%CG30_price_migrate.running_style)  
   order by CG30_price_migrate.seat_type 
   LIMIT 1;
   if ROW_COUNT() = 1 then

      if co_seat_type < 'z' then 
         SET seat_type_code = co_seat_type;
      end if;
      if co_train_date < '99999999' then 
         SET start_train_date = co_train_date;
      end if;
      if train_no <> co_train_no then
  
         SET train_no = co_train_no;
    
         SET subbureau_code = SUBSTRING(train_no,1,2);
         SET train_code = SUBSTRING(train_no,3,8);
         SET double_id = SUBSTRING(train_no,11,1);
         SET schema_id = SUBSTRING(train_no,12,1);
         WHILE SUBSTRING(train_code,1,1) = '0' DO
            SET SWV_train_code_Str = SUBSTRING(train_code,2,LENGTH(train_code) -1);
            SET train_code = SWV_train_code_Str;
         END WHILE;
    
         select   train_dir.price_style, 
   train_dir.price_style1, 
  train_dir.price_style2, 
  train_dir.price_style3, 
  train_dir.price_style4, 
  train_dir.price_style5 
  INTO style0,
   style1,
  style2,
  style3,
  style4,
  style5 
  from basic.train_dir 
  where train_dir.subbureau_code = subbureau_code 
   and train_dir.train_code = train_code
          and train_dir.double_id = double_id 
  and train_dir.schema_id = schema_id
          and train_dir.start_date <= start_train_date 
  and train_dir.stop_date >= start_train_date   
  LIMIT 1;
         if ROW_COUNT() = 0 then
    
            SET ticket_price = -32;
            SET SWP_Ret_Value = -32;
            LEAVE SWL_return;
         end if;
      end if;
   end if;

   SET d_seat = d_0;
   SET dd_seat = dd_0;
   SET d_bed = d_0;


   SET s_seat1 = 0;
   SET s_seat2 = 0;
   SET s_u = 0;
   SET s_m = 0;
   SET s_d = 0;
   SET s_su = 0;
   SET s_sd = 0;
   SET s_hu = 0;
   SET s_hd = 0;
   SET s_shu = 0;
   SET s_shd = 0;
   SET s_bed = 0;

   SET student = 1;
   SET child = 1;
   SET half = 1;
   SET bed_only = 1;
   SET home = 1;
   SET free = 1;
   SET small_child = 0;
   SET tmp_ticket_type = ticket_type;
   CALL arith.CG40_price_para(seat_type_code,
    bed_level,
 tmp_ticket_type,
 0,
 s_seat1,
 s_seat2,
 s_u,
 s_m,
 s_d,
    s_su,
 s_sd,
 s_hu,
 s_hd,
 s_shu,
 s_shd,
 s_bed,
 child,
 student,
 half,
 free,
 home,
 bed_only,
    small_child);



   SET error_code = 0;
   SET pdl_price = 0;
   SET pdl_preference_word = '';
   SET pdl_ticket_price = 0;
   SET pdl_preference_rate = 0; 


 if output2=2 then
  select '3_1====',train_date,train_no,start_station_no,to_station_no,seat_type_code,bed_level,ticket_type,preference_style,pdl_price,pdl_ticket_price,pdl_preference_word,concat(':',pdl_preference_rate,':'),pdl_error_code;
 end if;
   CALL arith.DG52_fetch_pdl_price(train_date,
    train_no,
 start_station_no,
 to_station_no,
 seat_type_code,
 bed_level,
    ticket_type,
 
 pdl_price,
 pdl_ticket_price,
 pdl_preference_word,
    pdl_preference_rate,
 pdl_error_code,0,call_pr_return_code);
 if output2=2 then
  select '3_2====',train_date,train_no,start_station_no,to_station_no,seat_type_code,bed_level,ticket_type,preference_style,pdl_price,pdl_ticket_price,pdl_preference_word,concat(':',pdl_preference_rate,':'),pdl_error_code;
 end if;
  PRICING_FINISH  :loop
   if pdl_error_code = 0 and pdl_price >= 0 then

      SET ticket_price = pdl_price;
      SET preference_word = pdl_preference_word;
      LEAVE PRICING_FINISH;
   else 
      if pdl_error_code = 0 and pdl_price < 0 then
  
         SET ticket_price = pdl_price; 
         SET SWP_Ret_Value = pdl_price;
         LEAVE SWL_return;
      else 
         if pdl_error_code < 0 then

            SET ticket_price = pdl_error_code; 
            SET SWP_Ret_Value = pdl_price;
            LEAVE SWL_return;
         end if;
      end if;
   end if;



   SET rate0 = '0';
   SET rate_a0 = '0';
   SET rate1 = '0';
   SET rate_a1 = '0';
   SET rate2 = '0';
   SET rate_a2 = '0';
   SET rate3 = '0';
   SET rate_a3 = '0';
   SET rate4 = '0';
   SET rate_a4 = '0';
   SET rate5 = '0';
   SET rate_a5 = '0';
   select   IFNULL(CG30_price_rate.price_add,0), 
    IFNULL(CG30_price_rate.st_air,'0'), 
 IFNULL(CG30_price_rate.paper,'0'), 
 lower(CG30_price_rate.price_rate), 
 CG30_price_rate.another_price_rate, 
 lower(CG30_price_rate.price_rate1), 
 CG30_price_rate.another_price_rate1, 
 lower(CG30_price_rate.price_rate2), 
 CG30_price_rate.another_price_rate2, 
 lower(CG30_price_rate.price_rate3), 
 CG30_price_rate.another_price_rate3, 
 lower(CG30_price_rate.price_rate4), 
 CG30_price_rate.another_price_rate4, 
 lower(CG30_price_rate.price_rate5), 
 CG30_price_rate.another_price_rate5 
   INTO p_add,
    st_air,
 paper,
 rate0,
 rate_a0,
 rate1,
 rate_a1,
 rate2,
 rate_a2,
 rate3,
 rate_a3,
    rate4,
 rate_a4,
 rate5,
 rate_a5 
   from basic.CG30_price_rate 
   where CG30_price_rate.train_no = train_no 
    and CG30_price_rate.start_date <= start_train_date 
    and CG30_price_rate.stop_date >= start_train_date   
   LIMIT 1;
   if p_add < 0 or p_add IS NULL then 
      SET p_add = 0;
   end if;
   if paper IS NULL then 
      SET paper = '0';
   end if;
   if st_air IS NULL then 
      SET st_air = '0';
   end if;
   SET rate_seat0 = rate0;
   SET rate_seat_a0 = rate_a0;
   SET rate_seat1 = rate1;
   SET rate_seat_a1 = rate_a1;
   SET rate_seat2 = rate2;
   SET rate_seat_a2 = rate_a2;
   SET rate_seat3 = rate3;
   SET rate_seat_a3 = rate_a3;
   SET rate_seat4 = rate4;
   SET rate_seat_a4 = rate_a4;
   SET rate_seat5 = rate5;
   SET rate_seat_a5 = rate_a5;



   if rtrim(rate0) = 'x' or rtrim(rate1) = 'x' or rtrim(rate2) = 'x' or rtrim(rate3) = 'x' or rtrim(rate4) = 'x' or rtrim(rate5) = 'x' or rtrim(rate_a0) = 'x' or rtrim(rate_a1) = 'x' or rtrim(rate_a2) = 'x' or rtrim(rate_a3) = 'x' or rtrim(rate_a4) = 'x' or rtrim(rate_a5) = 'x' then

      SET rate_x0 = '0';
      SET rate_a_x0 = '0';
      SET rate_x1 = '0';
      SET rate_a_x1 = '0';
      SET rate_x2 = '0';
      SET rate_a_x2 = '0';
      SET rate_x3 = '0';
      SET rate_a_x3 = '0';
      SET rate_x5 = '0';
      SET rate_a_x5 = '0';
      select   CG30_price_rate_seat.price_rate, 
       CG30_price_rate_seat.another_price_rate, 
 CG30_price_rate_seat.price_rate1, 
 CG30_price_rate_seat.another_price_rate1, 
 CG30_price_rate_seat.price_rate2, 
 CG30_price_rate_seat.another_price_rate2, 
 CG30_price_rate_seat.price_rate3, 
 CG30_price_rate_seat.another_price_rate3, 
 CG30_price_rate_seat.price_rate4, 
 CG30_price_rate_seat.another_price_rate4, 
 CG30_price_rate_seat.price_rate5, 
 CG30_price_rate_seat.another_price_rate5 
      INTO rate_x0,
       rate_a_x0,
 rate_x1,
 rate_a_x1,
 rate_x2,
 rate_a_x2,
 rate_x3,
 rate_a_x3,
       rate_x4,
 rate_a_x4,
 rate_x5,
 rate_a_x5 
      from basic.CG30_price_rate_seat 
      where CG30_price_rate_seat.train_no = train_no
       and CG30_price_rate_seat.start_date <= start_train_date 
 and CG30_price_rate_seat.stop_date >= start_train_date
       and CG30_price_rate_seat.seat_type_code in(seat_type_code,'z')
       and CG30_price_rate_seat.ticket_type & ticket_type_power = ticket_type_power   
      order by CG30_price_rate_seat.seat_type_code 
      LIMIT 1;
      if seat_type_code in('7','8','D') then
         SET rate_seat_x0 = rate_x0;
         SET rate_seat_a_x0 = rate_a_x0;
         SET rate_seat_x1 = rate_x1;
         SET rate_seat_a_x1 = rate_a_x1;
         SET rate_seat_x2 = rate_x2;
         SET rate_seat_a_x2 = rate_a_x2;
         SET rate_seat_x3 = rate_x3;
         SET rate_seat_a_x3 = rate_a_x3;
         SET rate_seat_x4 = rate_x4;
         SET rate_seat_a_x4 = rate_a_x4;
         SET rate_seat_x5 = rate_x5;
         SET rate_seat_a_x5 = rate_a_x5;
      else
         if seat_type_code in('9','A') then 
            SET temp_seat_type = '9';
         else 
            if seat_type_code in('B','C') then 
               SET temp_seat_type = 'B';
            else 
               if seat_type_code in('K','L') then 
                  SET temp_seat_type = 'K';
               else 
                  SET temp_seat_type = CAST(cast(s_seat2 as SIGNED INTEGER)+1 AS char(1));
               end if;
            end if;
         end if;
         SET rate_seat_x0 = '0';
         SET rate_seat_a_x0 = '0';
         SET rate_seat_x1 = '0';
         SET rate_seat_a_x1 = '0';
         SET rate_seat_x2 = '0';
         SET rate_seat_a_x2 = '0';
         SET rate_seat_x3 = '0';
         SET rate_seat_a_x3 = '0';
         SET rate_seat_x5 = '0';
         SET rate_seat_a_x5 = '0';
         select   CG30_price_rate_seat.price_rate, 
   CG30_price_rate_seat.another_price_rate, 
  CG30_price_rate_seat.price_rate1, 
  CG30_price_rate_seat.another_price_rate1, 
  CG30_price_rate_seat.price_rate2, 
  CG30_price_rate_seat.another_price_rate2, 
  CG30_price_rate_seat.price_rate3, 
  CG30_price_rate_seat.another_price_rate3, 
  CG30_price_rate_seat.price_rate4, 
  CG30_price_rate_seat.another_price_rate4, 
  CG30_price_rate_seat.price_rate5, 
  CG30_price_rate_seat.another_price_rate5 
  INTO rate_seat_x0,
   rate_seat_a_x0,
  rate_seat_x1,
  rate_seat_a_x1,
  rate_seat_x2,
  rate_seat_a_x2,
          rate_seat_x3,
  rate_seat_a_x3,
  rate_seat_x4,
  rate_seat_a_x4,
          rate_seat_x5,
  rate_seat_a_x5 
  from basic.CG30_price_rate_seat 
  where CG30_price_rate_seat.train_no = train_no 
   and CG30_price_rate_seat.start_date <= start_train_date 
  and CG30_price_rate_seat.stop_date >= start_train_date
          and CG30_price_rate_seat.seat_type_code in(temp_seat_type,'z')
          and CG30_price_rate_seat.ticket_type & ticket_type_power = ticket_type_power   
  order by CG30_price_rate_seat.seat_type_code 
  LIMIT 1;
      end if;
   end if;
   SET ticket_type = tmp_ticket_type;

   if special_visa = 1 then 
      SET bed_only = 0;
   end if;
if output2=2 then
 select '4====',train_no,from_station_name,to_station_name,start_train_date,ticket_type_power,seat_type_code,bed_level,s_bed;
end if;
   select   IFNULL(DG50_train_basic_price.price,0) 
   INTO p_train_basic_price 
   from basic.DG50_train_basic_price 
   where DG50_train_basic_price.train_no = train_no
    and DG50_train_basic_price.from_station_name = from_station_name
    and DG50_train_basic_price.to_station_name = to_station_name
    and DG50_train_basic_price.start_date <= start_train_date 
 and DG50_train_basic_price.stop_date >= start_train_date
    and DG50_train_basic_price.ticket_type & ticket_type_power = ticket_type_power
    and DG50_train_basic_price.seat_type_code = seat_type_code
    and (DG50_train_basic_price.bed_level = bed_level or s_bed = 0)   
   LIMIT 1;
   if ROW_COUNT() < 1 then

      SET ticket_price = -65;
      SET SWP_Ret_Value = -65;
      LEAVE SWL_return;
   end if;


   if seat_feature in('2','3') then 
      SET new_type = '1'; 
   else 
      SET new_type = '0';
   end if;

   SET p_total = 0;
   SET p_relay = 0;
   SET p_float_total = 0;
   SET p_bed_reserve = 0;
   SET p_0 = 0;
   SET p_1 = 0;
   SET p_2 = 0;
   SET p_3 = 0;
   SET p_4 = 0;
   SET p_5 = 0;
   SET p_basic_seat0 = 0;
   SET p_basic_seat1 = 0;
   SET p_basic_seat2 = 0;
   SET p_basic_seat3 = 0;
   SET p_basic_seat4 = 0;
   SET p_basic_seat5 = 0;
   SET p_relay_fast0 = 0;
   SET p_relay_fast1 = 0;
   SET p_relay_fast2 = 0;
   SET p_relay_fast3 = 0;
   SET p_relay_fast4 = 0;
   SET p_relay_fast5 = 0;

   SET p_1_0 = 0;
   SET p_2_0 = 0;
   SET p_3_0 = 0;
   SET p_4_0 = 0;
   SET p_5_0 = 0;
   SET p_state = 0;
   SET p_bed = 0;
   SET p_basic = 0;
   SET p_float = 0;


   if preference_style in('5','6') and preference_rate <> -1 then

      SET ticket_price = -70;
      SET SWP_Ret_Value = -70;
      LEAVE SWL_return;
   end if;


   if special_visa = 2 and ticket_type = 5 then 
      SET paper = '0';
      SET st_air = '0';
   end if;


   if special_visa = 3 or ticket_type = 9 or (preference_style in('5','6'))
   or ticket_type = 5 and (s_seat1 = 1 or s_seat2 = 1 and special_visa <> 2)
   or ticket_type = 6 and  s_seat1 = 1 and s_bed = 0
   or special_visa = 2 and ticket_type = 5 then
      LEAVE PRICING_FINISH;
   end if;

   if ticket_type <> 5 and ticket_type <> 6 then 
      SET p_float_total = p_add;
   end if;
   SET times = 5; 
   SWL_Label3:
   while times >= -1 DO
      BEGIN
  
         if times = 5 then
  
            SET d_use = d_5;
            SET dd_use = dd_5;
            SET line_use = line5;
            SET style_use = style5;
            if rtrim(rate5) = 'x' then
               SET rate_use = rate_x5;
               SET rate_seat_use = rate_seat_x5;
               SET rate_a_use = rate_a_x5;
               SET rate_seat_a_use = rate_seat_a_x5;
               SET rate_aa_use = rate_a5;
               SET rate_seat_aa_use = rate_seat_a5;
            else 
               if rtrim(rate_a5) = 'x' then
                  SET rate_use = rate5;
                  SET rate_seat_use = rate_seat5;
                  SET rate_a_use = rate_x5;
                  SET rate_seat_a_use = rate_seat_x5;
                  SET rate_aa_use = rate_a_x5;
                  SET rate_seat_aa_use = rate_seat_a_x5;
               else
                  SET rate_use = rate5;
                  SET rate_seat_use = rate_seat5;
                  SET rate_a_use = rate_a5;
                  SET rate_seat_a_use = rate_seat_a5;
                  SET rate_aa_use = '0';
                  SET rate_seat_aa_use = '0';
               end if;
            end if;
         end if;
         if times = 4 then
  
            SET p_5 = p_basic;
            SET p_basic_seat5 = p_basic_seat;
            SET p_relay_fast5 = p_fast;
            SET p_5_0 = p_diff;
            SET d_use = d_4;
            SET dd_use = dd_4;
            SET line_use = line4;
            SET style_use = style4;
    
            SET p_basic_seat5_0 = p_basic_seat_0;
            SET p_basic_fast5_0 = p_basic_fast_0;
            SET p_basic_air5_0 = p_basic_air_0;
            if rtrim(rate4) = 'x' then
               SET rate_use = rate_x4;
               SET rate_seat_use = rate_seat_x4;
               SET rate_a_use = rate_a_x4;
               SET rate_seat_a_use = rate_seat_a_x4;
               SET rate_aa_use = rate_a4;
               SET rate_seat_aa_use = rate_seat_a4;
            else 
               if rtrim(rate_a4) = 'x' then
                  SET rate_use = rate4;
                  SET rate_seat_use = rate_seat4;
                  SET rate_a_use = rate_x4;
                  SET rate_seat_a_use = rate_seat_x4;
                  SET rate_aa_use = rate_a_x4;
                  SET rate_seat_aa_use = rate_seat_a_x4;
               else
                  SET rate_use = rate4;
                  SET rate_seat_use = rate_seat4;
                  SET rate_a_use = rate_a4;
                  SET rate_seat_a_use = rate_seat_a4;
                  SET rate_aa_use = '0';
                  SET rate_seat_aa_use = '0';
               end if;
            end if;
         end if;
         if times = 3 then
  
            SET p_4 = p_basic;
            SET p_basic_seat4 = p_basic_seat;
            SET p_relay_fast4 = p_fast;
            SET p_4_0 = p_diff;
            SET d_use = d_3;
            SET dd_use = dd_3;
            SET line_use = line3;
            SET style_use = style3;
    
            SET p_basic_seat4_0 = p_basic_seat_0;
            SET p_basic_fast4_0 = p_basic_fast_0;
            SET p_basic_air4_0 = p_basic_air_0;
            if rtrim(rate3) = 'x' then
               SET rate_use = rate_x3;
               SET rate_seat_use = rate_seat_x3;
               SET rate_a_use = rate_a_x3;
               SET rate_seat_a_use = rate_seat_a_x3;
               SET rate_aa_use = rate_a3;
               SET rate_seat_aa_use = rate_seat_a3;
            else 
               if rtrim(rate_a3) = 'x' then
                  SET rate_use = rate3;
                  SET rate_seat_use = rate_seat3;
                  SET rate_a_use = rate_x3;
                  SET rate_seat_a_use = rate_seat_x3;
                  SET rate_aa_use = rate_a_x3;
                  SET rate_seat_aa_use = rate_seat_a_x3;
               else
                  SET rate_use = rate3;
                  SET rate_seat_use = rate_seat3;
                  SET rate_a_use = rate_a3;
                  SET rate_seat_a_use = rate_seat_a3;
                  SET rate_aa_use = '0';
                  SET rate_seat_aa_use = '0';
               end if;
            end if;
         end if;
         if times = 2 then
  
            SET p_3 = p_basic;
            SET p_basic_seat3 = p_basic_seat;
            SET p_relay_fast3 = p_fast;
            SET p_3_0 = p_diff;
            SET d_use = d_2;
            SET dd_use = dd_2;
            SET line_use = line2;
            SET style_use = style2;
    
            SET p_basic_seat3_0 = p_basic_seat_0;
            SET p_basic_fast3_0 = p_basic_fast_0;
            SET p_basic_air3_0 = p_basic_air_0;
            if rtrim(rate2) = 'x' then
               SET rate_use = rate_x2;
               SET rate_seat_use = rate_seat_x2;
               SET rate_a_use = rate_a_x2;
               SET rate_seat_a_use = rate_seat_a_x2;
               SET rate_aa_use = rate_a2;
               SET rate_seat_aa_use = rate_seat_a2;
            else 
               if rtrim(rate_a2) = 'x' then
                  SET rate_use = rate2;
                  SET rate_seat_use = rate_seat2;
                  SET rate_a_use = rate_x2;
                  SET rate_seat_a_use = rate_seat_x2;
                  SET rate_aa_use = rate_a_x2;
                  SET rate_seat_aa_use = rate_seat_a_x2;
               else
                  SET rate_use = rate2;
                  SET rate_seat_use = rate_seat2;
                  SET rate_a_use = rate_a2;
                  SET rate_seat_a_use = rate_seat_a2;
                  SET rate_aa_use = '0';
                  SET rate_seat_aa_use = '0';
               end if;
            end if;
         end if;
         if times = 1 then
  
            SET p_2 = p_basic;
            SET p_basic_seat2 = p_basic_seat;
            SET p_relay_fast2 = p_fast;
            SET p_2_0 = p_diff;
            SET d_use = d_1;
            SET dd_use = dd_1;
            SET line_use = line1;
            SET style_use = style1;
    
            SET p_basic_seat2_0 = p_basic_seat_0;
            SET p_basic_fast2_0 = p_basic_fast_0;
            SET p_basic_air2_0 = p_basic_air_0;
            if rtrim(rate1) = 'x' then
               SET rate_use = rate_x1;
               SET rate_seat_use = rate_seat_x1;
               SET rate_a_use = rate_a_x1;
               SET rate_seat_a_use = rate_seat_a_x1;
               SET rate_aa_use = rate_a1;
               SET rate_seat_aa_use = rate_seat_a1;
            else 
               if rtrim(rate_a1) = 'x' then
                  SET rate_use = rate1;
                  SET rate_seat_use = rate_seat1;
                  SET rate_a_use = rate_x1;
                  SET rate_seat_a_use = rate_seat_x1;
                  SET rate_aa_use = rate_a_x1;
                  SET rate_seat_aa_use = rate_seat_a_x1;
               else
                  SET rate_use = rate1;
                  SET rate_seat_use = rate_seat1;
                  SET rate_a_use = rate_a1;
                  SET rate_seat_a_use = rate_seat_a1;
                  SET rate_aa_use = '0';
                  SET rate_seat_aa_use = '0';
               end if;
            end if;
         end if;
         if times = 0 then
  
            if style0 <> '7' and style0 <> '0' then  
               SET style0 = '1';
            end if;
            SET p_1 = p_basic;
            SET p_basic_seat1 = p_basic_seat;
            SET p_relay_fast1 = p_fast;
            SET p_1_0 = p_diff;
            SET d_use = d_seat;
            SET dd_use = dd_seat;
            SET line_use = 0;
            SET style_use = style0;
    
            SET p_basic_seat1_0 = p_basic_seat_0;
            SET p_basic_fast1_0 = p_basic_fast_0;
            SET p_basic_air1_0 = p_basic_air_0;
            if rtrim(rate0) = 'x' then
               SET rate_use = rate_x0;
               SET rate_seat_use = rate_seat_x0;
               SET rate_a_use = rate_a_x0;
               SET rate_seat_a_use = rate_seat_a_x0;
               SET rate_aa_use = rate_a0;
               SET rate_seat_aa_use = rate_seat_a0;
            else 
               if rtrim(rate_a0) = 'x' then
                  SET rate_use = rate0;
                  SET rate_seat_use = rate_seat0;
                  SET rate_a_use = rate_x0;
                  SET rate_seat_a_use = rate_seat_x0;
                  SET rate_aa_use = rate_a_x0;
                  SET rate_seat_aa_use = rate_seat_a_x0;
               else
                  SET rate_use = rate0;
                  SET rate_seat_use = rate_seat0;
                  SET rate_a_use = rate_a0;
                  SET rate_seat_a_use = rate_seat_a0;
                  SET rate_aa_use = '0';
                  SET rate_seat_aa_use = '0';
               end if;
            end if;
         end if;
         if times = -1 then
  
            SET p_0 = p_basic;
            SET p_basic_seat0 = p_basic_seat;
            SET p_relay_fast0 = p_fast;
            SET d_use = d_bed;
            SET dd_use = 0;
            SET style_use = style0;
    
            SET p_basic_seat0_0 = p_basic_seat_0;
            SET p_basic_fast0_0 = p_basic_fast_0;
            SET p_basic_air0_0 = p_basic_air_0;
            if d_bed = d_seat or style0 = '7' then 
               SET d_use = 0;
            end if;
         end if;
  
         SET p_basic = 0;
         SET p_basic_seat = 0;
         SET p_fast = 0;
         SET p_float = 0;
         SET p_diff = 0;
  
  
         if d_use <= 0 or style_use = '2' or style_use = '3' or style_use < '0' or style_use > '9' then
  
            SET times = times -1;
            ITERATE SWL_Label3;
         end if;
         GZ_VERSION_AGAIN: LOOP
      
            if seat_feature in('2','3') then 
               SET new_type = '1'; 
            else 
               SET new_type = '0';
            end if;
  
            SET p_seat = 0;
            SET p_fast = 0;
            SET pp_fast = 0;
            SET p_soft_seat = 0;
            SET p_up_bed = 0;
            SET p_middle_bed = 0;
            SET p_down_bed = 0;
            SET p_up_soft = 0;
            SET p_down_soft = 0;
            SET p_up_super = 0;
            SET p_down_super = 0;
            SET p_up_soft_super = 0;
            SET p_down_soft_super = 0;
            SET p_air = 0;
            SET p_new_seat = 0;
            SET p_new_fast = 0;
            SET pp_new_fast = 0;
            SET p_new_soft_seat = 0;
            SET p_new_up_bed = 0;
            SET p_new_middle_bed = 0;
            SET p_new_down_bed = 0;
            SET p_new_up_soft = 0;
            SET p_new_down_soft = 0;
            SET p_new_up_super = 0;
            SET p_new_down_super = 0;
            SET p_new_up_soft_super = 0;
            SET p_new_down_soft_super = 0;
            SET p_new_air = 0;
            SET p_new_double_seat = 0;
            SET p_new_double_bed = 0;
            SET p_new_double_fast = 0;
            SET pp_new_double_fast = 0;
            SET p_new_double_air = 0;
  
            SET p_total_fast = 0;
            SET p_new_total_fast = 0;
  
  
            IF seat_type_code in('7','8') or (seat_type_code >= 'D' and seat_type_code not in('K','L')) then 
               SET style_use = '7';
            end if;
  
            IF style_use = '0' then
  
               select   distance_price.seat_price, 
          distance_price.fast_price, 
   distance_price.soft_seat_price, 
   distance_price.up_bed_price, 
   distance_price.middle_bed_price, 
   distance_price.down_bed_price, 
   distance_price.up_soft_bed_price, 
   distance_price.down_soft_bed_price, 
   distance_price.up_super_price, 
   distance_price.down_super_price, 
   distance_price.up_soft_super_price, 
   distance_price.down_soft_super_price, 
   distance_price.air_condition_price 
        INTO p_seat,
          p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                 p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air 
        from basic.distance_price 
        where distance_price.distance0 <= d_use+900 
          and distance_price.distance >= d_use+900
                 and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
        LIMIT 1;
               if ROW_COUNT() = 0 then
    
                  SET ticket_price = -36;
                  SET SWP_Ret_Value = -36;
                  LEAVE SWL_return;
               end if;
               select   distance_price.fast_price, 
          p_seat -distance_price.seat_price, 
   p_fast -distance_price.fast_price, 
   p_soft_seat -distance_price.soft_seat_price, 
   p_up_bed -distance_price.up_bed_price, 
   p_middle_bed -distance_price.middle_bed_price, 
   p_down_bed -distance_price.down_bed_price, 
   p_up_soft -distance_price.up_soft_bed_price, 
   p_down_soft -distance_price.down_soft_bed_price, 
   p_up_super -distance_price.up_super_price, 
   p_down_super -distance_price.down_super_price, 
   p_up_soft_super -distance_price.up_soft_super_price, 
   p_down_soft_super -distance_price.down_soft_super_price, 
   p_air -distance_price.air_condition_price 
        INTO p_fast_900,
          p_seat,
   p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
                 p_up_soft,
   p_down_soft,
   p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
                 p_air 
        from basic.distance_price 
        where distance_price.distance0 <= 900 
          and distance_price.distance >= 900
                 and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
        LIMIT 1;
               if ROW_COUNT() = 0 then
    
                  SET ticket_price = -37;
                  SET SWP_Ret_Value = -37;
                  LEAVE SWL_return;
               end if;
               if p_down_bed < p_middle_bed then 
                  SET p_down_bed = p_middle_bed;
               end if;
               if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
     
                  select   IFNULL(distance_price.fast_price,0) 
    INTO p_total_fast 
    from basic.distance_price 
    where distance_price.distance0 <= d_total+900 
     and distance_price.distance >= d_total+900
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
   
                     SET ticket_price = -35;
                     SET SWP_Ret_Value = -35;
                     LEAVE SWL_return;
                  end if;
                  select   distance_price.fast_price -p_fast_900 
    INTO p_fast 
    from basic.distance_price 
    where distance_price.distance0 <= d_use -dd_use+900 
     and distance_price.distance >= d_use -dd_use+900
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  select   distance_price.fast_price -p_fast_900 
    INTO pp_fast from basic.distance_price 
    where distance_price.distance0 <= dd_use+900 
     and distance_price.distance >= dd_use+900
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if pp_fast <= 0 then 
                     SET pp_fast = 10;
                  end if;
               end if;
               if p_fast <= 0 then 
                  SET p_fast = 10;
               end if;
               if p_air <= 0 then 
                  SET p_air = 10;
               end if;
            end if;

            SET rate_to_400 = 1;
            IF style_use = '1' then
  
               if train_class = '5' then
    
                  select   CG30_suburb_distance_price.suburb_single_price, 
     0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0, 
   0 
    INTO p_seat,
     p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                   p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air 
    from basic.CG30_suburb_distance_price 
    where CG30_suburb_distance_price.distance0 <= d_use 
     and CG30_suburb_distance_price.distance >= d_use
                   and CG30_suburb_distance_price.start_date <= start_train_date 
   and CG30_suburb_distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
      
                     SET ticket_price = -39;
                     SET SWP_Ret_Value = -39;
                     LEAVE SWL_return;
                  end if;
               else
      
                  if train_class = '9' then
   
                     select   distance_price.fast_price 
       INTO p_total_fast 
       from basic.distance_price 
       where distance_price.distance0 <= d_total 
       and distance_price.distance >= d_total
                      and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
       LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -38;
                        SET SWP_Ret_Value = -38;
                        LEAVE SWL_return;
                     end if;
                  end if;
                  select   distance_price.seat_price, 
     distance_price.fast_price, 
   distance_price.soft_seat_price, 
   distance_price.up_bed_price, 
   distance_price.middle_bed_price, 
   distance_price.down_bed_price, 
   distance_price.up_soft_bed_price, 
   distance_price.down_soft_bed_price, 
   distance_price.up_super_price, 
   distance_price.down_super_price, 
   distance_price.up_soft_super_price, 
   distance_price.down_soft_super_price, 
   distance_price.air_condition_price 
    INTO p_seat,
     p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                   p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air 
    from basic.distance_price 
    where distance_price.distance0 <= d_use 
     and distance_price.distance >= d_use
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
      
                     SET ticket_price = -40;
                     SET SWP_Ret_Value = -40;
                     LEAVE SWL_return;
                  end if;
               end if;
               if d_use < d_0+d_1+d_2+d_3+d_4+d_5 and d_use < 400 then
    
                  if d_use <= 100 then 
                     SET rate_to_400 = 0.25;
                  else 
                     if d_use <= 200 then 
                        SET rate_to_400 = 0.50;
                     else 
                        if d_use <= 300 then 
                           SET rate_to_400 = 0.75;
                        end if;
                     end if;
                  end if;
                  select   CAST(price_rate_400.rate_to_400 AS DECIMAL(4,3)) 
    INTO rate_to_400 
    from basic.price_rate_400 
    where price_rate_400.train_no = train_no
                   and price_rate_400.distance0 <= d_use 
     and price_rate_400.distance >= d_use
                   and price_rate_400.start_date <= start_train_date 
   and price_rate_400.stop_date >= start_train_date   
    LIMIT 1;
               end if;
               if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
                  select   distance_price.fast_price 
    INTO p_fast 
    from basic.distance_price 
    where distance_price.distance0 <= d_use -dd_use 
     and distance_price.distance >= d_use -dd_use
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  select   distance_price.fast_price 
    INTO pp_fast 
    from basic.distance_price 
    where distance_price.distance0 <= dd_use 
     and distance_price.distance >= dd_use
                   and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date   
    LIMIT 1;
               end if;
            end if;
  
            IF style_use in('4','5','6') then
  
               if train_class = '9' then
   
                  select   IFNULL(local_distance_price.fast_price,0), 
     IFNULL(local_distance_price.new_fast,0) 
    INTO p_total_fast,
     p_new_total_fast 
    from basic.local_distance_price 
    where local_distance_price.distance0 <= d_total+900 
     and local_distance_price.distance >= d_total+900
                   and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
     
                     SET ticket_price = -49;
                     SET SWP_Ret_Value = -49;
                     LEAVE SWL_return;
                  end if;
               end if;
               select   local_distance_price.seat_price, 
          local_distance_price.fast_price, 
   local_distance_price.soft_seat_price, 
   local_distance_price.up_bed_price, 
   local_distance_price.middle_bed_price, 
   local_distance_price.down_bed_price, 
   local_distance_price.up_soft_bed_price, 
   local_distance_price.down_soft_bed_price, 
   local_distance_price.up_super_price, 
   local_distance_price.down_super_price, 
   local_distance_price.up_soft_super_price, 
   local_distance_price.down_soft_super_price, 
   local_distance_price.air_condition_price, 
   IFNULL(local_distance_price.new_seat,0), 
   IFNULL(local_distance_price.new_fast,0), 
   IFNULL(local_distance_price.new_soft_seat,0), 
   IFNULL(local_distance_price.new_up_bed,0), 
   IFNULL(local_distance_price.new_middle_bed,0), 
   IFNULL(local_distance_price.new_down_bed,0), 
   IFNULL(local_distance_price.new_up_soft_bed,0), 
   IFNULL(local_distance_price.new_down_soft_bed,0), 
   IFNULL(local_distance_price.new_up_super,0), 
   IFNULL(local_distance_price.new_down_super,0), 
   IFNULL(local_distance_price.new_up_soft_super,0), 
   IFNULL(local_distance_price.new_down_soft_super,0), 
   IFNULL(local_distance_price.new_air_condition,0), 
   IFNULL(local_distance_price.new_double_soft_seat,0), 
   IFNULL(local_distance_price.new_double_bed,0), 
   IFNULL(local_distance_price.new_double_fast,0), 
   IFNULL(local_distance_price.new_double_air,0) 
        INTO p_seat,
          p_fast,
   p_soft_seat,
   p_up_bed,
   p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
                 p_up_super,
   p_down_super,
   p_up_soft_super,
   p_down_soft_super,
   p_air,
                 p_new_seat,
   p_new_fast,
   p_new_soft_seat,
   p_new_up_bed,
   p_new_middle_bed,
                 p_new_down_bed,
   p_new_up_soft,
   p_new_down_soft,
   p_new_up_super,
   p_new_down_super,
                 p_new_up_soft_super,
   p_new_down_soft_super,
   p_new_air,
   p_new_double_seat,
                 p_new_double_bed,
   p_new_double_fast,
   p_new_double_air 
        from basic.local_distance_price 
        where local_distance_price.belong_line = line_use
                 and local_distance_price.distance0 <= d_use 
   and local_distance_price.distance >= d_use
                 and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
        LIMIT 1;
               if ROW_COUNT() = 0 then
    
                  SET ticket_price = -50;
                  SET SWP_Ret_Value = -50;
                  LEAVE SWL_return;
               end if;
               if d_use = d_0+d_1+d_2+d_3+d_4+d_5 and d_use < 400 and style_use = '4'
               and line_use not in(145,146,147,148,149) then
    
                  select   local_distance_price.up_bed_price, 
     local_distance_price.middle_bed_price, 
   local_distance_price.down_bed_price, 
   local_distance_price.up_soft_bed_price, 
   local_distance_price.down_soft_bed_price, 
   local_distance_price.up_super_price, 
   local_distance_price.down_super_price, 
   local_distance_price.up_soft_super_price, 
   local_distance_price.down_soft_super_price, 
   IFNULL(local_distance_price.new_up_bed,0), 
   IFNULL(local_distance_price.new_middle_bed,0), 
   IFNULL(local_distance_price.new_down_bed,0), 
   IFNULL(local_distance_price.new_up_soft_bed,0), 
   IFNULL(local_distance_price.new_down_soft_bed,0), 
   IFNULL(local_distance_price.new_up_super,0), 
   IFNULL(local_distance_price.new_down_super,0), 
   IFNULL(local_distance_price.new_up_soft_super,0), 
   IFNULL(local_distance_price.new_down_soft_super,0), 
   IFNULL(local_distance_price.new_double_bed,0) 
    INTO p_up_bed,
     p_middle_bed,
   p_down_bed,
   p_up_soft,
   p_down_soft,
   p_up_super,
   p_down_super,
                   p_up_soft_super,
   p_down_soft_super,
   p_new_up_bed,
   p_new_middle_bed,
                   p_new_down_bed,
   p_new_up_soft,
   p_new_down_soft,
   p_new_up_super,
   p_new_down_super,
                   p_new_up_soft_super,
   p_new_down_soft_super,
   p_new_double_bed 
    from basic.local_distance_price 
     where local_distance_price.belong_line = line_use
                   and local_distance_price.distance0 <= 400 
   and local_distance_price.distance >= 400
                   and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  if ROW_COUNT() = 0 then
      
                     SET ticket_price = -55;
                     SET SWP_Ret_Value = -55;
                     LEAVE SWL_return;
                  end if;
               end if;
               if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
                  select   local_distance_price.fast_price, 
     IFNULL(local_distance_price.new_fast,0), 
   IFNULL(local_distance_price.new_double_fast,0) 
    INTO p_fast,
     p_new_fast,
   p_new_double_fast 
    from basic.local_distance_price 
    where local_distance_price.belong_line = line_use
                   and local_distance_price.distance0 <= d_use -dd_use 
   and local_distance_price.distance >= d_use -dd_use
                   and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  select   local_distance_price.fast_price, 
     IFNULL(local_distance_price.new_fast,0), 
   IFNULL(local_distance_price.new_double_fast,0) 
    INTO pp_fast,
     pp_new_fast,
   pp_new_double_fast 
    from basic.local_distance_price 
    where local_distance_price.belong_line = line_use
                   and local_distance_price.distance0 <= d_use 
   and local_distance_price.distance >= d_use
                   and local_distance_price.start_date <= start_train_date 
   and local_distance_price.stop_date >= start_train_date   
    LIMIT 1;
                  SET pp_fast = pp_fast -p_fast;
                  SET pp_new_fast = pp_new_fast -p_new_fast;
                  SET pp_new_double_fast = pp_new_double_fast -p_new_double_fast;
               end if;
            end if;
  
            IF style_use <= '6' then
               BEGIN
                  SET p_float_new = 0;
         LOCAL_NEW_TYPE:loop
                  
         
                  If gz_version <= 1 then
    
                     SET p_basic_fast = 0;
                     if train_class <> '9' then 
       
                        SET p_basic_fast = round(p_fast*train_class_rate*student*child*half*bed_only*home*free,0);
                     end if;
                     if train_class = '9' then
                        SET p_basic_fast = round((p_fast*train_class1_rate+pp_fast*train_class2_rate)*student*child*half*bed_only*home*free,0);
                     end if;
                     SET p_basic_seat = round((p_seat*s_seat1*student+p_soft_seat*s_seat2)*child*half*bed_only -p_seat*(2 -home -free),0);
                     SET p_basic_air = round(((cast(seat_feature as SIGNED INTEGER))%2)*p_air*student*child*half*(bed_only+small_child)*home*free,0);
                     SET p_basic_bed = p_up_bed*s_u+p_middle_bed*s_m+p_down_bed*s_d+p_up_super*s_hu+p_down_super*s_hd+p_up_soft*s_su+p_down_soft*s_sd+p_up_soft_super*s_shu+p_down_soft_super*s_shd;
                     SET p_basic_bed = round(half*round(p_basic_bed*rate_to_400,-1),0) -s_seat2*s_bed*round(p_middle_bed*rate_to_400,-1)*(1 -free);
      
                     if (times = 0 and d_seat < d_bed) or style_use in('5','6') then 
                        SET p_basic_bed = 0;
                     end if;
      
                     if times = -1 then 
                        SET p_basic_seat = 0;
                        SET p_basic_fast = 0;
                        SET p_basic_air = 0;
                     end if;
      
                     if style_use = '1' and seat_type_code in('9','A') then
                        SET p_basic_fast = 2*p_basic_fast;
                        SET p_basic_air = 2*p_basic_air;
                        SET p_basic_seat = 2*p_basic_seat;
                        SET p_basic_bed = 2*p_basic_bed;
                     end if;
           
                     if new_type = '2' then 
                        SET p_float_new = p_float_new+p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed;
                     end if;
                     if new_type <> '2' and seat_type_code in('9','A') and style_use in('4','5','6') then
      
                        SET new_type = '2';
                        SET p_float_new = p_float_new -2*(p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed);
                        SET p_soft_seat = p_new_double_seat;
                        SET p_down_soft_super = p_new_double_bed;
                        SET p_fast = p_new_double_fast;
                        SET pp_fast = pp_new_double_fast;
                        SET p_air = p_new_double_air;
                        iterate GZ_VERSION_AGAIN;
                     end if;
          
                     if new_type = '1' and seat_type_code <= '6' and (style_use = '4' or style_use = '5' or style_use = '6') then
      
                        SET new_type = '2';
                        SET p_float_new = p_float_new -(p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed);
                        SET p_seat = p_new_seat;
                        SET p_fast = p_new_fast;
                        SET pp_fast = pp_new_fast;
                        SET p_soft_seat = p_new_soft_seat;
                        SET p_up_bed = p_new_up_bed;
                        SET p_middle_bed = p_new_middle_bed;
                        SET p_down_bed = p_new_down_bed;
                        SET p_up_soft = p_new_up_soft;
                        SET p_down_soft = p_new_down_soft;
                        SET p_up_super = p_new_up_super;
                        SET p_down_super = p_new_down_super;
                        SET p_up_soft_super = p_new_up_soft_super;
                        SET p_down_soft_super = p_new_down_soft_super;
                        SET p_air = p_new_air;
                        iterate LOCAL_NEW_TYPE;
                     end if;
                  end if;
         leave LOCAL_NEW_TYPE;
         end loop LOCAL_NEW_TYPE  ;
   
                  If special_visa = 1 then
    
                     SET p_basic_fast_0 = 0;
                     if train_class <> '9' then
                        SET p_basic_fast_0 = round(p_fast*train_class_rate*student*child*half*home*free,0);
                     end if;
                     if train_class = '9' then
                        SET p_basic_fast_0 = round((p_fast*train_class1_rate+pp_fast*train_class2_rate)*student*child*half*home*free,0);
                     end if;
                     SET p_basic_seat_0 = round((p_seat*s_seat1*student+p_soft_seat*s_seat2)*child*half -p_seat*(2 -home -free),0);
                     SET p_basic_air_0 = round(((cast(seat_feature as SIGNED INTEGER))%2)*p_air*student*child*half*(1+small_child)*home*free,0);
                  end if;
    
    
                  SET p_float = 0;
                  if rtrim(rate_use) = 'g' then    
                     SET rate = 1;
                  else 
     if  trim(rate_use)='' then
       set rate_use='0';
     end if;
                     SET rate = CAST(rate_use AS DECIMAL(4,3))+1;
                  end if;
                  if rtrim(rate_a_use) = 'g' then 
                     SET rate_a = 1;
                  else 
     if  trim(rate_a_use)='' then
      set rate_a_use='0';
     end if;
                     SET rate_a = CAST(rate_a_use AS DECIMAL(4,3))+1;
                  end if;
                  if rtrim(rate_aa_use) = 'g' then 
                     SET rate_aa = 1;
                  else 
     if  trim(rate_aa_use)='' then
      set rate_aa_use='0';
     end if;
                     SET rate_aa = CAST(rate_aa_use AS DECIMAL(4,3))+1;
                  end if;
                  if rtrim(rate_seat_use) = 'g' then 
                     SET rate_seat = 1;
                  else 
     if  trim(rate_seat_use)='' then
      set rate_seat_use='0';
     end if;
                     SET rate_seat = CAST(rate_seat_use AS DECIMAL(4,3))+1;
                  end if;
                  if rtrim(rate_seat_a_use) = 'g' then 
                     SET rate_seat_a = 1;
                  else 
     if  trim(rate_seat_a_use)='' then
      set rate_seat_a_use='0';
     end if;
                     SET rate_seat_a = CAST(rate_seat_a_use AS DECIMAL(4,3))+1;
                  end if;
                  if rtrim(rate_seat_aa_use) = 'g' then 
                     SET rate_seat_aa = 1;
                  else 
     if  trim(rate_seat_aa_use)='' then
      set rate_seat_aa_use='0';
     end if;
                     SET rate_seat_aa = CAST(rate_seat_aa_use AS DECIMAL(4,3))+1;
                  end if;
                  IF rate <> 1 then
    
                     if train_class <> '9' then
                        SET p_float_fast = round((round(round(round(p_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_fast)*train_class_rate*student*child*half*bed_only*home*free,0);
                     end if;
                     if train_class = '9' then
                        SET p_float_fast = round(((round(round(round(p_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_fast)*train_class1_rate+(round(round(round(pp_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1)
                        -pp_fast)*train_class2_rate)*student*child*half*bed_only*home*free,0);
                     end if;
                     SET p_float_air = cast(seat_feature as SIGNED INTEGER)%2*p_air;
                     SET p_float_air = round((round(round(round(p_float_air*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_float_air)*student*child*half*(bed_only+small_child)*home*free,0);
                     if train_class = '5' then
                        SET p_float_seat = round(round(round(p_seat*rate_seat,0)*rate_seat_a,0)*rate_seat_aa,0) -p_seat;
                     else
                        SET p_float_seat = round(round(round(p_seat*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_seat;
                     end if;
      
                     SET p_float_seat = round(s_seat1*p_float_seat*student*child*half*bed_only+s_seat2*(round(round(round(p_soft_seat*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_soft_seat)*child*half*bed_only -p_float_seat*(2 -home -free),0);
                     SET p_float_bed =(p_up_bed*s_u+p_middle_bed*s_m+p_down_bed*s_d+p_up_super*s_hu+p_down_super*s_hd)*free+p_up_soft*s_su+p_down_soft*s_sd+p_up_soft_super*s_shu+p_down_soft_super*s_shd;
      
                     SET p_float_bed = round((round(round(round(round(p_float_bed*rate,-1)*rate_a,-1)*rate_aa,-1)*rate_to_400,-1)
                     -round(p_float_bed*rate_to_400,-1))*half
                     -s_seat2*s_bed*(round(round(round(round(p_middle_bed*rate,-1)*rate_a,-1)*rate_aa,-1)*rate_to_400,-1)
                     -round(p_middle_bed*rate_to_400,-1))*(1 -free),0);
      
                     if style_use = '1' and seat_type_code in('9','A') then
      
                        if train_class <> '9' then
        
                           SET p_float_fast = round((round(round(round(p_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                           -1)
                           -2*p_fast)*train_class_rate*half,0);
                        end if;
                        if train_class = '9' then
        
                           SET p_float_fast = round(((round(round(round(p_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                           -1)
                           -2*p_fast)*train_class1_rate+(round(round(round(pp_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                           -1)
                           -2*pp_fast)*train_class2_rate)*half,0);
                        end if;
                        SET p_float_air = cast(seat_feature as SIGNED INTEGER)%2*p_air;
                        SET p_float_air = round((round(round(round(p_float_air*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,-1) -2*p_float_air)*half,0);
                        SET p_float_seat = round((round(round(round(p_soft_seat*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,-1) -2*p_soft_seat)*half,0);
                        SET p_float_bed = round((round(round(round(round(p_down_soft_super*rate,-1)*rate_a,-1)*rate_aa,
                        -1)*rate_to_400,-1)*2
                        -2*round(p_down_soft_super*rate_to_400,-1))*s_shd*half,0);
                     end if;
      
                     if (times = 0 and d_seat < d_bed) or style_use in('5','6') then 
                        SET p_float_bed = 0;
                     end if;
      
                     if times = -1 then 
                        SET p_float_seat = 0;
                        SET p_float_fast = 0;
                        SET p_float_air = 0;
                     end if;
      
                     SET p_float = p_float_seat+p_float_fast+p_float_bed+p_float_air;
                  end if;
                  if gz_version <= 1 then
    
                     SET p_basic = p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed
                     -p_float_new;
                     SET p_float = p_float+p_float_new;
      
                     if p_float IS NULL then 
                        SET p_float = 0;
                     end if;
                     if p_float <= 0 or service_type < '1' or train_class = '5' then
                        SET p_basic = p_basic+p_float;
                     else 
                        if (gz_version = 1 or gz_version = 0 and style_use = '0')
                        and seat_type_code not in('7','8')
                        and seat_type_code < 'D' then
      
                           SET p_basic = p_basic+p_float;
                           SET gz_version = gz_version+2;
                           if rtrim(rate0) = 'x' then
                              SET rate_use = rate_x0;
                              SET rate_seat_use = rate_seat_x0;
                              SET rate_a_use = rate_a_x0;
                              SET rate_seat_a_use = rate_seat_a_x0;
                              SET rate_aa_use = rate_a0;
                              SET rate_seat_aa_use = rate_seat_a0;
                           else 
                              if rtrim(rate_a0) = 'x' then
                                 SET rate_use = rate0;
                                 SET rate_seat_use = rate_seat0;
                                 SET rate_a_use = rate_x0;
                                 SET rate_seat_a_use = rate_seat_x0;
                                 SET rate_aa_use = rate_a_x0;
                                 SET rate_seat_aa_use = rate_seat_a_x0;
                              else
                                 SET rate_use = rate0;
                                 SET rate_seat_use = rate_seat0;
                                 SET rate_a_use = rate_a0;
                                 SET rate_seat_a_use = rate_seat_a0;
                                 SET rate_aa_use = '0';
                                 SET rate_seat_aa_use = '0';
                              end if;
                           end if;
                           if style_use <> '0' then 
                              SET style_use = '1';
                           end if; 
                           ITERATE GZ_VERSION_AGAIN;
                        else 
                           SET p_float_total = p_float_total+p_float;
                        end if;
                     end if;
    
                  else 
                     SET p_basic = p_basic -p_float;
                     SET gz_version = gz_version -2;
                     SET p_float_total = p_float_total+p_float;
                  end if;
               END;
            end if;
  
            IF style_use in('7','8','9') then
               BEGIN
    
                  SET p_basic = 0;
                  SET p_basic_seat = 0;
                  SET p_fast = 0;
                  SET p_000 = 0;
                  SET seat_type0 = seat_type_code;
                  if style_use in('8','9') and s_bed = 1 then 
                     SET seat_type0 = CAST(s_seat1+2*s_seat2 AS char(1));
                  end if;
     
    

                  SET p_p_bed_only = 1;
                  BED_ONLY_AGAIN: LOOP
    
                     select max(price),max(service_cost)
                     from basic.CG30_p_p_price
                     where train_no = train_no and belong_line = line_use
                     and from_station_name = from_station_name
                     and to_station_name = to_station_name
                     and start_date <= start_train_date and stop_date >= start_train_date
                     and ticket_type & ticket_type_power = ticket_type_power
                     and seat_type_code = seat_type0
                     and (bed_level = bed_level or s_bed = 0) LIMIT 1;
 
 
     
 
                     if p_p_bed_only = 1 and special_visa = 1 and p_basic IS NOT NULL then
    
                        SET p_p_bed_only = 2;
                        SET seat_type0 = CAST(s_seat1+2*s_seat2 AS char(1));
                        SET p_basic_tmp = p_basic;
                        SET p_000_tmp = p_000;
                        ITERATE BED_ONLY_AGAIN;
                     end if;
                     LEAVE BED_ONLY_AGAIN;
      leave BED_ONLY_AGAIN;
                  END LOOP  BED_ONLY_AGAIN;
                  if p_p_bed_only = 2 then 
                     SET p_basic = p_basic_tmp -p_basic;
                     SET p_000 = p_000_tmp -p_000;
                  end if;
                  if p_basic is null and (ticket_type not in(5,6,9)
                  or ticket_type = 5 and (s_seat2 = 1 and special_visa = 2)
                  or ticket_type = 6 and (s_seat1 = 1 and s_bed = 1 or s_seat2 = 1
                  or seat_type_code in('7','8') or seat_type_code >= 'D')) then
    
                     SET ticket_price = -60;
                     SET SWP_Ret_Value = -60;
                     LEAVE SWL_return;
                  end if;
 
                  if times > -1 then
                     SET p_p_basic_price = p_basic+p_000;
                  end if;
 
    
                  SET p_float_total = p_float_total+IFNULL(p_000,0);
                  SET p_basic = IFNULL(p_basic,0) -IFNULL(p_000,0);
                  if times > -1 and p_basic > 0 then 
                     SET p_p_time = times;
                  end if;
               END;
            end if;
            LEAVE GZ_VERSION_AGAIN;
         END LOOP GZ_VERSION_AGAIN;
  
         if relay_ticket_type < 9 then
  
            if style_use in('7','8','9') or s_seat1 = 0 then
               select   distance_price.seat_price*student*child*half, 
          distance_price.fast_price 
        INTO p_basic_seat,
          p_fast 
        from basic.distance_price 
        where distance_price.distance0 <= d_use
                 and distance_price.distance >= d_use
                 and distance_price.start_date <= start_train_date
                 and distance_price.stop_date >= start_train_date   
        LIMIT 1;
            end if;
            if train_class <> '9' then
    
               SET train_class_level = train_class_rate;
               if train_class_level > relay_ticket_type then
                  SET train_class_level = relay_ticket_type;
               end if;
               SET p_fast = p_fast*train_class_level;
            end if;
            if train_class = '9' then
    
               if train_class1 <> '9' then
      
                  SET train_class_level = train_class1_rate;
                  if train_class_level > relay_ticket_type then
                     SET train_class_level = relay_ticket_type;
                  end if;
                  SET p_fast = p_fast*train_class_level;
               end if;
               if train_class2 <> '9' then
      
                  SET train_class_level = train_class2_rate;
                  if train_class_level > relay_ticket_type then
                     SET train_class_level = relay_ticket_type;
                  end if;
                  SET pp_fast = pp_fast*train_class_level;
               end if;
               SET p_fast = p_fast+pp_fast;
            end if;
            SET p_fast = round(p_fast*student*child*half,0);
         end if;
         SET times = times -1;
      END;
   END WHILE;







   SET p_total = p_0+p_1+p_2+p_3+p_4+p_5+p_float_total;



   if s_bed = 1 and p_total > 0 
    and ticket_type <> 5 
 and not exists(select 1 
   from basic.CG52_train_dir_appendix 
   where CG52_train_dir_appendix.train_no = train_no 
    and CG52_train_dir_appendix.special_flag = '6'
   ) then
      SET p_bed_reserve = 100;
   else
      SET p_bed_reserve = 0;
   end if;
   SET ls_train_no_part = SUBSTRING(train_no,1,6);
   if (line1 = 145 or line1 = 146 or line1 = 147 or line1 = 148 or line1 = 149) and ls_train_no_part != '760000T126' and ls_train_no_part != '7600001216' and ls_train_no_part != '760000K352' then

      if exists(select 1 
        from basic.line_station
        where (line_station.belong_line = line1 and line_station.station_name = from_station_name)
         or (line_station.belong_line = 150 and line_station.station_name = from_station_name))
       and exists(select 1 
    from basic.line_station
         where (line_station.belong_line = line1 and line_station.station_name = to_station_name)
          or (line_station.belong_line = 150 and line_station.station_name = to_station_name)) then
         SET p_bed_reserve = 0;
      end if;
   end if;


   if start_train_date >= '20130101' then
      SET p_bed_reserve = p_bed_reserve*half;
   end if;


   SET p_total = p_total+p_bed_reserve;

   if total_distance = 0 and relay_ticket_type < 9 and special_visa = 0 then

  
      SET p_total = p_total
      -p_basic_seat0 -p_basic_seat1 -p_basic_seat2
      -p_basic_seat3 -p_basic_seat4 -p_basic_seat5;
      SET p_0 = p_0 -p_basic_seat0;
      SET p_1 = p_1 -p_basic_seat1;
      SET p_2 = p_2 -p_basic_seat2;
      SET p_3 = p_3 -p_basic_seat3;
      SET p_4 = p_4 -p_basic_seat4;
      SET p_5 = p_5 -p_basic_seat5;
  
      if relay_ticket_type >= 1 then
  
         SET p_total = p_total
         -p_relay_fast0 -p_relay_fast1 -p_relay_fast2
         -p_relay_fast3 -p_relay_fast4 -p_relay_fast5;
         SET p_0 = p_0 -p_relay_fast0;
         SET p_1 = p_1 -p_relay_fast1;
         SET p_2 = p_2 -p_relay_fast2;
         SET p_3 = p_3 -p_relay_fast3;
         SET p_4 = p_4 -p_relay_fast4;
         SET p_5 = p_5 -p_relay_fast5;
      end if;
      if p_0 < 0 then 
         SET p_total = p_total -p_0;
         SET p_0 = 0;
      end if;
      if p_1 < 0 then 
         SET p_total = p_total -p_1;
         SET p_1 = 0;
      end if;
      if p_2 < 0 then 
         SET p_total = p_total -p_2;
         SET p_2 = 0;
      end if;
      if p_3 < 0 then 
         SET p_total = p_total -p_3;
         SET p_3 = 0;
      end if;
      if p_4 < 0 then 
         SET p_total = p_total -p_4;
         SET p_4 = 0;
      end if;
      if p_5 < 0 then 
         SET p_total = p_total -p_5;
         SET p_5 = 0;
      end if;
   end if;
   SET p_relay = 0;
   SET total_base_price = 0;


   if total_distance > d_total then

  
  
      SET error_code = 0;
      SET belong_line1_relay = '0';
      SET belong_line2_relay = '0';
      SET belong_line3_relay = '0';
      SET belong_line4_relay = '0';
      SET belong_line5_relay = '0';
      CALL arith.DG50_fetch_train_special_relay(train_no,start_train_date,belong_line1_relay,belong_line2_relay,belong_line3_relay,
      belong_line4_relay,belong_line5_relay,error_code,'0');
      if error_code < 0 then
  
         SET ticket_price = error_code;
         SET SWP_Ret_Value = ticket_price;
         LEAVE SWL_return;
      end if;
      if (d_1 > 0 and belong_line1_relay = '0') or (d_2 > 0 and belong_line2_relay = '0')
      or (d_3 > 0 and belong_line3_relay = '0') or (d_4 > 0 and belong_line4_relay = '0')
      or (d_5 > 0 and belong_line5_relay = '0') then
  
         SET ticket_price = -80;
         SET SWP_Ret_Value = -80;
         LEAVE SWL_return;
      end if;
  
      SET p_tmp = p_total;
  
      SET p_total = p_total
      -p_basic_seat0 -p_basic_seat1 -p_basic_seat2
      -p_basic_seat3 -p_basic_seat4 -p_basic_seat5;
  
      if relay_ticket_type >= 1 then
  
         SET p_total = p_total
         -p_relay_fast0 -p_relay_fast1 -p_relay_fast2
         -p_relay_fast3 -p_relay_fast4 -p_relay_fast5;
      end if;
  
      select   distance_price.seat_price, 
        distance_price.fast_price 
      INTO p_seat,
        p_fast 
      from basic.distance_price 
      where distance_price.distance0 <= total_distance 
        and distance_price.distance >= total_distance
        and distance_price.start_date <= start_train_date 
  and distance_price.stop_date >= start_train_date   
      LIMIT 1;
      if ROW_COUNT() <> 1 then
  
         SET ticket_price = -81;
         SET SWP_Ret_Value = -81;
         LEAVE SWL_return;
      end if;
      SET p_base_seat = round(p_seat*student*child*half,0);
      if relay_ticket_type >= 1 then
         SET p_base_fast = round(p_fast*relay_ticket_type*student*child*half,0);
      else
         SET p_base_fast = 0;
      end if;
  
      if ticket_type not in(5,6,9) then 
         SET total_base_price = p_base_seat+p_base_fast;
      end if;
  
      SET p_total = p_total+p_base_seat;
  
      if relay_ticket_type >= 1 then 
         SET p_total = p_total+p_base_fast;
      end if;
      SET p_relay = p_total -p_tmp;
   end if;
  leave PRICING_FINISH;
  end loop PRICING_FINISH;

   if pdl_error_code = 0 and pdl_price >= 0 then

      SET p_total = 0;
      SET p_relay = 0;
      SET p_float_total = 0;
      SET p_bed_reserve = 0;
      SET p_0 = 0;
      SET p_1 = 0;
      SET p_2 = 0;
      SET p_3 = 0;
      SET p_4 = 0;
      SET p_5 = 0;
      if seat_feature in('2','3') then 
         SET new_type = '1'; 
      else 
         SET new_type = '0';
      end if;
      SET p_total = ticket_price;
 
 
 
      if s_bed = 1 
       and p_total > 0 
       and ticket_type <> 5 
       and not exists(select 1 
   from basic.CG52_train_dir_appendix 
   where CG52_train_dir_appendix.train_no = train_no 
   and CG52_train_dir_appendix.special_flag = '6') 
 then
         SET p_bed_reserve = 100;
      else
         SET p_bed_reserve = 0;
      end if;
 
 
      SET p_0 = p_total;
      SET p_p_time = 1;
      SET paper = '2';
      SET st_air = '2';

 
      if relay_ticket_type < 9 then
         select   distance_price.seat_price*student*child*half, 
   distance_price.fast_price*student*child*half 
  INTO p_basic_seat_pdl,
   p_fast_pdl 
  from basic.distance_price 
  where distance_price.distance0 <= d_total
          and distance_price.distance >= d_total
          and distance_price.start_date <= start_train_date
          and distance_price.stop_date >= start_train_date   
  LIMIT 1;
      end if;
      if train_class <> '9' then
    
         SET train_class_level = train_class_rate;
         if train_class_level > relay_ticket_type then
            SET train_class_level = relay_ticket_type;
         end if;
         SET p_fast_pdl = p_fast_pdl*train_class_level;
      end if;
      if train_class = '9' then
    
         if train_class1 <> '9' then
      
            SET train_class_level = train_class1_rate;
            if train_class_level > relay_ticket_type then
               SET train_class_level = relay_ticket_type;
            end if;
            SET p_fast_pdl = p_fast_pdl*train_class_level;
         end if;
         if train_class2 <> '9' then
      
            SET train_class_level = train_class2_rate;
            if train_class_level > relay_ticket_type then
               SET train_class_level = relay_ticket_type;
            end if;
            SET p_fast_pdl = p_fast_pdl*train_class_level;
         end if;
      end if;
 
      if total_distance > d_total then
 
  
  
         SET error_code = 0;
         SET belong_line1_relay_pdl = '0';
         SET belong_line2_relay_pdl = '0';
         SET belong_line3_relay_pdl = '0';
         SET belong_line4_relay_pdl = '0';
         SET belong_line5_relay_pdl = '0';
         CALL arith.DG50_fetch_train_special_relay(train_no,start_train_date,belong_line1_relay_pdl,belong_line2_relay_pdl,
         belong_line3_relay_pdl,belong_line4_relay_pdl,belong_line5_relay_pdl,
         error_code,'0');
         if error_code < 0 then
  
            SET ticket_price = error_code;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
         if (d_1 > 0 and belong_line1_relay_pdl = '0') or (d_2 > 0 and belong_line2_relay_pdl = '0')
         or (d_3 > 0 and belong_line3_relay_pdl = '0') or (d_4 > 0 and belong_line4_relay_pdl = '0')
         or (d_5 > 0 and belong_line5_relay_pdl = '0') then
  
            SET ticket_price = -80;
            SET SWP_Ret_Value = -80;
            LEAVE SWL_return;
         end if;
  
         SET p_tmp = p_total;
  
         SET p_total = p_total -p_basic_seat_pdl;
  
         if relay_ticket_type >= 1 then
            SET p_total = p_total -p_fast_pdl;
         end if;

  
         select   distance_price.seat_price, 
   distance_price.fast_price 
  INTO p_seat,
   p_fast 
  from basic.distance_price 
  where distance_price.distance0 <= total_distance 
   and distance_price.distance >= total_distance
          and distance_price.start_date <= start_train_date 
  and distance_price.stop_date >= start_train_date   
  LIMIT 1;
         if ROW_COUNT() <> 1 then
  
            SET ticket_price = -81;
            SET SWP_Ret_Value = -81;
            LEAVE SWL_return;
         end if;
         SET p_base_seat = round(p_seat*student*child*half,0);
         if relay_ticket_type >= 1 then
            SET p_base_fast = round(p_fast*relay_ticket_type*student*child*half,0);
         else
            SET p_base_fast = 0;
         end if;
  
         if ticket_type not in(5,6,9) then 
            SET total_base_price = p_base_seat+p_base_fast;
         end if;
  
         SET p_total = p_total+p_base_seat;
  
         if relay_ticket_type >= 1 then 
            SET p_total = p_total+p_base_fast;
         end if;
         SET p_relay = p_total -p_tmp;
      end if; 
 
 
      if total_distance = 0 and relay_ticket_type < 9 and special_visa = 0 then
 
   
         SET p_total = p_total -p_basic_seat_pdl;
         SET p_0 = p_0 -p_fast_pdl;
   
         if relay_ticket_type >= 1 then
   
            SET p_total = p_total -p_fast_pdl;
            SET p_0 = p_0 -p_fast_pdl;
         end if;
      end if;
   end if; 




   if pdl_error_code = 0 and pdl_price >= 0 then
      SET p_paper = 0;
   else
 
      SET p_seat_total = p_float_seat0+p_seat0;
  
  
  
 
      if style0 in('7','8','9') then 
         SET p_seat_total = p_0;
      end if;
      SET p_paper = 10;
      if start_train_date >= '20130101' then
 
         if d_1+d_2+d_3+d_4+d_5 > d_seat -d_0 then
  
            if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
               SET p_paper = 5;
            end if;
         else
            if ticket_type = 6 then
   
               if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
                  SET p_paper = 5;
               end if;
            else
               if paper = '0' and p_seat_total <= 50 or paper = '2' and p_seat_total <= 60 then 
                  SET p_paper = 5;
               end if;
            end if;
         end if;
  
  
  
         if bed_only = 0 and small_child = 0.5 then
            SET p_paper = 0;
         else
            SET p_paper = CEIL((p_paper*s_seat1*student+p_paper*s_seat2)*child*half/5.0)*5;
         end if;
      else
         if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
            SET p_paper = 5;
         end if;
      end if;
 
 
 

      if total_distance = 0 and relay_ticket_type < 9 and ticket_type not in(5,6,9) or special_visa = 255 then
         SET p_paper = 0;
      end if;
      if ticket_type in(5,6,9) and p_total <= 10 then 
         SET p_paper = 10;
      end if;
      if paper = '0' or paper = '2' and p_p_time = -1 or ticket_type in(5,6,9) then 
         SET p_total = p_total+p_paper;
      else 
         if paper = '1' then 
            SET p_paper = 0;
         else 
            if paper = '2' then
 
               if p_0 >= p_paper and p_p_time = 0 then 
                  SET p_0 = p_0 -p_paper;
               else 
                  if p_1 >= p_paper and p_p_time = 1 then 
                     SET p_1 = p_1 -p_paper;
                  else 
                     if p_2 >= p_paper and p_p_time = 2 then 
                        SET p_2 = p_2 -p_paper;
                     else 
                        if p_3 >= p_paper and p_p_time = 3 then 
                           SET p_3 = p_3 -p_paper;
                        else 
                           if p_4 >= p_paper and p_p_time = 4 then 
                              SET p_4 = p_4 -p_paper;
                           else 
                              if p_5 >= p_paper and p_p_time = 5 then 
                                 SET p_5 = p_5 -p_paper;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

   SET d_relay = 0;
   if total_distance > d_total then

      SET d_relay = total_distance -d_total;
      SET d_total = total_distance;
   end if;

   if pdl_error_code = 0 and pdl_price >= 0 then
      SET air_condition_price = 0;
   else
      SET air_condition_price = 0;
      if (ticket_type in(5,6) or (seat_type_code in('1','3','5','B','C')
      and d_total > 200 and (total_distance > 0 or relay_ticket_type = 9)))
      and special_visa <> 255 then
 
         if st_air = '0' or st_air = '2' and p_p_time = -1 or ticket_type in(5,6) then
            SET air_condition_price = 10;
         else 
            if st_air = '1' then 
               SET air_condition_price = 0;
            else 
               if st_air = '2' then
   
                  SET air_condition_price = 10;
                  if p_0 >= air_condition_price and p_p_time = 0 then 
                     SET p_0 = p_0 -air_condition_price;
                  else 
                     if p_1 >= air_condition_price and p_p_time = 1 then 
                        SET p_1 = p_1 -air_condition_price;
                     else 
                        if p_2 >= air_condition_price and p_p_time = 2 then 
                           SET p_2 = p_2 -air_condition_price;
                        else 
                           if p_3 >= air_condition_price and p_p_time = 3 then 
                              SET p_3 = p_3 -air_condition_price;
                           else 
                              if p_4 >= air_condition_price and p_p_time = 4 then 
                                 SET p_4 = p_4 -air_condition_price;
                              else 
                                 if p_5 >= air_condition_price and p_p_time = 5 then 
                                    SET p_5 = p_5 -air_condition_price;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
 
 
      if start_train_date >= '20130101' then
 
         SET air_condition_price = CEIL((air_condition_price*s_seat1*student+air_condition_price*s_seat2)*child*half/5.0)*5;
         if bed_only = 0 and small_child = 0.5 then
            SET air_condition_price = 0;
         end if;
      end if;
      SET p_total = p_total+air_condition_price;
 
 
      if total_base_price > 0 then 
         SET total_base_price = total_base_price+p_paper+air_condition_price;
      end if;
   end if;

   if ticket_type = 9 or (preference_style in('5','6')) then
      SET p_total = 0;
      SET p_paper = 0;
      SET air_condition_price = 0;
   end if;



   if exists(select 1 
     from basic.CG52_train_dir_appendix 
  where CG52_train_dir_appendix.train_no = train_no 
   and CG52_train_dir_appendix.special_flag not in('','0')
     ) 
   then

      SET p_total = p_total -p_relay;
      SET basic_rate = 0;
      SET p_basic_discount = 0;
      
      select   IFNULL(CAST(CG40_special_rate.basic_rate AS DECIMAL(4,3)),0) 
      INTO basic_rate 
      from basic.CG40_special_rate 
      where CG40_special_rate.train_no = train_no
        and CG40_special_rate.start_date <= start_train_date 
  and CG40_special_rate.stop_date >= start_train_date
        and CG40_special_rate.seat_type_code in(seat_type_code,'z')
        and CG40_special_rate.ticket_type & ticket_type_power = ticket_type_power   
      order by seat_type_code 
      LIMIT 1;
      if basic_rate > 0 then
   
   
         SET p_basic_discount = round(p_total*basic_rate,-1);
         SET p_total = p_total+p_basic_discount+p_relay;
      else
         SET p_total = p_total+p_relay;
      end if;
   end if;







   SET p_total = p_total -p_relay;
   SET discount = 0;
   SET discount_rate = 0;

   select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO discount_rate 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
    and DD40_price_discount.start_date <= start_train_date 
 and DD40_price_discount.stop_date >= start_train_date
    and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
    and DD40_price_discount.seat_type_code in(seat_type_code,'z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
   if discount_rate > 0 and ticket_type = 3 and s_seat1 = 1 then
      SET discount = round((p_bed+p_bed_reserve)*discount_rate,-1);
   end if;

   SET tmp_rate_z = 0.0;
   SET tmp_rate_w = 0.0;
   SET tmp_add_price = 0;
   if special_visa = 1 then

      SET p_base_seat_total = p_basic_seat5_0+p_basic_fast5_0+p_basic_air5_0+p_basic_seat4_0+p_basic_fast4_0+p_basic_air4_0+p_basic_seat3_0+p_basic_fast3_0+p_basic_air3_0+p_basic_seat2_0+p_basic_fast2_0+p_basic_air2_0+p_basic_seat1_0+p_basic_fast1_0+p_basic_air1_0+p_basic_seat0_0+p_basic_fast0_0+p_basic_air0_0;
      if seat_type_code in('3','C') then
   
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_z 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
  and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('1','B','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_w 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
  and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('3','C','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
      end if;
      if seat_type_code in('4','A','L') then
   
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_z 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
  and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('2','9','K','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
  INTO tmp_rate_w 
  from basic.DD40_price_discount 
  where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
   and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('4','A','L','z')   
  order by DD40_price_discount.seat_type_code 
  LIMIT 1;
      end if;
    
      SET tmp_add_price = round(p_base_seat_total*(tmp_rate_w -tmp_rate_z),-1);
   end if;

   if discount_rate <> 0 then

   
      if not(discount_rate > 0 and ticket_type = 3 and s_seat1 = 1) then
    
         SET discount = round(p_total*discount_rate,-1);
      end if;  
  

      if discount_rate < 0 and ticket_type = 3 and s_seat1 = 1 then
         SET discount = round((p_bed+p_bed_reserve)*discount_rate,-1)+round((p_total -p_bed -p_bed_reserve)*discount_rate,-1);
      end if;
   end if;
   SET p_total = p_total+discount+p_relay+tmp_add_price;








   if pdl_price = p_total then

      SET preference_rate = pdl_preference_rate;
      SET ticket_price_obtion = p_total;
      SET p_total = pdl_ticket_price;
      SET preference_style = "1";
      SET preference_word = pdl_preference_word;
      SET preference_price = p_total -ticket_price_obtion;
   else
      if preference_rate <> 0 and preference_rate < pdl_preference_rate then
 
         SET preference_price = round(p_total*preference_rate,-1);
         SET ticket_price_obtion = p_total;
         SET p_total = ticket_price_obtion+preference_price;
      else 
         if pdl_preference_rate <> 0 then
 
            SET preference_rate = pdl_preference_rate;
            SET preference_style = "1";
            SET preference_word = pdl_preference_word;
            SET preference_price = round(p_total*preference_rate,-1);
            SET ticket_price_obtion = p_total;
            SET p_total = ticket_price_obtion+preference_price;
         end if;
      end if;
   end if;




   if sleeper_style = 'E' then
      SET preference_word = 'ÕÛ';
   end if;

   if preference_style = '6' then
      SET preference_word = 'ÓÅ';
   else 
      if preference_style = '5' then
         SET preference_word = 'Ôù';
      else 
         if preference_style in('1','2','3','7','8','9','A','B','C','D','E') and preference_rate <> 0.0 then
            SET preference_word = 'ÕÛ';
         end if;
      end if;
   end if;
   if ltrim(rtrim(preference_word)) NOT IN('','ÓÅ','Ôù') then

      select   IFNULL(DG50_discount_train_define.discount_flag,'0') 
      INTO discount_flag 
      from basic.DG50_discount_train_define 
      where DG50_discount_train_define.train_no = train_no
       and DG50_discount_train_define.start_date <= start_train_date 
 and DG50_discount_train_define.stop_date >= start_train_date
       and DG50_discount_train_define.seat_type_code in(seat_type_code,'z')
       and DG50_discount_train_define.ticket_type & ticket_type_power = ticket_type_power   
      order by DG50_discount_train_define.seat_type_code 
      LIMIT 1;
      if discount_flag = '1' then
         SET preference_word = '??';
      end if;
   end if;



   if ltrim(rtrim(preference_word)) NOT IN('','ÓÅ','Ôù','ÕÛ') then

      if p_train_basic_price > p_p_basic_price then
         SET preference_word = 'ÕÛ';
      end if;
   end if;




 if exists(select 1 
     from basic.CG52_train_dir_appendix 
  where CG52_train_dir_appendix.train_no = train_no 
   and CG52_train_dir_appendix.flag1 = '2') 
   then
      SET dw_flag = '1';
   else
      SET dw_flag = '0';
   end if;

   if dw_flag = '1' and dw_preference_style in('F','G') then

      CALL arith.DG60_fetch_dw_rate(start_train_date,train_code,start_station_name,end_station_name,seat_type_code,
      dw_preference_style,dw_preference_rate,dw_preference_word,dw_error_code,
      0);
      if dw_error_code = 0 and dw_preference_rate <> 1 then
 
         SET p_total = round(p_total*dw_preference_rate,-2);
         SET preference_word = dw_preference_word;
         SET preference_style = dw_preference_style;
         SET preference_price = p_total -ticket_price_obtion;
         SET preference_rate = round(preference_price/CAST(ticket_price_obtion AS DECIMAL(6,1)),3);
      else 
         if dw_error_code < 0 then
 
            SET ticket_price = dw_error_code; 
            SET SWP_Ret_Value = dw_error_code;
            LEAVE SWL_return;
         end if;
      end if;
   end if;





   SET distance = d_total;
   SET ticket_price = p_total;
   SET belong_line1 = line1;
   SET distance1 = d_1;
   SET ticket_price1 = p_1;
   SET belong_line2 = line2;
   SET distance2 = d_2;
   SET ticket_price2 = p_2;
   SET belong_line3 = line3;
   SET distance3 = d_3;
   SET ticket_price3 = p_3;
   SET belong_line4 = line4;
   SET distance4 = d_4;
   SET ticket_price4 = p_4;
   SET belong_line5 = line5;
   SET distance5 = d_5;
   SET ticket_price5 = p_5;
   SET relay_distance = d_relay;
   SET relay_price = p_relay;
   SET addition_cost = p_paper;
   SET bed_reserve_cost = p_bed_reserve;
   SET service_cost = p_float_total+p_basic_discount;
   SET train_air_condition = 0;
   SET total_base_price = total_base_price;
   SET price1_difference = p_1_0;
   SET price2_difference = p_2_0;
   SET price3_difference = p_3_0;
   SET price4_difference = p_4_0;
   SET price5_difference = p_5_0;
   SET basic_price = p_0+service_cost+p_relay;
   SET service_cost = qz_add_price;







   if start_train_date >= '20130101' then

      if total_distance > d_total then
 
         SET insurance_price = 0;
         SET insurance_price1 = 0;
         SET insurance_price2 = 0;
         SET insurance_price3 = 0;
         SET insurance_price4 = 0;
         SET insurance_price5 = 0;
         SET @SWV_Error = 0;
         CALL arith.DG60_fetch_insurance_price(train_date,start_train_date,train_no,start_station_no,to_station_no,seat_type_code,
         bed_level,ticket_type,d_total,style0,insurance_price,distance1,
         style1,insurance_price1,distance2,style2,insurance_price2,distance3,
         style3,insurance_price3,distance4,style4,insurance_price4,distance5,
         style5,insurance_price5,error_code,0);
         SET error_no = @SWV_Error;
         if error_no != 0 then
  
            SET ticket_price = -88;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
         if error_code < 0 then
  
            SET ticket_price = error_code;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
  
 
         SET insurance_price =(insurance_price*s_seat1*student+insurance_price*s_seat2)*child*half*free;
         if s_seat1 = 1 then 
            SET insurance_price = insurance_price*home;
         end if;
 
  
  
  
  
         if p_float_seat0+p_seat0 < 30 then 
            SET insurance_price = CEIL(insurance_price/5.0)*5;
         end if;
  
  
         SET p_total = CEIL((p_total -insurance_price)/5.0)*5;
         SET ticket_price = CEIL((ticket_price -insurance_price)/5.0)*5;
         SET ticket_price_obtion = CEIL((ticket_price_obtion -insurance_price)/5.0)*5;
      end if;
      SET ticket_price1 = 0;
      SET ticket_price2 = 0;
      SET ticket_price3 = 0;
      SET ticket_price4 = 0;
      SET ticket_price5 = 0;
      SET relay_price = 0;
      SET service_cost = 0;
      SET train_air_condition = 0;
      SET total_base_price = 0;
      SET discount = 0;
      SET agent_fee = 0;
      SET qz_add_price = 0;
      SET basic_price = 0;
  
      SET basic_price = ticket_price -addition_cost -air_condition_price -bed_reserve_cost;
   end if;



   if sleeper_style = 'E' then

      SET p_total = round(p_total*sleeper_rate,-1);
      if preference_style = '0' then 
         SET preference_style = sleeper_style;
      end if;
      SET ticket_price_obtion = p_total;
      SET basic_price = p_total;
      SET ticket_price = p_total;
      SET ticket_price1 = 0;
      SET ticket_price2 = 0;
      SET ticket_price3 = 0;
      SET ticket_price4 = 0;
      SET ticket_price5 = 0;
      SET relay_price = 0;
      SET addition_cost = 0;
      SET bed_reserve_cost = 0;
      SET service_cost = 0;
      SET air_condition_price = 0;
      SET train_air_condition = 0;
      SET total_base_price = 0;
      SET discount = 0;
      SET agent_fee = 0;
      SET preference_price = 0;
      SET qz_add_price = 0;
   end if;








   select   CAST(rtrim(SUBSTRING(DG50_little_dictionary.field_name,17,6)) AS DECIMAL(5,4)) 
   INTO tax_rate 
   from basic.DG50_little_dictionary 
   where DG50_little_dictionary.little_code = '06' 
    And SUBSTRING(DG50_little_dictionary.field_name,1,8) <= train_date 
 and SUBSTRING(DG50_little_dictionary.field_name,9,8) >= train_date;
   SET rowcount = ROW_COUNT();
   SET error = @SWV_Error;
   if rowcount > 0 and error = 0 then
      SET train_air_condition = round(ticket_price/tax_rate,0);
   end if;


   if output2 = 1 then
      select distance distance,
       ticket_price/10.0 price,
 d_0 d_0,
 p_0/10.0 price_0,
 distance1 d_1,
 ticket_price1/10.0 price_1,
 distance2 d_2,
 ticket_price2/10.0 price_2,
 distance3 d_3,
 ticket_price3/10.0 price_3,
 distance4 d_4,
 ticket_price4/10.0 price_4,
 distance5 d_5,
 ticket_price5/10.0 price_5,
 d_relay d_relay,
 p_relay/10.0 price_relay,
 p_paper/10.0 paper,
 air_condition_price/10.0 air_condition_price,
 p_bed_reserve/10.0 reserve,
 service_cost/10.0 service,
 new_type new,
 total_base_price/10.0 total_base_price

,discount/10.0 discount
,agent_fee/10.0 agent_fee
,ticket_price_obtion/10.0 ticket_price_obtion
,basic_price/10.0 basic_price
,preference_style preference_style
,preference_price/10.0 preference_price
,preference_rate preference_rate
,preference_word preference_word
,qz_add_price/10.0 qz_add_price;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_fetch_preference`(train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,ticket_type_power INT
,INOUT preference_style CHAR(1)

,INOUT preference_rate DECIMAL(4,3) 
,INOUT error_code SMALLINT
,out_flag TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE current_date2 CHAR(8);
   DECLARE start_date CHAR(8);
   DECLARE stop_date CHAR(8);
   DECLARE start_train_date CHAR(8);
   DECLARE day_diff INT;
   DECLARE preference_rate_temp DECIMAL(4,2);
   DECLARE from_station_telecode CHAR(3);
   DECLARE to_station_telecode CHAR(3);
   DECLARE discount_from_station_no CHAR(2);
   DECLARE discount_to_station_no CHAR(2);
   DECLARE date_after INT;

   DECLARE from_distance INT;
   DECLARE to_distance INT;
   DECLARE distance INT;
   DECLARE f_sta CHAR(3);
   DECLARE t_sta CHAR(3);
   DECLARE f_sta_no CHAR(2);
   DECLARE t_sta_no CHAR(2);
   DECLARE NO_DATA INT DEFAULT 0;
   declare cur_sleeper_dis cursor for
   select a.from_station_telecode,
    a.to_station_telecode
   from basic.DG50_train_sleeper_discount a,
    basic.DG50_sleeper_discount_rule b
   where a.train_no = train_no 
    and a.ticket_type & ticket_type_power = ticket_type_power
    and start_date <= start_train_date 
 and stop_date >= start_train_date
    and (a.running_style = 1 or running_rule & power(2,(TIMESTAMPDIFF(DAY,a.start_date,start_train_date)%running_style)) > 0)
    and b.seat_type_code in(seat_type_code,'z')
    and a.sleeper_discount_code = b.discount_code
    and b.from_distance <= distance and b.to_distance >= distance
   order by b.seat_type_code;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET NO_DATA = 1;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   IF preference_style is null then
      set preference_style = '0';
   END IF;
   IF preference_rate is null then
      set preference_rate = 0;
   END IF;
   IF error_code is null then
      set error_code = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   

   SET current_date2 = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');

   select   stop_time.start_date, 
    stop_time.stop_date, 
 stop_time.day_difference, 
 IFNULL(stop_time.distance,0)
  +IFNULL(stop_time.distance1,0)
  +IFNULL(stop_time.distance2,0)
  +IFNULL(stop_time.distance3,0)
  +IFNULL(stop_time.distance4,0)
  +IFNULL(stop_time.distance5,0) 
   INTO start_date,
    stop_date,
 day_diff,
 from_distance 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date;

   if ROW_COUNT() = 0 then

      SET error_code = -24;
      SET SWP_Ret_Value = -24;
      LEAVE SWL_return;
   end if;
   SET date_after = TIMESTAMPDIFF(DAY,start_date,train_date);

   SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -day_diff,STR_TO_DATE(train_date,'%Y%m%d')),
   '%Y%m%d');
   if not(start_date <= start_train_date and stop_date >= start_train_date) then

      SET error_code = -36;
      SET SWP_Ret_Value = -36;
      LEAVE SWL_return;
   end if;



   select   IFNULL(DG50_discount_for_saletime.discount_rate,0) 
   INTO preference_rate 
   from basic.DG50_discount_for_saletime 
   where DG50_discount_for_saletime.train_no = train_no
    and DG50_discount_for_saletime.seat_type_code in(seat_type_code,'z')
    and DG50_discount_for_saletime.ticket_types & ticket_type_power = ticket_type_power
    and DG50_discount_for_saletime.start_date <= start_train_date 
 and DG50_discount_for_saletime.stop_date >= start_train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,DG50_discount_for_saletime.from_pre_buy,current_date2),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,DG50_discount_for_saletime.to_pre_buy,current_date2),'%Y%m%d') >= train_date

    and (DG50_discount_for_saletime.running_style = 1 or DG50_discount_for_saletime.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG50_discount_for_saletime.start_date,start_train_date)%DG50_discount_for_saletime.running_style)) > 0)   
   order by seat_type_code;

   select   IFNULL(DD50_segment_discount.discount_rate,0), 
    IFNULL(DD50_segment_discount.from_station_telecode,'000'), 
 IFNULL(DD50_segment_discount.to_station_telecode,'000') 
   INTO preference_rate_temp,
    from_station_telecode,
 to_station_telecode 
   from basic.DD50_segment_discount 
   where DD50_segment_discount.train_no = train_no
    and DD50_segment_discount.ticket_type & ticket_type_power = ticket_type_power
    and DD50_segment_discount.seat_type_code in(seat_type_code,'z')
    and DD50_segment_discount.start_date <= start_train_date 
 and DD50_segment_discount.stop_date >= start_train_date

    and (DD50_segment_discount.running_style = 1 or DD50_segment_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DD50_segment_discount.start_date,start_train_date)%DD50_segment_discount.running_style)) > 0)   order by seat_type_code;

   select   IFNULL(max(stop_time.station_no),'00') 
   INTO discount_from_station_no 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_telecode = from_station_telecode
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date;

   select   IFNULL(max(stop_time.station_no),'00') 
   INTO discount_to_station_no 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_telecode = to_station_telecode
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date;
   
   if discount_to_station_no < discount_from_station_no then
      SET discount_to_station_no = discount_from_station_no;
   end if;

   if discount_to_station_no >= to_station_no and discount_from_station_no <= start_station_no and preference_rate_temp < preference_rate then
      SET preference_rate = preference_rate_temp;
      SET preference_style = '2';
   else 
      if preference_rate <> 0 then
         SET preference_style = '1';
      end if;
   end if;


   if error_code = -1 and preference_style = '0' then
      begin
         select   IFNULL(stop_time.distance,0)
   +IFNULL(stop_time.distance1,0)
  +IFNULL(stop_time.distance2,0)
  +IFNULL(stop_time.distance3,0)
  +IFNULL(stop_time.distance4,0)
  +IFNULL(stop_time.distance5,0) 
  INTO to_distance 
  from basic.stop_time 
  where stop_time.train_no = train_no 
   and stop_time.station_no = to_station_no;
         SET distance = to_distance -from_distance;
         open cur_sleeper_dis;
         SET NO_DATA = 0;
         fetch cur_sleeper_dis into f_sta,t_sta;
         SWL_Label:
         while (NO_DATA = 0) DO
            select   stop_time.station_no 
     INTO f_sta_no 
     from basic.stop_time 
     where stop_time.train_no = train_no 
      and stop_time.station_telecode = f_sta;
            select   stop_time.station_no 
     INTO t_sta_no 
     from basic.stop_time 
     where stop_time.train_no = train_no 
      and stop_time.station_telecode = t_sta;
            if f_sta_no <= start_station_no and t_sta_no >= to_station_no then
  
               SET preference_style = 'E';
               LEAVE SWL_Label;
            end if;
            SET NO_DATA = 0;
            fetch cur_sleeper_dis into f_sta,t_sta;
         END WHILE;
      end;
   end if;



   if error_code = -1 then 
      SET error_code = 0;
   end if;

   if out_flag = 1 then
      select preference_style,preference_rate,error_code;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_fetch_price_program`(train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,seat_feature CHAR(1)
,INOUT calculate_price_program CHAR(30) 
,output2 TINYINT UNSIGNED ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE return_code INT;
   DECLARE start_station_telecode CHAR(3);
   DECLARE end_station_telecode CHAR(3);
   DECLARE day_difference TINYINT UNSIGNED;
   DECLARE price_type_code CHAR(3);
   DECLARE start_train_date CHAR(8);
   DECLARE train_code CHAR(8);
   
   IF output2 is null then
      set output2 = 0;
   END IF;
   SET calculate_price_program = '';
   SET return_code = 0;

ERROR_RETURN:loop
 
   select   stop_time.station_telecode 
   INTO start_station_telecode 
   from basic.stop_time 
   where stop_time.train_no = train_no
   and stop_time.station_no =(select min(stop_time2.station_no) 
       from basic.stop_time stop_time2
    where stop_time2.train_no = train_no
       );
    
   IF NOT (found_rows() = 1 ) then

      SET return_code = -10001; 
 
      if output2 = 1 then
         select return_code,calculate_price_program;
      end if;
      SET SWP_Ret_Value = return_code;
   leave ERROR_RETURN;
   end if;

   select   stop_time.station_telecode 
   INTO end_station_telecode 
   from basic.stop_time 
   where stop_time.train_no = train_no
    and stop_time.station_no =(select max(stop_time2.station_no) 
   from basic.stop_time stop_time2
   where stop_time2.train_no = train_no);
   IF NOT (found_rows() = 1 ) then

      SET return_code = -10002; 
 
      if output2 = 1 then
         select return_code,calculate_price_program;
      end if;
      SET SWP_Ret_Value = return_code;
   leave ERROR_RETURN;
   end if;

   select   stop_time.day_difference 
   INTO day_difference 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no;
   IF NOT (found_rows() = 1 ) then

      SET return_code = -10003; 
 
      if output2 = 1 then
         select return_code,calculate_price_program;
      end if;
      SET SWP_Ret_Value = return_code;
   leave ERROR_RETURN;
   end if;

   SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(day_difference as signed),STR_TO_DATE(train_date,'%Y%m%d')),
   '%Y%m%d'); 
   
   select   stop_time.station_train_code 
   INTO train_code 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_telecode = start_station_telecode;
   IF NOT (found_rows() = 1 ) then

      SET return_code = -10004; 
 
      if output2 = 1 then
         select return_code,calculate_price_program;
      end if;
      SET SWP_Ret_Value = return_code;
   leave ERROR_RETURN;
   end if;


   select   DG50_train_price_type.price_type_code 
   INTO price_type_code 
   from basic.DG50_train_price_type 
   where DG50_train_price_type.train_code = train_code
    and DG50_train_price_type.start_station_telecode = start_station_telecode
    and DG50_train_price_type.end_station_telecode = end_station_telecode
    and DG50_train_price_type.start_date <= start_train_date
    and DG50_train_price_type.stop_date  >= start_train_date
    and DG50_train_price_type.running_rule & power(2,(TIMESTAMPDIFF(DAY,CAST(DG50_train_price_type.start_date AS DATETIME),CAST(start_train_date AS DATETIME))%DG50_train_price_type.running_style)) <> 0
    and DG50_train_price_type.seat_type_code in(seat_type_code,'z')
    and DG50_train_price_type.ticket_type & power(2,ticket_type -1) = power(2,ticket_type -1)   order by seat_type_code DESC LIMIT 1;
   IF NOT (ROW_COUNT() >= 1 ) then
      SET price_type_code = "001";
   end if;
 
   select   DG50_price_type.calculate_price_program 
   INTO calculate_price_program 
   from basic.DG50_price_type 
   where DG50_price_type.start_date <= start_train_date
    and DG50_price_type.stop_date >= start_train_date
    and DG50_price_type.price_type_code = price_type_code;
   IF NOT (found_rows() = 1 ) then

      SET return_code = -10005; 
      SET calculate_price_program = "CG40_fetch_price";
 
      if output2 = 1 then
         select return_code,calculate_price_program;
      end if;
      SET SWP_Ret_Value = return_code;
   leave ERROR_RETURN;
   end if;
leave ERROR_RETURN;
end loop ERROR_RETURN;

   if output2 = 1 then
      select return_code,calculate_price_program;
   end if;
   SET SWP_Ret_Value = return_code;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_fetch_qz_distance`(train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,INOUT qz_distance SMALLINT 
,INOUT error_code SMALLINT 
,out_flag SMALLINT)
BEGIN
   DECLARE distance_gro SMALLINT;                         
   DECLARE start_station_telecode CHAR(3);
   DECLARE to_station_telecode CHAR(3);
   DECLARE distance_start SMALLINT;
   DECLARE distance_to SMALLINT;

   DECLARE add_price_line CHAR(40); 
   DECLARE cur_line CHAR(4);
   DECLARE tmp_line CHAR(4);
   DECLARE line_alter1 CHAR(7);
   DECLARE line_alter2 CHAR(7);
   DECLARE line_alter3 CHAR(7);
   DECLARE line_alter4 CHAR(7);
   DECLARE cur_position INT;
   DECLARE line_len INT;

   DECLARE from_station_no CHAR(2);
   DECLARE from_station_telecode CHAR(3);
   DECLARE from_station_telecode_tmp CHAR(3);
   DECLARE end_station_no CHAR(2);
   DECLARE end_station_telecode CHAR(3);
   DECLARE end_station_telecode_tmp CHAR(3);
   DECLARE min_station_no CHAR(2);
   DECLARE max_station_no CHAR(2);
   DECLARE first_flag CHAR(1);

   DECLARE msg CHAR(100);
   
   
  DECLARE NO_DATA INT DEFAULT 0;
  declare cur_fetch_from cursor for
  select stop_time.station_telecode,
   stop_time.segment_code,
   stop_time.line_alter1,
   stop_time.line_alter2,
   stop_time.line_alter3,
   stop_time.line_alter4
  from basic.stop_time 
  where stop_time.train_no = train_no 
  and stop_time.station_no <= from_station_no
  and stop_time.station_no >= start_station_no
  order by stop_time.station_no desc;
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
    SET NO_DATA = 1;
    END;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
    
   IF qz_distance is null then
      set qz_distance = 0;
   END IF;
   IF error_code is null then
      set error_code = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   
   SET qz_distance = 0;
   SET error_code = 0;
   SET add_price_line = '55505551';
   
    SET cur_position = 1;
    SET line_len = LENGTH(rtrim(ltrim(add_price_line)));
    select   min(stop_time.station_no), max(stop_time.station_no) 
    INTO min_station_no,max_station_no 
    from basic.stop_time 
    where stop_time.train_no = train_no;
    
    select   stop_time.station_telecode 
    INTO start_station_telecode 
    FROM basic.stop_time 
    where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no;
    
    select   stop_time.station_telecode 
    INTO to_station_telecode 
    FROM basic.stop_time 
    where stop_time.train_no = train_no 
    and stop_time.station_no = to_station_no;

FINISH:loop

while(cur_position < line_len) DO
 begin
 next_line:loop
 BEGIN
    SET cur_line = SUBSTRING(add_price_line,cur_position,4);
    if out_flag = 2 then 
    select 1111,cur_position `position`,train_no,to_station_no,start_station_no, cur_line;
    end if;

    if exists(SELECT 1 FROM basic.stop_time
    WHERE stop_time.train_no = train_no 
    AND stop_time.station_no <= to_station_no 
    AND stop_time.station_no >= start_station_no
    AND (stop_time.segment_code = cur_line 
      OR stop_time.line_alter1 like CONCAT(cur_line,'%') 
      OR stop_time.line_alter2 like CONCAT(cur_line,'%')
      OR stop_time.line_alter3 like CONCAT(cur_line,'%') 
      OR stop_time.line_alter4 like CONCAT(cur_line,'%')
     )
    ) then
  begin
    select   min(stop_time.station_no) 
    INTO from_station_no 
    from basic.stop_time 
    WHERE stop_time.train_no = train_no 
     AND stop_time.station_no <= to_station_no 
    AND stop_time.station_no >= start_station_no
     AND (stop_time.segment_code = cur_line 
     OR stop_time.line_alter1 like CONCAT(cur_line,'%') 
     OR stop_time.line_alter2 like CONCAT(cur_line,'%')
      OR stop_time.line_alter3 like CONCAT(cur_line,'%') 
     OR stop_time.line_alter4 like CONCAT(cur_line,'%')
    );
    
    if from_station_no IS NULL then 
    LEAVE next_line;
    end if;
    select   max(stop_time.station_no) 
    INTO end_station_no 
    from basic.stop_time 
    WHERE stop_time.train_no = train_no 
     AND ((stop_time.station_no < to_station_no 
      AND stop_time.station_no >= start_station_no
      AND (stop_time.segment_code = cur_line 
       OR stop_time.line_alter1 like CONCAT(cur_line,'%') 
       OR stop_time.line_alter2 like CONCAT(cur_line,'%')
       OR stop_time.line_alter3 like CONCAT(cur_line,'%') 
       OR stop_time.line_alter4 like CONCAT(cur_line,'%')
       )
       ) OR
      (stop_time.station_no = to_station_no 
      and stop_time.segment_code = cur_line
       )
     );
     
    if end_station_no IS NULL then 
    LEAVE next_line;
    end if;
    if out_flag = 2 then 
    select 1112,cur_line cur_line,from_station_no from_station_no,end_station_no end_station_no;
    end if;
    SET from_station_telecode = "";
    SET end_station_telecode = "";
    SET first_flag = '1';
  
  
   
    open cur_fetch_from;
             SET NO_DATA = 0;
             fetch cur_fetch_from into from_station_telecode_tmp,tmp_line,line_alter1,line_alter2,line_alter3,line_alter4;
                     SWL_Label2:loop
                     while (NO_DATA != 2) DO
                        begin
       
                           next_from:loop
                           BEGIN
                              if NO_DATA = 1 then
   
                                 SET qz_distance = 0;
                                 SET error_code = -75;
                                 LEAVE FINISH;
                              end if;
                              if first_flag = '1' then
   
                                 if tmp_line = cur_line then
         
                                    if from_station_telecode_tmp = start_station_telecode then
     
                                       SET from_station_telecode = from_station_telecode_tmp;
                                       LEAVE SWL_Label2;
                                    else
                                       LEAVE next_from;
                                    end if;
                                 else
         
                                    if rtrim(line_alter4) IS NOT NULL and SUBSTRING(line_alter4,1,4) = cur_line then
                                       SET from_station_telecode = SUBSTRING(line_alter3,5,3);
                                    else 
                                       if rtrim(line_alter3) IS NOT NULL and SUBSTRING(line_alter3,1,4) = cur_line then
                                          SET from_station_telecode = SUBSTRING(line_alter2,5,3);
                                       else 
                                          if rtrim(line_alter2) IS NOT NULL and SUBSTRING(line_alter2,1,4) = cur_line then
                                             SET from_station_telecode = SUBSTRING(line_alter1,5,3);
                                          end if;
                                       end if;
                                    end if;
                                    if exists(select 1 
            from basic.line_station 
            where line_station.line_code = cur_line 
            and line_station.station_telecode = from_station_telecode) 
         then
                                       LEAVE SWL_Label2;
                                    else
                                       SET qz_distance = 0;
                                       SET error_code = -76;
                                       LEAVE FINISH;
                                    end if;
                                 end if;
                              end if;
         
                              if rtrim(line_alter4) IS NOT NULL and  line_alter4 !='' then
                                 SET from_station_telecode = SUBSTRING(line_alter4,5,3);
                              else 
                                 if rtrim(line_alter3) IS NOT NULL and  line_alter3 !='' then
                                    SET from_station_telecode = SUBSTRING(line_alter3,5,3);
                                 else 
                                    if rtrim(line_alter2) IS NOT NULL and  line_alter2 !='' then
                                       SET from_station_telecode = SUBSTRING(line_alter2,5,3);
                                    else 
                                       if rtrim(line_alter1) IS NOT NULL and  line_alter1 !='' then
                                          SET from_station_telecode = SUBSTRING(line_alter1,5,3);
                                       else
                                          SET from_station_telecode = from_station_telecode_tmp;
                                       end if;
                                    end if;
                                 end if;
                              end if;
        
                              if exists(select 1 from basic.line_station 
          where line_station.line_code = cur_line 
           and line_station.station_telecode = from_station_telecode) 
         then
                                 LEAVE SWL_Label2;
                              else
                                 SET qz_distance = 0;
                                 SET error_code = -77;
                                 LEAVE FINISH;
                              end if;
                           END;
         leave next_from;
         end loop next_from;
                           SET from_station_telecode = "";
                           SET first_flag = "0";
                           SET NO_DATA = 0;
                           fetch cur_fetch_from into from_station_telecode_tmp,tmp_line,line_alter1,line_alter2,line_alter3,
                           line_alter4;
                        end;
                     END WHILE;
      leave SWL_Label2;
      end loop SWL_Label2;
                     close cur_fetch_from;
  
    if out_flag = 2 then 
    select 1113,from_station_telecode from_station_telecode;
    end if;
  

    select   stop_time.station_telecode, 
     stop_time.segment_code, 
     stop_time.line_alter1, 
    stop_time.line_alter2, 
    stop_time.line_alter3, 
    stop_time.line_alter4 
    INTO end_station_telecode,
     tmp_line,
    line_alter1,
    line_alter2,
    line_alter3,
    line_alter4 
    from basic.stop_time 
    where stop_time.train_no = train_no 
     and stop_time.station_no = end_station_no;
    if out_flag = 2 then 
    select 1114,end_station_telecode end_station_telecode,to_station_telecode to_station_telecode;
    end if;
    if end_station_telecode <> to_station_telecode then

    if rtrim(line_alter1) IS NOT NULL and SUBSTRING(line_alter1,1,4) = cur_line then
       SET end_station_telecode = SUBSTRING(line_alter1,5,3);
    else 
       if rtrim(line_alter2) IS NOT NULL and SUBSTRING(line_alter2,1,4) = cur_line then
       SET end_station_telecode = SUBSTRING(line_alter2,5,3);
       else 
       if rtrim(line_alter3) IS NOT NULL and SUBSTRING(line_alter3,1,4) = cur_line then
       SET end_station_telecode = SUBSTRING(line_alter3,5,3);
       else 
       if rtrim(line_alter4) IS NOT NULL and SUBSTRING(line_alter4,1,4) = cur_line then
       SET end_station_telecode = SUBSTRING(line_alter4,5,3);
       end if;
       end if;
       end if;
    end if;
    end if;
    if not exists(select 1 
      from basic.line_station 
     where basic.line_code = cur_line 
      and basic.station_telecode = end_station_telecode) 
    then

    SET qz_distance = 0;
    SET error_code = -78;
    LEAVE FINISH;
    end if;
    if out_flag = 2 then 
    select 1115,end_station_telecode end_station_telecode;
    end if;
 

    select   IFNULL(line_station.distance,0) 
    INTO distance_start 
    FROM basic.line_station 
    WHERE line_station.line_code = cur_line 
     AND line_station.station_telecode = from_station_telecode;
    if ROW_COUNT() = 0 then
    SET distance_start = 0;
    end if;
    select   IFNULL(line_station.distance,0) 
    INTO distance_to 
    FROM basic.line_station 
    WHERE line_station.line_code = cur_line 
    AND line_station.station_telecode = end_station_telecode;
    if ROW_COUNT() = 0 then
    SET distance_to = 0;
    end if;
 

    SET distance_gro = 0;
    if cur_line = '5550' then

 
 
    select   IFNULL(line_station.distance,0) 
    INTO distance_gro 
    FROM basic.line_station 
    WHERE line_station.line_code = '5550' 
     AND line_station.station_telecode = 'GRO';
    if ROW_COUNT() = 0 then
       SET distance_gro = 0;
    end if;
     if out_flag = 2 then 
     select '101===',distance_gro,distance_gro,distance_start,distance_to;
     end if;
    if distance_gro >= distance_start and distance_gro < distance_to then
       SET qz_distance = qz_distance+ABS(distance_to -distance_gro);
    else 
       if distance_gro >= distance_to and distance_gro < distance_start then
       SET qz_distance = qz_distance+ABS(distance_start -distance_gro);
       else 
       if distance_gro < distance_start and distance_gro < distance_to then
       SET qz_distance = qz_distance+ABS(distance_to -distance_start);
       end if;
       end if;
    end if;
    else
    SET qz_distance = qz_distance+ABS(distance_to -distance_start);
    end if;
    if out_flag <> 0 then

    SET msg = CONCAT("cur_line=",cur_line,",from_tele=",from_station_telecode,",dis_start=",
    CAST(distance_start AS char(5)),",end_tele=",end_station_telecode,
    ",dis_to= ",CAST(distance_to AS char(5)),",dis_gro=",CAST(distance_gro AS char(5)),
    ",dis=",CAST(qz_distance AS char(5)));
    
   end if;
            end;
        end if;
    END;
 leave next_line;
 end loop next_line;
    SET cur_position = cur_position+4;
  end;
END WHILE;
   leave FINISH;
   end loop FINISH;
   if out_flag <> 0 then
      select qz_distance,error_code;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_fetch_sleeper_discount`(train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,distance INT
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type_power INT
,INOUT preference_style CHAR(1) 
,INOUT preference_rate DECIMAL(4,3) 
,INOUT discount_seat_type CHAR(1) 
,INOUT discount_bed_level CHAR(1) 
,INOUT error_code SMALLINT
,out_flag TINYINT UNSIGNED)
BEGIN
   DECLARE start_date CHAR(8);
   DECLARE stop_date CHAR(8);
   DECLARE start_train_date CHAR(8);
   DECLARE day_diff INT;
   DECLARE preference_rate_temp DECIMAL(4,2);
   DECLARE from_station_telecode CHAR(3);
   DECLARE to_station_telecode CHAR(3);
   DECLARE discount_from_station_no CHAR(2);
   DECLARE discount_to_station_no CHAR(2);
   DECLARE date_after INT;

   DECLARE from_distance INT;
   DECLARE to_distance INT;
   DECLARE f_sta CHAR(3);
   DECLARE t_sta CHAR(3);
   DECLARE f_sta_no CHAR(2);
   DECLARE t_sta_no CHAR(2);
   
   DECLARE NO_DATA INT DEFAULT 0;
   declare cur_sleeper_dis cursor for
   select a.from_station_telecode,
    a.to_station_telecode ,
 b.discount_base_seat_type_code,
 b.discount_base_bed_level,
 b.sleeper_discount
   from DG50_train_sleeper_discount a,DG50_sleeper_discount_rule b
   where a.train_no = train_no
    and a.ticket_type & ticket_type_power = ticket_type_power
    and start_date <= start_train_date 
 and stop_date >= start_train_date
    and (a.running_style = 1 
  or a.running_rule & power(2,(TIMESTAMPDIFF(DAY,a.start_date,start_train_date)%a.running_style)) > 0)
    and b.seat_type_code in(seat_type_code,'z')
    and b.bed_level in(bed_level,'0')
    and a.sleeper_discount_code = b.discount_code
    and b.from_distance <= distance and b.to_distance >= distance
   order by b.seat_type_code;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET NO_DATA = 1;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   
   IF preference_style is null then
      set preference_style = 'E';
   END IF;
   IF preference_rate is null then
      set preference_rate = 0;
   END IF;
   IF discount_seat_type is null then
      set discount_seat_type = '';
   END IF;
   IF discount_bed_level is null then
      set discount_bed_level = '';
   END IF;
   IF error_code is null then
      set error_code = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;


 
   
SET preference_style = '0';
   SET error_code = 0;
   select   stop_time.start_date, 
    stop_time.stop_date, 
 stop_time.day_difference, 
 IFNULL(stop_time.distance,0)
  +IFNULL(stop_time.distance1,0)
  +IFNULL(stop_time.distance2,0)
  +IFNULL(stop_time.distance3,0)
  +IFNULL(stop_time.distance4,0)
  +IFNULL(stop_time.distance5,0) 
   INTO start_date,
    stop_date,
 day_diff,
 from_distance 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date;

   SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -day_diff,STR_TO_DATE(train_date,'%Y%m%d')),
   '%Y%m%d');

   select   IFNULL(stop_time.distance,0)
     +IFNULL(stop_time.distance1,0)
  +IFNULL(stop_time.distance2,0)
  +IFNULL(stop_time.distance3,0)
  +IFNULL(stop_time.distance4,0)
  +IFNULL(stop_time.distance5,0) 
   INTO to_distance 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = to_station_no;

   if distance = 0 then 
      SET distance = to_distance -from_distance;
   end if;

   if bed_level not in('1','2','3') then 
      SET bed_level = '0';
   end if;

   if exists(select 1 
     from basic.seat_type 
  where seat_type.seat_type_code = seat_type_code 
   and seat_type.belong_seat_type_code in('3','5')
     ) 
    and bed_level not in('1','2','3') 
   then
      SET bed_level = '0';
   else 
      if exists(select 1 
        from basic.seat_type 
  where seat_type.seat_type_code = seat_type_code 
   and seat_type.belong_seat_type_code in('4','6')
  ) 
       and bed_level not in('1','3') 
      then
         SET bed_level = '0';
      end if;
   end if;
   



   open cur_sleeper_dis;
   SET NO_DATA = 0;
   fetch cur_sleeper_dis into f_sta,t_sta,discount_seat_type,discount_bed_level,preference_rate;

   SWL_Label:loop
   while (NO_DATA = 0) DO
      select   stop_time.station_no 
      INTO f_sta_no 
      from basic.stop_time 
      where stop_time.train_no = train_no 
       and stop_time.station_telecode = f_sta;
      select   stop_time.station_no 
      INTO t_sta_no 
      from stop_time 
      where stop_time.train_no = train_no 
       and stop_time.station_telecode = t_sta;
      if f_sta_no <= start_station_no and t_sta_no >= to_station_no then
 
         SET preference_style = 'E';
         LEAVE SWL_Label;
      end if;
      SET NO_DATA = 0;
      fetch cur_sleeper_dis into f_sta,t_sta,discount_seat_type,discount_bed_level,preference_rate;
   END WHILE;
   leave SWL_Label;
   end loop SWL_Label;
   close cur_sleeper_dis;

   if preference_style <> 'E' then
      SET preference_style = '0';
      SET preference_rate = 0;
      SET discount_seat_type = '';
      SET discount_bed_level = '';
   end if;
   if out_flag = 1 then
      select preference_style,preference_rate,discount_seat_type,discount_bed_level,error_code;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_fetch_train_special_relay`(train_no CHAR(12)
,start_train_date CHAR(8)
,INOUT belong_line1_relay CHAR(1)
,INOUT belong_line2_relay CHAR(1)
,INOUT belong_line3_relay CHAR(1)
,INOUT belong_line4_relay CHAR(1)
,INOUT belong_line5_relay CHAR(1)
,INOUT error_no INT
,out_flag CHAR(1))
BEGIN
   DECLARE belong_line1 TINYINT UNSIGNED;
   DECLARE belong_line2 TINYINT UNSIGNED;
   DECLARE belong_line3 TINYINT UNSIGNED;
   DECLARE belong_line4 TINYINT UNSIGNED;
   DECLARE belong_line5 TINYINT UNSIGNED;
   
   IF belong_line1_relay is null then
      set belong_line1_relay = '0';
   END IF;
   IF belong_line2_relay is null then
      set belong_line2_relay = '0';
   END IF;
   IF belong_line3_relay is null then
      set belong_line3_relay = '0';
   END IF;
   IF belong_line4_relay is null then
      set belong_line4_relay = '0';
   END IF;
   IF belong_line5_relay is null then
      set belong_line5_relay = '0';
   END IF;
   IF error_no is null then
      set error_no = 0;
   END IF;
   IF out_flag is null then
      set out_flag = '0';
   END IF;
   error_return:loop
   BEGIN
      
      SET error_no = 0;
      SET belong_line1_relay = '0';
      SET belong_line2_relay = '0';
      SET belong_line3_relay = '0';
      SET belong_line4_relay = '0';
      SET belong_line5_relay = '0';
      select   train_dir.belong_line1, 
        train_dir.belong_line2, 
  train_dir.belong_line3, 
  train_dir.belong_line4, 
  train_dir.belong_line5 
      INTO belong_line1,
        belong_line2,
  belong_line3,
  belong_line4,
  belong_line5 
      from basic.train_dir 
      where CONCAT(train_dir.subbureau_code,RIGHT(CONCAT("00000000",ltrim(rtrim(train_dir.train_code))),8),
        train_dir.double_id,train_dir.schema_id) = train_no;
      if ROW_COUNT() = 0 then

         SET error_no = -90;
         LEAVE error_return;
      end if;
      if belong_line1 <> 0 then

         select   DG50_special_line_relay.relay_flag 
  INTO belong_line1_relay 
  from basic.DG50_special_line_relay 
  where DG50_special_line_relay.start_date <= start_train_date 
   and DG50_special_line_relay.stop_date >= start_train_date
          and DG50_special_line_relay.belong_line = belong_line1;
         if ROW_COUNT() = 0 then 
            SET belong_line1_relay = '0';
         end if;
      end if;
      if belong_line2 <> 0 then

         select   DG50_special_line_relay.relay_flag 
  INTO belong_line2_relay 
  from basic.DG50_special_line_relay 
  where DG50_special_line_relay.start_date <= start_train_date 
   and DG50_special_line_relay.stop_date >= start_train_date
          and DG50_special_line_relay.belong_line = belong_line2;
         if ROW_COUNT() = 0 then 
            SET belong_line2_relay = '0';
         end if;
      end if;
      if belong_line3 <> 0 then

         select   DG50_special_line_relay.relay_flag 
  INTO belong_line3_relay 
  from basic.DG50_special_line_relay 
  where DG50_special_line_relay.start_date <= start_train_date 
   and DG50_special_line_relay.stop_date >= start_train_date
          and DG50_special_line_relay.belong_line = belong_line3;
         if ROW_COUNT() = 0 then 
            SET belong_line3_relay = '0';
         end if;
      end if;
      if belong_line4 <> 0 then

         select   DG50_special_line_relay.relay_flag 
  INTO belong_line4_relay 
  from basic.DG50_special_line_relay 
  where DG50_special_line_relay.start_date <= start_train_date 
   and DG50_special_line_relay.stop_date >= start_train_date
          and DG50_special_line_relay.belong_line = belong_line4;
         if ROW_COUNT() = 0 then 
            SET belong_line4_relay = '0';
         end if;
      end if;
      if belong_line5 <> 0 then

         select   DG50_special_line_relay.relay_flag 
  INTO belong_line5_relay 
  from basic.DG50_special_line_relay 
  where DG50_special_line_relay.start_date <= start_train_date 
   and DG50_special_line_relay.stop_date >= start_train_date
          and DG50_special_line_relay.belong_line = belong_line5;
         if ROW_COUNT() = 0 then 
            SET belong_line5_relay = '0';
         end if;
      end if;
   END;
   leave error_return;
   end loop error_return;
   if out_flag = '1' then
      select error_no,belong_line1_relay,belong_line2_relay,belong_line3_relay,belong_line4_relay
  ,belong_line5_relay;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_gp_fetch_price`(total_distance INT
,train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,seat_feature CHAR(1)
,special_visa TINYINT UNSIGNED
,relay_ticket_type TINYINT UNSIGNED


,INOUT preference_style CHAR(1)

,INOUT preference_rate DECIMAL(4,3)
,preference_flag CHAR(1)  
,INOUT distance SMALLINT
,INOUT ticket_price SMALLINT
,INOUT belong_line1 TINYINT UNSIGNED
,INOUT distance1 SMALLINT
,INOUT ticket_price1 SMALLINT
,INOUT belong_line2 TINYINT UNSIGNED
,INOUT distance2 SMALLINT
,INOUT ticket_price2 SMALLINT
,INOUT belong_line3 TINYINT UNSIGNED
,INOUT distance3 SMALLINT
,INOUT ticket_price3 SMALLINT
,INOUT belong_line4 TINYINT UNSIGNED
,INOUT distance4 SMALLINT
,INOUT ticket_price4 SMALLINT
,INOUT belong_line5 TINYINT UNSIGNED
,INOUT distance5 SMALLINT
,INOUT ticket_price5 SMALLINT
,INOUT relay_distance SMALLINT
,INOUT relay_price SMALLINT
,INOUT addition_cost SMALLINT
,INOUT bed_reserve_cost SMALLINT
,INOUT service_cost SMALLINT
,INOUT air_condition_price SMALLINT
,INOUT train_air_condition SMALLINT
,INOUT total_base_price SMALLINT
,price1_difference SMALLINT
,price2_difference SMALLINT
,price3_difference SMALLINT
,price4_difference SMALLINT
,price5_difference SMALLINT
,INOUT discount SMALLINT
,INOUT agent_fee SMALLINT
,INOUT preference_price SMALLINT
,INOUT basic_price SMALLINT

,INOUT ticket_price_obtion SMALLINT
,INOUT preference_word CHAR(2)


,INOUT qz_add_price SMALLINT
,output2 TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE p_seat SMALLINT;
   DECLARE p_new_seat SMALLINT;
   DECLARE p_fast SMALLINT;
   DECLARE p_new_fast SMALLINT;
   DECLARE pp_fast SMALLINT;
   DECLARE pp_new_fast SMALLINT;
   DECLARE p_soft_seat SMALLINT;
   DECLARE p_new_soft_seat SMALLINT;
   DECLARE p_up_bed SMALLINT;
   DECLARE p_new_up_bed SMALLINT;
   DECLARE p_middle_bed SMALLINT;
   DECLARE p_new_middle_bed SMALLINT;
   DECLARE p_down_bed SMALLINT;
   DECLARE p_new_down_bed SMALLINT;
   DECLARE p_up_soft SMALLINT;
   DECLARE p_new_up_soft SMALLINT;
   DECLARE p_down_soft SMALLINT;
   DECLARE p_new_down_soft SMALLINT;
   DECLARE p_up_super SMALLINT;
   DECLARE p_new_up_super SMALLINT;
   DECLARE p_down_super SMALLINT;
   DECLARE p_new_down_super SMALLINT;
   DECLARE p_up_soft_super SMALLINT;
   DECLARE p_new_up_soft_super SMALLINT;
   DECLARE p_down_soft_super SMALLINT;
   DECLARE p_new_down_soft_super SMALLINT;
   DECLARE p_air SMALLINT;
   DECLARE p_new_air SMALLINT;
   DECLARE p_new_double_seat SMALLINT;
   DECLARE p_new_double_bed SMALLINT;
   DECLARE p_new_double_fast SMALLINT;
   DECLARE pp_new_double_fast SMALLINT;
   DECLARE p_new_double_air SMALLINT;
   DECLARE from_station_name CHAR(10);
   DECLARE change_station_name CHAR(10);
   DECLARE to_station_name CHAR(10);
   DECLARE change_station_no CHAR(2);
   DECLARE free_station_name CHAR(10);
   DECLARE from_stations SMALLINT;
   DECLARE free_station_no CHAR(2);
   DECLARE to_stations SMALLINT;
   DECLARE subbureau_code CHAR(2);
   DECLARE train_class CHAR(1);
   DECLARE co_train_date CHAR(8);
   DECLARE train_code CHAR(8);
   DECLARE train_class1 CHAR(1);
   DECLARE co_train_no CHAR(12);
   DECLARE double_id CHAR(1);
   DECLARE train_class2 CHAR(1);
   DECLARE co_seat_type CHAR(1);
   DECLARE schema_id CHAR(1);
   DECLARE train_class_level SMALLINT;
   DECLARE start_date CHAR(8);
   DECLARE start_train_date CHAR(8);
   DECLARE stop_date CHAR(8);
   DECLARE day_diff TINYINT UNSIGNED;
   DECLARE service_type CHAR(1);
   DECLARE new_type CHAR(1);
   DECLARE temp_seat_type CHAR(1);
   DECLARE seat_type0 CHAR(1);
   DECLARE ticket_type_power INT;
   DECLARE tmp_ticket_type INT;
   DECLARE s_seat1 TINYINT UNSIGNED;
   DECLARE s_seat2 TINYINT UNSIGNED;
   DECLARE s_u TINYINT UNSIGNED;
   DECLARE s_shu TINYINT UNSIGNED;
   DECLARE s_hu TINYINT UNSIGNED;
   DECLARE s_su TINYINT UNSIGNED;
   DECLARE s_m TINYINT UNSIGNED;
   DECLARE s_shd TINYINT UNSIGNED;
   DECLARE s_hd TINYINT UNSIGNED;
   DECLARE s_sd TINYINT UNSIGNED;
   DECLARE s_d TINYINT UNSIGNED;
   DECLARE s_bed TINYINT UNSIGNED;
   DECLARE bed_only TINYINT UNSIGNED;
   DECLARE half DECIMAL(4,3);
   DECLARE home TINYINT UNSIGNED;
   DECLARE student DECIMAL(4,3);
   DECLARE free TINYINT UNSIGNED;
   DECLARE child DECIMAL(4,3);
   DECLARE small_child DECIMAL(4,3);
   DECLARE style0 CHAR(1);
   DECLARE style1 CHAR(1);
   DECLARE line1 TINYINT UNSIGNED;
   DECLARE style2 CHAR(1);
   DECLARE line2 TINYINT UNSIGNED;
   DECLARE style3 CHAR(1);
   DECLARE line3 TINYINT UNSIGNED;
   DECLARE style4 CHAR(1);
   DECLARE line4 TINYINT UNSIGNED;
   DECLARE style_use CHAR(1);
   DECLARE style5 CHAR(1);
   DECLARE line5 TINYINT UNSIGNED;
   DECLARE line_use TINYINT UNSIGNED;

   DECLARE rate0 CHAR(6);
   DECLARE rate_a0 CHAR(6);
   DECLARE rate_x0 CHAR(6);
   DECLARE rate_a_x0 CHAR(6);
   DECLARE rate1 CHAR(6);
   DECLARE rate_a1 CHAR(6);
   DECLARE rate_x1 CHAR(6);
   DECLARE rate_a_x1 CHAR(6);
   DECLARE rate2 CHAR(6);
   DECLARE rate_a2 CHAR(6);
   DECLARE rate_x2 CHAR(6);
   DECLARE rate_a_x2 CHAR(6);
   DECLARE rate3 CHAR(6);
   DECLARE rate_a3 CHAR(6);
   DECLARE rate_x3 CHAR(6);
   DECLARE rate_a_x3 CHAR(6);
   DECLARE rate4 CHAR(6);
   DECLARE rate_a4 CHAR(6);
   DECLARE rate_x4 CHAR(6);
   DECLARE rate_a_x4 CHAR(6);
   DECLARE rate5 CHAR(6);
   DECLARE rate_a5 CHAR(6);
   DECLARE rate_x5 CHAR(6);
   DECLARE rate_a_x5 CHAR(6);


   DECLARE rate_seat0 CHAR(6);
   DECLARE rate_seat_x0 CHAR(6);
   DECLARE rate_seat_a0 CHAR(6);
   DECLARE rate_seat_a_x0 CHAR(6);
   DECLARE rate_seat1 CHAR(6);
   DECLARE rate_seat_x1 CHAR(6);
   DECLARE rate_seat_a1 CHAR(6);
   DECLARE rate_seat_a_x1 CHAR(6);
   DECLARE rate_seat2 CHAR(6);
   DECLARE rate_seat_x2 CHAR(6);
   DECLARE rate_seat_a2 CHAR(6);
   DECLARE rate_seat_a_x2 CHAR(6);
   DECLARE rate_seat3 CHAR(6);
   DECLARE rate_seat_x3 CHAR(6);
   DECLARE rate_seat_a3 CHAR(6);
   DECLARE rate_seat_a_x3 CHAR(6);
   DECLARE rate_seat4 CHAR(6);
   DECLARE rate_seat_x4 CHAR(6);
   DECLARE rate_seat_a4 CHAR(6);
   DECLARE rate_seat_a_x4 CHAR(6);
   DECLARE rate_seat5 CHAR(6);
   DECLARE rate_seat_x5 CHAR(6);
   DECLARE rate_seat_a5 CHAR(6);
   DECLARE rate_seat_a_x5 CHAR(6);

   DECLARE rate_seat_use CHAR(6);
   DECLARE rate_seat DECIMAL(4,3);
   DECLARE rate_seat_a_use CHAR(6);
   DECLARE rate_seat_a DECIMAL(4,3);
   DECLARE rate_seat_aa_use CHAR(6);
   DECLARE rate_seat_aa DECIMAL(4,3);
   DECLARE rate_use CHAR(6);
   DECLARE rate DECIMAL(4,3);
   DECLARE rate_a_use CHAR(6);
   DECLARE rate_a DECIMAL(4,3);
   DECLARE rate_aa_use CHAR(6);
   DECLARE rate_aa DECIMAL(4,3);
   DECLARE rate_to_400 DECIMAL(4,3);
   DECLARE d_0 SMALLINT;
   DECLARE dd_0 SMALLINT;
   DECLARE d_free0 SMALLINT;
   DECLARE d_free SMALLINT;
   DECLARE d_1 SMALLINT;
   DECLARE dd_1 SMALLINT;
   DECLARE d_free1 SMALLINT;
   DECLARE d_seat SMALLINT;
   DECLARE d_2 SMALLINT;
   DECLARE dd_2 SMALLINT;
   DECLARE d_free2 SMALLINT;
   DECLARE dd_seat SMALLINT;
   DECLARE d_3 SMALLINT;
   DECLARE dd_3 SMALLINT;
   DECLARE d_free3 SMALLINT;
   DECLARE d_bed SMALLINT;
   DECLARE d_4 SMALLINT;
   DECLARE dd_4 SMALLINT;
   DECLARE d_free4 SMALLINT;
   DECLARE d_relay SMALLINT;
   DECLARE d_5 SMALLINT;
   DECLARE dd_5 SMALLINT;
   DECLARE d_free5 SMALLINT;
   DECLARE d_total SMALLINT;
   DECLARE d_use SMALLINT;
   DECLARE dd_use SMALLINT;
   DECLARE d_tmp INT;
   DECLARE p_0 SMALLINT;
   DECLARE p_basic_seat0 SMALLINT;
   DECLARE p_relay_fast0 SMALLINT;
   DECLARE p_1 SMALLINT;
   DECLARE p_basic_seat1 SMALLINT;
   DECLARE p_relay_fast1 SMALLINT;
   DECLARE p_2 SMALLINT;
   DECLARE p_basic_seat2 SMALLINT;
   DECLARE p_relay_fast2 SMALLINT;
   DECLARE p_3 SMALLINT;
   DECLARE p_basic_seat3 SMALLINT;
   DECLARE p_relay_fast3 SMALLINT;
   DECLARE p_4 SMALLINT;
   DECLARE p_basic_seat4 SMALLINT;
   DECLARE p_relay_fast4 SMALLINT;
   DECLARE p_5 SMALLINT;
   DECLARE p_basic_seat5 SMALLINT;
   DECLARE p_relay_fast5 SMALLINT;
   DECLARE p_float SMALLINT;
   DECLARE p_basic SMALLINT;
   DECLARE p_add SMALLINT;
   DECLARE p_float_seat SMALLINT;
   DECLARE p_basic_seat SMALLINT;
   DECLARE p_float_bed SMALLINT;
   DECLARE p_basic_bed SMALLINT;
   DECLARE p_paper SMALLINT;
   DECLARE p_float_fast SMALLINT;
   DECLARE p_basic_fast SMALLINT;
   DECLARE p_bed_reserve SMALLINT;
   DECLARE p_float_air SMALLINT;
   DECLARE p_basic_air SMALLINT;
   DECLARE p_relay SMALLINT;
   DECLARE p_float_new SMALLINT;
   DECLARE p_float_total SMALLINT;
   DECLARE p_total SMALLINT;

   DECLARE paper CHAR(1);
   DECLARE st_air CHAR(1);
   DECLARE times SMALLINT;
   DECLARE p_tmp INT;
   DECLARE p_000 INT;
   DECLARE p_fast_900 INT;
   DECLARE gz_version TINYINT UNSIGNED;
   DECLARE p_p_bed_only TINYINT UNSIGNED;
   DECLARE p_basic_tmp SMALLINT;
   DECLARE p_000_tmp SMALLINT;
   DECLARE p_p_time INT;


   DECLARE p_base_seat SMALLINT;
   DECLARE p_base_fast SMALLINT;

   DECLARE p_1_0 SMALLINT;
   DECLARE p_2_0 SMALLINT;
   DECLARE p_3_0 SMALLINT;
   DECLARE p_4_0 SMALLINT;
   DECLARE p_5_0 SMALLINT;
   DECLARE break TINYINT UNSIGNED;
   DECLARE p_diff SMALLINT;
   DECLARE p_state SMALLINT;
   DECLARE p_basic_state SMALLINT;

   DECLARE discount_rate DECIMAL(4,3);
   DECLARE left_start_date INT;
   DECLARE left_end_date INT;
   DECLARE left_start_time INT;
   DECLARE left_end_time INT;
   DECLARE current_date2 CHAR(8);
   DECLARE start_time CHAR(4);
   DECLARE end_time CHAR(4);
   DECLARE l_start_time CHAR(4);
   DECLARE l_end_time CHAR(4);
   DECLARE diff1 TINYINT UNSIGNED;
   DECLARE diff2 TINYINT UNSIGNED;
   DECLARE diff TINYINT UNSIGNED;
   DECLARE p_bed SMALLINT;


   DECLARE basic_rate DECIMAL(4,3); 
   DECLARE p_basic_discount SMALLINT;

   DECLARE p_tmp_seat INT;  
   DECLARE p_tmp_fast INT;  
   DECLARE p_111 INT;  
   DECLARE p_222 INT;  

   DECLARE p_basic_fast_0 INT; 
   DECLARE p_basic_seat_0 INT; 
   DECLARE p_basic_air_0 INT; 
   DECLARE p_base_seat_total INT;  
   DECLARE p_basic_seat5_0 INT;
   DECLARE p_basic_fast5_0 INT;
   DECLARE p_basic_air5_0 INT; 
   DECLARE p_basic_seat4_0 INT;
   DECLARE p_basic_fast4_0 INT;
   DECLARE p_basic_air4_0 INT;
   DECLARE p_basic_seat3_0 INT;
   DECLARE p_basic_fast3_0 INT;
   DECLARE p_basic_air3_0 INT;
   DECLARE p_basic_seat2_0 INT;
   DECLARE p_basic_fast2_0 INT;
   DECLARE p_basic_air2_0 INT;
   DECLARE p_basic_seat1_0 INT;
   DECLARE p_basic_fast1_0 INT;
   DECLARE p_basic_air1_0 INT;
   DECLARE p_basic_seat0_0 INT;
   DECLARE p_basic_fast0_0 INT;
   DECLARE p_basic_air0_0 INT;

   DECLARE p_total_fast INT;
   DECLARE p_new_total_fast INT;

   DECLARE temp_preference_style CHAR(1);
   DECLARE temp_preference_rate DECIMAL(4,2);
   DECLARE error_code SMALLINT;

   DECLARE discount_flag CHAR(1);

   DECLARE train_class_rate DECIMAL(4,2);
   DECLARE train_class1_rate DECIMAL(4,2);
   DECLARE train_class2_rate DECIMAL(4,2);

   DECLARE qz_distance SMALLINT;

   DECLARE start_station_name CHAR(10);
   DECLARE end_station_name CHAR(10);
   DECLARE gj_preference CHAR(6);
   DECLARE rate_exchange CHAR(6);
   DECLARE rate_exchange_HK DECIMAL(5,3);

   DECLARE sp_id SMALLINT;


   DECLARE p_float_seat0 SMALLINT;
   DECLARE p_seat0 SMALLINT;
   DECLARE p_float_seat1 SMALLINT;
   DECLARE p_seat1 SMALLINT;
   DECLARE p_float_seat2 SMALLINT;
   DECLARE p_seat2 SMALLINT;
   DECLARE p_float_seat3 SMALLINT;
   DECLARE p_seat3 SMALLINT;
   DECLARE p_float_seat4 SMALLINT;
   DECLARE p_seat4 SMALLINT;
   DECLARE p_float_seat5 SMALLINT;
   DECLARE p_seat5 SMALLINT;
   DECLARE p_seat_total SMALLINT;


   DECLARE d_real_free SMALLINT;  


   DECLARE tax_rate DECIMAL(5,4);
   DECLARE error INT;
   DECLARE rowcount INT;

   DECLARE discount_seat_type CHAR(1);
   DECLARE discount_bed_level CHAR(1);
   DECLARE sleeper_style CHAR(1);
   DECLARE sleeper_rate DECIMAL(4,3);

   DECLARE ls_train_no_part CHAR(6);
   DECLARE belong_seat_type_code CHAR(1);
   DECLARE tmp_rate_z DECIMAL(4,3);
   DECLARE tmp_rate_w DECIMAL(4,3);
   DECLARE tmp_add_price SMALLINT;                          
   DECLARE insurance_price DECIMAL(6,2);
   DECLARE insurance_price1 SMALLINT;
   DECLARE insurance_price2 SMALLINT;
   DECLARE insurance_price3 SMALLINT;
   DECLARE insurance_price4 SMALLINT;
   DECLARE insurance_price5 SMALLINT;
   DECLARE error_no INT;
   DECLARE SWV_train_code_Str VARCHAR(255);
   DECLARE belong_line1_relay CHAR(1);
   DECLARE belong_line2_relay CHAR(1);
   DECLARE belong_line3_relay CHAR(1);
   DECLARE belong_line4_relay CHAR(1);
   DECLARE belong_line5_relay CHAR(1);
   declare call_pr_return_code smallint;
   
   BEGIN
      SET @SWV_Error = 1;
   END;
   
  
     IF special_visa is null then
      set special_visa = 0;
     END IF;
         IF relay_ticket_type is null then
            set relay_ticket_type = 0;
         END IF;
         IF preference_style is null then
            set preference_style = '0';
         END IF;
         IF preference_rate is null then
            set preference_rate = 0;
         END IF;
         IF preference_flag is null then
            set preference_flag = '0';
         END IF;
         IF distance is null then
            set distance = 0;
         END IF;
         IF ticket_price is null then
            set ticket_price = 0;
         END IF;
         IF belong_line1 is null then
            set belong_line1 = 0;
         END IF;
         IF distance1 is null then
            set distance1 = 0;
         END IF;
         IF ticket_price1 is null then
            set ticket_price1 = 0;
         END IF;
         IF belong_line2 is null then
            set belong_line2 = 0;
         END IF;
         IF distance2 is null then
            set distance2 = 0;
         END IF;
         IF ticket_price2 is null then
            set ticket_price2 = 0;
         END IF;
         IF belong_line3 is null then
            set belong_line3 = 0;
         END IF;
         IF distance3 is null then
            set distance3 = 0;
         END IF;
         IF ticket_price3 is null then
            set ticket_price3 = 0;
         END IF;
         IF belong_line4 is null then
            set belong_line4 = 0;
         END IF;
         IF distance4 is null then
            set distance4 = 0;
         END IF;
         IF ticket_price4 is null then
            set ticket_price4 = 0;
         END IF;
         IF belong_line5 is null then
            set belong_line5 = 0;
         END IF;
         IF distance5 is null then
            set distance5 = 0;
         END IF;
         IF ticket_price5 is null then
            set ticket_price5 = 0;
         END IF;
         IF relay_distance is null then
            set relay_distance = 0;
         END IF;
         IF relay_price is null then
            set relay_price = 0;
         END IF;
         IF addition_cost is null then
            set addition_cost = 0;
         END IF;
         IF bed_reserve_cost is null then
            set bed_reserve_cost = 0;
         END IF;
         IF service_cost is null then
            set service_cost = 0;
         END IF;
         IF air_condition_price is null then
            set air_condition_price = 0;
         END IF;
         IF train_air_condition is null then
            set train_air_condition = 0;
         END IF;
         IF total_base_price is null then
            set total_base_price = 0;
         END IF;
         IF price1_difference is null then
            set price1_difference = 0;
         END IF;
         IF price2_difference is null then
            set price2_difference = 0;
         END IF;
         IF price3_difference is null then
            set price3_difference = 0;
         END IF;
         IF price4_difference is null then
            set price4_difference = 0;
         END IF;
         IF price5_difference is null then
            set price5_difference = 0;
         END IF;
         IF discount is null then
            set discount = 0;
         END IF;
         IF agent_fee is null then
            set agent_fee = 0;
         END IF;
         IF preference_price is null then
            set preference_price = 0;
         END IF;
         IF basic_price is null then
            set basic_price = 0;
         END IF;
         IF ticket_price_obtion is null then
            set ticket_price_obtion = 0;
         END IF;
         IF preference_word is null then
            set preference_word = '';
         END IF;
         IF qz_add_price is null then
            set qz_add_price = 0;
         END IF;
         IF output2 is null then
            set output2 = 0;
         END IF;
         SET discount_flag = '0';
         SET temp_preference_style = '0';
         SET temp_preference_rate = 0;
         SET error_code = 0;
         SET train_class_rate = 0;
         SET train_class2_rate = 0;
         SET train_class2_rate = 0;
         SET p_total_fast = 0;
         SET p_new_total_fast = 0;
         SET p_basic_fast_0 = 0;
         SET p_basic_seat_0 = 0;
         SET p_basic_air_0 = 0;
         SET p_base_seat_total = 0;
         SET p_basic_seat5_0 = 0;
         SET p_basic_fast5_0 = 0;
         SET p_basic_air5_0 = 0;
         SET p_basic_seat4_0 = 0;
         SET p_basic_fast4_0 = 0;
         SET p_basic_air4_0 = 0;
         SET p_basic_seat3_0 = 0;
         SET p_basic_fast3_0 = 0;
         SET p_basic_air3_0 = 0;
         SET p_basic_seat2_0 = 0;
         SET p_basic_fast2_0 = 0;
         SET p_basic_air2_0 = 0;
         SET p_basic_seat1_0 = 0;
         SET p_basic_fast1_0 = 0;
         SET p_basic_air1_0 = 0;
         SET p_basic_seat0_0 = 0;
         SET p_basic_fast0_0 = 0;
         SET p_basic_air0_0 = 0;


         SET basic_rate = 0;
         SET p_basic_discount = 0;
         SET p_tmp_seat = 0;
         SET p_tmp_fast = 0;
         SET p_111 = 0;
         SET p_222 = 0;

         SET p_float = 0;
         SET p_float_seat = 0;
         SET p_float_bed = 0;
         SET p_float_fast = 0;
         SET p_float_air = 0;
         SET p_float_new = 0;
         SET p_float_total = 0;
         SET rate0 = '0';
         SET rate_a0 = '0';
         SET rate_x0 = '0';
         SET rate_a_x0 = '0';
         SET rate1 = '0';
         SET rate_a1 = '0';
         SET rate_x1 = '0';
         SET rate_a_x1 = '0';
         SET rate2 = '0';
         SET rate_a2 = '0';
         SET rate_x2 = '0';
         SET rate_a_x2 = '0';
         SET rate3 = '0';
         SET rate_a3 = '0';
         SET rate_x3 = '0';
         SET rate_a_x3 = '0';
         SET rate4 = '0';
         SET rate_a4 = '0';
         SET rate_x4 = '0';
         SET rate_a_x4 = '0';
         SET rate5 = '0';
         SET rate_a5 = '0';
         SET rate_x5 = '0';
         SET rate_a_x5 = '0';
         SET rate_seat0 = '0';
         SET rate_seat_x0 = '0';
         SET rate_seat_a0 = '0';
         SET rate_seat_a_x0 = '0';
         SET rate_seat1 = '0';
         SET rate_seat_x1 = '0';
         SET rate_seat_a1 = '0';
         SET rate_seat_a_x1 = '0';
         SET rate_seat2 = '0';
         SET rate_seat_x2 = '0';
         SET rate_seat_a2 = '0';
         SET rate_seat_a_x2 = '0';
         SET rate_seat3 = '0';
         SET rate_seat_x3 = '0';
         SET rate_seat_a3 = '0';
         SET rate_seat_a_x3 = '0';
         SET rate_seat4 = '0';
         SET rate_seat_x4 = '0';
         SET rate_seat_a4 = '0';
         SET rate_seat_a_x4 = '0';

         set transaction isolation level read COMMITTED;
         SET p_p_time = -1;

         if relay_ticket_type = 2 then 
            SET relay_ticket_type = 9;
         end if;
         SET gz_version = 1;
         SET ticket_type_power = power(2,ticket_type -1);
         if ticket_type in(5,6,8,9) then 
            SET relay_ticket_type = 9;
         end if;
         if relay_ticket_type = 2 then 
            SET relay_ticket_type = 9;
            SET special_visa = 255;
         else 
            if relay_ticket_type = 8 then 
               SET relay_ticket_type = 2;
            end if;
         end if;


         SET subbureau_code = SUBSTRING(train_no,1,2);
         SET train_code = SUBSTRING(train_no,3,8);
         SET double_id = SUBSTRING(train_no,11,1);
         SET schema_id = SUBSTRING(train_no,12,1);
         WHILE SUBSTRING(train_code,1,1) = '0' DO
            SET SWV_train_code_Str = SUBSTRING(train_code,2,LENGTH(train_code) -1);
            SET train_code = SWV_train_code_Str;
         END WHILE;

         select   stop_time.start_date, 
   stop_time.stop_date, 
  stop_time.day_difference 
  INTO start_date,
   stop_date,
  day_diff 
  from basic.stop_time 
  where stop_time.train_no = train_no 
   and stop_time.station_no = start_station_no 
  and (DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date 
  and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date)   
  LIMIT 1;

         if ROW_COUNT() = 0 then

            SET ticket_price = -2;
            SET SWP_Ret_Value = -2;
            LEAVE SWL_return;
         end if;
         SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(day_diff as signed),STR_TO_DATE(train_date,'%Y%m%d')),
         '%Y%m%d');
         if not(start_date <= start_train_date and stop_date >= start_train_date) then

            SET ticket_price = -3;
            SET SWP_Ret_Value = -3;
            LEAVE SWL_return;
         end if;

         select   train_dir.train_class_code, 
   train_dir.price_style, 
   train_dir.belong_line1, 
   train_dir.price_style1, 
   train_dir.belong_line2, 
   train_dir.price_style2, 
   train_dir.belong_line3, 
   train_dir.price_style3, 
   train_dir.belong_line4, 
   train_dir.price_style4, 
   train_dir.belong_line5, 
   train_dir.price_style5, 
   train_dir.service_type, 
   train_dir.start_station_name, 
   train_dir.end_station_name 
   INTO train_class,
   style0,
   line1,
   style1,
   line2,
   style2,
   line3,
   style3,
   line4,
   style4,
    line5,
   style5,
   service_type,
   start_station_name,
   end_station_name 
   from basic.train_dir 
   where train_dir.subbureau_code = subbureau_code 
   and train_dir.train_code = train_code
    and train_dir.double_id = double_id 
   and train_dir.schema_id = schema_id
    and train_dir.start_date <= start_train_date 
   and train_dir.stop_date >= start_train_date   
   LIMIT 1;
         if ROW_COUNT() = 0 then

            SET ticket_price = -10;
            SET SWP_Ret_Value = -10;
            LEAVE SWL_return;
         end if;

         select   DG50_train_price_style.price_style, 
   DG50_train_price_style.belong_line1, 
   DG50_train_price_style.price_style1, 
   DG50_train_price_style.belong_line2, 
   DG50_train_price_style.price_style2, 
   DG50_train_price_style.belong_line3, 
   DG50_train_price_style.price_style3, 
   DG50_train_price_style.belong_line4, 
   DG50_train_price_style.price_style4, 
   DG50_train_price_style.belong_line5, 
   DG50_train_price_style.price_style5 
   INTO style0,
   line1,
   style1,
   line2,
   style2,
   line3,
   style3,
   line4,
   style4,
   line5,
   style5 
   from basic.DG50_train_price_style 
   where DG50_train_price_style.train_no = train_no
    and DG50_train_price_style.seat_type_code in(seat_type_code,'z')
    and DG50_train_price_style.running_rule & power(2,(TIMESTAMPDIFF(DAY,CAST(DG50_train_price_style.start_date AS DATETIME),CAST(start_train_date AS DATETIME))%DG50_train_price_style.running_style)) <> 0
    and DG50_train_price_style.ticket_type & ticket_type_power = ticket_type_power
    and DG50_train_price_style.start_date <= start_train_date 
   and DG50_train_price_style.stop_date >= start_train_date   
   order by DG50_train_price_style.seat_type_code 
   LIMIT 1;
         if train_class = '6' then 
            SET train_class = '4';
         end if;
         SET d_free = -1;
         if d_free = 0 then

            select   stop_time.station_name 
   INTO from_station_name 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no
             and stop_time.start_date <= start_train_date 
    and stop_time.stop_date >= start_train_date   
   LIMIT 1;
            if ROW_COUNT() = 0 then
  
               SET ticket_price = -20;
               SET SWP_Ret_Value = -20;
               LEAVE SWL_return;
            end if;
            select   stop_time.station_name 
   INTO to_station_name 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = to_station_no
             and stop_time.start_date <= start_train_date 
    and stop_time.stop_date >= start_train_date   
   LIMIT 1;
            if ROW_COUNT() = 0 then
  
               SET ticket_price = -25;
               SET SWP_Ret_Value = -25;
               LEAVE SWL_return;
            end if;
            select   max(stop_time.station_no) 
   INTO start_station_no 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no < to_station_no
             and stop_time.start_date <= start_train_date 
    and stop_time.stop_date >= start_train_date
             and stop_time.station_name = from_station_name   
   LIMIT 1;
            select   min(stop_time.station_no) 
   INTO to_station_no 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no > start_station_no
             and stop_time.start_date <= start_train_date 
    and stop_time.stop_date >= start_train_date
             and stop_time.station_name = to_station_name   
   LIMIT 1;
         end if;

         SET d_0 = 0;
         SET d_1 = 0;
         SET d_2 = 0;
         SET d_3 = 0;
         SET d_4 = 0;
         SET d_5 = 0;
         select   stop_time.station_name, 
   IFNULL(stop_time.distance,0), 
   IFNULL(stop_time.distance1,0), 
   IFNULL(stop_time.distance2,0), 
   IFNULL(stop_time.distance3,0), 
   IFNULL(stop_time.distance4,0), 
   IFNULL(stop_time.distance5,0) 
   INTO from_station_name,
   d_0,
   d_1,
   d_2,
   d_3,
   d_4,
   d_5 
   from basic.stop_time 
   where stop_time.train_no = train_no 
   and stop_time.station_no = start_station_no
          and stop_time.start_date <= start_train_date 
   and stop_time.stop_date >= start_train_date   
  LIMIT 1;
         if ROW_COUNT() = 0 then

            SET ticket_price = -21;
            SET SWP_Ret_Value = -21;
            LEAVE SWL_return;
         end if;
         select   stop_time.station_name, 
   IFNULL(stop_time.distance,0), 
   IFNULL(stop_time.distance1,0), 
   IFNULL(stop_time.distance2,0), 
   IFNULL(stop_time.distance3,0), 
   IFNULL(stop_time.distance4,0), 
   IFNULL(stop_time.distance5,0) 
   INTO to_station_name,
   dd_0,
   dd_1,
   dd_2,
   dd_3,
   dd_4,
   dd_5 
   from basic.stop_time 
   where stop_time.train_no = train_no 
   and stop_time.station_no = to_station_no
          and stop_time.start_date <= start_train_date 
   and stop_time.stop_date >= start_train_date   
  LIMIT 1;
         if ROW_COUNT() = 0 then

            SET ticket_price = -26;
            SET SWP_Ret_Value = -26;
            LEAVE SWL_return;
         end if;
         SET d_0 = dd_0 -d_0;
         SET d_1 = dd_1 -d_1;
         SET d_2 = dd_2 -d_2;
         SET d_3 = dd_3 -d_3;
         SET d_4 = dd_4 -d_4;
         SET d_5 = dd_5 -d_5;

         if preference_flag = '0' and preference_style not in('7','8','9','A','B','C','D') then


            CALL arith.DG50_fetch_preference(train_date,train_no,start_station_no,to_station_no,seat_type_code,ticket_type_power,
            temp_preference_style,temp_preference_rate,error_code,0,call_pr_return_code);
            if error_code < 0 then
 
               SET ticket_price = error_code;
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            if temp_preference_rate <= preference_rate then
               SET preference_rate = temp_preference_rate;
               SET preference_style = temp_preference_style;
            end if;
         end if;
         if preference_flag = '0' and preference_style in('7','8','9','A','B','C','D') and ticket_type not in(2,4) then


            if not exists(select 1 
        from basic.CG52_train_dir_appendix 
     where CG52_train_dir_appendix.train_no = train_no 
      and CG52_train_dir_appendix.special_flag = '6') 
   then
 
               SET ticket_price = -33; 
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            SET gj_preference = '';
            select   IFNULL(DG50_special_discount_define.discount,'') 
   INTO gj_preference 
   from basic.DG50_special_discount_define 
   where DG50_special_discount_define.special_code = '3' 
    and DG50_special_discount_define.discount_code = preference_style
             and DG50_special_discount_define.train_code = train_code 
    and DG50_special_discount_define.start_station_name = start_station_name
             and DG50_special_discount_define.end_station_name = end_station_name
             and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
             and DG50_special_discount_define.start_date <= start_train_date 
    and DG50_special_discount_define.stop_date >= start_train_date   
   order by DG50_special_discount_define.seat_type_code 
   LIMIT 1;
            if gj_preference = '' then
               select   IFNULL(DG50_special_discount_define.discount,'') 
      INTO gj_preference 
      from basic.DG50_special_discount_define 
      where DG50_special_discount_define.special_code = '3' 
       and DG50_special_discount_define.discount_code = preference_style
                   and DG50_special_discount_define.train_code = '%'
                   and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
                   and DG50_special_discount_define.start_date <= start_train_date 
     and DG50_special_discount_define.stop_date >= start_train_date   
    order by DG50_special_discount_define.seat_type_code 
    LIMIT 1;
            end if;
            if gj_preference = '' then
               SET preference_rate = 0;
            else
               SET preference_rate = CAST(gj_preference AS DECIMAL(4,3)) -1.0;
            end if;
            CALL arith.DG50_fetch_preference(train_date,train_no,start_station_no,to_station_no,seat_type_code,ticket_type_power,
            temp_preference_style,temp_preference_rate,error_code,0,call_pr_return_code);
            if error_code < 0 then
 
               SET ticket_price = error_code;
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            if temp_preference_rate <= preference_rate then
               SET preference_rate = temp_preference_rate;
               SET preference_style = temp_preference_style;
            end if;
         end if;
         if preference_flag = '1' and preference_style in('7','8','9','A','B','C','D') and ticket_type not in(2,4) then


            if not exists(select 1 
       from basic.CG52_train_dir_appendix 
    where CG52_train_dir_appendix.train_no = train_no 
     and CG52_train_dir_appendix.special_flag = '6') 
   then
 
               SET ticket_price = -34; 
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
            SET gj_preference = '';
            select   IFNULL(DG50_special_discount_define.discount,'') 
   INTO gj_preference 
   from basic.DG50_special_discount_define 
   where DG50_special_discount_define.special_code = '3' 
    and DG50_special_discount_define.discount_code = preference_style
             and DG50_special_discount_define.train_code = train_code 
    and DG50_special_discount_define.start_station_name = start_station_name
             and DG50_special_discount_define.end_station_name = end_station_name
             and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
             and DG50_special_discount_define.start_date <= start_train_date 
    and DG50_special_discount_define.stop_date >= start_train_date   
   order by DG50_special_discount_define.seat_type_code 
   LIMIT 1;
            if gj_preference = '' then
               select   IFNULL(DG50_special_discount_define.discount,'') 
      INTO gj_preference 
      from basic.DG50_special_discount_define 
      where DG50_special_discount_define.special_code = '3' 
     and DG50_special_discount_define.discount_code = preference_style
                 and DG50_special_discount_define.train_code = '%'
                 and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
                 and DG50_special_discount_define.start_date <= start_train_date 
     and DG50_special_discount_define.stop_date >= start_train_date   
     order by seat_type_code 
    LIMIT 1;
            end if;
            if gj_preference = '' then
               SET preference_rate = 0;
            else
               SET preference_rate = CAST(gj_preference AS DECIMAL(4,3)) -1.0;
            end if;
         end if;





         SET train_class1 = 'z';
         SET train_class2 = 'z';
         if train_class = '9' then

            select   multi_class_train.train_class1, 
    multi_class_train.train_class2, 
    multi_class_train.station_no 
   INTO train_class1,
    train_class2,
    change_station_no 
   from basic.multi_class_train 
   where multi_class_train.train_no = train_no
             and multi_class_train.start_date <= start_train_date 
    and multi_class_train.stop_date >= start_train_date   
   LIMIT 1;
            if ROW_COUNT() = 0 then
  
               SET ticket_price = -30;
               SET SWP_Ret_Value = -30;
               LEAVE SWL_return;
            end if;
            if start_station_no >= change_station_no then
  
               SET train_class = train_class2;
               SET dd_0 = 0;
               SET dd_1 = 0;
               SET dd_2 = 0;
               SET dd_3 = 0;
               SET dd_4 = 0;
               SET dd_5 = 0;
            end if;
            if to_station_no <= change_station_no then
  
               SET train_class = train_class1;
               SET dd_0 = 0;
               SET dd_1 = 0;
               SET dd_2 = 0;
               SET dd_3 = 0;
               SET dd_4 = 0;
               SET dd_5 = 0;
            end if;
            if start_station_no < change_station_no and to_station_no > change_station_no then
  
               select   dd_0 -IFNULL(stop_time.distance,0), 
          dd_1 -IFNULL(stop_time.distance1,0), 
    dd_2 -IFNULL(stop_time.distance2,0), 
    dd_3 -IFNULL(stop_time.distance3,0), 
    dd_4 -IFNULL(stop_time.distance4,0), 
    dd_5 -IFNULL(stop_time.distance5,0) 
     INTO dd_0,
          dd_1,
    dd_2,
    dd_3,
    dd_4,
    dd_5 
      from basic.stop_time 
      where stop_time.train_no = train_no 
     and stop_time.station_no = change_station_no
                 and stop_time.start_date <= start_train_date 
     and stop_time.stop_date >= start_train_date   
      LIMIT 1;
               if ROW_COUNT() = 0 then
    
                  SET ticket_price = -22;
                  SET SWP_Ret_Value = -22;
                  LEAVE SWL_return;
               end if;
            end if;
         else 
            SET dd_0 = 0;
            SET dd_1 = 0;
            SET dd_2 = 0;
            SET dd_3 = 0;
            SET dd_4 = 0;
            SET dd_5 = 0;
         end if;

         select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
   INTO train_class_rate 
   from basic.DG50_train_class_rate 
   where DG50_train_class_rate.train_class_code = train_class   
   LIMIT 1;
         if train_class1 <> 'z' and train_class2 <> 'z' then

            select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
   INTO train_class1_rate 
   from basic.DG50_train_class_rate 
   where DG50_train_class_rate.train_class_code = train_class1   
   LIMIT 1;
     
            select   IFNULL(DG50_train_class_rate.train_class_rate,0) 
   INTO train_class2_rate 
   from basic.DG50_train_class_rate 
   where DG50_train_class_rate.train_class_code = train_class2   
   LIMIT 1;
         end if;

    
         if train_class = '0' or train_class = '1' then 
            SET train_class = '2';
         end if;
         if train_class1 = '0' or train_class1 = '1' then 
            SET train_class1 = '2';
         end if;
         if train_class2 = '0' or train_class2 = '1' then 
            SET train_class2 = '2';
         end if;



    FREE_END:loop
    BEGIN
         if EXISTS(SELECT 1 
    from basic.CG30_free_distance
           where CG30_free_distance.train_no = train_no 
    and CG30_free_distance.start_date <= start_train_date 
    and CG30_free_distance.stop_date >= start_train_date) 
  then

            SET sp_id = CONNECTION_ID()%30000;
 
            delete from basic.DG50_free_distance
            where DG50_free_distance.sp_id = sp_id 
    and DG50_free_distance.train_no = train_no 
    and DG50_free_distance.start_date <= start_train_date 
    and DG50_free_distance.stop_date >= start_train_date;
    
            insert into basic.DG50_free_distance
             select CG30_free_distance.start_date, 
     CG30_free_distance.stop_date, 
     CG30_free_distance.train_no, 
     CG30_free_distance.station_name, 
     CG30_free_distance.free_distance, 
     CG30_free_distance.origin ,
     sp_id
             from basic.CG30_free_distance
             where CG30_free_distance.train_no = train_no
              and CG30_free_distance.start_date <= start_train_date 
     and CG30_free_distance.stop_date >= start_train_date;
 
            while EXISTS(SELECT 1 
       from basic.DG50_free_distance 
    WHERE DG50_free_distance.sp_id = sp_id 
     and DG50_free_distance.train_no = train_no)
   DO
               select   DG50_free_distance.free_distance, 
     DG50_free_distance.station_name 
      INTO d_free,
     free_station_name 
    from basic.DG50_free_distance 
    where DG50_free_distance.sp_id = sp_id 
     and DG50_free_distance.train_no = train_no   
    LIMIT 1;
        
               delete from basic.DG50_free_distance LIMIT 1;
               if d_free > 0 then
  
                  select   stop_time.station_no, 
     IFNULL(stop_time.distance,0), 
     IFNULL(stop_time.distance1,0), 
     IFNULL(stop_time.distance2,0), 
     IFNULL(stop_time.distance3,0), 
     IFNULL(stop_time.distance4,0), 
     IFNULL(stop_time.distance5,0) 
      INTO free_station_no,
     d_free0,
     d_free1,
     d_free2,
     d_free3,
     d_free4,
     d_free5 
      from basic.stop_time 
      where stop_time.train_no = train_no 
     and stop_time.station_name = free_station_name
                   and stop_time.station_no > start_station_no 
     and stop_time.station_no < to_station_no
                   and stop_time.start_date <= start_train_date 
     and stop_time.stop_date >= start_train_date   
      LIMIT 1;
                  if ROW_COUNT() = 0 then 
    
                     LEAVE FREE_END;
                  end if;
                  select   d_free0 -IFNULL(stop_time.distance,0), 
     d_free1 -IFNULL(stop_time.distance1,0), 
     d_free2 -IFNULL(stop_time.distance2,0), 
     d_free3 -IFNULL(stop_time.distance3,0), 
     d_free4 -IFNULL(stop_time.distance4,0), 
     d_free5 -IFNULL(stop_time.distance5,0) 
      INTO d_free0,
     d_free1,
     d_free2,
     d_free3,
     d_free4,
     d_free5 
      from basic.stop_time 
      where stop_time.train_no = train_no 
     and stop_time.station_no = start_station_no
                   and stop_time.start_date <= start_train_date 
     and stop_time.stop_date >= start_train_date   
      LIMIT 1;
    
    
    
                  SET d_real_free = 0;
                  if d_free0 > 0 and d_free0 < d_0 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free0 then 
                        SET d_real_free = d_free0;
                     end if;
                     if d_real_free > d_0 -d_free0 then 
                        SET d_real_free = d_0 -d_free0;
                     end if;
                     SET d_0 = d_0 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_0 = dd_0 -2*d_real_free;
                     end if;
                  end if;
                  if d_free1 > 0 and d_free1 < d_1 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free1 then 
                        SET d_real_free = d_free1;
                     end if;
                     if d_real_free > d_1 -d_free1 then 
                        SET d_real_free = d_1 -d_free1;
                     end if;
                     SET d_1 = d_1 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_1 = dd_1 -2*d_real_free;
                     end if;
                  end if;
                  if d_free2 > 0 and d_free2 < d_2 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free2 then 
                        SET d_real_free = d_free2;
                     end if;
                     if d_real_free > d_2 -d_free2 then 
                        SET d_real_free = d_2 -d_free2;
                     end if;
                     SET d_2 = d_2 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_1 = dd_2 -2*d_real_free;
                     end if;
                  end if;
                  if d_free3 > 0 and d_free3 < d_3 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free3 then 
                        SET d_real_free = d_free3;
                     end if;
                     if d_real_free > d_3 -d_free3 then 
                        SET d_real_free = d_3 -d_free3;
                     end if;
                     SET d_3 = d_3 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_3 = dd_3 -2*d_real_free;
                     end if;
                  end if;
                  if d_free4 > 0 and d_free4 < d_4 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free4 then 
                        SET d_real_free = d_free4;
                     end if;
                     if d_real_free > d_4 -d_free4 then 
                        SET d_real_free = d_4 -d_free4;
                     end if;
                     SET d_4 = d_4 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_4 = dd_4 -2*d_real_free;
                     end if;
                  end if;
                  if d_free5 > 0 and d_free5 < d_5 then
    
                     SET d_real_free = d_free*0.5;
                     if d_real_free > d_free5 then 
                        SET d_real_free = d_free5;
                     end if;
                     if d_real_free > d_5 -d_free5 then 
                        SET d_real_free = d_5 -d_free5;
                     end if;
                     SET d_5 = d_5 -2*d_real_free;
                     if train_class = '9' and free_station_no > change_station_no then 
                        SET dd_5 = dd_5 -2*d_real_free;
                     end if;
       
                  end if;
               end if;
            END WHILE;
         end if;
      END;
   leave FREE_END;
   end loop FREE_END;

      SET d_total = d_0+d_1+d_2+d_3+d_4+d_5;
      SET distance = d_total;


      SET error_code = 0;
      SET sleeper_style = '0';
      SET sleeper_rate = 0;
      SET discount_seat_type = '';
      SET discount_bed_level = '';
      CALL arith.DG50_fetch_sleeper_discount(train_date,train_no,start_station_no,to_station_no,distance,seat_type_code,
      bed_level,ticket_type_power,sleeper_style,sleeper_rate,discount_seat_type,
      discount_bed_level,error_code,0);


      if sleeper_style = 'E' then

         SET seat_type_code = discount_seat_type;
         SET bed_level = discount_bed_level;
 
 
         select   DG50_train_price_style.price_style, 
   DG50_train_price_style.belong_line1, 
   DG50_train_price_style.price_style1, 
   DG50_train_price_style.belong_line2, 
   DG50_train_price_style.price_style2, 
   DG50_train_price_style.belong_line3, 
   DG50_train_price_style.price_style3, 
   DG50_train_price_style.belong_line4, 
   DG50_train_price_style.price_style4, 
   DG50_train_price_style.belong_line5, 
   DG50_train_price_style.price_style5 
   INTO style0,
   line1,
   style1,
   line2,
   style2,
   line3,
   style3,
   line4,
   style4,
   line5,
   style5 
   from basic.DG50_train_price_style 
   where DG50_train_price_style.train_no = train_no
          and DG50_train_price_style.seat_type_code in(seat_type_code,'z')
          and DG50_train_price_style.running_rule & power(2,(TIMESTAMPDIFF(DAY,CAST(DG50_train_price_style.start_date AS DATETIME),CAST(start_train_date AS DATETIME))%DG50_train_price_style.running_style)) <> 0
          and DG50_train_price_style.ticket_type & ticket_type_power = ticket_type_power
          and DG50_train_price_style.start_date <= start_train_date 
   and DG50_train_price_style.stop_date >= start_train_date   
   order by DG50_train_price_style.seat_type_code 
   LIMIT 1;
      end if;





      select   CG30_price_migrate.co_train_date, 
        CG30_price_migrate.co_train_no, 
   CG30_price_migrate.co_seat_type 
      INTO co_train_date,
        co_train_no,
   co_seat_type 
      from basic.CG30_price_migrate 
      where CG30_price_migrate.train_no = train_no
        and CG30_price_migrate.start_date <= start_train_date 
   and CG30_price_migrate.stop_date >= start_train_date
        and CG30_price_migrate.seat_type in(seat_type_code,'z')
        and CG30_price_migrate.ticket_type & ticket_type_power = ticket_type_power
        and power(2,TIMESTAMPDIFF(DAY,STR_TO_DATE(CG30_price_migrate.start_date,'%Y%m%d'),STR_TO_DATE(train_date,'%Y%m%d'))%CG30_price_migrate.running_style) & CG30_price_migrate.running_rule
         = power(2,TIMESTAMPDIFF(DAY,STR_TO_DATE(CG30_price_migrate.start_date,'%Y%m%d'),STR_TO_DATE(train_date,'%Y%m%d'))%CG30_price_migrate.running_style)   
      order by CG30_price_migrate.seat_type 
      LIMIT 1;
      if ROW_COUNT() = 1 then

         if co_seat_type < 'z' then 
            SET seat_type_code = co_seat_type;
         end if;
         if co_train_date < '99999999' then 
            SET start_train_date = co_train_date;
         end if;
         if train_no <> co_train_no then
  
            SET train_no = co_train_no;
    
            SET subbureau_code = SUBSTRING(train_no,1,2);
            SET train_code = SUBSTRING(train_no,3,8);
            SET double_id = SUBSTRING(train_no,11,1);
            SET schema_id = SUBSTRING(train_no,12,1);
            WHILE SUBSTRING(train_code,1,1) = '0' DO
               SET SWV_train_code_Str = SUBSTRING(train_code,2,LENGTH(train_code) -1);
               SET train_code = SWV_train_code_Str;
            END WHILE;
    
            select   train_dir.price_style, 
    train_dir.price_style1, 
    train_dir.price_style2, 
    train_dir.price_style3, 
    train_dir.price_style4, 
    train_dir.price_style5 
   INTO style0,
    style1,
    style2,
    style3,
    style4,
    style5 
   from basic.train_dir 
   where train_dir.subbureau_code = subbureau_code 
    and train_dir.train_code = train_code
             and train_dir.double_id = double_id 
    and train_dir.schema_id = schema_id
             and train_dir.start_date <= start_train_date 
    and train_dir.stop_date >= start_train_date   
   LIMIT 1;
            if ROW_COUNT() = 0 then
    
               SET ticket_price = -32;
               SET SWP_Ret_Value = -32;
               LEAVE SWL_return;
            end if;
         end if;
      end if;

      SET d_seat = d_0;
      SET dd_seat = dd_0;
      SET d_bed = d_0;
      IF style1 in('2','3') then 
         SET d_seat = d_seat+d_1;
         SET dd_seat = dd_seat+dd_1;
         SET d_bed = d_bed+d_1;
      end if;
      IF style2 in('2','3') then 
         SET d_seat = d_seat+d_2;
         SET dd_seat = dd_seat+dd_2;
         SET d_bed = d_bed+d_2;
      end if;
      IF style3 in('2','3') then 
         SET d_seat = d_seat+d_3;
         SET dd_seat = dd_seat+dd_3;
         SET d_bed = d_bed+d_3;
      end if;
      IF style4 in('2','3') then 
         SET d_seat = d_seat+d_4;
         SET dd_seat = dd_seat+dd_4;
         SET d_bed = d_bed+d_4;
      end if;
      IF style5 in('2','3') then 
         SET d_seat = d_seat+d_5;
         SET dd_seat = dd_seat+dd_5;
         SET d_bed = d_bed+d_5;
      end if;
      IF style1 in('5','6','8','9') then 
         SET d_bed = d_bed+d_1;
      end if;
      IF style2 in('5','6','8','9') then 
         SET d_bed = d_bed+d_2;
      end if;
      IF style3 in('5','6','8','9') then 
         SET d_bed = d_bed+d_3;
      end if;
      IF style4 in('5','6','8','9') then 
         SET d_bed = d_bed+d_4;
      end if;
      IF style5 in('5','6','8','9') then 
         SET d_bed = d_bed+d_5;
      end if;

      SET s_seat1 = 0;
      SET s_seat2 = 0;
      SET s_u = 0;
      SET s_m = 0;
      SET s_d = 0;
      SET s_su = 0;
      SET s_sd = 0;
      SET s_hu = 0;
      SET s_hd = 0;
      SET s_shu = 0;
      SET s_shd = 0;
      SET s_bed = 0;

      SET student = 1;
      SET child = 1;
      SET half = 1;
      SET bed_only = 1;
      SET home = 1;
      SET free = 1;
      SET small_child = 0;
      SET tmp_ticket_type = ticket_type;
      CALL arith.CG40_price_para(seat_type_code,
      bed_level,
      tmp_ticket_type,
      0,
      s_seat1,
      s_seat2,
      s_u,
      s_m,
      s_d,
      s_su,
      s_sd,
      s_hu,
      s_hd,
      s_shu,
      s_shd,
      s_bed,
      child,
      student,
      half,
      free,
      home,
      bed_only,
      small_child);

      SET rate0 = '0';
      SET rate_a0 = '0';
      SET rate1 = '0';
      SET rate_a1 = '0';
      SET rate2 = '0';
      SET rate_a2 = '0';
      SET rate3 = '0';
      SET rate_a3 = '0';
      SET rate4 = '0';
      SET rate_a4 = '0';
      SET rate5 = '0';
      SET rate_a5 = '0';
      select   IFNULL(CG30_price_rate.price_add,0), 
        IFNULL(CG30_price_rate.st_air,'0'), 
   IFNULL(CG30_price_rate.paper,'0'), 
   lower(CG30_price_rate.price_rate), 
   CG30_price_rate.another_price_rate, 
   lower(CG30_price_rate.price_rate1), 
   CG30_price_rate.another_price_rate1, 
   lower(CG30_price_rate.price_rate2), 
   CG30_price_rate.another_price_rate2, 
   lower(CG30_price_rate.price_rate3), 
   CG30_price_rate.another_price_rate3, 
   lower(CG30_price_rate.price_rate4), 
   CG30_price_rate.another_price_rate4, 
   lower(CG30_price_rate.price_rate5), 
   CG30_price_rate.another_price_rate5 
      INTO p_add,
        st_air,
   paper,
   rate0,
   rate_a0,
   rate1,
   rate_a1,
   rate2,
   rate_a2,
   rate3,
   rate_a3,
        rate4,
   rate_a4,
   rate5,
   rate_a5 
      from basic.CG30_price_rate 
      where CG30_price_rate.train_no = train_no 
  and CG30_price_rate.start_date <= start_train_date 
  and CG30_price_rate.stop_date >= start_train_date   
      LIMIT 1;
      if p_add < 0 or p_add IS NULL then 
         SET p_add = 0;
      end if;
      if paper IS NULL then 
         SET paper = '0';
      end if;
      if st_air IS NULL then 
         SET st_air = '0';
      end if;
      SET rate_seat0 = rate0;
      SET rate_seat_a0 = rate_a0;
      SET rate_seat1 = rate1;
      SET rate_seat_a1 = rate_a1;
      SET rate_seat2 = rate2;
      SET rate_seat_a2 = rate_a2;
      SET rate_seat3 = rate3;
      SET rate_seat_a3 = rate_a3;
      SET rate_seat4 = rate4;
      SET rate_seat_a4 = rate_a4;
      SET rate_seat5 = rate5;
      SET rate_seat_a5 = rate_a5;



      if rtrim(rate0) = 'x' or rtrim(rate1) = 'x' or rtrim(rate2) = 'x' or rtrim(rate3) = 'x' or rtrim(rate4) = 'x' or rtrim(rate5) = 'x' or rtrim(rate_a0) = 'x' or rtrim(rate_a1) = 'x' or rtrim(rate_a2) = 'x' or rtrim(rate_a3) = 'x' or rtrim(rate_a4) = 'x' or rtrim(rate_a5) = 'x' then

         SET rate_x0 = '0';
         SET rate_a_x0 = '0';
         SET rate_x1 = '0';
         SET rate_a_x1 = '0';
         SET rate_x2 = '0';
         SET rate_a_x2 = '0';
         SET rate_x3 = '0';
         SET rate_a_x3 = '0';
         SET rate_x5 = '0';
         SET rate_a_x5 = '0';
         select   CG30_price_rate_seat.price_rate, 
   CG30_price_rate_seat.another_price_rate, 
   CG30_price_rate_seat.price_rate1, 
   CG30_price_rate_seat.another_price_rate1, 
   CG30_price_rate_seat.price_rate2, 
   CG30_price_rate_seat.another_price_rate2, 
   CG30_price_rate_seat.price_rate3, 
   CG30_price_rate_seat.another_price_rate3, 
   CG30_price_rate_seat.price_rate4, 
   CG30_price_rate_seat.another_price_rate4, 
   CG30_price_rate_seat.price_rate5, 
   CG30_price_rate_seat.another_price_rate5 
   INTO rate_x0,
   rate_a_x0,
   rate_x1,
   rate_a_x1,
   rate_x2,
   rate_a_x2,
   rate_x3,
   rate_a_x3,
          rate_x4,
   rate_a_x4,
   rate_x5,
   rate_a_x5 
   from basic.CG30_price_rate_seat 
   where CG30_price_rate_seat.train_no = train_no
          and CG30_price_rate_seat.start_date <= start_train_date 
   and CG30_price_rate_seat.stop_date >= start_train_date
          and CG30_price_rate_seat.seat_type_code in(seat_type_code,'z')
          and CG30_price_rate_seat.ticket_type & ticket_type_power = ticket_type_power   
   order by CG30_price_rate_seat.seat_type_code 
   LIMIT 1;
         if seat_type_code in('7','8','D') then
            SET rate_seat_x0 = rate_x0;
            SET rate_seat_a_x0 = rate_a_x0;
            SET rate_seat_x1 = rate_x1;
            SET rate_seat_a_x1 = rate_a_x1;
            SET rate_seat_x2 = rate_x2;
            SET rate_seat_a_x2 = rate_a_x2;
            SET rate_seat_x3 = rate_x3;
            SET rate_seat_a_x3 = rate_a_x3;
            SET rate_seat_x4 = rate_x4;
            SET rate_seat_a_x4 = rate_a_x4;
            SET rate_seat_x5 = rate_x5;
            SET rate_seat_a_x5 = rate_a_x5;
         else
            if seat_type_code in('9','A') then 
               SET temp_seat_type = '9';
            else 
               if seat_type_code in('B','C') then 
                  SET temp_seat_type = 'B';
               else 
                  if seat_type_code in('K','L') then 
                     SET temp_seat_type = 'K';
                  else 
                     SET temp_seat_type = CAST(cast(s_seat2 as SIGNED INTEGER)+1 AS char(1));
                  end if;
               end if;
            end if;
            SET rate_seat_x0 = '0';
            SET rate_seat_a_x0 = '0';
            SET rate_seat_x1 = '0';
            SET rate_seat_a_x1 = '0';
            SET rate_seat_x2 = '0';
            SET rate_seat_a_x2 = '0';
            SET rate_seat_x3 = '0';
            SET rate_seat_a_x3 = '0';
            SET rate_seat_x5 = '0';
            SET rate_seat_a_x5 = '0';
            select   CG30_price_rate_seat.price_rate, 
    CG30_price_rate_seat.another_price_rate, 
    CG30_price_rate_seat.price_rate1, 
    CG30_price_rate_seat.another_price_rate1, 
    CG30_price_rate_seat.price_rate2, 
    CG30_price_rate_seat.another_price_rate2, 
    CG30_price_rate_seat.price_rate3, 
    CG30_price_rate_seat.another_price_rate3, 
    CG30_price_rate_seat.price_rate4, 
    CG30_price_rate_seat.another_price_rate4, 
    CG30_price_rate_seat.price_rate5, 
    CG30_price_rate_seat.another_price_rate5 
   INTO rate_seat_x0,
    rate_seat_a_x0,
    rate_seat_x1,
    rate_seat_a_x1,
    rate_seat_x2,
    rate_seat_a_x2,
             rate_seat_x3,
    rate_seat_a_x3,
    rate_seat_x4,
    rate_seat_a_x4,
             rate_seat_x5,
    rate_seat_a_x5 
   from basic.CG30_price_rate_seat 
   where CG30_price_rate_seat.train_no = train_no 
    and CG30_price_rate_seat.start_date <= start_train_date 
    and CG30_price_rate_seat.stop_date >= start_train_date
             and CG30_price_rate_seat.seat_type_code in(temp_seat_type,'z')
             and CG30_price_rate_seat.ticket_type & ticket_type_power = ticket_type_power   
   order by CG30_price_rate_seat.seat_type_code 
   LIMIT 1;
         end if;
      end if;
      SET ticket_type = tmp_ticket_type;

      if special_visa = 1 then 
         SET bed_only = 0;
      end if;

      if seat_feature in('2','3') then 
         SET new_type = '1'; 
      else 
         SET new_type = '0';
      end if;

      SET p_total = 0;
      SET p_relay = 0;
      SET p_float_total = 0;
      SET p_bed_reserve = 0;
      SET p_0 = 0;
      SET p_1 = 0;
      SET p_2 = 0;
      SET p_3 = 0;
      SET p_4 = 0;
      SET p_5 = 0;
      SET p_basic_seat0 = 0;
      SET p_basic_seat1 = 0;
      SET p_basic_seat2 = 0;
      SET p_basic_seat3 = 0;
      SET p_basic_seat4 = 0;
      SET p_basic_seat5 = 0;
      SET p_relay_fast0 = 0;
      SET p_relay_fast1 = 0;
      SET p_relay_fast2 = 0;
      SET p_relay_fast3 = 0;
      SET p_relay_fast4 = 0;
      SET p_relay_fast5 = 0;

      SET p_1_0 = 0;
      SET p_2_0 = 0;
      SET p_3_0 = 0;
      SET p_4_0 = 0;
      SET p_5_0 = 0;
      SET p_state = 0;
      SET p_bed = 0;
      SET p_basic = 0;
      SET p_float = 0;


      if preference_style in('5','6') and preference_rate <> -1 then

         SET ticket_price = -70;
         SET SWP_Ret_Value = -70;
         LEAVE SWL_return;
      end if;




 PRICING_FINISH:loop
   BEGIN
      if special_visa = 3 or ticket_type = 9 or (preference_style in('5','6'))
      or ticket_type = 5 and (s_seat1 = 1 or s_seat2 = 1 and special_visa <> 2)
      or ticket_type = 6 and  s_seat1 = 1 and s_bed = 0 then
         LEAVE PRICING_FINISH;
      end if;

      if ticket_type <> 5 and ticket_type <> 6 then 
         SET p_float_total = p_add;
      end if;
      SET times = 5;
      SWL_Label4:
      while times >= -1 DO
         BEGIN
  
            if times = 5 then
  
               SET d_use = d_5;
               SET dd_use = dd_5;
               SET line_use = line5;
               SET style_use = style5;
               if rtrim(rate5) = 'x' then
                  SET rate_use = rate_x5;
                  SET rate_seat_use = rate_seat_x5;
                  SET rate_a_use = rate_a_x5;
                  SET rate_seat_a_use = rate_seat_a_x5;
                  SET rate_aa_use = rate_a5;
                  SET rate_seat_aa_use = rate_seat_a5;
               else 
                  if rtrim(rate_a5) = 'x' then
                     SET rate_use = rate5;
                     SET rate_seat_use = rate_seat5;
                     SET rate_a_use = rate_x5;
                     SET rate_seat_a_use = rate_seat_x5;
                     SET rate_aa_use = rate_a_x5;
                     SET rate_seat_aa_use = rate_seat_a_x5;
                  else
                     SET rate_use = rate5;
                     SET rate_seat_use = rate_seat5;
                     SET rate_a_use = rate_a5;
                     SET rate_seat_a_use = rate_seat_a5;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 4 then
  
               SET p_5 = p_basic;
               SET p_basic_seat5 = p_basic_seat;
               SET p_relay_fast5 = p_fast;
               SET p_5_0 = p_diff;
               SET d_use = d_4;
               SET dd_use = dd_4;
               SET line_use = line4;
               SET style_use = style4;
    
               SET p_float_seat5 = IFNULL(p_float_seat,0);
               SET p_seat5 = IFNULL(p_seat,0);
    
               SET p_basic_seat5_0 = p_basic_seat_0;
               SET p_basic_fast5_0 = p_basic_fast_0;
               SET p_basic_air5_0 = p_basic_air_0;
               if rtrim(rate4) = 'x' then
                  SET rate_use = rate_x4;
                  SET rate_seat_use = rate_seat_x4;
                  SET rate_a_use = rate_a_x4;
                  SET rate_seat_a_use = rate_seat_a_x4;
                  SET rate_aa_use = rate_a4;
                  SET rate_seat_aa_use = rate_seat_a4;
               else 
                  if rtrim(rate_a4) = 'x' then
                     SET rate_use = rate4;
                     SET rate_seat_use = rate_seat4;
                     SET rate_a_use = rate_x4;
                     SET rate_seat_a_use = rate_seat_x4;
                     SET rate_aa_use = rate_a_x4;
                     SET rate_seat_aa_use = rate_seat_a_x4;
                  else
                     SET rate_use = rate4;
                     SET rate_seat_use = rate_seat4;
                     SET rate_a_use = rate_a4;
                     SET rate_seat_a_use = rate_seat_a4;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 3 then
  
               SET p_4 = p_basic;
               SET p_basic_seat4 = p_basic_seat;
               SET p_relay_fast4 = p_fast;
               SET p_4_0 = p_diff;
               SET d_use = d_3;
               SET dd_use = dd_3;
               SET line_use = line3;
               SET style_use = style3;
    
               SET p_float_seat4 = IFNULL(p_float_seat,0);
               SET p_seat4 = IFNULL(p_seat,0);
    
               SET p_basic_seat4_0 = p_basic_seat_0;
               SET p_basic_fast4_0 = p_basic_fast_0;
               SET p_basic_air4_0 = p_basic_air_0;
               if rtrim(rate3) = 'x' then
                  SET rate_use = rate_x3;
                  SET rate_seat_use = rate_seat_x3;
                  SET rate_a_use = rate_a_x3;
                  SET rate_seat_a_use = rate_seat_a_x3;
                  SET rate_aa_use = rate_a3;
                  SET rate_seat_aa_use = rate_seat_a3;
               else 
                  if rtrim(rate_a3) = 'x' then
                     SET rate_use = rate3;
                     SET rate_seat_use = rate_seat3;
                     SET rate_a_use = rate_x3;
                     SET rate_seat_a_use = rate_seat_x3;
                     SET rate_aa_use = rate_a_x3;
                     SET rate_seat_aa_use = rate_seat_a_x3;
                  else
                     SET rate_use = rate3;
                     SET rate_seat_use = rate_seat3;
                     SET rate_a_use = rate_a3;
                     SET rate_seat_a_use = rate_seat_a3;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 2 then
  
               SET p_3 = p_basic;
               SET p_basic_seat3 = p_basic_seat;
               SET p_relay_fast3 = p_fast;
               SET p_3_0 = p_diff;
               SET d_use = d_2;
               SET dd_use = dd_2;
               SET line_use = line2;
               SET style_use = style2;
    
               SET p_float_seat3 = IFNULL(p_float_seat,0);
               SET p_seat3 = IFNULL(p_seat,0);
    
               SET p_basic_seat3_0 = p_basic_seat_0;
               SET p_basic_fast3_0 = p_basic_fast_0;
               SET p_basic_air3_0 = p_basic_air_0;
               if rtrim(rate2) = 'x' then
                  SET rate_use = rate_x2;
                  SET rate_seat_use = rate_seat_x2;
                  SET rate_a_use = rate_a_x2;
                  SET rate_seat_a_use = rate_seat_a_x2;
                  SET rate_aa_use = rate_a2;
                  SET rate_seat_aa_use = rate_seat_a2;
               else 
                  if rtrim(rate_a2) = 'x' then
                     SET rate_use = rate2;
                     SET rate_seat_use = rate_seat2;
                     SET rate_a_use = rate_x2;
                     SET rate_seat_a_use = rate_seat_x2;
                     SET rate_aa_use = rate_a_x2;
                     SET rate_seat_aa_use = rate_seat_a_x2;
                  else
                     SET rate_use = rate2;
                     SET rate_seat_use = rate_seat2;
                     SET rate_a_use = rate_a2;
                     SET rate_seat_a_use = rate_seat_a2;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 1 then
  
               SET p_2 = p_basic;
               SET p_basic_seat2 = p_basic_seat;
               SET p_relay_fast2 = p_fast;
               SET p_2_0 = p_diff;
               SET d_use = d_1;
               SET dd_use = dd_1;
               SET line_use = line1;
               SET style_use = style1;
    
               SET p_float_seat2 = IFNULL(p_float_seat,0);
               SET p_seat2 = IFNULL(p_seat,0);
    
               SET p_basic_seat2_0 = p_basic_seat_0;
               SET p_basic_fast2_0 = p_basic_fast_0;
               SET p_basic_air2_0 = p_basic_air_0;
               if rtrim(rate1) = 'x' then
                  SET rate_use = rate_x1;
                  SET rate_seat_use = rate_seat_x1;
                  SET rate_a_use = rate_a_x1;
                  SET rate_seat_a_use = rate_seat_a_x1;
                  SET rate_aa_use = rate_a1;
                  SET rate_seat_aa_use = rate_seat_a1;
               else 
                  if rtrim(rate_a1) = 'x' then
                     SET rate_use = rate1;
                     SET rate_seat_use = rate_seat1;
                     SET rate_a_use = rate_x1;
                     SET rate_seat_a_use = rate_seat_x1;
                     SET rate_aa_use = rate_a_x1;
                     SET rate_seat_aa_use = rate_seat_a_x1;
                  else
                     SET rate_use = rate1;
                     SET rate_seat_use = rate_seat1;
                     SET rate_a_use = rate_a1;
                     SET rate_seat_a_use = rate_seat_a1;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = 0 then
  
               if style0 <> '7' and style0 <> '0' then  
                  SET style0 = '1';
               end if;
               SET p_1 = p_basic;
               SET p_basic_seat1 = p_basic_seat;
               SET p_relay_fast1 = p_fast;
               SET p_1_0 = p_diff;
               SET d_use = d_seat;
               SET dd_use = dd_seat;
               SET line_use = 0;
               SET style_use = style0;
    
               SET p_float_seat1 = IFNULL(p_float_seat,0);
               SET p_seat1 = IFNULL(p_seat,0);
    
               SET p_basic_seat1_0 = p_basic_seat_0;
               SET p_basic_fast1_0 = p_basic_fast_0;
               SET p_basic_air1_0 = p_basic_air_0;
               if rtrim(rate0) = 'x' then
                  SET rate_use = rate_x0;
                  SET rate_seat_use = rate_seat_x0;
                  SET rate_a_use = rate_a_x0;
                  SET rate_seat_a_use = rate_seat_a_x0;
                  SET rate_aa_use = rate_a0;
                  SET rate_seat_aa_use = rate_seat_a0;
               else 
                  if rtrim(rate_a0) = 'x' then
                     SET rate_use = rate0;
                     SET rate_seat_use = rate_seat0;
                     SET rate_a_use = rate_x0;
                     SET rate_seat_a_use = rate_seat_x0;
                     SET rate_aa_use = rate_a_x0;
                     SET rate_seat_aa_use = rate_seat_a_x0;
                  else
                     SET rate_use = rate0;
                     SET rate_seat_use = rate_seat0;
                     SET rate_a_use = rate_a0;
                     SET rate_seat_a_use = rate_seat_a0;
                     SET rate_aa_use = '0';
                     SET rate_seat_aa_use = '0';
                  end if;
               end if;
            end if;
            if times = -1 then
     if output2=9 then
     select '101===',p_0,p_basic,p_basic_seat0,p_basic_seat,p_relay_fast0,p_fast;
     end if;
               SET p_0 = p_basic;
               SET p_basic_seat0 = p_basic_seat;
               SET p_relay_fast0 = p_fast;
    
               SET p_float_seat0 = IFNULL(p_float_seat,0);
               SET p_seat0 = IFNULL(p_basic_seat,0);
               SET d_use = d_bed;
               SET dd_use = 0;
               SET style_use = style0;
    
               SET p_basic_seat0_0 = p_basic_seat_0;
               SET p_basic_fast0_0 = p_basic_fast_0;
               SET p_basic_air0_0 = p_basic_air_0;
               if d_bed = d_seat or style0 = '7' then 
                  SET d_use = 0;
               end if;
            end if;
  
            SET p_basic = 0;
            SET p_basic_seat = 0;
            SET p_fast = 0;
            SET p_float = 0;
            SET p_diff = 0;
  

            if d_use <= 0 or style_use = '2' or style_use = '3' or style_use < '0' or style_use > '9' then
  
               SET times = times -1;
               ITERATE SWL_Label4;
            end if;
            GZ_VERSION_AGAIN: LOOP
       
               if seat_feature in('2','3') then 
                  SET new_type = '1'; 
               else 
                  SET new_type = '0';
               end if;
      
               SET p_seat = 0;
               SET p_fast = 0;
               SET pp_fast = 0;
               SET p_soft_seat = 0;
               SET p_up_bed = 0;
               SET p_middle_bed = 0;
               SET p_down_bed = 0;
               SET p_up_soft = 0;
               SET p_down_soft = 0;
               SET p_up_super = 0;
               SET p_down_super = 0;
               SET p_up_soft_super = 0;
               SET p_down_soft_super = 0;
               SET p_air = 0;
               SET p_new_seat = 0;
               SET p_new_fast = 0;
               SET pp_new_fast = 0;
               SET p_new_soft_seat = 0;
               SET p_new_up_bed = 0;
               SET p_new_middle_bed = 0;
               SET p_new_down_bed = 0;
               SET p_new_up_soft = 0;
               SET p_new_down_soft = 0;
               SET p_new_up_super = 0;
               SET p_new_down_super = 0;
               SET p_new_up_soft_super = 0;
               SET p_new_down_soft_super = 0;
               SET p_new_air = 0;
               SET p_new_double_seat = 0;
               SET p_new_double_bed = 0;
               SET p_new_double_fast = 0;
               SET pp_new_double_fast = 0;
               SET p_new_double_air = 0;
  
               SET p_total_fast = 0;
               SET p_new_total_fast = 0;
  
  
               IF seat_type_code in('7','8') or (seat_type_code >= 'D' and seat_type_code not in('K','L')) then 
                  SET style_use = '7';
               end if;
  
               IF style_use = '0' then
  
                  select   distance_price.seat_price, 
     distance_price.fast_price, 
     distance_price.soft_seat_price, 
     distance_price.up_bed_price, 
     distance_price.middle_bed_price, 
     distance_price.down_bed_price, 
     distance_price.up_soft_bed_price, 
     distance_price.down_soft_bed_price, 
     distance_price.up_super_price, 
     distance_price.down_super_price, 
     distance_price.up_soft_super_price, 
     distance_price.down_soft_super_price, 
     distance_price.air_condition_price 
      INTO p_seat,
     p_fast,
     p_soft_seat,
     p_up_bed,
     p_middle_bed,
     p_down_bed,
     p_up_soft,p_down_soft,
                   p_up_super,
     p_down_super,
     p_up_soft_super,
     p_down_soft_super,
     p_air 
      from basic.distance_price 
      where distance_price.distance0 <= d_use+900 
     and distance_price.distance >= d_use+900
                   and distance_price.start_date <= start_train_date 
     and distance_price.stop_date >= start_train_date   
      LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     SET ticket_price = -36;
                     SET SWP_Ret_Value = -36;
                     LEAVE SWL_return;
                  end if;
                  select   distance_price.fast_price, 
     p_seat -distance_price.seat_price, 
     p_fast -distance_price.fast_price, 
     p_soft_seat -distance_price.soft_seat_price, 
     p_up_bed -distance_price.up_bed_price, 
     p_middle_bed -distance_price.middle_bed_price, 
     p_down_bed -distance_price.down_bed_price, 
     p_up_soft -distance_price.up_soft_bed_price, 
     p_down_soft -distance_price.down_soft_bed_price, 
     p_up_super -distance_price.up_super_price, 
     p_down_super -distance_price.down_super_price, 
     p_up_soft_super -distance_price.up_soft_super_price, 
     p_down_soft_super -distance_price.down_soft_super_price, 
     p_air -distance_price.air_condition_price 
      INTO p_fast_900,
     p_seat,
     p_fast,
     p_soft_seat,
     p_up_bed,
     p_middle_bed,
     p_down_bed,
                   p_up_soft,
     p_down_soft,
     p_up_super,
     p_down_super,
     p_up_soft_super,
     p_down_soft_super,
                   p_air 
      from basic.distance_price 
      where distance_price.distance0 <= 900 
     and distance_price.distance >= 900
                   and distance_price.start_date <= start_train_date 
     and distance_price.stop_date >= start_train_date   
      LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     SET ticket_price = -37;
                     SET SWP_Ret_Value = -37;
                     LEAVE SWL_return;
                  end if;
                  if p_down_bed < p_middle_bed then 
                     SET p_down_bed = p_middle_bed;
                  end if;
                  if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
     
                     select   IFNULL(distance_price.fast_price,0) 
      INTO p_total_fast 
      from basic.distance_price 
      where distance_price.distance0 <= d_total+900 
      and distance_price.distance >= d_total+900
                      and distance_price.start_date <= start_train_date 
      and distance_price.stop_date >= start_train_date   
      LIMIT 1;
                     if ROW_COUNT() = 0 then
   
                        SET ticket_price = -35;
                        SET SWP_Ret_Value = -35;
                        LEAVE SWL_return;
                     end if;
                     select   distance_price.fast_price -p_fast_900 
      INTO p_fast 
      from basic.distance_price 
      where distance_price.distance0 <= d_use -dd_use+900 
      and distance_price.distance >= d_use -dd_use+900
                      and distance_price.start_date <= start_train_date 
      and distance_price.stop_date >= start_train_date   
      LIMIT 1;
       
                     select   distance_price.fast_price -p_fast_900 
      INTO pp_fast 
      from basic.distance_price 
      where distance_price.distance0 <= dd_use+900 
      and distance_price.distance >= dd_use+900
                      and distance_price.start_date <= start_train_date 
      and distance_price.stop_date >= start_train_date   
      LIMIT 1;
                     if pp_fast <= 0 then 
                        SET pp_fast = 10;
                     end if;
                  end if;
                  if p_fast <= 0 then 
                     SET p_fast = 10;
                  end if;
                  if p_air <= 0 then 
                     SET p_air = 10;
                  end if;
               end if;
  
               SET rate_to_400 = 1;
               IF style_use = '1' then
  
                  if train_class = '5' then
    
                     select   CG30_suburb_distance_price.suburb_single_price, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0, 
      0 
       INTO p_seat,
       p_fast,
       p_soft_seat,
       p_up_bed,
       p_middle_bed,
       p_down_bed,
       p_up_soft,
       p_down_soft,
       p_up_super,
       p_down_super,
       p_up_soft_super,
       p_down_soft_super,
       p_air 
      from basic.CG30_suburb_distance_price 
      where CG30_suburb_distance_price.distance0 <= d_use and distance >= d_use
                      and CG30_suburb_distance_price.start_date <= start_train_date 
      and CG30_suburb_distance_price.stop_date >= start_train_date   
     LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -39;
                        SET SWP_Ret_Value = -39;
                        LEAVE SWL_return;
                     end if;
                  else
      
                     if train_class = '9' then
   
                        select   distance_price.fast_price 
      INTO p_total_fast 
      from basic.distance_price 
      where distance_price.distance0 <= d_total 
       and distance_price.distance >= d_total
                         and distance_price.start_date <= start_train_date 
       and distance_price.stop_date >= start_train_date   
      LIMIT 1;
                        if ROW_COUNT() = 0 then
      
                           SET ticket_price = -38;
                           SET SWP_Ret_Value = -38;
                           LEAVE SWL_return;
                        end if;
                     end if;
                     select   distance_price.seat_price, 
      distance_price.fast_price, 
      distance_price.soft_seat_price, 
      distance_price.up_bed_price, 
      distance_price.middle_bed_price, 
      distance_price.down_bed_price, 
      distance_price.up_soft_bed_price, 
      distance_price.down_soft_bed_price, 
      distance_price.up_super_price, 
      distance_price.down_super_price, 
      distance_price.up_soft_super_price, 
      distance_price.down_soft_super_price, 
      distance_price.air_condition_price 
      INTO p_seat,
      p_fast,
      p_soft_seat,
      p_up_bed,
      p_middle_bed,
      p_down_bed,
      p_up_soft,
      p_down_soft,
                      p_up_super,
      p_down_super,
      p_up_soft_super,
      p_down_soft_super,
      p_air 
      from basic.distance_price 
      where distance_price.distance0 <= d_use 
      and distance_price.distance >= d_use
                      and distance_price.start_date <= start_train_date 
      and distance_price.stop_date >= start_train_date   
      LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -40;
                        SET SWP_Ret_Value = -40;
                        LEAVE SWL_return;
                     end if;
                  end if;
      if output2=9 then
      select '250====',d_use,d_0,d_1,d_2,d_3,d_4,d_5,train_no,start_train_date;
     end if;
                  if d_use < d_0+d_1+d_2+d_3+d_4+d_5 and d_use < 400 then
     
                     if d_use <= 100 then 
                        SET rate_to_400 = 0.25;
                     else 
                        if d_use <= 200 then 
                           SET rate_to_400 = 0.50;
                        else 
                           if d_use <= 300 then 
                              SET rate_to_400 = 0.75;
                           end if;
                        end if;
                     end if;
                     select   CAST(price_rate_400.rate_to_400 AS DECIMAL(4,3)) 
      INTO rate_to_400 
      from basic.price_rate_400 
      where price_rate_400.train_no = train_no
                      and price_rate_400.distance0 <= d_use and price_rate_400.distance >= d_use
                      and price_rate_400.start_date <= start_train_date 
      and price_rate_400.stop_date >= start_train_date   
      LIMIT 1;
                  end if;
                  if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
                     select   distance_price.fast_price 
      INTO p_fast 
      from basic.distance_price 
      where distance_price.distance0 <= d_use -dd_use 
      and distance_price.distance >= d_use -dd_use
                      and distance_price.start_date <= start_train_date 
      and distance_price.stop_date >= start_train_date   
     LIMIT 1;
                     select   distance_price.fast_price 
      INTO pp_fast 
      from basic.distance_price 
      where distance_price.distance0 <= dd_use 
      and distance_price.distance >= dd_use
                      and distance_price.start_date <= start_train_date 
      and distance_price.stop_date >= start_train_date   
     LIMIT 1;
                  end if;
               end if;
  
               IF style_use in('4','5','6') then
  
                  if train_class = '9' then
   
                     select   IFNULL(local_distance_price.fast_price,0), 
      IFNULL(local_distance_price.new_fast,0) 
      INTO p_total_fast,
      p_new_total_fast 
      from basic.local_distance_price 
      where local_distance_price.distance0 <= d_total+900 
      and local_distance_price.distance >= d_total+900
                      and local_distance_price.start_date <= start_train_date 
      and local_distance_price.stop_date >= start_train_date   
      LIMIT 1;
                     if ROW_COUNT() = 0 then
     
                        SET ticket_price = -49;
                        SET SWP_Ret_Value = -49;
                        LEAVE SWL_return;
                     end if;
                  end if;
                  select   local_distance_price.seat_price, 
     local_distance_price.fast_price, 
     local_distance_price.soft_seat_price, 
     local_distance_price.up_bed_price, 
     local_distance_price.middle_bed_price, 
     local_distance_price.down_bed_price, 
     local_distance_price.up_soft_bed_price, 
     local_distance_price.down_soft_bed_price, 
     local_distance_price.up_super_price, 
     local_distance_price.down_super_price, 
     local_distance_price.up_soft_super_price, 
     local_distance_price.down_soft_super_price, 
     local_distance_price.air_condition_price, 
     IFNULL(local_distance_price.new_seat,0), 
     IFNULL(local_distance_price.new_fast,0), 
     IFNULL(local_distance_price.new_soft_seat,0), 
     IFNULL(local_distance_price.new_up_bed,0), 
     IFNULL(local_distance_price.new_middle_bed,0), 
     IFNULL(local_distance_price.new_down_bed,0), 
     IFNULL(local_distance_price.new_up_soft_bed,0), 
     IFNULL(local_distance_price.new_down_soft_bed,0), 
     IFNULL(local_distance_price.new_up_super,0), 
     IFNULL(local_distance_price.new_down_super,0), 
     IFNULL(local_distance_price.new_up_soft_super,0), 
     IFNULL(local_distance_price.new_down_soft_super,0), 
     IFNULL(local_distance_price.new_air_condition,0), 
     IFNULL(local_distance_price.new_double_soft_seat,0), 
     IFNULL(local_distance_price.new_double_bed,0), 
     IFNULL(local_distance_price.new_double_fast,0), 
     IFNULL(local_distance_price.new_double_air,0) 
      INTO p_seat,
     p_fast,
     p_soft_seat,
     p_up_bed,
     p_middle_bed,
     p_down_bed,
     p_up_soft,
     p_down_soft,
                   p_up_super,
     p_down_super,
     p_up_soft_super,
     p_down_soft_super,
     p_air,
                   p_new_seat,
     p_new_fast,
     p_new_soft_seat,
     p_new_up_bed,
     p_new_middle_bed,
                   p_new_down_bed,
     p_new_up_soft,
     p_new_down_soft,
     p_new_up_super,
     p_new_down_super,
                   p_new_up_soft_super,
     p_new_down_soft_super,
     p_new_air,
     p_new_double_seat,
                   p_new_double_bed,
     p_new_double_fast,
     p_new_double_air 
      from basic.local_distance_price 
      where local_distance_price.belong_line = line_use
                   and local_distance_price.distance0 <= d_use 
     and local_distance_price.distance >= d_use
                   and local_distance_price.start_date <= start_train_date 
     and local_distance_price.stop_date >= start_train_date   
      LIMIT 1;
                  if ROW_COUNT() = 0 then
    
                     SET ticket_price = -50;
                     SET SWP_Ret_Value = -50;
                     LEAVE SWL_return;
                  end if;
                  if d_use = d_0+d_1+d_2+d_3+d_4+d_5 and d_use < 400 and style_use = '4'
                  and line_use not in(145,146,147,148,149) then
    
                     select   local_distance_price.up_bed_price, 
       local_distance_price.middle_bed_price, 
       local_distance_price.down_bed_price, 
       local_distance_price.up_soft_bed_price, 
       local_distance_price.down_soft_bed_price, 
       local_distance_price.up_super_price, 
       local_distance_price.down_super_price, 
       local_distance_price.up_soft_super_price, 
       local_distance_price.down_soft_super_price, 
       IFNULL(local_distance_price.new_up_bed,0), 
       IFNULL(local_distance_price.new_middle_bed,0), 
       IFNULL(local_distance_price.new_down_bed,0), 
       IFNULL(local_distance_price.new_up_soft_bed,0), 
       IFNULL(local_distance_price.new_down_soft_bed,0), 
       IFNULL(local_distance_price.new_up_super,0), 
       IFNULL(local_distance_price.new_down_super,0), 
       IFNULL(local_distance_price.new_up_soft_super,0), 
       IFNULL(local_distance_price.new_down_soft_super,0), 
       IFNULL(local_distance_price.new_double_bed,0) 
     INTO p_up_bed,
      p_middle_bed,
      p_down_bed,
      p_up_soft,
      p_down_soft,
      p_up_super,
      p_down_super,
                      p_up_soft_super,
      p_down_soft_super,
      p_new_up_bed,
      p_new_middle_bed,
                      p_new_down_bed,
      p_new_up_soft,
      p_new_down_soft,
      p_new_up_super,
      p_new_down_super,
                      p_new_up_soft_super,
      p_new_down_soft_super,
      p_new_double_bed 
      from basic.local_distance_price 
      where local_distance_price.belong_line = line_use
                      and local_distance_price.distance0 <= 400 
      and local_distance_price.distance >= 400
                      and local_distance_price.start_date <= start_train_date 
      and local_distance_price.stop_date >= start_train_date   
     LIMIT 1;
                     if ROW_COUNT() = 0 then
      
                        SET ticket_price = -55;
                        SET SWP_Ret_Value = -55;
                        LEAVE SWL_return;
                     end if;
                  end if;
                  if train_class = '9' and dd_use > 0 and dd_use < d_use then
    
                     select   local_distance_price.fast_price, 
      IFNULL(local_distance_price.new_fast,0), 
      IFNULL(local_distance_price.new_double_fast,0) 
     INTO p_fast,
      p_new_fast,
      p_new_double_fast 
      from basic.local_distance_price 
      where local_distance_price.belong_line = line_use
                      and local_distance_price.distance0 <= d_use -dd_use 
      and local_distance_price.distance >= d_use -dd_use
                      and local_distance_price.start_date <= start_train_date 
      and local_distance_price.stop_date >= start_train_date   
     LIMIT 1;
                     select   local_distance_price.fast_price, 
      IFNULL(local_distance_price.new_fast,0), 
      IFNULL(local_distance_price.new_double_fast,0) 
     INTO pp_fast,
      pp_new_fast,
      pp_new_double_fast 
      from basic.local_distance_price 
      where local_distance_price.belong_line = line_use
                      and local_distance_price.distance0 <= d_use 
      and local_distance_price.distance >= d_use
                      and local_distance_price.start_date <= start_train_date 
      and local_distance_price.stop_date >= start_train_date   
     LIMIT 1;
                     SET pp_fast = pp_fast -p_fast;
                     SET pp_new_fast = pp_new_fast -p_new_fast;
                     SET pp_new_double_fast = pp_new_double_fast -p_new_double_fast;
                  end if;
               end if;

               IF style_use <= '6' then
                  BEGIN
           SET p_float_new = 0;
                     LOCAL_NEW_TYPE:loop
                     
                     If gz_version <= 1 then
    
                        SET p_basic_fast = 0;
                        if train_class <> '9' then 
       
                           SET p_basic_fast = round(p_fast*train_class_rate*student*child*half*bed_only*home*free,0);
                        end if;
                        if train_class = '9' then
                           SET p_basic_fast = round((p_fast*train_class1_rate+pp_fast*train_class2_rate)*student*child*half*bed_only*home*free,0);
                        end if;
                        SET p_basic_seat = round((p_seat*s_seat1*student+p_soft_seat*s_seat2)*child*half*bed_only -p_seat*(2 -home -free),0);
                        SET p_basic_air = round(((cast(seat_feature as SIGNED INTEGER))%2)*p_air*student*child*half*(bed_only+small_child)*home*free,0);
      
      
                        SET p_basic_bed = p_up_bed*s_u+p_middle_bed*s_m+p_down_bed*s_d+p_up_super*s_hu+p_down_super*s_hd+p_up_soft*s_su+p_down_soft*s_sd+p_up_soft_super*s_shu+p_down_soft_super*s_shd;
      
                        SET p_basic_bed = round(half*round(p_basic_bed*rate_to_400,-1),0) -s_seat2*s_bed*round(p_middle_bed*rate_to_400,-1)*(1 -free);
      
                        if (times = 0 and d_seat < d_bed) or style_use in('5','6') then 
                           SET p_basic_bed = 0;
                        end if;
      
                        if times = -1 then 
                           SET p_basic_seat = 0;
                           SET p_basic_fast = 0;
                           SET p_basic_air = 0;
                        end if;
      
                        if style_use = '1' and seat_type_code in('9','A') then
                           SET p_basic_fast = 2*p_basic_fast;
                           SET p_basic_air = 2*p_basic_air;
                           SET p_basic_seat = 2*p_basic_seat;
                           SET p_basic_bed = 2*p_basic_bed;
                        end if;
      
                        if new_type = '2' then 
                           SET p_float_new = p_float_new+p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed;
                        end if;
                        if new_type <> '2' and seat_type_code in('9','A') and style_use in('4','5','6') then
      
                           SET new_type = '2';
                           SET p_float_new = p_float_new -2*(p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed);
                           SET p_soft_seat = p_new_double_seat;
                           SET p_down_soft_super = p_new_double_bed;
                           SET p_fast = p_new_double_fast;
                           SET pp_fast = pp_new_double_fast;
                           SET p_air = p_new_double_air;
                           iterate LOCAL_NEW_TYPE;
                        end if;
      
                        if new_type = '1' and seat_type_code <= '6' and (style_use = '4' or style_use = '5' or style_use = '6') then
      
                           SET new_type = '2';
                           SET p_float_new = p_float_new -(p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed);
                           SET p_seat = p_new_seat;
                           SET p_fast = p_new_fast;
                           SET pp_fast = pp_new_fast;
                           SET p_soft_seat = p_new_soft_seat;
                           SET p_up_bed = p_new_up_bed;
                           SET p_middle_bed = p_new_middle_bed;
                           SET p_down_bed = p_new_down_bed;
                           SET p_up_soft = p_new_up_soft;
                           SET p_down_soft = p_new_down_soft;
                           SET p_up_super = p_new_up_super;
                           SET p_down_super = p_new_down_super;
                           SET p_up_soft_super = p_new_up_soft_super;
                           SET p_down_soft_super = p_new_down_soft_super;
                           SET p_air = p_new_air;
                           iterate LOCAL_NEW_TYPE;
                        end if;
                     end if;
          leave LOCAL_NEW_TYPE;
           end loop LOCAL_NEW_TYPE;
   
                     If special_visa = 1 then
    
                        SET p_basic_fast_0 = 0;
                        if train_class <> '9' then
                           SET p_basic_fast_0 = round(p_fast*train_class_rate*student*child*half*home*free,0);
                        end if;
                        if train_class = '9' then
                           SET p_basic_fast_0 = round((p_fast*train_class1_rate+pp_fast*train_class2_rate)*student*child*half*home*free,0);
                        end if;
                        SET p_basic_seat_0 = round((p_seat*s_seat1*student+p_soft_seat*s_seat2)*child*half -p_seat*(2 -home -free),0);
                        SET p_basic_air_0 = round(((cast(seat_feature as SIGNED INTEGER))%2)*p_air*student*child*half*(1+small_child)*home*free,0);
                     end if;
    
    

                     SET p_float = 0;
                     if rtrim(rate_use) = 'g' then    
                        SET rate = 1;
                     else 
      if  trim(rate_use)='' then
       set rate_use='0';
      end if;
                        SET rate = CAST(rate_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_a_use) = 'g' then 
                        SET rate_a = 1;
                     else 
      if  trim(rate_a_use)='' then
       set rate_a_use='0';
      end if;
                        SET rate_a = CAST(rate_a_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_aa_use) = 'g' then 
                        SET rate_aa = 1;
                     else 
      if  trim(rate_aa_use)='' then
       set rate_aa_use='0';
      end if;
                        SET rate_aa = CAST(rate_aa_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_seat_use) = 'g' then 
                        SET rate_seat = 1;
                     else 
      if  trim(rate_seat_use)='' then
       set rate_seat_use='0';
      end if;
                        SET rate_seat = CAST(rate_seat_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_seat_a_use) = 'g' then 
                        SET rate_seat_a = 1;
                     else 
      if  trim(rate_seat_a_use)='' then
       set rate_seat_a_use='0';
      end if;
                        SET rate_seat_a = CAST(rate_seat_a_use AS DECIMAL(4,3))+1;
                     end if;
                     if rtrim(rate_seat_aa_use) = 'g' then 
                        SET rate_seat_aa = 1;
                     else 
      if  trim(rate_seat_aa_use)='' then
       set rate_seat_aa_use='0';
      end if;
                        SET rate_seat_aa = CAST(rate_seat_aa_use AS DECIMAL(4,3))+1;
                     end if;
                     IF rate <> 1 then
    
      
                        if not (d_use <= 40 and style_use = '0') then
      
                           if train_class <> '9' then
                              SET p_float_fast = round((round(round(round(p_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_fast)*train_class_rate*student*child*half*bed_only*home*free,0);
                           end if;
                           if train_class = '9' then
                              SET p_float_fast = round(((round(round(round(p_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_fast)*train_class1_rate+(round(round(round(pp_fast*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1)
                              -pp_fast)*train_class2_rate)*student*child*half*bed_only*home*free,0);
                           end if;
                        else
                           SET p_float_fast = 0;
                        end if;
      
      if trim(seat_feature) ='' then
       set seat_feature='0';
      end if;
                        SET p_float_air = cast(seat_feature as SIGNED INTEGER)%2*p_air;
                        SET p_float_air = round((round(round(round(p_float_air*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_float_air)*student*child*half*(bed_only+small_child)*home*free,0);
                        if train_class = '5' then
                           SET p_float_seat = round(round(round(p_seat*rate_seat,0)*rate_seat_a,0)*rate_seat_aa,0) -p_seat;
                        else
                           SET p_float_seat = round(round(round(p_seat*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_seat;
                        end if;
      
      
                        SET p_float_seat = round(cast(s_seat1 as signed)*p_float_seat*student*child*half*bed_only+s_seat2*(round(round(round(p_soft_seat*rate_seat,-1)*rate_seat_a,-1)*rate_seat_aa,-1) -p_soft_seat)*child*half*bed_only -p_float_seat*(2 -home -free),0);
                        SET p_float_bed =(p_up_bed*s_u+p_middle_bed*s_m+p_down_bed*s_d+p_up_super*s_hu+p_down_super*s_hd)*free+p_up_soft*s_su+p_down_soft*s_sd+p_up_soft_super*s_shu+p_down_soft_super*s_shd;
      
                        SET p_float_bed = round((round(round(round(round(p_float_bed*rate,-1)*rate_a,-1)*rate_aa,-1)*rate_to_400,-1)
                        -round(p_float_bed*rate_to_400,-1))*half
                        -s_seat2*s_bed*(round(round(round(round(p_middle_bed*rate,-1)*rate_a,-1)*rate_aa,-1)*rate_to_400,-1)
                        -round(p_middle_bed*rate_to_400,-1))*(1 -free),0);
      
                        if style_use = '1' and seat_type_code in('9','A') then
      
                           if train_class <> '9' then
        
                              SET p_float_fast = round((round(round(round(p_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                              -1)
                              -2*p_fast)*train_class_rate*half,0);
                           end if;
                           if train_class = '9' then
        
                              SET p_float_fast = round(((round(round(round(p_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                              -1)
                              -2*p_fast)*train_class1_rate+(round(round(round(pp_fast*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,
                              -1)
                              -2*pp_fast)*train_class2_rate)*half,0);
                           end if;
         if trim(seat_feature) ='' then
        set seat_feature='0';
       end if;
                           SET p_float_air = cast(seat_feature as SIGNED INTEGER)%2*p_air;
                           SET p_float_air = round((round(round(round(p_float_air*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,-1) -2*p_float_air)*half,0);
                           SET p_float_seat = round((round(round(round(p_soft_seat*rate_seat,-1)*2*rate_seat_a,-1)*rate_seat_aa,-1) -2*p_soft_seat)*half,0);
                           SET p_float_bed = round((round(round(round(round(p_down_soft_super*rate,-1)*rate_a,-1)*rate_aa,
                           -1)*rate_to_400,-1)*2
                           -2*round(p_down_soft_super*rate_to_400,-1))*s_shd*half,0);
                        end if;
      
                        if (times = 0 and d_seat < d_bed) or style_use in('5','6') then 
                           SET p_float_bed = 0;
                        end if;
      
                        if times = -1 then 
                           SET p_float_seat = 0;
                           SET p_float_fast = 0;
                           SET p_float_air = 0;
                        end if;
      
                        SET p_float = p_float_seat+p_float_fast+p_float_bed+p_float_air;
                     end if;
                     if gz_version <= 1 then
      if output2=9 then
       select '201===',p_basic_seat,p_basic_fast,p_basic_air,p_basic_bed,p_float_new;
      end if;
                        SET p_basic = p_basic_seat+p_basic_fast+p_basic_air+p_basic_bed
                        -p_float_new;
                        SET p_float = p_float+p_float_new;
      
                        if p_float IS NULL then 
                           SET p_float = 0;
                        end if;
                        if p_float <= 0 or service_type < '1' or train_class = '5' then
                           SET p_basic = p_basic+p_float;
                        else 
                           if (gz_version = 1 or gz_version = 0 and style_use = '0')
                           and seat_type_code not in('7','8')
                           and seat_type_code < 'D' then
      
                              SET p_basic = p_basic+p_float;
                              SET gz_version = gz_version+2;
                              if rtrim(rate0) = 'x' then
                                 SET rate_use = rate_x0;
                                 SET rate_seat_use = rate_seat_x0;
                                 SET rate_a_use = rate_a_x0;
                                 SET rate_seat_a_use = rate_seat_a_x0;
                                 SET rate_aa_use = rate_a0;
                                 SET rate_seat_aa_use = rate_seat_a0;
                              else 
                                 if rtrim(rate_a0) = 'x' then
                                    SET rate_use = rate0;
                                    SET rate_seat_use = rate_seat0;
                                    SET rate_a_use = rate_x0;
                                    SET rate_seat_a_use = rate_seat_x0;
                                    SET rate_aa_use = rate_a_x0;
                                    SET rate_seat_aa_use = rate_seat_a_x0;
                                 else
                                    SET rate_use = rate0;
                                    SET rate_seat_use = rate_seat0;
                                    SET rate_a_use = rate_a0;
                                    SET rate_seat_a_use = rate_seat_a0;
                                    SET rate_aa_use = '0';
                                    SET rate_seat_aa_use = '0';
                                 end if;
                              end if;
                              if style_use <> '0' then 
                                 SET style_use = '1';
                              end if; 
                              ITERATE GZ_VERSION_AGAIN;
                           else 
                              SET p_float_total = p_float_total+p_float;
                           end if;
                        end if;
    
                     else 
                        SET p_basic = p_basic -p_float;
                        SET gz_version = gz_version -2;
                        SET p_float_total = p_float_total+p_float;
                     end if;
                  END;
               end if;
        LEAVE GZ_VERSION_AGAIN;
        END LOOP  GZ_VERSION_AGAIN     ;

               if style_use in('7','8','9') then
                  BEGIN
    
                     SET p_basic = 0;
                     SET p_basic_seat = 0;
                     SET p_fast = 0;
                     SET p_000 = 0;
                     SET seat_type0 = seat_type_code;
                     if style_use in('8','9') and s_bed = 1 then 
                        SET seat_type0 = CAST(s_seat1+2*s_seat2 AS char(1));
                     end if;
     
    
 
                     SET p_p_bed_only = 1;
                     BED_ONLY_AGAIN: LOOP
   
                        select max(CG30_p_p_price.price),
       max(CG30_p_p_price.service_cost)
       into p_basic,p_000
                        from basic.CG30_p_p_price
                        where CG30_p_p_price.train_no = train_no 
       and CG30_p_p_price.belong_line = line_use
                         and CG30_p_p_price.from_station_name = from_station_name
                         and CG30_p_p_price.to_station_name = to_station_name
                         and CG30_p_p_price.start_date <= start_train_date 
       and CG30_p_p_price.stop_date >= start_train_date
                         and CG30_p_p_price.ticket_type & ticket_type_power = ticket_type_power
                         and CG30_p_p_price.seat_type_code = seat_type0
                         and (CG30_p_p_price.bed_level = bed_level or s_bed = 0) 
      LIMIT 1;
 
 
     
 
                        if p_p_bed_only = 1 and special_visa = 1 and p_basic IS NOT NULL then
    
                           SET p_p_bed_only = 2;
                           SET seat_type0 = CAST(s_seat1+2*s_seat2 AS char(1));
                           SET p_basic_tmp = p_basic;
                           SET p_000_tmp = p_000;
                           ITERATE BED_ONLY_AGAIN;
                        end if;
                        LEAVE BED_ONLY_AGAIN;
                     END LOOP BED_ONLY_AGAIN;
                     if p_p_bed_only = 2 then 
                        SET p_basic = p_basic_tmp -p_basic;
                        SET p_000 = p_000_tmp -p_000;
                     end if;
                     if p_basic IS NULL and (ticket_type not in(5,6,9)
                     or ticket_type = 5 and (s_seat2 = 1 and special_visa = 2)
                     or ticket_type = 6 and (s_seat1 = 1 and s_bed = 1 or s_seat2 = 1
                     or seat_type_code in('7','8') or seat_type_code >= 'D')) then
    
                        SET ticket_price = -60;
                        SET SWP_Ret_Value = -60;
                        LEAVE SWL_return;
                     end if;
                     SET p_float_total = p_float_total+IFNULL(p_000,0);
                     SET p_basic = IFNULL(p_basic,0) -IFNULL(p_000,0);
                     if times > -1 and p_basic > 0 then 
                        SET p_p_time = times;
                     end if;
                  END;
               end if;
               
  
            if relay_ticket_type < 9 then
  
               if style_use in('7','8','9') or s_seat1 = 0 then
                  select   distance_price.seat_price*student*child*half, 
      distance_price.fast_price 
      INTO p_basic_seat,
     p_fast 
      from basic.distance_price 
      where distance_price.distance0 <= d_use
                   and distance_price.distance >= d_use
                   and distance_price.start_date <= start_train_date
                   and distance_price.stop_date >= start_train_date   
      LIMIT 1;
               end if;
               if train_class <> '9' then
    
                  SET train_class_level = train_class_rate;
                  if train_class_level > relay_ticket_type then
                     SET train_class_level = relay_ticket_type;
                  end if;
                  SET p_fast = p_fast*train_class_level;
               end if;
               if train_class = '9' then
    
                  if train_class1 <> '9' then
      
                     SET train_class_level = train_class1_rate;
                     if train_class_level > relay_ticket_type then
                        SET train_class_level = relay_ticket_type;
                     end if;
                     SET p_fast = p_fast*train_class_level;
                  end if;
                  if train_class2 <> '9' then
      
                     SET train_class_level = train_class2_rate;
                     if train_class_level > relay_ticket_type then
                        SET train_class_level = relay_ticket_type;
                     end if;
                     SET pp_fast = pp_fast*train_class_level;
                  end if;
                  SET p_fast = p_fast+pp_fast;
               end if;
               SET p_fast = round(p_fast*student*child*half,0);
            end if;
  
  
  
  
            SET times = times -1;
         END;
      END WHILE;




      if d_seat > 0 then

         SET p_tmp = p_0;
         SET d_tmp = d_seat;
         SET p_tmp_seat = p_basic_seat0;
         SET p_tmp_fast = p_relay_fast0;
         if style5 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_5/d_tmp,-1);
            SET p_5 = p_5+p_000;
            SET p_111 = round(p_tmp_seat*d_5/d_tmp,-1);
            SET p_basic_seat5 = p_basic_seat5+p_111;
            SET p_222 = round(p_tmp_fast*d_5/d_tmp,-1);
            SET p_relay_fast5 = p_relay_fast5+p_222;
            SET d_tmp = d_tmp -d_5;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style4 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_4/d_tmp,-1);
            SET p_4 = p_4+p_000;
            SET p_111 = round(p_tmp_seat*d_4/d_tmp,-1);
            SET p_basic_seat4 = p_basic_seat4+p_111;
            SET p_222 = round(p_tmp_fast*d_4/d_tmp,-1);
            SET p_relay_fast4 = p_relay_fast4+p_222;
            SET d_tmp = d_tmp -d_4;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style3 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_3/d_tmp,-1);
            SET p_3 = p_3+p_000;
            SET p_111 = round(p_tmp_seat*d_3/d_tmp,-1);
            SET p_basic_seat3 = p_basic_seat3+p_111;
            SET p_222 = round(p_tmp_fast*d_3/d_tmp,-1);
            SET p_relay_fast3 = p_relay_fast3+p_222;
            SET d_tmp = d_tmp -d_3;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style2 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_2/d_tmp,-1);
            SET p_2 = p_2+p_000;
            SET p_111 = round(p_tmp_seat*d_2/d_tmp,-1);
            SET p_basic_seat2 = p_basic_seat2+p_111;
            SET p_222 = round(p_tmp_fast*d_2/d_tmp,-1);
            SET p_relay_fast2 = p_relay_fast2+p_222;
            SET d_tmp = d_tmp -d_2;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
         if style1 = '3' and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_1/d_tmp,-1);
            SET p_1 = p_1+p_000;
            SET p_111 = round(p_tmp_seat*d_1/d_tmp,-1);
            SET p_basic_seat1 = p_basic_seat1+p_111;
            SET p_222 = round(p_tmp_fast*d_1/d_tmp,-1);
            SET p_relay_fast1 = p_relay_fast1+p_222;
            SET d_tmp = d_tmp -d_1;
            SET p_tmp = p_tmp -p_000;
            SET p_tmp_seat = p_tmp_seat -p_111;
            SET p_tmp_fast = p_tmp_fast -p_222;
         end if;
  
         if p_tmp < 0 then 
            SET p_tmp = 0;
         end if;
   if output2=9 then
     select '102===',p_0,p_tmp;
     end if;
         SET p_0 = p_tmp;
         SET p_basic_seat0 = p_tmp_seat;
         SET p_relay_fast0 = p_tmp_fast;
      end if;

      IF d_seat < d_bed then

         SET p_tmp = p_basic_bed;
         SET d_tmp = d_bed;
         if style5 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_5/d_tmp,-1);
            SET p_5 = p_5+p_000;
            SET d_tmp = d_tmp -d_5;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style4 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_4/d_tmp,-1);
            SET p_4 = p_4+p_000;
            SET d_tmp = d_tmp -d_4;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style3 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_3/d_tmp,-1);
            SET p_3 = p_3+p_000;
            SET d_tmp = d_tmp -d_3;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style2 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_2/d_tmp,-1);
            SET p_2 = p_2+p_000;
            SET d_tmp = d_tmp -d_2;
            SET p_tmp = p_tmp -p_000;
         end if;
         if style1 in('6','9') and d_tmp > 0 then
  
            SET p_000 = round(p_tmp*d_1/d_tmp,-1);
            SET p_1 = p_1+p_000;
            SET d_tmp = d_tmp -d_1;
            SET p_tmp = p_tmp -p_000;
         end if;
  
         if p_tmp < 0 then 
            SET p_tmp = 0;
         end if;
  if output2=9 then
     select '103===',p_0,p_tmp;
     end if;
         SET p_0 = p_0+p_tmp;
      end if;

   if output2=9 then
  select '1===',p_total,p_0,p_1,p_2,p_3,p_4,p_5,p_float_total;
   end if;
      SET p_total = p_0+p_1+p_2+p_3+p_4+p_5+p_float_total;

      if s_bed = 1 and p_total > 0 
        and ticket_type <> 5 
  and not exists(select 1 
          from basic.CG52_train_dir_appendix 
     where CG52_train_dir_appendix.train_no = train_no 
      and CG52_train_dir_appendix.special_flag = '6') 
      then
         SET p_bed_reserve = 100;
      else
         SET p_bed_reserve = 0;
      end if;
      SET ls_train_no_part = SUBSTRING(train_no,1,6);
      if (line1 = 145 or line1 = 146 or line1 = 147 or line1 = 148 or line1 = 149) and ls_train_no_part != '760000T126' and ls_train_no_part != '7600001216' and ls_train_no_part != '760000K352' then

         if exists(select 1 from basic.line_station
     where (line_station.belong_line = line1 
      and line_station.station_name = from_station_name
    )
            or (line_station.belong_line = 150 
     and line_station.station_name = from_station_name
       )
     )
         and exists(select 1 from basic.line_station
           where (line_station.belong_line = line1 and line_station.station_name = to_station_name)
           or (line_station.belong_line = 150 and line_station.station_name = to_station_name)) 
  then
            SET p_bed_reserve = 0;
         end if;
      end if;


      if start_train_date >= '20130101' then
         SET p_bed_reserve = p_bed_reserve*half;
      end if;


  if output2=9 then
  select '2===',p_total,p_bed_reserve;
   end if;
      SET p_total = p_total+p_bed_reserve;

      if total_distance = 0 and relay_ticket_type < 9 and special_visa = 0 then

  
  if output2=9 then
   select '3===',p_total,p_basic_seat0 ,p_basic_seat1 ,p_basic_seat2
    ,p_basic_seat3 ,p_basic_seat4 ,p_basic_seat5;
  end if;
         SET p_total = p_total
         -p_basic_seat0 -p_basic_seat1 -p_basic_seat2
         -p_basic_seat3 -p_basic_seat4 -p_basic_seat5;
         SET p_0 = p_0 -p_basic_seat0;
         SET p_1 = p_1 -p_basic_seat1;
         SET p_2 = p_2 -p_basic_seat2;
         SET p_3 = p_3 -p_basic_seat3;
         SET p_4 = p_4 -p_basic_seat4;
         SET p_5 = p_5 -p_basic_seat5;
  
         if relay_ticket_type >= 1 then
   if output2=9 then
    select '4===',p_total,p_relay_fast0 ,p_relay_fast1 ,p_relay_fast2
            ,p_relay_fast3 ,p_relay_fast4 ,p_relay_fast5;
   end if;
            SET p_total = p_total
            -p_relay_fast0 -p_relay_fast1 -p_relay_fast2
            -p_relay_fast3 -p_relay_fast4 -p_relay_fast5;
            SET p_0 = p_0 -p_relay_fast0;
            SET p_1 = p_1 -p_relay_fast1;
            SET p_2 = p_2 -p_relay_fast2;
            SET p_3 = p_3 -p_relay_fast3;
            SET p_4 = p_4 -p_relay_fast4;
            SET p_5 = p_5 -p_relay_fast5;
         end if;
         if p_0 < 0 then 
   if output2=9 then
    select '5====',p_total,p_0;
   end if;
            SET p_total = p_total -p_0;
            SET p_0 = 0;
         end if;
         if p_1 < 0 then 
   if output2=9 then
    select '6====',p_total,p_1;
   end if;
            SET p_total = p_total -p_1;
            SET p_1 = 0;
         end if;
         if p_2 < 0 then 
   if output2=9 then
    select '7====',p_total,p_2;
   end if;
            SET p_total = p_total -p_2;
            SET p_2 = 0;
         end if;
         if p_3 < 0 then 
   if output2=9 then
    select '8====',p_total,p_3;
   end if;
            SET p_total = p_total -p_3;
            SET p_3 = 0;
         end if;
         if p_4 < 0 then 
   if output2=9 then
    select '9====',p_total,p_4;
   end if;
            SET p_total = p_total -p_4;
            SET p_4 = 0;
         end if;
         if p_5 < 0 then 
   if output2=9 then
    select '10====',p_total,p_5;
   end if;
            SET p_total = p_total -p_5;
            SET p_5 = 0;
         end if;
      end if;
      SET p_relay = 0;
      SET total_base_price = 0;


      if total_distance > d_total then

  
  
         SET error_code = 0;
         SET belong_line1_relay = '0';
         SET belong_line2_relay = '0';
         SET belong_line3_relay = '0';
         SET belong_line4_relay = '0';
         SET belong_line5_relay = '0';
         CALL arith.DG50_fetch_train_special_relay(train_no,start_train_date,belong_line1_relay,belong_line2_relay,belong_line3_relay,
         belong_line4_relay,belong_line5_relay,error_code,'0');
         if error_code < 0 then
  
            SET ticket_price = error_code;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
         if (d_1 > 0 and belong_line1_relay = '0') or (d_2 > 0 and belong_line2_relay = '0')
         or (d_3 > 0 and belong_line3_relay = '0') or (d_4 > 0 and belong_line4_relay = '0')
         or (d_5 > 0 and belong_line5_relay = '0') then
  
            SET ticket_price = -80;
            SET SWP_Ret_Value = -80;
            LEAVE SWL_return;
         end if;
  
         SET p_tmp = p_total;
  
   if output2=9 then
     select '10====',p_total,p_basic_seat0 ,p_basic_seat1 ,p_basic_seat2
    ,p_basic_seat3 ,p_basic_seat4 ,p_basic_seat5;
   end if;
         SET p_total = p_total
         -p_basic_seat0 -p_basic_seat1 -p_basic_seat2
         -p_basic_seat3 -p_basic_seat4 -p_basic_seat5;
  
         if relay_ticket_type >= 1 then
   if output2=9 then
     select '11====',p_total,p_relay_fast0 ,p_relay_fast1 ,p_relay_fast2
    ,p_relay_fast3 ,p_relay_fast4 ,p_relay_fast5;
   end if;
            SET p_total = p_total
            -p_relay_fast0 -p_relay_fast1 -p_relay_fast2
            -p_relay_fast3 -p_relay_fast4 -p_relay_fast5;
         end if;
  
         select   distance_price.seat_price, 
   distance_price.fast_price 
  INTO p_seat,
   p_fast 
  from basic.distance_price 
  where distance_price.distance0 <= total_distance 
   and distance_price.distance >= total_distance
          and distance_price.start_date <= start_train_date 
  and distance_price.stop_date >= start_train_date   
  LIMIT 1;
         if ROW_COUNT() <> 1 then
  
            SET ticket_price = -81;
            SET SWP_Ret_Value = -81;
            LEAVE SWL_return;
         end if;
         SET p_base_seat = round(p_seat*student*child*half,0);
         if relay_ticket_type >= 1 then
            SET p_base_fast = round(p_fast*relay_ticket_type*student*child*half,0);
         else
            SET p_base_fast = 0;
         end if;
  
         if ticket_type not in(5,6,9) then 
            SET total_base_price = p_base_seat+p_base_fast;
         end if;
  
   if output2=9 then
     select '12====',p_total,p_base_seat;
   end if;
         SET p_total = p_total+p_base_seat;
  
         if relay_ticket_type >= 1 then 
   if output2=9 then
     select '13====',p_total,p_base_fast;
   end if;
            SET p_total = p_total+p_base_fast;
         end if;
   if output2=9 then
     select '14====',p_total,p_tmp;
   end if;
         SET p_relay = p_total -p_tmp;
      end if;
   END;
     leave PRICING_FINISH;
  end loop PRICING_FINISH;
  

   SET p_seat_total = p_float_seat0+p_seat0;
 
 
 

   if style0 in('7','8','9') then 
      SET p_seat_total = p_0;
   end if;

   SET p_paper = 10;
   if start_train_date >= '20130101' then

      if d_1+d_2+d_3+d_4+d_5 > d_seat -d_0 then
 
         if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
            SET p_paper = 5;
         end if;
      else
         if ticket_type = 6 then
  
            if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
               SET p_paper = 5;
            end if;
         else
            if paper = '0' and p_seat_total <= 50 or paper = '2' and p_seat_total <= 60 then 
               SET p_paper = 5;
            end if;
         end if;
      end if;
 
 
 
      if bed_only = 0 and small_child = 0.5 then
         SET p_paper = 0;
      else
         SET p_paper = CEIL((p_paper*s_seat1*student+p_paper*s_seat2)*child*half/5.0)*5;
      end if;
   else
      if paper = '0' and p_total <= 50 or paper = '2' and p_total <= 60 then 
         SET p_paper = 5;
      end if;
   end if;





   if total_distance = 0 
    and relay_ticket_type < 9 
 and ticket_type not in(5,6,9) 
 or special_visa = 255 
 or exists(select 1 from basic.CG52_train_dir_appendix 
  where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag = '6') 
   then
      SET p_paper = 0;
   end if;
   if ticket_type in(5,6,9) and p_total <= 10 then 
      SET p_paper = 10;
   end if;

   if special_visa = 1 then
      SET p_paper = 0;
   end if;
   if paper = '0' or paper = '2' and p_p_time = -1 or ticket_type in(5,6,9) then 
   if output2=9 then
     select '15====',p_total,p_paper;
   end if;
      SET p_total = p_total+p_paper;
   else 
      if paper = '1' then 
         SET p_paper = 0;
      else 
         if paper = '2' then

            if p_0 >= p_paper and p_p_time = 0 then 
               SET p_0 = p_0 -p_paper;
            else 
               if p_1 >= p_paper and p_p_time = 1 then 
                  SET p_1 = p_1 -p_paper;
               else 
                  if p_2 >= p_paper and p_p_time = 2 then 
                     SET p_2 = p_2 -p_paper;
                  else 
                     if p_3 >= p_paper and p_p_time = 3 then 
                        SET p_3 = p_3 -p_paper;
                     else 
                        if p_4 >= p_paper and p_p_time = 4 then 
                           SET p_4 = p_4 -p_paper;
                        else 
                           if p_5 >= p_paper and p_p_time = 5 then 
                              SET p_5 = p_5 -p_paper;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;

   SET d_relay = 0;
   if total_distance > d_total then

      SET d_relay = total_distance -d_total;
      SET d_total = total_distance;
   end if;



   SET air_condition_price = 0;
   if (ticket_type in(5,6) or (seat_type_code in('1','3','5','B','C')
       and d_total > 200 
    and (total_distance > 0 or relay_ticket_type = 9)
       )
 )
    and special_visa <> 255 
 and not exists(select 1 from basic.CG52_train_dir_appendix 
   where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag = '6')
    and special_visa <> 1 
   then

      if st_air = '0' or st_air = '2' and p_p_time = -1 or ticket_type in(5,6) then
         SET air_condition_price = 10;
      else 
         if st_air = '1' then 
            SET air_condition_price = 0;
         else 
            if st_air = '2' then
  
               SET air_condition_price = 10;
               if p_0 >= air_condition_price and p_p_time = 0 then 
                  SET p_0 = p_0 -air_condition_price;
               else 
                  if p_1 >= air_condition_price and p_p_time = 1 then 
                     SET p_1 = p_1 -air_condition_price;
                  else 
                     if p_2 >= air_condition_price and p_p_time = 2 then 
                        SET p_2 = p_2 -air_condition_price;
                     else 
                        if p_3 >= air_condition_price and p_p_time = 3 then 
                           SET p_3 = p_3 -air_condition_price;
                        else 
                           if p_4 >= air_condition_price and p_p_time = 4 then 
                              SET p_4 = p_4 -air_condition_price;
                           else 
                              if p_5 >= air_condition_price and p_p_time = 5 then 
                                 SET p_5 = p_5 -air_condition_price;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
   end if;



   if start_train_date >= '20130101' then

      SET air_condition_price = CEIL((air_condition_price*s_seat1*student+air_condition_price*s_seat2)*child*half/5.0)*5;
      if bed_only = 0 and small_child = 0.5 then
         SET air_condition_price = 0;
      end if;
   end if;
   if output2=9 then
     select '16====',p_total,air_condition_price;
   end if;
   SET p_total = p_total+air_condition_price;




   if total_base_price > 0 then 
      SET total_base_price = total_base_price+p_paper+air_condition_price;
   end if;


   if ticket_type = 9 or (preference_style in('5','6')) then
      SET p_total = 0;
      SET p_paper = 0;
      SET air_condition_price = 0;
   end if;



   if exists(select 1 from basic.CG52_train_dir_appendix 
     where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.special_flag not in('0','')) 
   then
   if output2=9 then
     select '17====',p_total,p_relay;
   end if;
      SET p_total = p_total -p_relay;
      SET basic_rate = 0;
      SET p_basic_discount = 0;
      select   IFNULL(CAST(CG40_special_rate.basic_rate AS DECIMAL(4,3)),0) 
      INTO basic_rate 
      from basic.CG40_special_rate 
      where CG40_special_rate.train_no = train_no
       and CG40_special_rate.start_date <= start_train_date 
 and CG40_special_rate.stop_date >= start_train_date
       and CG40_special_rate.seat_type_code in(seat_type_code,'z')
       and CG40_special_rate.ticket_type & ticket_type_power = ticket_type_power   
      order by CG40_special_rate.seat_type_code 
      LIMIT 1;
      if basic_rate > 0 then
   
    
         SET p_basic_discount = round(p_total*basic_rate,-1);
   if output2=9 then
     select '18====',p_total,p_basic_discount,p_relay;
   end if;
         SET p_total = p_total+p_basic_discount+p_relay;
      else
  if output2=9 then
     select '19====',p_total,p_relay;
   end if;
         SET p_total = p_total+p_relay;
      end if;
   end if;


   SET qz_add_price = 0;
   select   IFNULL(seat_type.belong_seat_type_code,"0") 
   INTO belong_seat_type_code 
   from basic.seat_type 
   WHERE seat_type.seat_type_code = seat_type_code   
   LIMIT 1;
   if (LOCATE(belong_seat_type_code,'23456') > 0 AND ticket_type <> 5 AND ticket_type <> 9 OR (special_visa = 2 and ticket_type = 5))
   and not (style0 in('7','8','9') or style1 in('7','8','9') or style2 in('7','8','9') or style3 in('7','8','9') or style4 in('7','8','9') or style5 in('7','8','9')) then

   
      SET qz_distance = 0;
      SET error_code = 0;
      CALL arith.DG50_fetch_qz_distance(train_date,train_no,start_station_no,to_station_no,qz_distance,error_code,
      0);
      if error_code < 0 then
 
         SET ticket_price = error_code;
         SET SWP_Ret_Value = ticket_price;
         LEAVE SWL_return;
      end if;
      if qz_distance > 0 then
 
         if LOCATE(belong_seat_type_code,'35') > 0 then
            SET qz_add_price = ROUND(qz_distance*1,-1);
         else 
            if LOCATE(belong_seat_type_code,'2') > 0 then
               SET qz_add_price = ROUND(qz_distance*0.9,-1);
            else 
               if LOCATE(belong_seat_type_code,'46') > 0 then
  
                  if special_visa = 2 then
                     SET qz_add_price = ROUND(qz_distance*(1.6 -1),-1);
                  else
                     SET qz_add_price = ROUND(qz_distance*1.6,-1);
                  end if;
               end if;
            end if;
         end if;
      end if;
 

      if ticket_type = 2 and LOCATE(belong_seat_type_code,'2') > 0 then 
         SET qz_add_price = qz_add_price/2;
      end if;
      if ticket_type = 2 and LOCATE(belong_seat_type_code,'46') > 0 then
         SET qz_add_price = ROUND(qz_distance*1.6,-1) -ROUND(qz_distance*0.9,-1)/2;
      end if;
      if ticket_type = 4 then 
         SET qz_add_price = qz_add_price/2;
      end if;
      if qz_add_price > 0 then
   if output2=9 then
     select '20====',p_total,p_relay;
   end if;
         SET p_total = p_total+qz_add_price;
      end if;
   end if;



   if output2=9 then
     select '21====',p_total,p_relay;
   end if;
   SET p_total = p_total -p_relay;
   SET discount = 0;
   SET discount_rate = 0;

   select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO discount_rate 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
    and DD40_price_discount.start_date <= start_train_date 
 and DD40_price_discount.stop_date >= start_train_date
    and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
    and DD40_price_discount.seat_type_code in(seat_type_code,'z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
   if discount_rate > 0 and ticket_type = 3 and s_seat1 = 1 then
      SET discount = round((p_bed+p_bed_reserve)*discount_rate,-1);
   end if;

   SET tmp_rate_z = 0.0;
   SET tmp_rate_w = 0.0;
   SET tmp_add_price = 0;
   if special_visa = 1 then

      SET p_base_seat_total = p_basic_seat5_0+p_basic_fast5_0+p_basic_air5_0+p_basic_seat4_0+p_basic_fast4_0+p_basic_air4_0+p_basic_seat3_0+p_basic_fast3_0+p_basic_air3_0+p_basic_seat2_0+p_basic_fast2_0+p_basic_air2_0+p_basic_seat1_0+p_basic_fast1_0+p_basic_air1_0+p_basic_seat0_0+p_basic_fast0_0+p_basic_air0_0;
      if seat_type_code in('3','C') then
   
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO tmp_rate_z 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
   and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('1','B','z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO tmp_rate_w 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
   and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('3','C','z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
      end if;
      if seat_type_code in('4','A','L') then
   
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO tmp_rate_z 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
   and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('2','9','K','z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
         select   IFNULL(CAST(DD40_price_discount.rate AS DECIMAL(4,3)),0) 
   INTO tmp_rate_w 
   from basic.DD40_price_discount 
   where DD40_price_discount.train_no = train_no 
   and DD40_price_discount.start_date <= start_train_date 
   and DD40_price_discount.stop_date >= start_train_date
          and DD40_price_discount.ticket_type & ticket_type_power = ticket_type_power
          and DD40_price_discount.seat_type_code in('4','A','L','z')   
   order by DD40_price_discount.seat_type_code 
   LIMIT 1;
      end if;

      SET tmp_add_price = round(p_base_seat_total*(tmp_rate_w -tmp_rate_z),-1);
   end if;

   if discount_rate <> 0 then

   
      if not(discount_rate > 0 and ticket_type = 3 and s_seat1 = 1) then
 
         SET discount = round(p_total*discount_rate,-1);
      end if;  
  
      if discount_rate < 0 and ticket_type = 3 and s_seat1 = 1 then
         SET discount = round((p_bed+p_bed_reserve)*discount_rate,-1)+round((p_total -p_bed -p_bed_reserve)*discount_rate,-1);
      end if;
   end if;
   if output2=9 then
     select '22====',p_total,discount,p_relay,tmp_add_price;
   end if;
   SET p_total = p_total+discount+p_relay+tmp_add_price;








   if preference_rate <> 0 then

      SET preference_price = round(p_total*(1+preference_rate),-1) -p_total;
   end if;
   SET ticket_price_obtion = p_total; 
   if output2=9 then
     select '23====',ticket_price_obtion,preference_price;
   end if;
   SET p_total = ticket_price_obtion+preference_price;




   if sleeper_style = 'E' then
      SET preference_word = 'ÕÛ';
   end if;
   if preference_style = '6' then
      SET preference_word = 'ÓÅ';
   else 
      if preference_style = '5' then
         SET preference_word = 'Ôù';
      else 
         if preference_style in('1','2','3','4','7','8','9','A','B','C','D','E') and preference_rate <> 0.0 then
            SET preference_word = 'ÕÛ';
         end if;
      end if;
   end if;
   if ltrim(rtrim(preference_word)) NOT IN('','ÓÅ','Ôù') then

      select   IFNULL(DG50_discount_train_define.discount_flag,'0') 
      INTO discount_flag 
      from basic.DG50_discount_train_define 
      where DG50_discount_train_define.train_no = train_no
       and DG50_discount_train_define.start_date <= start_train_date 
  and DG50_discount_train_define.stop_date >= start_train_date
       and DG50_discount_train_define.seat_type_code in(seat_type_code,'z')
       and DG50_discount_train_define.ticket_type & ticket_type_power = ticket_type_power   
      order by DG50_discount_train_define.seat_type_code 
      LIMIT 1;
      if discount_flag = '1' then
         SET preference_word = '??';
      end if;
   end if;




   SET distance = d_total;
   SET ticket_price = p_total;
   SET belong_line1 = line1;
   SET distance1 = d_1;
   SET ticket_price1 = p_1;
   SET belong_line2 = line2;
   SET distance2 = d_2;
   SET ticket_price2 = p_2;
   SET belong_line3 = line3;
   SET distance3 = d_3;
   SET ticket_price3 = p_3;
   SET belong_line4 = line4;
   SET distance4 = d_4;
   SET ticket_price4 = p_4;
   SET belong_line5 = line5;
   SET distance5 = d_5;
   SET ticket_price5 = p_5;
   SET relay_distance = d_relay;
   SET relay_price = p_relay;
   SET addition_cost = p_paper;
   SET bed_reserve_cost = p_bed_reserve;
   SET service_cost = p_float_total+p_basic_discount;
   SET train_air_condition = 0;
   SET total_base_price = total_base_price;
   SET price1_difference = p_1_0;
   SET price2_difference = p_2_0;
   SET price3_difference = p_3_0;
   SET price4_difference = p_4_0;
   SET price5_difference = p_5_0;
   SET basic_price = p_0+service_cost+p_relay;
   SET service_cost = qz_add_price;





   if start_train_date >= '20130101' then

      if ((style0 in('1','2','3',' ') and style1 in('1','2','3',' ') and style2 in('1','2','3',' ') and style3 in('1','2','3',' ')
      and style4 in('1','2','3',' ') and style5 in('1','2','3',' '))
      or (style0 in('1','2','3',' ','0','4','5','6') and style1 in('1','2','3',' ','0','4','5','6') and style2 in('1','2','3',' ','0','4','5','6') and style3 in('1','2','3',' ','0','4','5','6') and style4 in('1','2','3',' ','0','4','5','6') and style5 in('1','2','3',' ','0','4','5','6') and (ticket_type = 1 or ticket_type = 10)))
      and ticket_type <> 9 and not (total_distance = 0 and relay_ticket_type < 9 and special_visa = 0) and not (s_seat2 = 1 and special_visa = 2) and special_visa <> 1
      and not (bed_only = 0 and small_child = 0.5) and ticket_type <> 6 then
 
         SET insurance_price = 0;
         SET insurance_price1 = 0;
         SET insurance_price2 = 0;
         SET insurance_price3 = 0;
         SET insurance_price4 = 0;
         SET insurance_price5 = 0;
         SET @SWV_Error = 0;
         CALL arith.DG60_fetch_insurance_price(train_date,start_train_date,train_no,start_station_no,to_station_no,seat_type_code,
         bed_level,ticket_type,d_total,style0,insurance_price,distance1,
         style1,insurance_price1,distance2,style2,insurance_price2,distance3,
         style3,insurance_price3,distance4,style4,insurance_price4,distance5,
         style5,insurance_price5,error_code,0);
         SET error_no = @SWV_Error;
         if error_no != 0 then
  
            SET ticket_price = -88;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
         if error_code < 0 then
  
            SET ticket_price = error_code;
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
  

         SET insurance_price =(insurance_price*s_seat1*student+insurance_price*s_seat2)*child*half*free;
         if s_seat1 = 1 then 
            SET insurance_price = insurance_price*home;
         end if;
 
  
  
  

  
         if p_float_seat0+p_seat0 < 30 then 
            SET insurance_price = CEIL(insurance_price/5.0)*5;
         end if;
  
  
         SET p_total = CEIL((p_total -insurance_price)/5.0)*5;
         SET ticket_price = CEIL((ticket_price -insurance_price)/5.0)*5;
         SET ticket_price_obtion = CEIL((ticket_price_obtion -insurance_price)/5.0)*5;
      end if;
      SET ticket_price1 = 0;
      SET ticket_price2 = 0;
      SET ticket_price3 = 0;
      SET ticket_price4 = 0;
      SET ticket_price5 = 0;
      SET relay_price = 0;
      SET service_cost = 0;
      SET train_air_condition = 0;
      SET total_base_price = 0;
      SET discount = 0;
      SET agent_fee = 0;
      SET qz_add_price = 0;
      SET basic_price = 0;

      SET basic_price = ticket_price -addition_cost -air_condition_price -bed_reserve_cost;
   end if;





   if sleeper_style = 'E' then

      SET p_total = round(p_total*sleeper_rate,-1);
      if preference_style = '0' then 
         SET preference_style = sleeper_style;
      end if;
      SET ticket_price_obtion = p_total;
      SET basic_price = p_total;
      SET ticket_price = p_total;
      SET ticket_price1 = 0;
      SET ticket_price2 = 0;
      SET ticket_price3 = 0;
      SET ticket_price4 = 0;
      SET ticket_price5 = 0;
      SET relay_price = 0;
      SET addition_cost = 0;
      SET bed_reserve_cost = 0;
      SET service_cost = 0;
      SET air_condition_price = 0;
      SET train_air_condition = 0;
      SET total_base_price = 0;
      SET discount = 0;
      SET agent_fee = 0;
      SET preference_price = 0;
      SET qz_add_price = 0;
   end if;





   if exists(select 1 from basic.CG52_train_dir_appendix 
     where CG52_train_dir_appendix.train_no = train_no 
   and CG52_train_dir_appendix.special_flag = '6') 
   then

      SET rate_exchange = '';
      SET rate_exchange_HK = 0;
      select   IFNULL(DG50_rate_exchange.rate_exchange,'') 
      INTO rate_exchange 
      from basic.DG50_rate_exchange 
      where DG50_rate_exchange.currency_code = '1'
       and DG50_rate_exchange.start_date <= DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d')
       and DG50_rate_exchange.stop_date >= DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
      SET rate_exchange_HK = CAST(rate_exchange AS DECIMAL(5,3));
 
  
      SET ticket_price = round(ticket_price*rate_exchange_HK,-1);
      SET ticket_price1 = round(ticket_price1*rate_exchange_HK,-1);
      SET ticket_price2 = round(ticket_price2*rate_exchange_HK,-1);
      SET ticket_price3 = round(ticket_price3*rate_exchange_HK,-1);
      SET ticket_price4 = round(ticket_price4*rate_exchange_HK,-1);
      SET ticket_price5 = round(ticket_price5*rate_exchange_HK,-1);
      SET relay_price = round(relay_price*rate_exchange_HK,-1);
      SET addition_cost = round(addition_cost*rate_exchange_HK,-1);
      SET bed_reserve_cost = round(bed_reserve_cost*rate_exchange_HK,-1);
      SET service_cost = round(service_cost*rate_exchange_HK,-1);
      SET air_condition_price = round(air_condition_price*rate_exchange_HK,-1);
      SET train_air_condition = round(train_air_condition*rate_exchange_HK,-1);
      SET total_base_price = round(total_base_price*rate_exchange_HK,-1);
      SET discount = round(discount*rate_exchange_HK,-1);
      SET agent_fee = round(agent_fee*rate_exchange_HK,-1);
      SET basic_price = round(basic_price*rate_exchange_HK,-1);
      SET ticket_price_obtion = round(ticket_price_obtion*rate_exchange_HK,-1);
      SET qz_add_price = round(qz_add_price*rate_exchange_HK,-1);
 
      SET p_0 = round(p_0*rate_exchange_HK,-1);
      SET p_relay = round(p_relay*rate_exchange_HK,-1);
      SET p_paper = round(p_paper*rate_exchange_HK,-1);
      SET p_bed_reserve = round(p_bed_reserve*rate_exchange_HK,-1);
      SET preference_price = ticket_price -ticket_price_obtion;

      if ticket_type = 5 and preference_style not in('5','6') then
         SET preference_price = 0;
         SET ticket_price = 20;
         SET ticket_price_obtion = 20;
         SET basic_price = 20;
      end if;
   end if;




   select   CAST(rtrim(SUBSTRING(DG50_little_dictionary.field_name,17,6)) AS DECIMAL(5,4)) 
   INTO tax_rate 
   from basic.DG50_little_dictionary 
   where DG50_little_dictionary.little_code = '06' 
    And SUBSTRING(DG50_little_dictionary.field_name,1,8) <= train_date 
 and SUBSTRING(DG50_little_dictionary.field_name,9,8) >= train_date;
   SET rowcount = ROW_COUNT();
   SET error = @SWV_Error;
   if rowcount > 0 and error = 0 then
      SET train_air_condition = round(ticket_price/tax_rate,0);
   end if;


   if output2 = 1 then
      select distance distance,
       ticket_price/10.0 price,
 d_0 d_0,
 p_0/10.0 price_0,
 distance1 d_1,
 ticket_price1/10.0 price_1,
 distance2 d_2,
 ticket_price2/10.0 price_2,
 distance3 d_3,
 ticket_price3/10.0 price_3,
 distance4 d_4,
 ticket_price4/10.0 price_4,
 distance5 d_5,
 ticket_price5/10.0 price_5,
 d_relay d_relay,
 p_relay/10.0 price_relay,
 p_paper/10.0 paper,
 air_condition_price/10.0 air_condition_price,
 p_bed_reserve/10.0 reserve,
 service_cost/10.0 service,
 new_type new,
 total_base_price/10.0 total_base_price

,discount/10.0 discount
,agent_fee/10.0 agent_fee
,ticket_price_obtion/10.0 ticket_price_obtion
,basic_price/10.0 basic_price
,preference_style preference_style
,preference_price/10.0 preference_price
,preference_rate preference_rate
,preference_word preference_word
,qz_add_price/10.0 qz_add_price;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG50_total_price`(total_distance INT
,train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,seat_feature CHAR(1)
,special_visa TINYINT UNSIGNED
,relay_ticket_type TINYINT UNSIGNED


,INOUT preference_style CHAR(1)

,INOUT preference_rate DECIMAL(4,3)
,preference_flag CHAR(1) 
,INOUT distance SMALLINT
,INOUT ticket_price SMALLINT
,INOUT belong_line1 TINYINT UNSIGNED
,INOUT distance1 SMALLINT
,INOUT ticket_price1 SMALLINT
,INOUT belong_line2 TINYINT UNSIGNED
,INOUT distance2 SMALLINT
,INOUT ticket_price2 SMALLINT
,INOUT belong_line3 TINYINT UNSIGNED
,INOUT distance3 SMALLINT
,INOUT ticket_price3 SMALLINT
,INOUT belong_line4 TINYINT UNSIGNED
,INOUT distance4 SMALLINT
,INOUT ticket_price4 SMALLINT
,INOUT belong_line5 TINYINT UNSIGNED
,INOUT distance5 SMALLINT
,INOUT ticket_price5 SMALLINT
,INOUT relay_distance SMALLINT
,INOUT relay_price SMALLINT
,INOUT addition_cost SMALLINT
,INOUT bed_reserve_cost SMALLINT
,INOUT service_cost SMALLINT
,INOUT air_condition_price SMALLINT
,INOUT train_air_condition SMALLINT
,INOUT total_base_price SMALLINT
,INOUT discount SMALLINT
,INOUT agent_fee SMALLINT
,INOUT preference_price SMALLINT
,INOUT basic_price SMALLINT

,INOUT ticket_price_obtion SMALLINT
,INOUT preference_word CHAR(2)

,INOUT qz_add_price SMALLINT
,output2 TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE old_limit SMALLINT;
   DECLARE new_limit SMALLINT;
   DECLARE current_date2 CHAR(8);
   DECLARE l_start_date CHAR(8);
   DECLARE l_stop_date CHAR(8);
   DECLARE rowcount INT;
   DECLARE is_preference CHAR(1);
   DECLARE error_code INT;
   DECLARE calculate_price_program CHAR(30);
   DECLARE ticket_type_power INT;


   DECLARE tax_rate DECIMAL(5,4);
   DECLARE error INT;
  declare v_sql varchar(1000);
  declare v_sql2 varchar(1000);
  declare call_pr_return_code smallint;
   
  DECLARE temp_preference_rate DECIMAL(4,2); 

  set temp_preference_rate=0;
   BEGIN
      SET @SWV_Error = 1;
   END;
   IF special_visa is null then
      set special_visa = 0;
   END IF;
   IF relay_ticket_type is null then
      set relay_ticket_type = 0;
   END IF;
   IF preference_style is null then
      set preference_style = '0';
   END IF;
   IF preference_rate is null then
      set preference_rate = 0;
   END IF;
   IF preference_flag is null then
      set preference_flag = '0';
   END IF;
   IF distance is null then
      set distance = 0;
   END IF;
   IF ticket_price is null then
      set ticket_price = 0;
   END IF;
   IF belong_line1 is null then
      set belong_line1 = 0;
   END IF;
   IF distance1 is null then
      set distance1 = 0;
   END IF;
   IF ticket_price1 is null then
      set ticket_price1 = 0;
   END IF;
   IF belong_line2 is null then
      set belong_line2 = 0;
   END IF;
   IF distance2 is null then
      set distance2 = 0;
   END IF;
   IF ticket_price2 is null then
      set ticket_price2 = 0;
   END IF;
   IF belong_line3 is null then
      set belong_line3 = 0;
   END IF;
   IF distance3 is null then
      set distance3 = 0;
   END IF;
   IF ticket_price3 is null then
      set ticket_price3 = 0;
   END IF;
   IF belong_line4 is null then
      set belong_line4 = 0;
   END IF;
   IF distance4 is null then
      set distance4 = 0;
   END IF;
   IF ticket_price4 is null then
      set ticket_price4 = 0;
   END IF;
   IF belong_line5 is null then
      set belong_line5 = 0;
   END IF;
   IF distance5 is null then
      set distance5 = 0;
   END IF;
   IF ticket_price5 is null then
      set ticket_price5 = 0;
   END IF;
   IF relay_distance is null then
      set relay_distance = 0;
   END IF;
   IF relay_price is null then
      set relay_price = 0;
   END IF;
   IF addition_cost is null then
      set addition_cost = 0;
   END IF;
   IF bed_reserve_cost is null then
      set bed_reserve_cost = 0;
   END IF;
   IF service_cost is null then
      set service_cost = 0;
   END IF;
   IF air_condition_price is null then
      set air_condition_price = 0;
   END IF;
   IF train_air_condition is null then
      set train_air_condition = 0;
   END IF;
   IF total_base_price is null then
      set total_base_price = 0;
   END IF;
   IF discount is null then
      set discount = 0;
   END IF;
   IF agent_fee is null then
      set agent_fee = 0;
   END IF;
   IF preference_price is null then
      set preference_price = 0;
   END IF;
   IF basic_price is null then
      set basic_price = 0;
   END IF;
   IF ticket_price_obtion is null then
      set ticket_price_obtion = 0;
   END IF;
   IF preference_word is null then
      set preference_word = '';
   END IF;
   IF qz_add_price is null then
      set qz_add_price = 0;
   END IF;
   IF output2 is null then
      set output2 = 0;
   END IF;
   SET @SWV_Error = 0;
   set transaction isolation level read COMMITTED;


   if ticket_type = 12 then
      SET ticket_type = 3;
   end if;

   if ticket_type in(10,14,15,16,31) then 
      SET ticket_type = 1;
   end if;

   SET current_date2 = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
   SET ticket_type_power = power(2,ticket_type -1);
   SET old_limit = 0;
   SET new_limit = 0;
   SET is_preference = '0';
   SET error_code = 0;

   if special_visa not in(0,1,2,3) then

      SET ticket_price = -5;
      SET SWP_Ret_Value = -5;
      LEAVE SWL_return;
   end if;

   if preference_price IS NULL then 
      SET preference_price = 0;
   end if;
 

   IF EXISTS(select 1 from information_schema.`TABLES` t where t.TABLE_SCHEMA='center' and t.TABLE_NAME='DG30_my_center') then
      BEGIN
  if output2 = 2 then
     select 'DG50_total_price:1=== exists table DG30_my_center';
  end if;
         CALCULATE:loop
         BEGIN
            SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
            select   IFNULL(old_limit,0), 
       IFNULL(new_limit,0) 
      INTO old_limit,
       new_limit 
      from center.DG50_price_cache_range;
            if ROW_COUNT() < 1 then 
               SET old_limit = 99;
               SET new_limit = 99;
            end if;
            if old_limit is null then 
               SET old_limit = 99;
            end if;
            if new_limit is null then 
               SET new_limit = 99;
            end if;
            if old_limit > new_limit then 
               SET new_limit = old_limit;
            end if;
            SET l_start_date = DATE_FORMAT(TIMESTAMPADD(DAY,old_limit,current_date2),'%Y%m%d');
            SET l_stop_date = DATE_FORMAT(TIMESTAMPADD(DAY,new_limit,current_date2),'%Y%m%d');
            if preference_style = '0' then
     if output2 = 2 then
        select 'DG50_total_price:2=== call DG50_fetch_preference';
     end if;
               CALL arith.DG50_fetch_preference(train_date,
              train_no,
              start_station_no,
              to_station_no,
              seat_type_code,
              ticket_type_power,
              is_preference,
              temp_preference_rate,
              error_code,
              0,
              call_pr_return_code);
            end if;
            if error_code < 0 then
 
               SET ticket_price = error_code;
               SET SWP_Ret_Value = ticket_price;
               LEAVE SWL_return;
            end if;
   if output2 = 2 then
    select 'DG50_total_price:3===',train_date,l_stop_date,l_start_date,total_distance,special_visa,relay_ticket_type,preference_style,is_preference;
   end if;
            if (train_date <= l_stop_date and train_date >= l_start_date)
             and (total_distance = 0 and special_visa = 0 and relay_ticket_type = 9 and preference_style = '0'
             and is_preference = '0')
      then
 
               
               select   distance, 
            ticket_price, 
            belong_line1, 
            distance1, 
            ticket_price1, 
            belong_line2, 
            distance2, 
            ticket_price2, 
            belong_line3, 
            distance3, 
            ticket_price3, 
            belong_line4, 
            distance4, 
            ticket_price4, 
            belong_line5, 
            distance5, 
            ticket_price5, 
            addition_cost, 
            bed_reserve_cost, 
            service_cost, 
            air_condition_price, 
            train_air_condition, 
            discount, agent_fee, 
            basic_price, 
            preference_word 
        INTO distance,
           ticket_price,
           belong_line1,
           distance1,
           ticket_price1,
           belong_line2,
           distance2,
           ticket_price2,
           belong_line3,
           distance3,
           ticket_price3,
           belong_line4,
           distance4,
           ticket_price4,
           belong_line5,
           distance5,
           ticket_price5,
           addition_cost,
           bed_reserve_cost,
           service_cost,
           air_condition_price,
           train_air_condition,
           discount,
           agent_fee,
           basic_price,
           preference_word 
          from DG50_price_cache 
          where train_date  = train_date 
           and train_no = train_no 
           and start_station_no = start_station_no
           and to_station_no = to_station_no 
           and seat_type_code = seat_type_code
           and bed_level = bed_level 
           and ticket_type = ticket_type 
           and seat_feature = seat_feature;
               if ticket_price > 0 then 
  
                  if output2 = 1 then
                     select distance distance,ticket_price/10.0 price
           ,distance1 d_1,ticket_price1/10.0 price_1
           ,distance2 d_2,ticket_price2/10.0 price_2
           ,distance3 d_3,ticket_price3/10.0 price_3
           ,distance4 d_4,ticket_price4/10.0 price_4
           ,distance5 d_5,ticket_price5/10.0 price_5
           ,addition_cost/10.0 paper,air_condition_price/10.0 air_condition_price
           ,bed_reserve_cost/10.0 reserve,service_cost/10.0 service
           ,discount/10.0 discount,agent_fee/10.0 agent_fee
           ,basic_price/10.0 basic_price,preference_word preference_word;
                  end if;
                  SET SWP_Ret_Value = 0;
                  LEAVE SWL_return;
               else
                  LEAVE CALCULATE;
               end if;
            end if;
         END;
     leave CALCULATE;
     end loop CALCULATE;
         SET calculate_price_program = '';
  
 
         IF EXISTS(select 1 from mysql.proc where db='arith' and type='PROCEDURE' and name='DG50_fetch_price_program') then
    if output2 = 2 then
      select 'DG50_total_price:4===call DG50_fetch_price_program',train_date,train_no,start_station_no,to_station_no,seat_type_code,bed_level,
            ticket_type,seat_feature,calculate_price_program,0,call_pr_return_code;
    end if;
            CALL arith.DG50_fetch_price_program(train_date,train_no,start_station_no,to_station_no,seat_type_code,bed_level,
            ticket_type,seat_feature,calculate_price_program,0,call_pr_return_code);
         end if;
 
 
         IF calculate_price_program = "" then
            SET calculate_price_program = "arith.CG40_fetch_price";
         ELSE
            IF EXISTS(SELECT 1 FROM mysql.proc WHERE db='arith' and type='PROCEDURE' and name=calculate_price_program) then
               SET calculate_price_program = CONCAT("arith.",rtrim(calculate_price_program));
            ELSE
               SET ticket_price = -6;
               SET SWP_Ret_Value = -6;
               LEAVE SWL_return;
            end if;
         end if;
    if output2 = 2 then
     select concat('DG50_total_price:5_1====call ',calculate_price_program);
    end if;
    
    set @preference_style = preference_style ; 
    set @preference_rate = preference_rate ;     
    set @distance = distance ; 
    set @ticket_price = ticket_price ; 
    set @belong_line1 = belong_line1 ; 
    set @distance1 = distance1 ; 
    set @ticket_price1 = ticket_price1 ; 
    set @belong_line2 = belong_line2 ; 
    set @distance2 = distance2 ; 
    set @ticket_price2 = ticket_price2 ; 
    set @belong_line3 = belong_line3 ; 
    set @distance3 = distance3 ; 
    set @ticket_price3 = ticket_price3 ; 
    set @belong_line4 = belong_line4 ; 
    set @distance4 = distance4 ; 
    set @ticket_price4 = ticket_price4 ; 
    set @belong_line5 = belong_line5 ; 
    set @distance5 = distance5 ; 
    set @ticket_price5 = ticket_price5 ; 
    set @relay_distance = relay_distance ; 
    set @relay_price = relay_price ; 
    set @addition_cost = addition_cost ; 
    set @bed_reserve_cost = bed_reserve_cost ; 
    set @service_cost = service_cost ; 
    set @air_condition_price = air_condition_price ; 
    set @train_air_condition = train_air_condition ; 
    set @total_base_price = total_base_price ; 
    set @discount = discount ; 
    set @agent_fee = agent_fee ; 
    set @preference_price = preference_price ; 
    set @basic_price = basic_price ; 
    set @ticket_price_obtion = ticket_price_obtion ; 
    set @preference_word = preference_word ; 
    set @qz_add_price = qz_add_price ; 
    set @call_pr_return_code=null;
 
     set  v_sql = concat('CALL ',calculate_price_program,'(',
      total_distance,',',
      '\'',train_date,'\',',
      '\'',train_no,'\',',
      '\'',start_station_no,'\',',
      '\'',to_station_no,'\',',
      '\'',seat_type_code,'\',',
      '\'',bed_level,'\',',
      ticket_type,',',
      '\'',seat_feature,'\',',
      special_visa,',',
      relay_ticket_type,',',
      '@preference_style,',
      '@preference_rate,',
      '\'',preference_flag,'\',',
      '@distance,',
      '@ticket_price,',
      '@belong_line1,',
      '@distance1,',
      '@ticket_price1,',
      '@belong_line2,',
      '@distance2,',
      '@ticket_price2,',
      '@belong_line3,',
      '@distance3,',
      '@ticket_price3,',
      '@belong_line4,',
      '@distance4,',
      '@ticket_price4,',
      '@belong_line5,',
      '@distance5,',
      '@ticket_price5,',
      '@relay_distance,',
      '@relay_price,',
      '@addition_cost,',
      '@bed_reserve_cost,',
      '@service_cost,',
      '@air_condition_price,',
      '@train_air_condition,',
      '@total_base_price,',
      '0,',
      '0,',
      '0,',
      '0,',
      '0,',
      '@discount,',
      '@agent_fee,',
      '@preference_price,',
      '@basic_price,',
      '@ticket_price_obtion,',
      '@preference_word,',
      '@qz_add_price,',
      output2,',',
      '@call_pr_return_code);');
     
    
    set @v_sql=v_sql;   
     if output2 = 2 then
     begin
     declare sssss varchar(2000);
     set sssss =  concat('set @preference_style ="', preference_style ,'";', 
         'set @preference_rate =', preference_rate ,';',     
         'set @distance =', distance ,';', 
         'set @ticket_price =', ticket_price ,';', 
         'set @belong_line1 =', belong_line1 ,';', 
         'set @distance1 =', distance1 ,';', 
         'set @ticket_price1 =', ticket_price1 ,';', 
         'set @belong_line2 =', belong_line2 ,';', 
         'set @distance2 =', distance2 ,';', 
         'set @ticket_price2 =', ticket_price2 ,';', 
         'set @belong_line3 =', belong_line3 ,';', 
         'set @distance3 =', distance3 ,';', 
         'set @ticket_price3 =', ticket_price3 ,';', 
         'set @belong_line4 =', belong_line4 ,';', 
         'set @distance4 =', distance4 ,';', 
         'set @ticket_price4 =', ticket_price4 ,';', 
         'set @belong_line5 =', belong_line5 ,';', 
         'set @distance5 =', distance5 ,';', 
         'set @ticket_price5 =', ticket_price5 ,';', 
         'set @relay_distance =', relay_distance ,';', 
         'set @relay_price =', relay_price ,';', 
         'set @addition_cost =', addition_cost ,';', 
         'set @bed_reserve_cost =', bed_reserve_cost ,';', 
         'set @service_cost =', service_cost ,';', 
         'set @air_condition_price =', air_condition_price ,';', 
         'set @train_air_condition =', train_air_condition ,';', 
         'set @total_base_price =', total_base_price ,';', 
         'set @discount =', discount ,';', 
         'set @agent_fee =', agent_fee ,';', 
         'set @preference_price =', preference_price ,';', 
         'set @basic_price =', basic_price ,';', 
         'set @ticket_price_obtion =', ticket_price_obtion ,';', 
         'set @preference_word ="', preference_word ,'";', 
         'set @qz_add_price =', qz_add_price ,';', 
         'set @call_pr_return_code=null;');
     select sssss;
     select concat('DG50_total_price:5_2==== ',v_sql);
     end;
     end if;
       prepare stmt_DG50_total_price from @v_sql;  
       EXECUTE stmt_DG50_total_price;      
   if output2 = 2 then 
     select concat('DG50_total_price:6===end call',calculate_price_program);
   end if;
    
   set preference_style = @preference_style ;
   set preference_rate = @preference_rate ;
   set distance = @distance ;
   set ticket_price = @ticket_price ;
   set belong_line1 = @belong_line1 ;
   set distance1 = @distance1 ;
   set ticket_price1 = @ticket_price1 ;
   set belong_line2 = @belong_line2 ;
   set distance2 = @distance2 ;
   set ticket_price2 = @ticket_price2 ;
   set belong_line3 = @belong_line3 ;
   set distance3 = @distance3 ;
   set ticket_price3 = @ticket_price3 ;
   set belong_line4 = @belong_line4 ;
   set distance4 = @distance4 ;
   set ticket_price4 = @ticket_price4 ;
   set belong_line5 = @belong_line5 ;
   set distance5 = @distance5 ;
   set ticket_price5 = @ticket_price5 ;
   set relay_distance = @relay_distance ;
   set relay_price = @relay_price ;
   set addition_cost = @addition_cost ;
   set bed_reserve_cost = @bed_reserve_cost ;
   set service_cost = @service_cost ;
   set air_condition_price = @air_condition_price ;
   set train_air_condition = @train_air_condition ;
   set total_base_price = @total_base_price ;
   set discount = @discount ;
   set agent_fee = @agent_fee ;
   set preference_price = @preference_price ;
   set basic_price = @basic_price ;
   set ticket_price_obtion = @ticket_price_obtion ;
   set preference_word = @preference_word ;
   set qz_add_price = @qz_add_price ;
   set call_pr_return_code = @call_pr_return_code ;
       deallocate prepare stmt_DG50_total_price;     
   
   set @preference_style =null;
   set @preference_rate =null;
   set @distance =null;
   set @ticket_price =null;
   set @belong_line1 =null;
   set @distance1 =null;
   set @ticket_price1 =null;
   set @belong_line2 =null;
   set @distance2 =null;
   set @ticket_price2 =null;
   set @belong_line3 =null;
   set @distance3 =null;
   set @ticket_price3 =null;
   set @belong_line4 =null;
   set @distance4 =null;
   set @ticket_price4 =null;
   set @belong_line5 =null;
   set @distance5 =null;
   set @ticket_price5 =null;
   set @relay_distance =null;
   set @relay_price =null;
   set @addition_cost =null;
   set @bed_reserve_cost =null;
   set @service_cost =null;
   set @air_condition_price =null;
   set @train_air_condition =null;
   set @total_base_price =null;
   set @discount =null;
   set @agent_fee =null;
   set @preference_price =null;
   set @basic_price =null;
   set @ticket_price_obtion =null;
   set @preference_word =null;
   set @qz_add_price =null;
   set @call_pr_return_code=null;
         if (train_date <= l_stop_date and train_date >= l_start_date)
         AND (total_distance = 0 and special_visa = 0 and relay_ticket_type = 9 and preference_style = '0') then
 
            if NOT EXISTS(SELECT 1 FROM DG50_price_cache
              WHERE DG50_price_cache.train_date = train_date 
         AND DG50_price_cache.train_no = train_no 
         and DG50_price_cache.seat_type_code = seat_type_code
               and DG50_price_cache.bed_level = bed_level 
         and DG50_price_cache.ticket_type = ticket_type 
         and DG50_price_cache.start_station_no = start_station_no
               and DG50_price_cache.to_station_no = to_station_no 
         and DG50_price_cache.seat_feature = seat_feature
               and DG50_price_cache.preference_word = preference_word 
         and DG50_price_cache.distance = distance) 
     then
               INSERT INTO DG50_price_cache values(train_date,train_no,start_station_no,to_station_no,seat_type_code,
            bed_level,ticket_type,seat_feature,distance, ticket_price,belong_line1,
            distance1,ticket_price1,belong_line2,distance2,ticket_price2,belong_line3,
            distance3,ticket_price3,belong_line4,distance4,ticket_price4,belong_line5,
            distance5,ticket_price5,addition_cost,bed_reserve_cost,service_cost,
            air_condition_price, train_air_condition,discount,agent_fee,basic_price,preference_word);
            end if;

         end if; 
 

         if ticket_price < 0 then
            SET SWP_Ret_Value = ticket_price;
            LEAVE SWL_return;
         end if;
      END;
   

   else

      SET calculate_price_program = '';
 
 
      IF EXISTS(select 1 from mysql.proc where db='arith' and type='PROCEDURE' and name='DG50_fetch_price_program') 
      then
         CALL arith.DG50_fetch_price_program(train_date,train_no,start_station_no,to_station_no,seat_type_code,bed_level,
         ticket_type,seat_feature,calculate_price_program,0,call_pr_return_code);
      end if;
 
      IF calculate_price_program = "" then
         SET calculate_price_program = "arith.CG40_fetch_price";
      ELSE
   
         IF EXISTS(select 1 from mysql.proc t where t.db='arith' and t.type='PROCEDURE' and t.name=calculate_price_program) 
  then
            SET calculate_price_program = CONCAT("arith.",rtrim(calculate_price_program));
         ELSE
            SET ticket_price = -6;
            SET SWP_Ret_Value = -6;
            LEAVE SWL_return;
         end if;
      end if;
    if output2 = 2 then
     select concat('DG50_total_price:5_2====call ',calculate_price_program);
    end if;
    
    set @preference_style = preference_style ; 
    set @preference_rate = preference_rate ;     
    set @distance = distance ; 
    set @ticket_price = ticket_price ; 
    set @belong_line1 = belong_line1 ; 
    set @distance1 = distance1 ; 
    set @ticket_price1 = ticket_price1 ; 
    set @belong_line2 = belong_line2 ; 
    set @distance2 = distance2 ; 
    set @ticket_price2 = ticket_price2 ; 
    set @belong_line3 = belong_line3 ; 
    set @distance3 = distance3 ; 
    set @ticket_price3 = ticket_price3 ; 
    set @belong_line4 = belong_line4 ; 
    set @distance4 = distance4 ; 
    set @ticket_price4 = ticket_price4 ; 
    set @belong_line5 = belong_line5 ; 
    set @distance5 = distance5 ; 
    set @ticket_price5 = ticket_price5 ; 
    set @relay_distance = relay_distance ; 
    set @relay_price = relay_price ; 
    set @addition_cost = addition_cost ; 
    set @bed_reserve_cost = bed_reserve_cost ; 
    set @service_cost = service_cost ; 
    set @air_condition_price = air_condition_price ; 
    set @train_air_condition = train_air_condition ; 
    set @total_base_price = total_base_price ; 
    set @discount = discount ; 
    set @agent_fee = agent_fee ; 
    set @preference_price = preference_price ; 
    set @basic_price = basic_price ; 
    set @ticket_price_obtion = ticket_price_obtion ; 
    set @preference_word = preference_word ; 
    set @qz_add_price = qz_add_price ; 
    set @call_pr_return_code=null;
 
     set  v_sql2 = concat('CALL ',calculate_price_program,'(',
      total_distance,',',
      '\'',train_date,'\',',
      '\'',train_no,'\',',
      '\'',start_station_no,'\',',
      '\'',to_station_no,'\',',
      '\'',seat_type_code,'\',',
      '\'',bed_level,'\',',
      ticket_type,',',
      '\'',seat_feature,'\',',
      special_visa,',',
      relay_ticket_type,',',
      '@preference_style,',
      '@preference_rate,',
      '\'',preference_flag,'\',',
      '@distance,',
      '@ticket_price,',
      '@belong_line1,',
      '@distance1,',
      '@ticket_price1,',
      '@belong_line2,',
      '@distance2,',
      '@ticket_price2,',
      '@belong_line3,',
      '@distance3,',
      '@ticket_price3,',
      '@belong_line4,',
      '@distance4,',
      '@ticket_price4,',
      '@belong_line5,',
      '@distance5,',
      '@ticket_price5,',
      '@relay_distance,',
      '@relay_price,',
      '@addition_cost,',
      '@bed_reserve_cost,',
      '@service_cost,',
      '@air_condition_price,',
      '@train_air_condition,',
      '@total_base_price,',
      '0,',
      '0,',
      '0,',
      '0,',
      '0,',
      '@discount,',
      '@agent_fee,',
      '@preference_price,',
      '@basic_price,',
      '@ticket_price_obtion,',
      '@preference_word,',
      '@qz_add_price,',
      output2,',',
      '@call_pr_return_code);');
   set @v_sql2=v_sql2;   
       prepare stmt2_DG50_total_price from @v_sql2;  
       EXECUTE stmt2_DG50_total_price;      
        
   set preference_style = @preference_style ;
   set preference_rate = @preference_rate ;
   set distance = @distance ;
   set ticket_price = @ticket_price ;
   set belong_line1 = @belong_line1 ;
   set distance1 = @distance1 ;
   set ticket_price1 = @ticket_price1 ;
   set belong_line2 = @belong_line2 ;
   set distance2 = @distance2 ;
   set ticket_price2 = @ticket_price2 ;
   set belong_line3 = @belong_line3 ;
   set distance3 = @distance3 ;
   set ticket_price3 = @ticket_price3 ;
   set belong_line4 = @belong_line4 ;
   set distance4 = @distance4 ;
   set ticket_price4 = @ticket_price4 ;
   set belong_line5 = @belong_line5 ;
   set distance5 = @distance5 ;
   set ticket_price5 = @ticket_price5 ;
   set relay_distance = @relay_distance ;
   set relay_price = @relay_price ;
   set addition_cost = @addition_cost ;
   set bed_reserve_cost = @bed_reserve_cost ;
   set service_cost = @service_cost ;
   set air_condition_price = @air_condition_price ;
   set train_air_condition = @train_air_condition ;
   set total_base_price = @total_base_price ;
   set discount = @discount ;
   set agent_fee = @agent_fee ;
   set preference_price = @preference_price ;
   set basic_price = @basic_price ;
   set ticket_price_obtion = @ticket_price_obtion ;
   set preference_word = @preference_word ;
   set qz_add_price = @qz_add_price ;
   set call_pr_return_code = @call_pr_return_code ;
       deallocate prepare stmt2_DG50_total_price;     
   
   set @preference_style =null;
   set @preference_rate =null;
   set @distance =null;
   set @ticket_price =null;
   set @belong_line1 =null;
   set @distance1 =null;
   set @ticket_price1 =null;
   set @belong_line2 =null;
   set @distance2 =null;
   set @ticket_price2 =null;
   set @belong_line3 =null;
   set @distance3 =null;
   set @ticket_price3 =null;
   set @belong_line4 =null;
   set @distance4 =null;
   set @ticket_price4 =null;
   set @belong_line5 =null;
   set @distance5 =null;
   set @ticket_price5 =null;
   set @relay_distance =null;
   set @relay_price =null;
   set @addition_cost =null;
   set @bed_reserve_cost =null;
   set @service_cost =null;
   set @air_condition_price =null;
   set @train_air_condition =null;
   set @total_base_price =null;
   set @discount =null;
   set @agent_fee =null;
   set @preference_price =null;
   set @basic_price =null;
   set @ticket_price_obtion =null;
   set @preference_word =null;
   set @qz_add_price =null;
   set @call_pr_return_code=null;
   end if;
 

   select   CAST(rtrim(SUBSTRING(field_name,17,6)) AS DECIMAL(5,4)) INTO tax_rate from basic.DG50_little_dictionary where little_code = '06' And SUBSTRING(field_name,1,8) <= train_date and SUBSTRING(field_name,9,8) >= train_date;
   SET rowcount = ROW_COUNT();
   SET error = @SWV_Error;
   if rowcount > 0 and error = 0 then
      SET train_air_condition = round(ticket_price/tax_rate,0);
 
   end if;
  if output2 = 1 then
    select distance distance,ticket_price/10.0 price
    ,distance1 d_1,ticket_price1/10.0 price_1
    ,distance2 d_2,ticket_price2/10.0 price_2
    ,distance3 d_3,ticket_price3/10.0 price_3
    ,distance4 d_4,ticket_price4/10.0 price_4
    ,distance5 d_5,ticket_price5/10.0 price_5
    ,addition_cost/10.0 paper,air_condition_price/10.0 air_condition_price
    ,bed_reserve_cost/10.0 reserve,service_cost/10.0 service
    ,discount/10.0 discount,agent_fee/10.0 agent_fee
    ,basic_price/10.0 basic_price,preference_word preference_word;
  end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG52_fetch_pdl_price`(


train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,to_station_no CHAR(2)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,INOUT ticket_price SMALLINT 
,INOUT pdl_ticket_price SMALLINT 
,INOUT preference_word CHAR(2)
,INOUT pdl_preference_rate DECIMAL(4,3) 
,INOUT error_code SMALLINT
,out_flag TINYINT UNSIGNED,INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE start_date CHAR(8);
   DECLARE stop_date CHAR(8);
   DECLARE start_train_date CHAR(8);
   DECLARE day_diff INT;
   DECLARE from_station_telecode CHAR(3);
   DECLARE to_station_telecode CHAR(3);
   DECLARE date_after INT;
   DECLARE price_code CHAR(8);
   DECLARE total_price INT;
   DECLARE child_price INT;
   DECLARE student_price INT;
   DECLARE handicapped_price INT;
   DECLARE free_price INT;
   DECLARE home_price INT;
   DECLARE half_price INT;
   DECLARE small_child_price INT;
   DECLARE group_price INT;
   DECLARE army_price INT;

   DECLARE base_total_price INT;
   DECLARE base_child_price INT;
   DECLARE base_student_price INT;
   DECLARE base_handicapped_price INT;
   DECLARE base_free_price INT;
   DECLARE base_home_price INT;
   DECLARE base_half_price INT;
   DECLARE base_small_child_price INT;
   DECLARE base_group_price INT;
   DECLARE base_army_price INT;

   DECLARE terminal_price SMALLINT;
   DECLARE base_price SMALLINT;

   DECLARE discount_msg CHAR(240);
   DECLARE fetch_error_code SMALLINT;
   DECLARE direction_flag CHAR(1);

   DECLARE start_sta_tele_tmp CHAR(3);
   DECLARE to_sta_tele_tmp CHAR(3);
   DECLARE preference_rate_tmp DECIMAL(4,2);

   DECLARE tmp_pos INT;
   DECLARE kx_flag CHAR(1);   
   DECLARE preference_price SMALLINT; 
   DECLARE dw_flag CHAR(1);   

   DECLARE from_pre_buy SMALLINT;
   DECLARE to_pre_buy SMALLINT;
   DECLARE running_style TINYINT UNSIGNED;
   DECLARE running_rule INT;
   DECLARE special_price_char CHAR(60);
   DECLARE ticket_type_power INT;
   DECLARE terminal_price_tmp SMALLINT;
   DECLARE current_date2 CHAR(8);
   DECLARE bed_level_tmp CHAR(1);
   DECLARE start_date_tmp CHAR(8);
   DECLARE stop_date_tmp CHAR(8);
   IF ticket_price is null then
      set ticket_price = 0;
   END IF;
   IF pdl_ticket_price is null then
      set pdl_ticket_price = 0;
   END IF;
   IF preference_word is null then
      set preference_word = '';
   END IF;
   IF pdl_preference_rate is null then
      set pdl_preference_rate = 0;
   END IF;
   IF error_code is null then
      set error_code = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   set transaction isolation level read COMMITTED;

   SET ticket_price = 0;
   SET preference_word = '';
   SET pdl_ticket_price = 0;
   SET pdl_preference_rate = 0;
   SET error_code = 0;
   SET direction_flag = '';
if out_flag=2 then
 select '101=========';
end if;
   select   stop_time.start_date, 
    stop_time.stop_date, 
 stop_time.day_difference, 
 stop_time.station_telecode 
   INTO start_date,
    stop_date,
 day_diff,
 from_station_telecode 
   from basic.stop_time 
   where stop_time.train_no = train_no 
    and stop_time.station_no = start_station_no
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.start_date),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,stop_time.day_difference,stop_time.stop_date),'%Y%m%d') >= train_date;

   if ROW_COUNT() = 0 then

      SET error_code = -90;
      SET SWP_Ret_Value = -90;
      LEAVE SWL_return;
   end if;
   SET start_train_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -day_diff,STR_TO_DATE(train_date,'%Y%m%d')),
   '%Y%m%d');
if out_flag=2 then
  select '102=========';
end if;
   select   stop_time.station_telecode 
   INTO to_station_telecode 
   from basic.stop_time 
   where stop_time.train_no = train_no 
   and stop_time.station_no = to_station_no;

   if ROW_COUNT() = 0 then

      SET error_code = -91;
      SET SWP_Ret_Value = -91;
      LEAVE SWL_return;
   end if;

   if bed_level not in('1','2','3') then 
      SET bed_level = '';
   end if;
if out_flag=2 then
  select '103====',train_no,start_train_date;
end if;
   select   DG52_PDL_train_price.price_code 
   INTO price_code from 
   basic.DG52_PDL_train_price 
   where DG52_PDL_train_price.train_no = train_no
    and DG52_PDL_train_price.start_date <= start_train_date 
 and DG52_PDL_train_price.stop_date >= start_train_date
    and (DG52_PDL_train_price.running_style = 1 
  or DG52_PDL_train_price.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG52_PDL_train_price.start_date,start_train_date)%DG52_PDL_train_price.running_style)) > 0);

   if ROW_COUNT() = 0 then

      SET error_code = 1;
      SET SWP_Ret_Value = 1;
      LEAVE SWL_return;
   end if;


   if exists(select 1 from basic.CG52_train_dir_appendix 
     where CG52_train_dir_appendix.train_no = train_no and CG52_train_dir_appendix.flag1 = '2') 
   then
      SET dw_flag = '1';
   else
      SET dw_flag = '0';

   end if;


   CALL arith.DG60_fetch_seg_pre_discount(train_date,start_train_date,train_no,start_station_no,from_station_telecode,
   to_station_no,to_station_telecode,price_code,seat_type_code,bed_level,
   ticket_type,discount_msg,direction_flag,fetch_error_code,kx_flag,
   0);

   if fetch_error_code < 0 then

      SET error_code = fetch_error_code;
      SET SWP_Ret_Value = error_code;
      LEAVE SWL_return;
   end if;

   if out_flag = 1 then 
      select discount_msg,direction_flag,fetch_error_code;
   end if;

   if rtrim(discount_msg) IS NULL then

      SET error_code = -94;
      SET SWP_Ret_Value = -94;
      LEAVE SWL_return;
   end if;


   SET bed_level_tmp = bed_level;
   if bed_level_tmp not in('1','2','3') then 
      SET bed_level_tmp = '0';
   end if;

   SET ticket_type_power = power(2,ticket_type -1);
   SET current_date2 = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');


   SET tmp_pos = 1;
   SET ticket_price = 0;
   SET pdl_ticket_price = 0;
   SET preference_word = '';
   SET pdl_preference_rate = 0;

   while(tmp_pos < LENGTH(rtrim(discount_msg))) DO
      SET start_sta_tele_tmp = SUBSTRING(discount_msg,tmp_pos,3);
      SET to_sta_tele_tmp = SUBSTRING(discount_msg,tmp_pos+3,3);
      SET preference_rate_tmp = CAST(SUBSTRING(discount_msg,tmp_pos+6,6) AS DECIMAL(4,2));
      if out_flag=2 then
        select '104=========',price_code,start_sta_tele_tmp,to_sta_tele_tmp,seat_type_code,bed_level,start_train_date;
      end if;
     
     
      select   DG52_PDL_terminal_price.total_price, 
        DG52_PDL_terminal_price.child_price, 
  DG52_PDL_terminal_price.student_price, 
  DG52_PDL_terminal_price.handicapped_price, 
  DG52_PDL_terminal_price.free_price, 
  DG52_PDL_terminal_price.home_price, 
  DG52_PDL_terminal_price.half_price, 
  DG52_PDL_terminal_price.small_child_price, 
  DG52_PDL_terminal_price.group_price, 
  DG52_PDL_terminal_price.army_price 
      INTO total_price,
        child_price,
  student_price,
  handicapped_price,
  free_price,
  home_price,
        half_price,
  small_child_price,
  group_price,
  army_price 
      from basic.DG52_PDL_terminal_price 
      where DG52_PDL_terminal_price.price_code = price_code
        and ((DG52_PDL_terminal_price.from_station_telecode = start_sta_tele_tmp
          and DG52_PDL_terminal_price.to_station_telecode = to_sta_tele_tmp)
         or (DG52_PDL_terminal_price.from_station_telecode = to_sta_tele_tmp
          and DG52_PDL_terminal_price.to_station_telecode = start_sta_tele_tmp))
        and DG52_PDL_terminal_price.seat_type_code = seat_type_code
        and DG52_PDL_terminal_price.bed_level = bed_level
        and DG52_PDL_terminal_price.start_date <= start_train_date
        and DG52_PDL_terminal_price.stop_date >= start_train_date limit 1;
      if ROW_COUNT() = 0 then
 
         SET error_code = -92;
 
       SET SWP_Ret_Value = -92;
         LEAVE SWL_return;
      end if;
      if out_flag=2 then
        select '105=========';
      end if;
      select   DG52_PDL_base_price.total_price, 
        DG52_PDL_base_price.child_price, 
  DG52_PDL_base_price.student_price, 
  DG52_PDL_base_price.handicapped_price, 
  DG52_PDL_base_price.free_price, 
  DG52_PDL_base_price.home_price, 
  DG52_PDL_base_price.half_price, 
  DG52_PDL_base_price.small_child_price, 
  DG52_PDL_base_price.group_price, 
  DG52_PDL_base_price.army_price 
      INTO base_total_price,
        base_child_price,
  base_student_price,
  base_handicapped_price,
        base_free_price,
  base_home_price,
  base_half_price,
  base_small_child_price,
        base_group_price,
  base_army_price 
      from basic.DG52_PDL_base_price 
      where DG52_PDL_base_price.price_code = price_code
        and ((DG52_PDL_base_price.from_station_telecode = start_sta_tele_tmp
          and DG52_PDL_base_price.to_station_telecode = to_sta_tele_tmp)
         or (DG52_PDL_base_price.from_station_telecode = to_sta_tele_tmp
          and DG52_PDL_base_price.to_station_telecode = start_sta_tele_tmp))
        and DG52_PDL_base_price.seat_type_code = seat_type_code
        and DG52_PDL_base_price.bed_level = bed_level
        and DG52_PDL_base_price.start_date <= start_train_date
        and DG52_PDL_base_price.stop_date >= start_train_date limit 1;
      if ROW_COUNT() = 0 then
 
         SET error_code = -93;
         SET SWP_Ret_Value = -93;
         LEAVE SWL_return;
      end if;
      if ticket_type > 10 then 
         SET ticket_type = 1;
      end if;
      if ticket_type = 1 then
         SET terminal_price = total_price;
         SET base_price = base_total_price;
      else 
         if ticket_type = 2 then
            SET terminal_price = child_price;
            SET base_price = base_child_price;
         else 
            if ticket_type = 3 then
               SET terminal_price = student_price;
               SET base_price = base_student_price;
            else 
               if ticket_type = 4 then
                  SET terminal_price = handicapped_price;
                  SET base_price = base_handicapped_price;
               else 
                  if ticket_type = 5 then
                     SET terminal_price = free_price;
                     SET base_price = base_free_price;
                  else 
                     if ticket_type = 6 then
                        SET terminal_price = home_price;
                        SET base_price = base_home_price;
                     else 
                        if ticket_type = 7 then
                           SET terminal_price = half_price;
                           SET base_price = base_half_price;
                        else 
                           if ticket_type = 8 then
                              SET terminal_price = small_child_price;
                              SET base_price = base_small_child_price;
                           else 
                              if ticket_type = 9 then
                                 SET terminal_price = group_price;
                                 SET base_price = base_group_price;
                              else 
                                 if ticket_type = 10 then
                                    SET terminal_price = army_price;
                                    SET base_price = base_army_price;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
      if terminal_price < base_price then 
         SET preference_word = 'ÕÛ';
      end if;
      SET ticket_price = ticket_price+terminal_price;
 

 
 

 
      if dw_flag = '1' then
 if out_flag=2 then
    select '106=========';
 end if;
         select   IFNULL(DG60_train_seg_pre_discount.from_pre_buy,0), 
   DG60_train_seg_pre_discount.to_pre_buy, 
  DG60_train_seg_pre_discount.running_style, 
  DG60_train_seg_pre_discount.running_rule, 
  DG60_train_seg_pre_discount.start_date, 
  DG60_train_seg_pre_discount.stop_date 
  INTO from_pre_buy,
   to_pre_buy,
  running_style,
  running_rule,
  start_date_tmp,
  stop_date_tmp 
  from basic.DG60_train_seg_pre_discount 
  where DG60_train_seg_pre_discount.train_no = train_no
          and DG60_train_seg_pre_discount.seat_type_code in(seat_type_code,'z')
          and DG60_train_seg_pre_discount.ticket_types & ticket_type_power = ticket_type_power
          and DG60_train_seg_pre_discount.start_date <= start_train_date 
  and DG60_train_seg_pre_discount.stop_date >= start_train_date
          and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.from_pre_buy,current_date2),'%Y%m%d') <= train_date
          and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.to_pre_buy,current_date2),'%Y%m%d') >= train_date
          and (DG60_train_seg_pre_discount.running_style = 1 or DG60_train_seg_pre_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG60_train_seg_pre_discount.start_date,start_train_date)%DG60_train_seg_pre_discount.running_style)) > 0)   
  order by DG60_train_seg_pre_discount.seat_type_code LIMIT 1;
         if ROW_COUNT() < 1 then  
  
            if preference_rate_tmp <> 0 then
               SET pdl_ticket_price = pdl_ticket_price+round(terminal_price*(1+preference_rate_tmp),-2);
            else
               SET pdl_ticket_price = pdl_ticket_price+terminal_price;
            end if;
         else
            SET special_price_char = CONCAT(SUBSTRING(start_date_tmp,3,6),SUBSTRING(stop_date_tmp,3,6),train_no,
            from_station_telecode,to_station_telecode,right(CONCAT('0000',rtrim(ltrim(CAST(from_pre_buy AS char(4))))),4),
            right(CONCAT('0000',rtrim(ltrim(CAST(to_pre_buy AS char(4))))),4),
            seat_type_code,bed_level_tmp,right(CONCAT('00',rtrim(ltrim(CAST(ticket_type AS char(2))))),2),
            right(CONCAT('00',rtrim(ltrim(CAST(running_style AS char(2))))),2),
            right(CONCAT('0000000000',rtrim(ltrim(CAST(running_rule AS char(10))))),
            10),'%');
            
            select   cast(SUBSTRING(DG50_little_dictionary.field_name,55,5) as SIGNED INTEGER) 
     INTO terminal_price_tmp 
     from basic.DG50_little_dictionary 
     where DG50_little_dictionary.little_code = 's' 
      and DG50_little_dictionary.field_name like special_price_char;
            if ROW_COUNT() < 1 then 
   
               if preference_rate_tmp <> 0 then
                  SET pdl_ticket_price = pdl_ticket_price+round(terminal_price*(1+preference_rate_tmp),-2);
               else
                  SET pdl_ticket_price = pdl_ticket_price+terminal_price;
               end if;
            else
               SET pdl_ticket_price = pdl_ticket_price+terminal_price_tmp;
            end if;
         end if;
      else
         if preference_rate_tmp <> 0 then
  
  
            SET pdl_ticket_price = pdl_ticket_price+round(terminal_price*(1+preference_rate_tmp),-1);
         else
            SET pdl_ticket_price = pdl_ticket_price+terminal_price;
         end if;
      end if;
 
 
 
 
 
      if out_flag = 1 then
         select start_sta_tele_tmp,
   to_sta_tele_tmp,
  preference_rate_tmp,
  terminal_price,
  round(terminal_price*(1+preference_rate_tmp),-1),
  kx_flag;
      end if;
      SET tmp_pos = tmp_pos+12;
   END WHILE;

   if kx_flag = '1' then

      SET preference_price = ticket_price -pdl_ticket_price;
      if ticket_type > 10 then 
         SET ticket_type = 1;
      end if;
      
      select   DG52_PDL_terminal_price.total_price, 
        DG52_PDL_terminal_price.child_price, 
  DG52_PDL_terminal_price.student_price, 
  DG52_PDL_terminal_price.handicapped_price, 
  DG52_PDL_terminal_price.free_price, 
  DG52_PDL_terminal_price.home_price, 
  DG52_PDL_terminal_price.half_price, 
  DG52_PDL_terminal_price.small_child_price, 
  DG52_PDL_terminal_price.group_price, 
  DG52_PDL_terminal_price.army_price 
      INTO total_price,
        child_price,
  student_price,
  handicapped_price,
  free_price,
  home_price,
        half_price,
  small_child_price,
  group_price,
  army_price 
      from basic.DG52_PDL_terminal_price 
      where DG52_PDL_terminal_price.price_code = price_code
        and ((DG52_PDL_terminal_price.from_station_telecode = from_station_telecode
          and DG52_PDL_terminal_price.to_station_telecode = to_station_telecode)
         or (DG52_PDL_terminal_price.from_station_telecode = to_station_telecode
          and DG52_PDL_terminal_price.to_station_telecode = from_station_telecode))
        and DG52_PDL_terminal_price.seat_type_code = seat_type_code
        and DG52_PDL_terminal_price.bed_level = bed_level
        and DG52_PDL_terminal_price.start_date <= start_train_date
        and DG52_PDL_terminal_price.stop_date >= start_train_date;
      if ROW_COUNT() = 0 then
 
         SET error_code = -96;
         SET SWP_Ret_Value = -96;
         LEAVE SWL_return;
      end if;
      if ticket_type = 1 then
         SET ticket_price = total_price;
      else 
         if ticket_type = 2 then
            SET ticket_price = child_price;
         else 
            if ticket_type = 3 then
               SET ticket_price = student_price;
            else 
               if ticket_type = 4 then
                  SET ticket_price = handicapped_price;
               else 
                  if ticket_type = 5 then
                     SET ticket_price = free_price;
                  else 
                     if ticket_type = 6 then
                        SET ticket_price = home_price;
                     else 
                        if ticket_type = 7 then
                           SET ticket_price = half_price;
                        else 
                           if ticket_type = 8 then
                              SET ticket_price = small_child_price;
                           else 
                              if ticket_type = 9 then
                                 SET ticket_price = group_price;
                              else 
                                 if ticket_type = 10 then
                                    SET ticket_price = army_price;
                                 end if;
                              end if;
                           end if;
                        end if;
                     end if;
                  end if;
               end if;
            end if;
         end if;
      end if;
      SET pdl_ticket_price = ticket_price -preference_price;
      if pdl_ticket_price%10 = 5 and preference_price <> 0 then
         SET pdl_ticket_price = pdl_ticket_price -5;
         SET preference_price = preference_price+5;
      end if;
   end if;

   if ticket_price <> 0 then
      SET pdl_preference_rate = round((pdl_ticket_price -ticket_price)/CAST(ticket_price AS DECIMAL(6,1)),
      2);
   end if;

   if pdl_ticket_price < ticket_price then 
      SET preference_word = 'ÕÛ';
   end if;

   if out_flag = 1 then
      select ticket_price ,pdl_ticket_price,preference_word ,pdl_preference_rate,error_code;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG60_fetch_dw_rate`(start_train_date CHAR(8)
,train_code CHAR(8)
,start_station_name CHAR(10)
,end_station_name CHAR(10)
,seat_type_code CHAR(1)
,preference_style CHAR(1)
,INOUT dw_preference_rate DECIMAL(4,3) 
,INOUT dw_preference_word CHAR(2)
,INOUT dw_error_code SMALLINT
,out_flag TINYINT UNSIGNED)
SWL_return:
BEGIN
   IF dw_preference_rate is null then
      set dw_preference_rate = 0;
   END IF;
   IF dw_preference_word is null then
      set dw_preference_word = '';
   END IF;
   IF dw_error_code is null then
      set dw_error_code = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   

   SET dw_preference_rate = 1;
   SET dw_preference_word = '';
   SET dw_error_code = 0;
 
   select   CAST(IFNULL(DG50_special_discount_define.discount,'1') AS DECIMAL(4,2)) 
   INTO dw_preference_rate 
   from basic.DG50_special_discount_define 
   where DG50_special_discount_define.special_code = '2' 
    and DG50_special_discount_define.discount_code = preference_style
    and DG50_special_discount_define.train_code = train_code 
 and DG50_special_discount_define.start_station_name = start_station_name
    and DG50_special_discount_define.end_station_name = end_station_name
    and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
    and DG50_special_discount_define.start_date <= start_train_date 
 and DG50_special_discount_define.stop_date >= start_train_date   
   order by DG50_special_discount_define.seat_type_code
   limit 1; 
   
   if dw_preference_rate = 1 then
      select   CAST(IFNULL(DG50_special_discount_define.discount,'1') AS DECIMAL(4,2)) 
      INTO dw_preference_rate 
      from basic.DG50_special_discount_define 
      where DG50_special_discount_define.special_code = '2' and discount_code = preference_style
       and DG50_special_discount_define.train_code = '%'
       and DG50_special_discount_define.seat_type_code in(seat_type_code,'z')
       and DG50_special_discount_define.start_date <= start_train_date 
 and DG50_special_discount_define.stop_date >= start_train_date   
      order by DG50_special_discount_define.seat_type_code 
      limit 1;
      
   end if;

   if ROW_COUNT() = 0 then

      SET dw_error_code = 0;
      LEAVE SWL_return;
   end if;

   if dw_preference_rate <> 1 then 
      SET dw_preference_word = '';
   end if;

   if out_flag = 1 then
      select dw_preference_rate ,dw_preference_word,dw_error_code;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG60_fetch_insurance_price`(train_date  CHAR(8)
,start_train_date CHAR(8)
,train_no CHAR(12) 
,start_station_no CHAR(2)  
,to_station_no CHAR(2) 
,seat_type_code CHAR(1) 
,bed_level CHAR(1) 
,ticket_type TINYINT UNSIGNED 
,distance SMALLINT 
,price_style CHAR(1) 
,INOUT insurance_price SMALLINT 
,distance1 SMALLINT 
,price_style1 CHAR(1) 
,INOUT insurance_price1 SMALLINT 
,distance2 SMALLINT 
,price_style2 CHAR(1) 
,INOUT insurance_price2 SMALLINT 
,distance3 SMALLINT 
,price_style3 CHAR(1) 
,INOUT insurance_price3 SMALLINT 
,distance4 SMALLINT 
,price_style4 CHAR(1) 
,INOUT insurance_price4 SMALLINT 
,distance5 SMALLINT 
,price_style5 CHAR(1) 
,INOUT insurance_price5 SMALLINT 
,INOUT fetch_error_code SMALLINT
,out_flag SMALLINT)
BEGIN
   DECLARE row_count INT;
   DECLARE error_no INT;
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET @SWV_Error = 1;
   END;
   IF train_no is null then
      set train_no = '';
   END IF;
   IF start_station_no is null then
      set start_station_no = '';
   END IF;
   IF to_station_no is null then
      set to_station_no = '';
   END IF;
   IF seat_type_code is null then
      set seat_type_code = '';
   END IF;
   IF bed_level is null then
      set bed_level = '';
   END IF;
   IF ticket_type is null then
      set ticket_type = 0;
   END IF;
   IF distance is null then
      set distance = 0;
   END IF;
   IF price_style is null then
      set price_style = '';
   END IF;
   IF insurance_price is null then
      set insurance_price = 0;
   END IF;
   IF distance1 is null then
      set distance1 = 0;
   END IF;
   IF price_style1 is null then
      set price_style1 = '';
   END IF;
   IF insurance_price1 is null then
      set insurance_price1 = 0;
   END IF;
   IF distance2 is null then
      set distance2 = 0;
   END IF;
   IF price_style2 is null then
      set price_style2 = '';
   END IF;
   IF insurance_price2 is null then
      set insurance_price2 = 0;
   END IF;
   IF distance3 is null then
      set distance3 = 0;
   END IF;
   IF price_style3 is null then
      set price_style3 = '';
   END IF;
   IF insurance_price3 is null then
      set insurance_price3 = 0;
   END IF;
   IF distance4 is null then
      set distance4 = 0;
   END IF;
   IF price_style4 is null then
      set price_style4 = '';
   END IF;
   IF insurance_price4 is null then
      set insurance_price4 = 0;
   END IF;
   IF distance5 is null then
      set distance5 = 0;
   END IF;
   IF price_style5 is null then
      set price_style5 = '';
   END IF;
   IF insurance_price5 is null then
      set insurance_price5 = 0;
   END IF;
   IF fetch_error_code is null then
      set fetch_error_code = 0;
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   tail:loop
   BEGIN
      IF train_no is null then
         set train_no = '';
      END IF;
      IF start_station_no is null then
         set start_station_no = '';
      END IF;
      IF to_station_no is null then
         set to_station_no = '';
      END IF;
      IF seat_type_code is null then
         set seat_type_code = '';
      END IF;
      IF bed_level is null then
         set bed_level = '';
      END IF;
      IF ticket_type is null then
         set ticket_type = 0;
      END IF;
      IF distance is null then
         set distance = 0;
      END IF;
      IF price_style is null then
         set price_style = '';
      END IF;
      IF insurance_price is null then
         set insurance_price = 0;
      END IF;
      IF distance1 is null then
         set distance1 = 0;
      END IF;
      IF price_style1 is null then
         set price_style1 = '';
      END IF;
      IF insurance_price1 is null then
         set insurance_price1 = 0;
      END IF;
      IF distance2 is null then
         set distance2 = 0;
      END IF;
      IF price_style2 is null then
         set price_style2 = '';
      END IF;
      IF insurance_price2 is null then
         set insurance_price2 = 0;
      END IF;
      IF distance3 is null then
         set distance3 = 0;
      END IF;
      IF price_style3 is null then
         set price_style3 = '';
      END IF;
      IF insurance_price3 is null then
         set insurance_price3 = 0;
      END IF;
      IF distance4 is null then
         set distance4 = 0;
      END IF;
      IF price_style4 is null then
         set price_style4 = '';
      END IF;
      IF insurance_price4 is null then
         set insurance_price4 = 0;
      END IF;
      IF distance5 is null then
         set distance5 = 0;
      END IF;
      IF price_style5 is null then
         set price_style5 = '';
      END IF;
      IF insurance_price5 is null then
         set insurance_price5 = 0;
      END IF;
      IF fetch_error_code is null then
         set fetch_error_code = 0;
      END IF;
      IF out_flag is null then
         set out_flag = 0;
      END IF;
      SET @SWV_Error = 0;
      
      SET insurance_price = 0;
      SET insurance_price1 = 0;
      SET insurance_price2 = 0;
      SET insurance_price3 = 0;
      SET insurance_price4 = 0;
      SET insurance_price5 = 0;



 
      SET distance1 = 0;
      SET distance2 = 0;
      SET distance3 = 0;
      SET distance4 = 0;
      SET distance5 = 0;
      if distance > 0 then

         select   distance_price.addition_cost 
   INTO insurance_price 
   from basic.distance_price 
   where distance_price.distance0 <= distance 
   and distance_price.distance >= distance
          and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date;
  
         SET row_count = ROW_COUNT();
         SET error_no = @SWV_Error;
   
         if row_count <= 0 or error_no != 0 then
   
            SET fetch_error_code = -82;
            LEAVE tail;
         end if;
         SET insurance_price = CEIL(insurance_price/5.0)*5;
      end if;
      if distance1 > 0 then

         select   distance_price.addition_cost 
   INTO insurance_price1 
   from basic.distance_price 
   where distance_price.distance0 <= distance1 
   and distance_price.distance >= distance1
          and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date;
         SET row_count = ROW_COUNT();
         SET error_no = @SWV_Error;
         if row_count <= 0 or error_no != 0 then
 
            SET fetch_error_code = -83;
            LEAVE tail;
         end if;
         SET insurance_price1 = CEIL(insurance_price1/5.0)*5;
      end if;
      if distance2 > 0 then

         select   distance_price.addition_cost 
   INTO insurance_price2 
   from basic.distance_price 
   where distance_price.distance0 <= distance2 
   and distance_price.distance >= distance2
          and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date;
         SET row_count = ROW_COUNT();
         SET error_no = @SWV_Error;
   select row_count,error_no;
         if row_count <= 0 or error_no != 0 then
 
            SET fetch_error_code = -84;
            LEAVE tail;
         end if;
   select row_count,error_no,insurance_price2;
         SET insurance_price2 = CEIL(insurance_price2/5.0)*5;
      end if;
      if distance3 > 0 then

         select   distance_price.addition_cost 
   INTO insurance_price3 
   from basic.distance_price 
   where distance_price.distance0 <= distance3 
   and distance_price.distance >= distance3
          and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date;
         SET row_count = ROW_COUNT();
         SET error_no = @SWV_Error;
         if row_count <= 0 or error_no != 0 then
 
            SET fetch_error_code = -85;
            LEAVE tail;
         end if;
         SET insurance_price3 = CEIL(insurance_price3/5.0)*5;
      end if;
      if distance4 > 0 then

         select   distance_price.addition_cost 
   INTO insurance_price4 
   from basic.distance_price 
   where distance_price.distance0 <= distance4 
   and distance_price.distance >= distance4
          and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date;
         SET row_count = ROW_COUNT();
         SET error_no = @SWV_Error;
         if row_count <= 0 or error_no != 0 then
 
            SET fetch_error_code = -86;
            LEAVE tail;
         end if;
         SET insurance_price4 = CEIL(insurance_price4/5.0)*5;
      end if;
      if distance5 > 0 then

         select   distance_price.addition_cost 
   INTO insurance_price5 
   from basic.distance_price 
   where distance_price.distance0 <= distance5 
   and distance_price.distance >= distance5
          and distance_price.start_date <= start_train_date 
   and distance_price.stop_date >= start_train_date;
         SET row_count = ROW_COUNT();
         SET error_no = @SWV_Error;
         if row_count <= 0 or error_no != 0 then
 
            SET fetch_error_code = -87;
            LEAVE tail;
         end if;
         SET insurance_price5 = CEIL(insurance_price5/5.0)*5;
      end if;
   END;
   leave tail;
   end loop tail;
   if out_flag = 1 then
      select insurance_price,insurance_price1,insurance_price2,insurance_price3,insurance_price4,insurance_price5,fetch_error_code;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DG60_fetch_seg_pre_discount`(train_date  CHAR(8)
,start_train_date CHAR(8)
,train_no CHAR(12)
,start_station_no CHAR(2)
,start_station_telecode CHAR(3)
,to_station_no CHAR(2)
,to_station_telecode CHAR(3)
,price_code CHAR(8)
,seat_type_code CHAR(1)
,bed_level CHAR(1)
,ticket_type TINYINT UNSIGNED
,INOUT discount_msg  CHAR(240)
,INOUT direction_flag CHAR(1)   
,INOUT fetch_error_code SMALLINT
,INOUT kx_flag CHAR(1)     
,out_flag SMALLINT)
SWL_return:
BEGIN
   DECLARE start_sta_tele_tmp CHAR(3);
   DECLARE to_sta_tele_tmp CHAR(3);
   DECLARE from_distance_tmp SMALLINT;
   DECLARE to_distance_tmp SMALLINT;
   DECLARE preference_rate_str CHAR(6);
   DECLARE preference_rate_temp DECIMAL(4,2);

   DECLARE start_sta_tele CHAR(3);
   DECLARE to_sta_tele CHAR(3);
   DECLARE from_distance SMALLINT;
   DECLARE to_distance SMALLINT;
   DECLARE preference_rate DECIMAL(4,2);

   DECLARE discount_msg_tmp TEXT;
   DECLARE line_code CHAR(4);

   DECLARE ticket_type_power INT;

   DECLARE tmp_pos INT;
   DECLARE insert_pos INT;
   DECLARE insert_pos_tmp INT;
   DECLARE msg_len INT;

   DECLARE tmp_start_tele CHAR(3);
   DECLARE tmp_to_tele CHAR(3);
   DECLARE tmp_seg CHAR(12);

   DECLARE current_date2 CHAR(8);

   DECLARE origin CHAR(2);

   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE SWV_CurNum INT DEFAULT 0;

    
      declare get_seg_pre_dis cursor for
      select DG60_train_seg_pre_discount.from_station_telecode,
    DG60_train_seg_pre_discount.to_station_telecode,
    DG60_train_seg_pre_discount.discount_rate,
    DG60_train_seg_pre_discount.origin 
      from basic.DG60_train_seg_pre_discount 
      where DG60_train_seg_pre_discount.train_no = train_no 
    and DG60_train_seg_pre_discount.seat_type_code = seat_type_code
    and DG60_train_seg_pre_discount.ticket_types & ticket_type_power = ticket_type_power
    and DG60_train_seg_pre_discount.start_date <= start_train_date 
    and DG60_train_seg_pre_discount.stop_date >= start_train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.from_pre_buy,current_date2),'%Y%m%d') <= train_date
    and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.to_pre_buy,current_date2),'%Y%m%d') >= train_date
    and (DG60_train_seg_pre_discount.running_style = 1 or DG60_train_seg_pre_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG60_train_seg_pre_discount.start_date,start_train_date)%DG60_train_seg_pre_discount.running_style)) > 0);
 
      DECLARE get_seg_pre_dis2 CURSOR  
      FOR select DG60_train_seg_pre_discount.from_station_telecode,
     DG60_train_seg_pre_discount.to_station_telecode,
     DG60_train_seg_pre_discount.discount_rate,
     DG60_train_seg_pre_discount.origin 
    from basic.DG60_train_seg_pre_discount
    where DG60_train_seg_pre_discount.train_no = train_no 
     and DG60_train_seg_pre_discount.seat_type_code = 'z'
     and DG60_train_seg_pre_discount.ticket_types & ticket_type_power = ticket_type_power
     and DG60_train_seg_pre_discount.start_date <= start_train_date 
     and DG60_train_seg_pre_discount.stop_date >= start_train_date
     and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.from_pre_buy,current_date2),'%Y%m%d') <= train_date
     and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.to_pre_buy,current_date2),'%Y%m%d') >= train_date
     and (DG60_train_seg_pre_discount.running_style = 1 or DG60_train_seg_pre_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG60_train_seg_pre_discount.start_date,start_train_date)%DG60_train_seg_pre_discount.running_style)) > 0);
 
 DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
    SET NO_DATA = 1;
    END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   
   IF discount_msg is null then
      set discount_msg = "";
   END IF;
   IF direction_flag is null then
      set direction_flag = '';
   END IF;
   IF fetch_error_code is null then
      set fetch_error_code = 0;
   END IF;
   IF kx_flag is null then
      set kx_flag = '';
   END IF;
   IF out_flag is null then
      set out_flag = 0;
   END IF;
   tail_end:loop
   BEGIN
      IF discount_msg is null then
         set discount_msg = "";
      END IF;
      IF direction_flag is null then
         set direction_flag = '';
      END IF;
      IF fetch_error_code is null then
         set fetch_error_code = 0;
      END IF;
      IF kx_flag is null then
         set kx_flag = '';
      END IF;
      IF out_flag is null then
         set out_flag = 0;
      END IF;
      
      SET current_date2 = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
      SET discount_msg = '';
      SET fetch_error_code = 0;
      SET direction_flag = '';
      SET kx_flag = '0';
      SET ticket_type_power = power(2,ticket_type -1);
      if bed_level not in('1','2','3') then 
         SET bed_level = '';
      end if;
      if not exists(select 1 from basic.DG60_train_seg_pre_discount
         where DG60_train_seg_pre_discount.train_no = train_no
          and DG60_train_seg_pre_discount.seat_type_code in(seat_type_code,'z')
          and DG60_train_seg_pre_discount.ticket_types & ticket_type_power = ticket_type_power
          and DG60_train_seg_pre_discount.start_date <= start_train_date 
       and DG60_train_seg_pre_discount.stop_date >= start_train_date
          and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.from_pre_buy,current_date2),'%Y%m%d') <= train_date
          and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.to_pre_buy,current_date2),'%Y%m%d') >= train_date
          and (DG60_train_seg_pre_discount.running_style = 1 
         or DG60_train_seg_pre_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG60_train_seg_pre_discount.start_date,start_train_date)%DG60_train_seg_pre_discount.running_style)) > 0)) 
      then

         select   IFNULL(DG50_discount_for_saletime.discount_rate,0) 
     INTO preference_rate_temp 
     from basic.DG50_discount_for_saletime 
     where DG50_discount_for_saletime.train_no = train_no
        and DG50_discount_for_saletime.seat_type_code in(seat_type_code,'z')
        and DG50_discount_for_saletime.ticket_types & ticket_type_power = ticket_type_power
        and DG50_discount_for_saletime.start_date <= start_train_date 
     and DG50_discount_for_saletime.stop_date >= start_train_date
        and DATE_FORMAT(TIMESTAMPADD(DAY,DG50_discount_for_saletime.from_pre_buy,current_date2),'%Y%m%d') <= train_date
        and DATE_FORMAT(TIMESTAMPADD(DAY,DG50_discount_for_saletime.to_pre_buy,current_date2),'%Y%m%d') >= train_date
        and (DG50_discount_for_saletime.running_style = 1 or DG50_discount_for_saletime.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG50_discount_for_saletime.start_date,start_train_date)%DG50_discount_for_saletime.running_style)) > 0)   
     order by DG50_discount_for_saletime.seat_type_code;
         if ROW_COUNT() < 1 then 
            LEAVE tail_end;
         end if;
         SET discount_msg = CONCAT(start_station_telecode,to_station_telecode,space(6 -LENGTH(rtrim(CAST(preference_rate_temp AS char(6))))),
         rtrim(CAST(preference_rate_temp AS char(6))));
         LEAVE SWL_return;
      end if;
      select   DG52_PDL_terminal_price.line_code 
      INTO line_code 
      from basic.DG52_PDL_terminal_price
      where DG52_PDL_terminal_price.price_code = price_code;
      
      if ROW_COUNT() < 1 then

         SET fetch_error_code = -95;
         LEAVE tail_end;
      end if;
      if out_flag = 1 then
         select train_date,train_no,seat_type_code,ticket_type_power,start_train_date,current_date2;
      end if;
      if exists(select 1 from basic.DG60_train_seg_pre_discount
        where DG60_train_seg_pre_discount.train_no = train_no
         and DG60_train_seg_pre_discount.seat_type_code = seat_type_code
         and DG60_train_seg_pre_discount.ticket_types & ticket_type_power = ticket_type_power
         and DG60_train_seg_pre_discount.start_date <= start_train_date 
   and DG60_train_seg_pre_discount.stop_date >= start_train_date
         and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.from_pre_buy,current_date2),'%Y%m%d') <= train_date
         and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.to_pre_buy,current_date2),'%Y%m%d') >= train_date
         and (DG60_train_seg_pre_discount.running_style = 1 or DG60_train_seg_pre_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG60_train_seg_pre_discount.start_date,start_train_date)%DG60_train_seg_pre_discount.running_style)) > 0)) 
      then
   set SWV_CurNum =1;
      else 
         if exists(select 1 from basic.DG60_train_seg_pre_discount
           where DG60_train_seg_pre_discount.train_no = train_no
            and DG60_train_seg_pre_discount.seat_type_code = 'z'
            and DG60_train_seg_pre_discount.ticket_types & ticket_type_power = ticket_type_power
            and DG60_train_seg_pre_discount.start_date <= start_train_date 
    and DG60_train_seg_pre_discount.stop_date >= start_train_date
            and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.from_pre_buy,current_date2),'%Y%m%d') <= train_date
            and DATE_FORMAT(TIMESTAMPADD(DAY,DG60_train_seg_pre_discount.to_pre_buy,current_date2),'%Y%m%d') >= train_date
            and (DG60_train_seg_pre_discount.running_style = 1 or DG60_train_seg_pre_discount.running_rule & power(2,(TIMESTAMPDIFF(DAY,DG60_train_seg_pre_discount.start_date,start_train_date)%DG60_train_seg_pre_discount.running_style)) > 0)) 
  then
            set SWV_CurNum =2;
         end if;
      end if;
      if SWV_CurNum=0 then
  select ('error,cat define cursor get_seg_pre_dis');
  LEAVE SWL_return;
   end if;
   if SWV_CurNum=1 then
  open get_seg_pre_dis;
   else if SWV_CurNum=2 then
  open get_seg_pre_dis2;
  end if;
   end if;
      
      SET NO_DATA = 0;
   if SWV_CurNum=1 then
  fetch get_seg_pre_dis into start_sta_tele_tmp,to_sta_tele_tmp,preference_rate_temp,origin;
   else if SWV_CurNum=2 then
  fetch get_seg_pre_dis2 into start_sta_tele_tmp,to_sta_tele_tmp,preference_rate_temp,origin;
  end if;
   end if;
      
      SWL_Label:loop
      while NO_DATA != 2 DO
         if NO_DATA = 1 then
            LEAVE SWL_Label;
         end if;
         SET kx_flag = SUBSTRING(origin,1,1);
         if kx_flag <> '1' then 
            SET kx_flag = '0';
         end if;
         SET preference_rate_str = CAST(preference_rate_temp AS char(6));
         select   DG52_passenger_dedicated_line.distance 
     INTO from_distance_tmp 
     from basic.DG52_passenger_dedicated_line 
     where DG52_passenger_dedicated_line.line_code = line_code 
     and DG52_passenger_dedicated_line.station_telecode = start_sta_tele_tmp;
         if ROW_COUNT() < 1 then
 
            SET fetch_error_code = -41;
            LEAVE tail_end;
         end if;
         select   DG52_passenger_dedicated_line.distance 
     INTO to_distance_tmp 
     from basic.DG52_passenger_dedicated_line 
     where DG52_passenger_dedicated_line.line_code = line_code 
     and DG52_passenger_dedicated_line.station_telecode = to_sta_tele_tmp;
         if ROW_COUNT() < 1 then
 
            SET fetch_error_code = -42;
            LEAVE tail_end;
         end if;
         if to_distance_tmp = from_distance_tmp then
 
            SET fetch_error_code = -43;
            LEAVE tail_end;
         end if;
         if direction_flag = '' then
 
            if to_distance_tmp > from_distance_tmp then
               SET direction_flag = '1';
            else 
               if to_distance_tmp < from_distance_tmp then
                  SET direction_flag = '0';
               end if;
            end if;
         else
            if direction_flag = '0' and to_distance_tmp > from_distance_tmp then
  
               SET fetch_error_code = -44;
               LEAVE tail_end;
            end if;
            if direction_flag = '1' and from_distance_tmp > to_distance_tmp then
  
               SET fetch_error_code = -45;
               LEAVE tail_end;
            end if;
         end if;
         if out_flag = 1 then
            select 110,discount_msg_tmp,direction_flag;
         end if;
         if rtrim(discount_msg_tmp) IS NOT NULL then
            begin
               SET tmp_pos = 1;
               SET insert_pos = 1;
               SET insert_pos_tmp = 1;
               SWL_Label2:loop
               while(tmp_pos < LENGTH(rtrim(discount_msg_tmp))) DO
                  SET start_sta_tele = SUBSTRING(discount_msg_tmp,tmp_pos,3);
                  SET to_sta_tele = SUBSTRING(discount_msg_tmp,tmp_pos+3,3);
                  SET from_distance = cast(SUBSTRING(discount_msg_tmp,tmp_pos+6,5) as SIGNED INTEGER);
                  SET to_distance = cast(SUBSTRING(discount_msg_tmp,tmp_pos+11,5) as SIGNED INTEGER);
                  SET preference_rate = CAST(SUBSTRING(discount_msg_tmp,tmp_pos+16,6) AS DECIMAL(4,2));
                  if LOCATE(CONCAT(start_sta_tele_tmp,to_sta_tele_tmp),discount_msg_tmp) > 0 then
                     ITERATE SWL_Label2;
                  end if;
                  if direction_flag = '0' then
   
                     if not (to_distance_tmp >= from_distance or from_distance_tmp <= to_distance) then
    
                        SET fetch_error_code = -46;
                        LEAVE tail_end;
                     end if;
                     if from_distance_tmp <= to_distance then
                        SET insert_pos = tmp_pos+22;
                     end if;
                     if to_distance_tmp >= from_distance then
                        SET insert_pos = tmp_pos;
                     end if;
                  end if;
                  if direction_flag = '1' then
   
                     if not (from_distance_tmp >= to_distance or to_distance_tmp <= from_distance) then
    
                        SET fetch_error_code = -47;
                        LEAVE tail_end;
                     end if;
                     if to_distance_tmp <= from_distance then
                        SET insert_pos = tmp_pos;
                     end if;
                     if from_distance_tmp >= to_distance then
                        SET insert_pos = tmp_pos+22;
                     end if;
                     if out_flag = 1 then
                        select 222,from_distance,to_distance,from_distance_tmp,to_distance_tmp,insert_pos;
                     end if;
                  end if;
                  if insert_pos = 1 or insert_pos > LENGTH(rtrim(discount_msg_tmp)) then
                     LEAVE SWL_Label2;
                  else
                     if insert_pos > insert_pos_tmp then
                        SET insert_pos_tmp = insert_pos;
                     else
                        LEAVE SWL_Label2;
                     end if;
                  end if;
                  SET tmp_pos = tmp_pos+22;
               END WHILE;
      leave SWL_Label2;
        end loop SWL_Label2;
            end;
         end if;
         if LOCATE(CONCAT(start_sta_tele_tmp,to_sta_tele_tmp),discount_msg_tmp) = 0 then
            SET discount_msg_tmp = CONCAT(SUBSTRING(discount_msg_tmp,1,insert_pos -1),start_sta_tele_tmp,
            to_sta_tele_tmp,space(5 -LENGTH(rtrim(CAST(from_distance_tmp AS char(5))))),
            rtrim(CAST(from_distance_tmp AS char(5))),space(5 -LENGTH(rtrim(CAST(to_distance_tmp AS char(5))))),
            rtrim(CAST(to_distance_tmp AS char(5))),
            space(6 -LENGTH(rtrim(preference_rate_str))),rtrim(preference_rate_str),
            SUBSTRING(discount_msg_tmp,insert_pos,LENGTH(rtrim(discount_msg_tmp)) -insert_pos+1));
         end if;
         if out_flag = 1 then
            select 111
   
   
   ,discount_msg_tmp;
         end if;
   
 
         SET NO_DATA = 0;
         if SWV_CurNum=1 then
   fetch get_seg_pre_dis into start_sta_tele_tmp,to_sta_tele_tmp,preference_rate_temp,origin;
    else if SWV_CurNum=2 then
   fetch get_seg_pre_dis2 into start_sta_tele_tmp,to_sta_tele_tmp,preference_rate_temp,origin;
   end if;
    end if;
      END WHILE;
   leave SWL_Label;
      end loop SWL_Label;
      
   if SWV_CurNum=1 then
  close get_seg_pre_dis;
   else if SWV_CurNum=2 then
  close get_seg_pre_dis2;
  end if;
   end if;
      

      if out_flag = 1 then
         select discount_msg_tmp;
      end if;
      select   DG52_passenger_dedicated_line.distance 
      INTO from_distance 
      from basic.DG52_passenger_dedicated_line 
      where DG52_passenger_dedicated_line.line_code = line_code 
       and DG52_passenger_dedicated_line.station_telecode = start_station_telecode;
      if ROW_COUNT() < 1 then

         SET fetch_error_code = -48;
         LEAVE tail_end;
      end if;
      select   DG52_passenger_dedicated_line.distance 
      INTO to_distance 
      from basic.DG52_passenger_dedicated_line 
      where DG52_passenger_dedicated_line.line_code = line_code 
       and DG52_passenger_dedicated_line.station_telecode = to_station_telecode;
      if ROW_COUNT() < 1 then

         SET fetch_error_code = -49;
         LEAVE tail_end;
      end if;
      SET tmp_pos = 1;
      SWL_Label3:loop
      while(tmp_pos < LENGTH(rtrim(discount_msg_tmp))) DO
         begin
            next_seg:loop
            BEGIN
               SET start_sta_tele = SUBSTRING(discount_msg_tmp,tmp_pos,3);
               SET to_sta_tele = SUBSTRING(discount_msg_tmp,tmp_pos+3,3);
               SET from_distance_tmp = cast(SUBSTRING(discount_msg_tmp,tmp_pos+6,5) as SIGNED INTEGER);
               SET to_distance_tmp = cast(SUBSTRING(discount_msg_tmp,tmp_pos+11,5) as SIGNED INTEGER);
               SET preference_rate_str = SUBSTRING(discount_msg_tmp,tmp_pos+16,6);
               if direction_flag = '1' and (to_distance_tmp <= from_distance or from_distance_tmp >= to_distance) then
                  LEAVE next_seg;
               end if;
               if direction_flag = '0' and (from_distance_tmp <= to_distance or to_distance_tmp >= from_distance) then
                  LEAVE next_seg;
               end if;
               if rtrim(discount_msg) IS NULL OR rtrim(discount_msg)='' then       
 
                  if direction_flag = '1' then      
  
                     if from_distance < from_distance_tmp then  
   
                        SET discount_msg = CONCAT(rtrim(discount_msg),start_station_telecode,start_sta_tele,"  0.00");
                        if to_distance > to_distance_tmp then
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_sta_tele,space(6 -LENGTH(rtrim(preference_rate_str))),
                           rtrim(preference_rate_str));
                        else
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_station_telecode,space(6 -LENGTH(rtrim(preference_rate_str))),
                           rtrim(preference_rate_str));
                           LEAVE SWL_Label3;
                        end if;
                     else
                        if to_distance > to_distance_tmp then
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_station_telecode,to_sta_tele,space(6 -LENGTH(rtrim(preference_rate_str))),
                           rtrim(preference_rate_str));
                        else
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_station_telecode,to_station_telecode,
                           space(6 -LENGTH(rtrim(preference_rate_str))),rtrim(preference_rate_str));
                           LEAVE SWL_Label3;
                        end if;
                     end if;
                  end if;
                  if direction_flag = '0' then      
  
                     if from_distance > from_distance_tmp then  
   
                        SET discount_msg = CONCAT(rtrim(discount_msg),start_station_telecode,start_sta_tele,"  0.00");
                        if to_distance < to_distance_tmp then
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_sta_tele,space(6 -LENGTH(rtrim(preference_rate_str))),
                           rtrim(preference_rate_str));
                        else
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_station_telecode,space(6 -LENGTH(rtrim(preference_rate_str))),
                           rtrim(preference_rate_str));
                           LEAVE SWL_Label3;
                        end if;
                     else
                        if to_distance < to_distance_tmp then
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_station_telecode,to_sta_tele,space(6 -LENGTH(rtrim(preference_rate_str))),
                           rtrim(preference_rate_str));
                        else
                           SET discount_msg = CONCAT(rtrim(discount_msg),start_station_telecode,to_station_telecode,
                           space(6 -LENGTH(rtrim(preference_rate_str))),rtrim(preference_rate_str));
                           LEAVE SWL_Label3;
                        end if;
                     end if;
                  end if;
               else
                  if start_sta_tele <> tmp_to_tele then
                     SET discount_msg = CONCAT(rtrim(discount_msg),tmp_to_tele,start_sta_tele,"  0.00");
                  end if;
                  if direction_flag = '1' then
  
                     if to_distance > to_distance_tmp then
                        SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_sta_tele,space(6 -LENGTH(rtrim(preference_rate_str))),
                        rtrim(preference_rate_str));
                     else
                        SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_station_telecode,space(6 -LENGTH(rtrim(preference_rate_str))),
                        rtrim(preference_rate_str));
                        LEAVE SWL_Label3;
                     end if;
                  end if;
                  if direction_flag = '0' then
  
                     if to_distance < to_distance_tmp then
                        SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_sta_tele,space(6 -LENGTH(rtrim(preference_rate_str))),
                        rtrim(preference_rate_str));
                     else
                        SET discount_msg = CONCAT(rtrim(discount_msg),start_sta_tele,to_station_telecode,space(6 -LENGTH(rtrim(preference_rate_str))),
                        rtrim(preference_rate_str));
                        LEAVE SWL_Label3;
                     end if;
                  end if;
               end if;
               SET tmp_seg = right(rtrim(discount_msg),12);
               SET tmp_start_tele = SUBSTRING(tmp_seg,1,3);
               SET tmp_to_tele = SUBSTRING(tmp_seg,4,3);
            END;
  leave next_seg;
     end loop next_seg;
            SET tmp_pos = tmp_pos+22;
         end;
      END WHILE;
   leave SWL_Label3;
      end loop SWL_Label3;
   END;
   leave tail_end;
   end loop tail_end;
  if out_flag=2 THEN
   select start_station_telecode,to_station_telecode;
   if rtrim(discount_msg)='' THEN
    select 'discount_msg is null';
   else 
    select 'discount_msg is not null';
   end if;
  end if;
   if rtrim(discount_msg) IS NULL OR rtrim(discount_msg)='' then
      SET discount_msg = CONCAT(start_station_telecode,to_station_telecode,"  0.00");
   end if;

   SET tmp_to_tele = SUBSTRING(right(rtrim(discount_msg),12),4,3);
  if out_flag=2 THEN
    select tmp_to_tele,to_station_telecode,discount_msg;
  end if;
   if tmp_to_tele <> to_station_telecode then  
      SET discount_msg = CONCAT(rtrim(discount_msg),tmp_to_tele,to_station_telecode,"  0.00");
   end if;
   if out_flag = 1 then
      select discount_msg,direction_flag,fetch_error_code;
   end if;
  if out_flag=2 THEN
    select tmp_to_tele,to_station_telecode,discount_msg;
  end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DQ40_left_station`(IN `train_date_in` char(8),IN `purpose_code_in` char(255),IN `start_station_telecode_in` char(3),IN `to_station_telecode_in` char(3),IN `office_no_in` char(7),IN `window_no_in` tinyint unsigned,IN `query_right_in` char(1),IN `flag_in` tinyint unsigned,IN `range_in` tinyint unsigned,IN `inner_code_in` char(3),IN `show_flag_in` tinyint unsigned,OUT `return_out` integer)
BEGIN
 DECLARE l_Version CHAR(20)                                                                                                                                                                                             
 ;DECLARE  l_current_date   CHAR(8)     ;DECLARE  l_day_diff   SMALLINT
  ;DECLARE  l_max_day    SMALLINT     ;DECLARE  l_train_no   CHAR(12)
  ;DECLARE  l_start_time   CHAR(4)     ;DECLARE  l_start_datetime DATETIME
  ;DECLARE  l_overtime   SMALLINT     ;DECLARE  l_d1     DATETIME
  ;DECLARE  l_d2     DATETIME     ;DECLARE  l_SQL     VARCHAR(1200)
  ;DECLARE  l_my_center_code CHAR(2)     ;DECLARE  l_location_code  CHAR(2)
  ;DECLARE  l_ticket_center_code CHAR(2)    ;DECLARE  l_rowcount   SMALLINT
  ;DECLARE  l_error    SMALLINT     ;DECLARE  l_train_code   CHAR(12)
  ;DECLARE  l_start_telecode CHAR(3)     ;DECLARE  l_end_telecode  CHAR(3)
  ;DECLARE  l_start_bureau_code CHAR(1)    ;DECLARE  l_station_telecode  CHAR(3)
  ;DECLARE  l_start_city_code  CHAR(4)    ;DECLARE  l_end_city_code   CHAR(4)
  ;DECLARE  l_start_tele_list  VARCHAR(100)   ;DECLARE  l_end_tele_list   VARCHAR(100)
  ;DECLARE   l_left_new    tinyint unsigned    ;DECLARE  l_share_train_flag  INT
  ;DECLARE  l_station_train_code CHAR(8)    ;DECLARE  l_from_station_name CHAR(10)
  ;DECLARE  l_to_station_name  CHAR(10)    ;DECLARE  l_to_station_no   CHAR(2)
  ;DECLARE  l_end_start_time  CHAR(4)    ;DECLARE  l_end_arrive_time  CHAR(4)
  ;DECLARE  l_start_day_difference tinyint unsigned    ;DECLARE  l_end_day_difference tinyint unsigned
  ;DECLARE  l_start_date     CHAR(8)    ;DECLARE  l_date_after    INTEGER
  ;DECLARE  l_running_style    INTEGER    ;DECLARE  l_running_rule   INTEGER
  ;DECLARE  l_start_station_no   CHAR(2)    ;DECLARE  l_same_city    tinyint unsigned
  ;DECLARE  l_station_name   CHAR(10) ;DECLARE lab_lab1_s INTEGER;DECLARE l_return_code INTEGER;DECLARE l_end_station_telecode char(3);
 Declare record_not_found Integer Default 0;
DECLARE i int;

declare proc_stat_start datetime;
   declare proc_stat_end datetime;
   declare proc_stat_time_diff int;
   declare open_statistics varchar(20);

  DECLARE cursor_board_station CURSOR FOR 
  SELECT DISTINCT station_telecode,station_name FROM basic.station_divide_dictionary
   WHERE city_code = l_start_city_code
   AND start_date <= train_date_in
   AND stop_date  >= train_date_in;

  DECLARE cursor_end_station CURSOR FOR 
  SELECT DISTINCT station_telecode,station_name FROM basic.station_divide_dictionary
   WHERE city_code = l_end_city_code
   AND start_date <= train_date_in
   AND stop_date  >= train_date_in;

 Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;

select parameter_value into open_statistics from arith.parameters where parameter_code='open_statistics';
if open_statistics='1' then
 set proc_stat_start = now();
end if;

 CREATE Temporary TABLE If Not Exists temp_train_info_station ( 
  train_no     CHAR(12) NOT NULL
  , start_time     CHAR(4) NOT NULL 
  , start_telecode   CHAR(3) NOT NULL
  , start_bureau_code  CHAR(1) NOT NULL
  , start_station_no  CHAR(2) NOT NULL
  , end_telecode    CHAR(3) NOT NULL
  , end_start_time   CHAR(4) NOT NULL
  , end_arrive_time  CHAR(4) NOT NULL
  , start_day_difference tinyint unsigned NOT NULL
  , end_day_difference tinyint unsigned NOT NULL
  , station_train_code CHAR(8) NOT NULL
  , from_station   CHAR(10) NOT NULL
  , to_station    CHAR(10) NOT NULL
  , from_station_no  CHAR(2) NOT NULL
  , to_station_no   CHAR(2) NOT NULL
  , day_diff     tinyint unsigned NOT NULL
  , flag      tinyint unsigned NOT NULL
  );
   Truncate Table  temp_train_info_station;                
 

 CREATE Temporary TABLE If Not Exists train_info_station
  (train_date   CHAR(8) NOT NULL,
  train_no   CHAR(12) NOT NULL,
  train_code   CHAR(8) NOT NULL,
  from_station  CHAR(10) NOT NULL,
  to_station   CHAR(10) NOT NULL
  );
   Truncate Table  train_info_station;  


 CREATE Temporary TABLE If Not Exists tmp_ticket_left_station
  (assign_station   char(10) NOT NULL,
  train_no     char(12) NOT NULL,
  train_date     char(8) NOT NULL,
  station_no    char(2) NOT NULL,
  far_from_station_no char(2) NOT NULL,
  limit_station   char(2) NOT NULL,
  coach_no     char(2) NOT NULL,
  seat_type_code   char(1) NOT NULL,
  purpose_code   char(2) NOT NULL,
  ticket_quantity  int NOT NULL,
  up_quantity    int NOT NULL,
  mid_quantity   int NOT NULL,
  down_quantity   int NOT NULL,
  ticket_source char(1) NOT NULL,
  l_range tinyint(3) unsigned NOT NULL,
  inner_code char(7) NOT NULL,
  wseat_type_code char(1) NOT NULL,
  seat_feature char(1) NOT NULL
  );
   Truncate Table  tmp_ticket_left_station;  

 CREATE Temporary TABLE If Not Exists temp_left_base_center_station
 ( train_no     char(12) NULL,
  train_date     char(8) NULL,
  station_train_code char(8)NULL,
  station_no    char(2) NULL,
  assign_station   char(10),
  far_from_station_no char(2) NULL,
  limit_station   char(2) NULL,
  coach_no     char(2) NULL,
  seat_type_code   char(1) NULL,
  purpose_code   char(2) NULL,
  up_quantity    int NULL,
  mid_quantity   int NULL,
  down_quantity   int NULL,
  ticket_quantity  int NULL,
  wseat_type_code  char(1) NULL,
  seat_feature   char(1) NULL,
  seat_type_name   char(10) NULL,
  purpose_name   char(8) NULL,
  share_flag    tinyint unsigned NULL ,
  day_diff    tinyint unsigned NULL ,
  start_time   CHAR(4) NULL ,
  arrive_time     CHAR(4) NULL ,
  from_station   CHAR(10) NULL,
  to_station   CHAR(10) NULL,
  to_station_no  CHAR(2) NULL
 );
   Truncate Table temp_left_base_center_station;  
 

 CREATE Temporary TABLE If Not Exists temp_left_station
 ( train_no char(12) NULL,
  train_date  char(8) NULL,
   start_time  char(4) NULL,
  station_train_code char(8)NULL,
  station_no char(2) NULL,
   assign char(10) NULL,
  far_from_station_no char(2) NULL,
  far_from_station_name char(10) NULL,
  limit_station_name char(10) NULL,
  limit_station char(2) NULL,
  coach_no char(2) NULL,
   seat_type_code char(1) NULL,        
  seat_type_name char(10) NULL,
  purpose_name char(8) NULL,
   up_quantity int NULL,
   mid_quantity int NULL,
   down_quantity int NULL,
  ticket_quantity int NULL,
  coach_num int NULL,
  arrive_time CHAR(4) NULL,                             
  share_flag tinyint unsigned NULL                           
 , day_difference tinyint unsigned NULL                              
 , seat_feature CHAR(1) NULL                              
 , from_station CHAR(10) NULL
 , to_station  CHAR(10) NULL 
 , to_station_no CHAR(2) NULL
 );
   Truncate Table temp_left_station;  
 

 Set Transaction Isolation Level Read uncommitted;
                
 SET l_Version = "20131231.12:10" ;
 SET l_d1 = now();
 SET l_left_new = 1;
 SET l_current_date = CURDATE()+0;

 If office_no_in Is Null Then
   Set office_no_in = '';
 End If;

 If query_right_in Is Null Then
   Set query_right_in = '1';
 End If;

 If flag_in Is Null Then
   Set flag_in = 0;
 End If;

 If range_in Is Null Then
   Set range_in = 0;
 End If;

 If inner_code_in Is Null Then
   Set inner_code_in = '';
 End If;

 If show_flag_in Is Null Then
   Set show_flag_in = 0;
 End If;

 set lab_lab1_s = 1;
 lab_lab1:loop
 if lab_lab1_s = 0 THEN
   leave lab_lab1;
 end if;

                                                                   
 SELECT city_code,station_name INTO l_start_city_code,l_from_station_name FROM basic.station_dictionary 
  WHERE station_telecode = start_station_telecode_in
  AND start_date <= train_date_in
  AND stop_date >= train_date_in;

 IF row_count() = 0 THEN SET l_start_city_code = ''; end if;

 SELECT city_code,station_name INTO l_end_city_code,l_to_station_name FROM basic.station_dictionary 
  WHERE station_telecode = to_station_telecode_in
  AND start_date <= train_date_in
  AND stop_date >= train_date_in;
 IF row_count() = 0 THEN SET l_end_city_code = ''; end if;

                   
 IF l_start_city_code = l_end_city_code THEN 
   SET l_same_city = 1;
 ELSE 
   SET l_same_city = 0;
 end if;
             
 IF EXISTS(SELECT 1 FROM basic.station_divide_dictionary WHERE city_code = l_start_city_code AND station_telecode = start_station_telecode_in) THEN
   SET l_start_tele_list = '';
    
   OPEN cursor_board_station;
   
   lab_board_station:
   WHILE 1 = 1 DO
    FETCH cursor_board_station INTO l_station_telecode,l_station_name;

    if record_not_found = 1 THEN
      leave lab_board_station;
    end IF;
                                               
    IF l_same_city = 1 AND NOT (instr(ltrim(rtrim(l_from_station_name)),rtrim(ltrim(l_station_name))) > 0 OR instr(ltrim(rtrim(l_station_name)),rtrim(ltrim(l_from_station_name))) > 0 ) THEN
      ITERATE lab_board_station;
    end if;
    
    IF l_start_tele_list = '' THEN
      SET l_start_tele_list = concat('"', l_station_telecode , '"');
    ELSE 
      SET l_start_tele_list = concat(rtrim(l_start_tele_list) , ',' , '"' , l_station_telecode , '"');
    end if;
   END WHILE lab_board_station;
   CLOSE cursor_board_station;

   IF l_start_tele_list = '' THEN SET l_start_tele_list = concat('"', start_station_telecode_in , '"'); end if;
 ELSE
   SET l_start_tele_list = concat('"' , start_station_telecode_in , '"');
 END if;



               
 IF EXISTS(SELECT 1 FROM basic.station_divide_dictionary WHERE city_code = l_end_city_code AND station_telecode = to_station_telecode_in) THEN
   SET l_end_tele_list = '';
    
   OPEN cursor_end_station;
   
   lab_end_station:
   WHILE 1 = 1 DO 
    FETCH cursor_end_station INTO l_station_telecode,l_station_name;

    if record_not_found = 1 THEN
      leave lab_end_station;
    end IF;
                                              
    IF l_same_city = 1 AND NOT (instr(ltrim(rtrim(l_to_station_name)),rtrim(ltrim(l_station_name))) > 0 OR instr(ltrim(rtrim(l_station_name)),rtrim(ltrim(l_to_station_name))) > 0) THEN
      ITERATE lab_end_station;
    end if;

    IF l_end_tele_list = '' THEN 
      SET l_end_tele_list = concat('"' , l_station_telecode , '"');
    ELSE 
      SET l_end_tele_list = concat(rtrim(l_end_tele_list) , ',' , '"' , l_station_telecode , '"');
    END if;
   end WHILE lab_end_station;
   CLOSE cursor_end_station;

   IF l_end_tele_list = '' THEN SET l_end_tele_list = concat('"' ,  to_station_telecode_in , '"'); end if;
 ELSE 
   SET l_end_tele_list = concat('"' ,  to_station_telecode_in , '"');
 END if;
                                                                     

         
 SET @l_SQL = concat(' INSERT INTO temp_train_info_station '
  , ' SELECT DISTINCT a.train_no,a.start_time,a.station_telecode,a.bureau_code,a.station_no'
  , ' ,b.station_telecode,b.start_time,b.arrive_time,a.day_difference,b.day_difference,a.station_train_code'
  , ' ,a.station_name,b.station_name,a.station_no,b.station_no,0,0'
  , ' FROM basic.stop_time a ,basic.stop_time b  '
  , '  WHERE a.start_date   <= date_format(date_add("' , train_date_in , '",INTERVAL - a.day_difference day),"%Y%m%d")'
  , '  AND a.stop_date   >= date_format(date_add("' , train_date_in , '",INTERVAL - a.day_difference day),"%Y%m%d")'
  , '   AND a.train_no    = b.train_no '
  , '  AND a.station_telecode  IN (' , l_start_tele_list , ')'
  , '  AND b.station_telecode  IN (' , l_end_tele_list , ')'
  , '   AND a.station_no   < b.station_no '
  , '  AND a.station_name  NOT LIKE "%*%"'
  , '  AND b.station_name  NOT LIKE "%*%"');



 prepare stmt_1 from @l_SQL;
 EXECUTE stmt_1;

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 OR l_error != 0 THEN LEAVE lab_lab1; end if;                                 

                             
 SET l_overtime = -10;

 lab_train_info_station:
 WHILE EXISTS(SELECT 1 FROM temp_train_info_station WHERE flag = 0 ) DO
    SELECT train_no 
    , start_time 
    , start_telecode
    , start_station_no
    , end_telecode
    , start_bureau_code 
    , station_train_code
    , end_start_time
    , end_arrive_time
    , start_day_difference
    , end_day_difference
    , to_station_no
    , from_station
    , to_station
    INTO l_train_no,l_start_time,l_start_telecode,l_start_station_no,l_end_telecode,l_start_bureau_code,l_station_train_code,l_end_start_time,
    l_end_arrive_time,l_start_day_difference,l_end_day_difference,l_to_station_no,l_from_station_name,l_to_station_name
    FROM temp_train_info_station
     WHERE flag = 0 LIMIT 1;
    UPDATE temp_train_info_station SET flag = 1 WHERE train_no = l_train_no AND flag = 0;

                      
    IF train_date_in = l_current_date THEN
     SET l_start_datetime = str_to_date( concat(train_date_in ,l_start_time) ,'%Y%m%d%H%i');
                      
     IF timediff( l_start_datetime,now() ) <= l_overtime THEN
       DELETE FROM temp_train_info_station WHERE train_no = l_train_no;
       ITERATE lab_train_info_station; 
     END if;
    END if;

    SET l_train_code = l_train_no;
    CALL arith.CS50_Get_Train_Parameter(l_train_code,start_station_telecode_in,l_end_station_telecode,l_return_code);
    
    SELECT start_date                                    
    ,  running_style
    ,  running_rule
    INTO l_start_date,l_running_style,l_running_rule
    FROM basic.train_dir 
    WHERE train_code    = l_train_code
     AND subbureau_code = substring(l_train_no,1,2)
     AND double_id    = substring(l_train_no,11,1)
     AND schema_id    = substring(l_train_no,12,1);

    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount != 1 OR l_error != 0 THEN ITERATE lab_train_info_station; END if; 
                     
    IF l_running_style != 1 THEN
     SET l_date_after = datediff(train_date_in,l_start_date) - l_start_day_difference;
     SET l_date_after = l_date_after % l_running_style;
     IF l_running_rule & power(2,l_date_after) = 0 THEN ITERATE lab_train_info_station; END if; 
    END if;

                        
    IF EXISTS(SELECT 1 FROM temp_train_info_station WHERE train_no = l_train_no AND start_telecode = start_station_telecode_in) THEN
     DELETE FROM temp_train_info_station WHERE train_no = l_train_no AND start_telecode != start_station_telecode_in;
     IF l_start_telecode != start_station_telecode_in THEN  ITERATE lab_train_info_station; END if;                                   
     SET l_start_telecode = start_station_telecode_in;
    END IF;
    IF EXISTS(SELECT 1 FROM temp_train_info_station WHERE train_no = l_train_no AND end_telecode = to_station_telecode_in) THEN
     DELETE FROM temp_train_info_station WHERE train_no = l_train_no AND end_telecode != to_station_telecode_in;
     IF l_end_telecode != to_station_telecode_in THEN ITERATE lab_train_info_station; END if;                                     
     SET l_end_telecode = to_station_telecode_in;
    END if;

    INSERT INTO train_info_station VALUES (train_date_in,l_train_no,l_train_code,l_start_telecode,l_end_telecode);
    
    SET l_day_diff = l_end_day_difference - l_start_day_difference;
    IF l_end_start_time < l_end_arrive_time THEN SET l_end_day_difference = l_end_day_difference - 1; end if;
    SET l_day_diff = l_end_day_difference - l_start_day_difference;
    IF l_day_diff < 0 THEN SET l_day_diff = 0; end if;

    UPDATE temp_train_info_station SET day_diff = l_day_diff WHERE train_no = l_train_no AND flag = 1;

 END WHILE lab_train_info_station;


   if show_flag_in=9 then
 select * from train_info_station;
 
 select 'DQ40_left_station:call  DS60_ticket_left', 'train_info_station'                           
  , purpose_code_in
  , inner_code_in
  , range_in                                  
  , 'A'                        
  , 'tmp_ticket_left_station'                                                     
  ,  0                                           
  , show_flag_in,0,l_share_train_flag;
  end if;  
 CALL arith.DS60_ticket_left
  ('train_info_station'                           
  , purpose_code_in
  , inner_code_in
  , range_in                                  
  , 'A'                        
  , 'tmp_ticket_left_station'                                                     
  ,  0                                           
  , show_flag_in,0,l_share_train_flag)  ; 
 if show_flag_in=9 then
 
 SELECT * FROM tmp_ticket_left_station;
 select 'DQ40_left_station:end call  DS60_ticket_left';
 end if;  
 SET l_error =  @@error_count;
 IF l_error != 0 THEN leave lab_lab1; end if;

                                 
 IF l_left_new = 1 THEN
   SET @l_SQL = concat('INSERT INTO temp_left_base_center_station SELECT train_no,train_date,"", station_no,assign_station '
   , ' ,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,up_quantity,mid_quantity,down_quantity '
   , ' ,ticket_quantity,wseat_type_code,seat_feature,"" AS seat_type_name,"" AS purpose_name,0,0,"","","","","" '
   , ' FROM tmp_ticket_left_station ');
 ELSE
   SET @l_SQL = concat('INSERT INTO temp_left_base_center_station SELECT train_no,train_date,"", station_no,assign_station '
   , ' ,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,up_quantity,mid_quantity,down_quantity '
   , ' ,ticket_quantity,"","","","" ,0,0,"","","","","" '
   , ' FROM tmp_ticket_left_station ');
 END if;



 prepare stmt_1 from @l_SQL;
 EXECUTE stmt_1;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN leave lab_lab1; end if;


                
 
 UPDATE temp_left_base_center_station a,temp_train_info_station b SET a.station_train_code = b.station_train_code
  , a.start_time = b.start_time,a.assign_station = b.from_station
  , a.day_diff = b.day_diff,a.arrive_time = b.end_arrive_time
  , a.from_station = b.from_station,a.to_station = b.to_station
  , a.to_station_no = b.to_station_no
  WHERE a.train_no = b.train_no;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN leave lab_lab1; end if;
 

           
 
 

 UPDATE temp_left_base_center_station a,basic.seat_type b SET a.seat_type_name = b.seat_type_name
  WHERE a.seat_type_code = b.seat_type_code and a.seat_type_code != 'W';

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN leave lab_lab1; end if;

 UPDATE temp_left_base_center_station a,basic.seat_type b SET a.seat_type_name = 'ÎÞ×ù'
  WHERE a.seat_type_code = b.seat_type_code and a.seat_type_code = 'W';

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN leave lab_lab1; end if;
 
          
 UPDATE temp_left_base_center_station SET seat_type_name = 'ÎÞ×ù'
  WHERE seat_type_code = 'W';
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN leave lab_lab1; end if;

 
         
 UPDATE temp_left_base_center_station a,basic.DG50_purpose_define b FORCE INDEX(purpose_define_idx) SET a.purpose_name = b.purpose_name
  WHERE a.purpose_code = b.purpose_code;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN leave lab_lab1; end if;
 

 INSERT INTO temp_left_station (train_no, train_date,  start_time, station_train_code, station_no,   assign, far_from_station_no
  , far_from_station_name, limit_station_name, limit_station, coach_no,   seat_type_code,   seat_type_name, purpose_name
  , up_quantity,  mid_quantity,  down_quantity, ticket_quantity, coach_num, arrive_time ,  share_flag, day_difference
  , seat_feature , from_station , to_station , to_station_no )
 SELECT train_no,train_date,start_time,station_train_code,station_no,assign_station,far_from_station_no
 , '','',limit_station,coach_no,seat_type_code,seat_type_name,purpose_name
 , up_quantity,mid_quantity,down_quantity,ticket_quantity,0, arrive_time,share_flag,day_diff
 , seat_feature,from_station,to_station,to_station_no FROM temp_left_base_center_station;



 WHILE EXISTS(SELECT 1 FROM temp_left_station) DO
   SELECT train_no into l_train_no 
   FROM temp_left_station
   ORDER by start_time limit 1;

  
              
   SELECT DISTINCT train_no,train_date,start_time,station_train_code,station_no,from_station,to_station
   ,seat_type_code,seat_type_name,purpose_name,sum(up_quantity) up_quantity,sum(mid_quantity) mid_quantity,sum(down_quantity) down_quantity
   ,sum(ticket_quantity) ticket_quantity,sum(coach_num) coach_num,arrive_time,share_flag,day_difference,seat_feature
   FROM temp_left_station 
   WHERE train_no = l_train_no
   GROUP BY train_no,train_date,start_time,station_train_code,station_no,from_station,to_station,seat_type_code,seat_type_name,purpose_name
   ,arrive_time,share_flag,day_difference,seat_feature;
  
  

  

   DELETE FROM temp_left_station WHERE train_no = l_train_no;
 END WHILE;

 SET l_d2 = now();
       
 IF show_flag_in != 0 THEN
   SET l_SQL =  concat('total time=',rtrim(CONVERT(timediff( l_d2,l_d1)/1000,char)),'.',rtrim(CONVERT(timediff( l_d2,l_d1)%1000,CHAR)),'s');
   SELECT l_SQL;
 END if;

 LEAVE lab_lab1;

 set lab_lab1_s = 0;
 end loop lab_lab1;

 SET return_out=0;

if open_statistics='1' then
   set proc_stat_end =now();
   set proc_stat_time_diff = timestampdiff(SECOND,proc_stat_start,proc_stat_end);
   insert into proc_stat values('DQ40_left_station',proc_stat_start,proc_stat_end,proc_stat_time_diff);
 end if;
 COMMIT;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS50_Fetch_Train_Info`(IN `board_station_in` CHAR(10),IN `end_station_in` CHAR(10),IN `board_train_date_in` CHAR(8),IN `directions_in` CHAR(10),IN `telecode_list_in` varCHAR(255),IN `station_train_code_in` varCHAR(255),IN `purposes_in` varCHAR(255),IN `inner_code_in` CHAR(3),IN `range_in` TINYINT unsigned,IN `flag_in` TINYINT unsigned,IN `seat_type_list_in` varCHAR(255),IN `out_in` TINYINT unsigned,IN `kind_in` varCHAR(20),IN `purpose_mode_in` TINYINT unsigned,IN `tno_in` CHAR(12),IN `debug_in` TINYINT unsigned,OUT `return_out` int)
BEGIN
 
 DECLARE l_Version CHAR(30)
 ;DECLARE  l_temp_board_station   CHAR(10)      ;DECLARE  l_t_train_no       char(12)   ;DECLARE  l_t_down_quantity     int         ;DECLARE l_cancel_station VARCHAR(1024)     
 ;DECLARE  l_temp_end_station   CHAR(10)      ;DECLARE  l_t_train_date       char(8)    ;DECLARE  l_t_wseat_type_code   CHAR(1)     ;DECLARE l_start_name   CHAR(10)    
 ;DECLARE  l_temp_board_train_date  CHAR(8)       ;DECLARE  l_t_station_no       char(2)    ;DECLARE  l_t_seat_feature    CHAR(1)     ;DECLARE l_end_name   CHAR(10)    
 ;DECLARE  l_temp_directions    CHAR(10)      ;DECLARE  l_t_assign_station     char(3)    ;DECLARE  l_t_inner_code     CHAR(7)     ;DECLARE l_ticket_limit  INTEGER    
 ;DECLARE  l_temp_telecode_list  VARCHAR(255)  ;DECLARE  l_t_far_from_station_no    char(2)    ;DECLARE  l_range1        TINYINT unsigned  ;DECLARE l_cancel_seat_type VARCHAR(255)  
 ;DECLARE  l_temp_station_train_code VARCHAR(255) ;DECLARE  l_t_limit_station      char(2)    ;DECLARE  l_range2         TINYINT unsigned    ;DECLARE l_cancel_purpose VARCHAR(255)  
 ;DECLARE  l_temp_purposes    VARCHAR(255)  ;DECLARE  l_t_coach_no         char(2)    ;DECLARE  l_range3         TINYINT unsigned  ;DECLARE l_relation_code  CHAR(3)
 ;DECLARE  l_temp_inner_code   CHAR(3)       ;DECLARE  l_t_seat_type_code     char(1)    ;DECLARE  l_range4         TINYINT unsigned  ;DECLARE l_auto_share   CHAR(1)
 ;DECLARE  l_temp_range     TINYINT unsigned       ;DECLARE  l_t_purpose_code      char(2)    ;DECLARE  l_range5         TINYINT unsigned  
 ;DECLARE  l_temp_flag     TINYINT unsigned       ;DECLARE  l_t_range        TINYINT unsigned    ;DECLARE  l_center_notice1    VARCHAR(50) 
 ;DECLARE  l_temp_seat_type_list  VARCHAR(255)  ;DECLARE  l_t_ticket_quantity     int        ;DECLARE  l_notice_flag     CHAR(1)     
 ;DECLARE  l_temp_out     TINYINT unsigned       ;DECLARE  l_t_up_quantity      int        ;DECLARE  l_tmp_seat_type_list   VARCHAR(255)
 ;DECLARE  l_temp_kind     CHAR(10)      ;DECLARE  l_t_mid_quantity      int      ;DECLARE  l_seat_type_cache    VARCHAR(64)            
 ;DECLARE l_rowcount    INTEGER  ;DECLARE  l_error     INTEGER     ;DECLARE l_transform_station_telecode CHAR(3)   ;DECLARE l_original_station_telecode CHAR(3)                                                          
 ;DECLARE  l_start_date    CHAR(8)  ;DECLARE  l_stop_date     CHAR(8)              ;DECLARE l_share_flag      CHAR(1)       ;DECLARE l_seat_cache      TINYINT unsigned                                                                   
 ;DECLARE  l_start_station_name CHAR(10)  ;DECLARE  l_start_station_telecode CHAR(3)       ;DECLARE l_share_string     VARCHAR(8192) ;DECLARE l_transform_date   CHAR(8)                                                                            
 ;DECLARE  l_end_station_name  CHAR(10)  ;DECLARE  l_end_station_telecode CHAR(3)        ;DECLARE l_transform_no     CHAR(2)   ;DECLARE  l_transform_bureau_code CHAR(1)                                                                      
 ;DECLARE  l_train_class_code  CHAR(1)   ;DECLARE  l_subbureau_code   CHAR(2)            ;DECLARE l_transform_subbureau_code CHAR(2)   ;DECLARE l_sale_bureau    CHAR(1)                                                                   
 ;DECLARE  l_double_id     CHAR(1)   ;DECLARE  l_schema_id     CHAR(1)              ;DECLARE l_sale_subbureau      CHAR(2)   ;DECLARE l_old_range     TINYINT unsigned                                                                     
 ;DECLARE  l_seat_types    INTEGER  ;DECLARE  l_start_time    CHAR(4)              ;DECLARE l_old_sale_station    CHAR(3)   ;DECLARE l_fetch_w_seat    TINYINT unsigned                                                                     
 ;DECLARE  l_train_code    CHAR(8)  ;DECLARE  l_train_no     CHAR(12)             ;DECLARE l_day_difference_from   TINYINT unsigned   ;DECLARE l_tmp_range     SMALLINT                                                                  
 ;DECLARE  l_start_station_no  CHAR(2)  ;DECLARE  l_end_station_no   CHAR(2)              ;DECLARE l_tmp_start_coach_no   CHAR(2)   ;DECLARE l_tmp_end_coach_no   CHAR(2)                                                                   
 ;DECLARE  l_arrive_time    CHAR(4)  ;DECLARE  l_board_train_code  CHAR(8)             ;DECLARE l_cache_info_list    VARCHAR(1024) ;DECLARE l_train_default    TINYINT unsigned                                                                 
 ;DECLARE  l_start_telecode  CHAR(3)  ;DECLARE  l_start_bureau_code CHAR(1)              ;DECLARE l_start_city_code    CHAR(4)   ;DECLARE l_end_city_code    CHAR(4)                                                                   
 ;DECLARE  l_start_subbureau_code CHAR(2)  ;DECLARE  l_end_telecode   CHAR(3)              ;DECLARE l_station_telecode    CHAR(3)   ;DECLARE l_end_tele_list    VARCHAR(255)                                                              
 ;DECLARE  l_end_bureau_code  CHAR(1)  ;DECLARE  l_end_subbureau_code CHAR(2)              ;DECLARE l_overtime      INTEGER   ;DECLARE l_cache_time     DATETIME                                                                        
 ;DECLARE  l_direction_code   CHAR(1)  ;DECLARE  l_day_difference1   TINYINT unsigned              ;DECLARE l_old_start_telecode   CHAR(3)   ;DECLARE l_old_end_telecode   CHAR(3)                                                                   
 ;DECLARE  l_day_difference2   TINYINT unsigned  ;DECLARE  l_day_difference   TINYINT unsigned              ;DECLARE l_ls_to_range     CHAR(3)   ;DECLARE l_ls_from_range    CHAR(3)                                                                     
 ;DECLARE  l_board_datetime  DATETIME  ;DECLARE  l_arrive_train_date CHAR(8)              ;DECLARE l_d5        DATETIME   ;DECLARE l_ls_purposes    VARCHAR(255)                                                                    
 ;DECLARE  l_ticket_office   CHAR(7)  ;DECLARE  l_SQL      VARCHAR(1440)        ;DECLARE l_city_code      CHAR(4)   ;DECLARE l_TVM_Flag     TINYINT unsigned                                                                         
 ;DECLARE  l_board_subbureau_code CHAR(2)  ;DECLARE  l_board_center_code CHAR(2)            ;DECLARE l_ls_tmp_range      CHAR(3)    ;DECLARE l_ls_From_To_Flag   CHAR(3)                                                                 
 ;DECLARE  l_area_center_code  CHAR(2)  ;DECLARE  l_location_code   CHAR(2)              ;DECLARE l_ahead_time      INTEGER   ;DECLARE  l_to_station_no_limit    CHAR(2)                                                                  
 ;DECLARE  l_today     CHAR(8)  ;DECLARE  l_start_datetime  datetime             ;DECLARE l_end_start_time    CHAR(4)   ;DECLARE l_my_center_code   CHAR(2)                                                                       
 ;DECLARE  l_max_day     SMALLINT  ;DECLARE  l_bureau_code   CHAR(1)              ;DECLARE l_corporation_code    CHAR(3)   ;DECLARE l_corporation_name   CHAR(10)                                                                 
 ;DECLARE  l_To_Range     TINYINT unsigned  ;DECLARE  l_union_flag    CHAR(1)              ;DECLARE l_corporation_type    CHAR(1)   ;DECLARE l_sale_mode     CHAR(1)                                                                     
 ;DECLARE  l_From_To_Flag   SMALLINT  ;DECLARE  l_diff_day    SMALLINT             ;DECLARE l_train_type_code    CHAR(1)   ;DECLARE l_tbs_info     VARCHAR(255)                                                                  
 ;DECLARE  l_union_end_no   CHAR(2)  ;DECLARE  l_union_train_code  CHAR(8)              ;DECLARE l_start_flag      CHAR(1)   ;DECLARE l_d6       DATETIME                                                                          
 ;DECLARE  l_temp_train_code  CHAR(12)  ;DECLARE  l_command_code   CHAR(1)              ;DECLARE l_d7        DATETIME   ;DECLARE l_d8       DATETIME                                                                            
 ;DECLARE  l_seat_feature   CHAR(1)  ;DECLARE  l_tmp_seat_type   CHAR(1)              ;DECLARE l_t0        INTEGER   ;DECLARE  l_purpose_cache    VARCHAR(50)                                                                     
 ;DECLARE  l_seat_type_code  VARCHAR(30) ;DECLARE  l_bed_level    CHAR(1)              ;DECLARE l_t1        INTEGER   ;DECLARE l_t2       INTEGER                                                                               
 ;DECLARE  l_ticket_type   TINYINT unsigned  ;DECLARE  l_special_visa   TINYINT unsigned              ;DECLARE l_t3        INTEGER   ;DECLARE l_t4       INTEGER                                                                               
 ;DECLARE  l_relay_ticket_type TINYINT unsigned  ;DECLARE  l_price_procedure  VARCHAR(40)          ;DECLARE l_t5        INTEGER   ;DECLARE l_t6       INTEGER                                                                               
 ;DECLARE  l_ticket_price   SMALLINT  ;DECLARE  l_total     INTEGER              ;DECLARE l_t7        INTEGER   ;DECLARE l_d9       DATETIME                                                                              
 ;DECLARE  l_up      INTEGER  ;DECLARE  l_mid      INTEGER              ;DECLARE l_t8        INTEGER   ;DECLARE l_t9       INTEGER                                                                               
 ;DECLARE  l_down      INTEGER  ;DECLARE  l_Is_Bed     TINYINT unsigned              ;DECLARE l_d10        DATETIME   ;DECLARE l_d11       DATETIME                                                                        
 ;DECLARE  l_bed_code_list   VARCHAR(30) ;DECLARE   l_soft_code_list   VARCHAR(30)        ;DECLARE l_start_pycode     VARCHAR(20)  ;DECLARE l_end_pycode     VARCHAR(20)                                                                 
 ;DECLARE  l_Is_soft     TINYINT unsigned  ;DECLARE  l_belong_seat_type_code CHAR(1)           ;DECLARE l_cache_used      INTEGER   ;DECLARE l_delete_flag    TINYINT unsigned                                                                       
 ;DECLARE  l_train_info_list  VARCHAR(255);DECLARE  l_row      INTEGER              ;DECLARE l_ticket_num      INTEGER   ;DECLARE l_GS_MODE      TINYINT unsigned                                                                       
 ;DECLARE  l_start_tele_list  VARCHAR(255);DECLARE  l_tmp_list    VARCHAR(255)         ;DECLARE l_phone_reserve_flag   INTEGER   ;DECLARE l_tmp_purpose    VARCHAR(60)                                                                     
 ;DECLARE  l_start_tele_list1  VARCHAR(255);DECLARE  l_end_tele_list1  VARCHAR(255)         ;DECLARE l_num_limit      INTEGER   ;DECLARE l_wseat_type_code   CHAR(1)                                                                     
 ;DECLARE  l_d1       DATETIME  ;DECLARE  l_d2       DATETIME             ;DECLARE l_running_style     INTEGER   ;DECLARE l_running_rule    INTEGER                                                                     
 ;DECLARE  l_d3      DATETIME  ;DECLARE    l_d4      DATETIME             ;DECLARE l_date_after      INTEGER   ;DECLARE l_return_code    INTEGER                                                                       
 ;DECLARE  l_fetch_range   TINYINT unsigned  ;DECLARE  l_union_start_telecode VARCHAR(255)        ;DECLARE l_purpose_code     CHAR(2)   ;DECLARE l_ticket_range    TINYINT unsigned                                                                       
 ;DECLARE  l_default_flag   TINYINT unsigned  ;DECLARE  l_original_default_num INTEGER             ;DECLARE l_schedule_coach    CHAR(2)   ;DECLARE l_12306_flag     TINYINT unsigned                                                                       
 ;DECLARE  l_tmp_start_time  CHAR(4)  ;DECLARE  l_tmp_arrive_time  CHAR(4)              ;DECLARE l_share_to_wseat    CHAR(1)   ;DECLARE l_start_train_date   CHAR(8)                                                                     
 ;DECLARE    l_w_seat_type   CHAR(1)  ;DECLARE  l_train_type    CHAR(1)              ;DECLARE l_train_stop_sale    TINYINT unsigned   ;DECLARE l_center_notice    VARCHAR(30)                                                               
 ;DECLARE    l_train_seat_cache  TINYINT unsigned  ;DECLARE  l_train_modify_time DATETIME          ;DECLARE l_train_para_define   VARCHAR(30)  ;DECLARE l_original_bureau_code CHAR(1)                                                                 
 ;DECLARE    l_network_train_brand VARCHAR(255);DECLARE  l_train_period   TINYINT unsigned          ;DECLARE l_sale_flag      TINYINT unsigned   ;DECLARE l_old_seat_feature   CHAR(1)                                                                     
 ;DECLARE    l_train_period_flag TINYINT unsigned  ;DECLARE  l_tmp_start_datetime DATETIME          ;DECLARE l_network_mode     TINYINT unsigned   ;DECLARE l_network_mode1    TINYINT unsigned 
 ;DECLARE    l_is_student    TINYINT unsigned  ;DECLARE  l_w_flag     CHAR(1)              ;DECLARE l_seat_info_flag    TINYINT unsigned   ;DECLARE l_my_modify_time   DATETIME 
 ;DECLARE  l_input_purposes  VARCHAR(255);DECLARE  l_t10      INTEGER     ;DECLARE l_t11        INTEGER   ;DECLARE l_t12       INTEGER
 ;DECLARE  l_management_bureau CHAR(1)  ;DECLARE  l_Train_Time_Proc  VARCHAR(30)    ;DECLARE  l_tmp_start_time1    CHAR(4)   ;DECLARE l_From_Range     TINYINT unsigned 
 ;DECLARE    l_default_num    INTEGER    ;DECLARE    l_command_list   VARCHAR(255)   ;DECLARE  l_pos        INTEGER       ;DECLARE l_interval_num    INTEGER             
 ;DECLARE    l_minute     INTEGER  ;DECLARE  l_train_brand_list  VARCHAR(255)   ;DECLARE l_train_brand     VARCHAR(2)  ;DECLARE l_syn_flag     INTEGER
 ;DECLARE    l_interval_time   DATETIME  ;DECLARE  l_cache_flag    INTEGER      ;DECLARE l_init_train_period_flag  TINYINT unsigned 
 ;DECLARE   l_R_original_station_bureau char(1) ;DECLARE l_R_original_subbureau_code char(2);DECLARE l_R_sale_bureau char(1) ;DECLARE l_R_sale_subbureau char(2) 
 ;DECLARE l_C_from_period TINYINT unsigned
 ;DECLARE l_C_control_min_date char(8)
 ;DECLARE l_C_start_date char(8)
 ;DECLARE l_C_train_period   TINYINT unsigned 
 ;DECLARE l_now_datetime    VARCHAR(30)
 ;DECLARE l_declare_day     char(8)
 ;DECLARE l_now_time_char    char(4)
 ;DECLARE l_control_day     int
 ;DECLARE l_min_time_flag    char(1)
 ;DECLARE l_min_time        char(4);
 Declare record_not_found Integer Default 0;
 DECLARE lab_null_return_s INTEGER; DECLARE lab_web_tail_s INTEGER;
 
 declare proc_stat_start datetime;
   declare proc_stat_end datetime;
   declare proc_stat_time_diff int;
   declare open_statistics varchar(20);


 declare debugErrorNo varchar(20);
 Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;
 
 
  
  
  
  
  
  select parameter_value into open_statistics from arith.parameters where parameter_code='open_statistics';
if open_statistics='1' then
 set proc_stat_start = now();
end if;
  
 
 
 CREATE Temporary TABLE If Not Exists tmp_stop_time_train_info 
  ( start_station_name CHAR(10)
  , end_station_name   CHAR(10)
  ,  train_class_code   CHAR(1)
  ,  seat_types     INTEGER
  ,  start_time    CHAR(4)
  ,  arrive_time    CHAR(4)
  ,  train_no     CHAR(12)          
  , start_station_no  CHAR(2)
  ,  end_station_no   CHAR(2)
  ,  board_train_code  CHAR(8)         
  ,  start_telecode   CHAR(3)
  ,  start_bureau_code  CHAR(1)
  ,  start_subbureau_code CHAR(2)
  , end_telecode   CHAR(3)
  , end_bureau_code  CHAR(1)
  , end_subbureau_code CHAR(2)
  , ticket_office   CHAR(7)
  , location_code   CHAR(2)                                          
  , day_difference   INTEGER
  , arrive_date    CHAR(8)
  , info_list    VARCHAR(255)
  , default_flag   TINYINT unsigned
  , start_tele_list  VARCHAR(255)
  , end_tele_list   VARCHAR(255)
  , start_pycode   VARCHAR(20)
  , end_pycode    VARCHAR(20)
  , train_code    CHAR(8)
  , train_type    CHAR(1)
  , seat_feature   CHAR(1)
  , board_train_date  CHAR(8)  
  , cache_time    DATETIME
  , start_code    CHAR(10)  
  , end_code     CHAR(10)  
  , start_date    CHAR(8)  
  , purposes     VARCHAR(50)
  , to_limit_no    CHAR(2)
  , notice_flag    CHAR(1)
  , start_name    CHAR(10) 
  , end_name     CHAR(10)
  , management_bureau  CHAR(1) 
  , control_day         int    
  , sale_time           CHAR(4) 
  , control_train_day   CHAR(8) 
  ,  cancel_purpose_code VARCHAR(255) 
  , INDEX idx_query( train_no,start_telecode,end_telecode)
  );
 Truncate Table tmp_stop_time_train_info;
 

 CREATE Temporary TABLE If Not Exists temp_union_station_train_info (my_tele_code char(3) NOT NULL,INDEX idx_union( my_tele_code)); 
 Truncate Table temp_union_station_train_info;

 CREATE Temporary TABLE If Not Exists tmp_train_no_train_info  
 (train_no CHAR(12) NOT NULL,num INTEGER NOT NULL,
  flag CHAR(8) NOT NULL,
  INDEX idx_train( train_no));
 Truncate Table tmp_train_no_train_info;

  CREATE Temporary TABLE If Not Exists tmp_stop_time_train_train_info  
  (
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_no char(12)   NOT NULL,
  station_no char(2)   NOT NULL,
  station_name char(10)   NOT NULL,
  station_shortcode char(3)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  station_train_code char(8)   NOT NULL,
  route_tele_code char(3)   NOT NULL,
  segment_code char(4)   NOT NULL,
  bureau_code char(1)   NOT NULL,
  subbureau_code char(2)   NOT NULL,
  day_difference TINYINT unsigned   NOT NULL,
  arrive_time char(4)   NOT NULL,
  start_time char(4)   NOT NULL,
  distance smallint   NOT NULL,
  distance1 smallint   NOT NULL,
  distance2 smallint   NOT NULL,
  distance3 smallint   NOT NULL,
  distance4 smallint   NOT NULL,
  distance5 smallint   NOT NULL,
  line_alter1 char(7)   NOT NULL,
  line_alter2 char(7)   NOT NULL,
  line_alter3 char(7)   NOT NULL,
  line_alter4 char(7)   NOT NULL,
  origin char(2)   NOT NULL,
  INDEX train_query_idx( train_no,station_telecode));
  Truncate Table tmp_stop_time_train_train_info;

  
  CREATE Temporary TABLE If Not Exists tmp_share_train_info  
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT unsigned NOT NULL
  , l_range      TINYINT unsigned NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  , train_no    CHAR(12) NOT NULL
  , to_station_limit CHAR(2) NOT NULL
  , old_purposes   VARCHAR(60) NOT NULL
  , wseat_type_code  CHAR(1) NOT NULL 
  , cancel_seat_type VARCHAR(255) NOT NULL  
  , cancel_purpose_code VARCHAR(255) NOT NULL
  , from_range    TINYINT unsigned NOT NULL
  );
  Truncate Table tmp_share_train_info;
  
  CREATE Temporary TABLE If Not Exists tmp_share_train_info2  
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT unsigned NOT NULL
  , l_range      TINYINT unsigned NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  , train_no    CHAR(12) NOT NULL
  , to_station_limit CHAR(2) NOT NULL
  , old_purposes   VARCHAR(60) NOT NULL
  , wseat_type_code  CHAR(1) NOT NULL 
  , cancel_seat_type VARCHAR(255) NOT NULL  
  , cancel_purpose_code VARCHAR(255) NOT NULL
  , from_range    TINYINT unsigned NOT NULL
  );
  
  CREATE Temporary TABLE If Not Exists tmp_share_train_info3  
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT unsigned NOT NULL
  , l_range      TINYINT unsigned NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  , train_no    CHAR(12) NOT NULL
  , to_station_limit CHAR(2) NOT NULL
  , old_purposes   VARCHAR(60) NOT NULL
  , wseat_type_code  CHAR(1) NOT NULL 
  , cancel_seat_type VARCHAR(255) NOT NULL  
  , cancel_purpose_code VARCHAR(255) NOT NULL
  , from_range    TINYINT unsigned NOT NULL
  );
 
  CREATE Temporary TABLE If Not Exists tmp_share_train_info4  
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT unsigned NOT NULL
  , l_range      TINYINT unsigned NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  , train_no    CHAR(12) NOT NULL
  , to_station_limit CHAR(2) NOT NULL
  , old_purposes   VARCHAR(60) NOT NULL
  , wseat_type_code  CHAR(1) NOT NULL 
  , cancel_seat_type VARCHAR(255) NOT NULL  
  , cancel_purpose_code VARCHAR(255) NOT NULL
  , from_range    TINYINT unsigned NOT NULL
  );
  
  CREATE Temporary TABLE If Not Exists tmp_share_train_info5  
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT unsigned NOT NULL
  , l_range      TINYINT unsigned NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  , train_no    CHAR(12) NOT NULL
  , to_station_limit CHAR(2) NOT NULL
  , old_purposes   VARCHAR(60) NOT NULL
  , wseat_type_code  CHAR(1) NOT NULL 
  , cancel_seat_type VARCHAR(255) NOT NULL  
  , cancel_purpose_code VARCHAR(255) NOT NULL
  , from_range    TINYINT unsigned NOT NULL
  );
  
  CREATE Temporary TABLE If Not Exists tmp_share_train_info6  
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT unsigned NOT NULL
  , l_range      TINYINT unsigned NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  , train_no    CHAR(12) NOT NULL
  , to_station_limit CHAR(2) NOT NULL
  , old_purposes   VARCHAR(60) NOT NULL
  , wseat_type_code  CHAR(1) NOT NULL 
  , cancel_seat_type VARCHAR(255) NOT NULL  
  , cancel_purpose_code VARCHAR(255) NOT NULL
  , from_range    TINYINT unsigned NOT NULL
  );
  
  
  CREATE Temporary TABLE If Not Exists tmp_train_para_define_train_info 
  (
  inner_code char(3)   NOT NULL,
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_code char(8)   NOT NULL,
  start_station_name char(10)   NOT NULL,
  end_station_name char(10)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  train_type char(1)   NOT NULL,
  seat_type_code char(1)   NOT NULL,
  ticket_type TINYINT unsigned   NOT NULL,
  purpose_code char(2)   NOT NULL,
  l_range TINYINT unsigned   NOT NULL,
  control_day TINYINT unsigned   NOT NULL,
  control_train_day char(8)   NOT NULL,
  ahead_time int   NOT NULL,
  location_code char(2)   NOT NULL,
  office_no char(7)   NOT NULL,
  window_no TINYINT unsigned   NOT NULL,
  operater_no char(4)   NOT NULL,
  operater_time datetime   NOT NULL,
  flag1 char(10)   NOT NULL,
  flag2 char(10)   NOT NULL,
  group_code         char(20) NOT NULL,
  level_flag         char(1)  NOT NULL,
  from_period        TINYINT unsigned  NOT NULL,
  control_min_date   char(8)  NOT NULL,
  train_class        char(1)  NOT NULL,
  demand_id          char(18) NOT NULL,
  flag3              char(30) NOT NULL,
  flag4              char(30) NOT NULL,
  flag5              char(30) NOT NULL,
  flag6              char(30) NOT NULL,
  flag7              char(30) NOT NULL,
  flag8              char(30) NOT NULL 
  );
  Truncate Table tmp_train_para_define_train_info;
  
  CREATE Temporary TABLE If Not Exists tmp_seat_info_train_info 
  ( train_date  CHAR(8) NOT NULL,
  train_no   CHAR(12) NOT NULL,
  seat_type_code char(1)  NOT NULL,
  purpose_code VARCHAR(60) NOT NULL,
  l_range    TINYINT unsigned  NOT NULL,
  period_flag  TINYINT unsigned  NOT NULL, 
  ticket_num  INTEGER NOT NULL, 
  to_limit_no  CHAR(2) NOT NULL, 
  wseat_type_code CHAR(1) NOT NULL,
  flag    TINYINT unsigned NOT NULL  
  );
  Truncate Table tmp_seat_info_train_info;

  CREATE Temporary TABLE If Not Exists tmp_seat_type_info_train_info 
  ( train_date  CHAR(8) NOT NULL,
  train_no   CHAR(12) NOT NULL,
  seat_type_code char(1)  NOT NULL,
  wseat_type_code CHAR(1) NOT NULL,
  ticket_num  INTEGER NOT NULL, 
  flag    TINYINT unsigned NOT NULL  
  );
  Truncate Table tmp_seat_type_info_train_info;


  CREATE Temporary TABLE If Not Exists tmp_cancel_limit_define_train_info 
  (
  inner_code char(3)   NOT NULL,
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_code char(8)   NOT NULL,
  start_station_name char(10)   NOT NULL,
  end_station_name char(10)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  cancel_office_no char(7)   NOT NULL,
  cancel_window_no TINYINT unsigned   NOT NULL,
  ahead_time int   NOT NULL,     
  location_code char(2)   NOT NULL,
  office_no char(7)   NOT NULL,
  window_no TINYINT unsigned   NOT NULL,
  operater_no char(4)   NOT NULL,
  operater_time datetime   NOT NULL,
  flag1 char(10)   NOT NULL,
  flag2 char(10)   NOT NULL,
  running_style TINYINT unsigned   NOT NULL,    
  running_rule int   NOT NULL,
  seat_type_code char(1)   NOT NULL,
  purpose_code char(2)   NOT NULL,
  train_type char(1)   NOT NULL,
  sale_mode char(1)   NOT NULL,
  far_from_station char(3) NOT NULL,
  level_flag   int NOT NULL,
  INDEX idx_limit(start_date,stop_date,train_code,station_telecode)
  );
  Truncate Table tmp_cancel_limit_define_train_info;
  
  CREATE Temporary TABLE If Not Exists tmp_center_notice_train_info 
  (
  inner_code char(3)   NOT NULL,
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_no char(12)   NOT NULL,
  running_style TINYINT unsigned   NOT NULL,
  running_rule int   NOT NULL,
  station_no char(2)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  station_name char(10)   NOT NULL,
  board_train_code char(8)   NOT NULL,
  command_no char(7)   NOT NULL,
  command_code char(1)   NOT NULL,
  inform_type char(1)   NOT NULL,
  day_difference TINYINT unsigned   NOT NULL,
  arrive_time char(4)   NOT NULL,
  start_time char(4)   NOT NULL,
  time_interval TINYINT unsigned   NOT NULL,
  command_id char(16)   NOT NULL,
  operate_time datetime   NOT NULL,
  operater_no char(4)   NOT NULL,
  operater_name char(8)   NOT NULL,
  command_enable TINYINT unsigned   NOT NULL,
  INDEX idx_notice(train_no,station_telecode,command_code,start_date,stop_date));
  Truncate Table tmp_center_notice_train_info;

  
  CREATE Temporary TABLE If Not Exists tmp_ticket_left_train_info 
  (
  assign_station char(3)   NOT NULL,
  train_no char(12)   NOT NULL,
  train_date char(8)   NOT NULL,
  station_no char(2)   NOT NULL,
  far_from_station_no char(2)   NOT NULL,
  limit_station char(2)   NOT NULL,
  coach_no char(2)   NOT NULL,
  seat_type_code char(1)   NOT NULL,
  purpose_code char(2)   NOT NULL,
  l_range   TINYINT unsigned not null,
  ticket_quantity int   NOT NULL,
  up_quantity int   NOT NULL,
  mid_quantity int   NOT NULL,
  down_quantity int   NOT NULL,
  wseat_type_code char(1) NOT NULL,
  seat_feature char(1) NOT NULL,
  inner_code char(7)   NOT NULL);
  Truncate Table tmp_ticket_left_train_info;

  CREATE Temporary TABLE If Not Exists tmp_train_cache_train_info 
 (train_no CHAR(12),train_code CHAR(8),flag TINYINT unsigned);
  Truncate Table tmp_train_cache_train_info;

  CREATE Temporary TABLE If Not Exists tmp_train_cache_train_info1 
 (train_no CHAR(12),train_code CHAR(8),flag TINYINT unsigned);
  
  CREATE Temporary TABLE If Not Exists tmp_train_cache_train_info2 
 (train_no CHAR(12),train_code CHAR(8),flag TINYINT unsigned);
  
  CREATE Temporary TABLE If Not Exists tmp_train_cache_train_info3 
 (train_no CHAR(12),train_code CHAR(8),flag TINYINT unsigned);
 

 CREATE Temporary TABLE If Not Exists tmp_train_group_train_info 
 (
  group_code   char(20) 
  );
  Truncate Table tmp_train_group_train_info;

 
 if board_station_in is null then 
  set board_station_in ='ÄÏ¾©' ;
 end if; 
 if end_station_in is null then 
  set end_station_in ='ÉÏº£' ;
 end if; 
 if board_train_date_in is null then 
  set board_train_date_in ='20090105' ;
 end if; 
 if directions_in is null then 
  set directions_in ='*' ;
 end if; 
 if telecode_list_in is null then 
  set telecode_list_in ='SHH:SNH' ;
 end if; 
 if station_train_code_in is null then 
  set station_train_code_in ='#5#1440#DTK' ;
 end if; 
 if purposes_in is null then 
  set purposes_in ='00';
 end if; 
 if inner_code_in is null then 
  set inner_code_in ='SHH' ;
 end if; 
 if range_in is null then 
  set range_in =4 ;
 end if; 
 if flag_in is null then 
  set flag_in =0 ;
 end if; 
 if seat_type_list_in is null then 
  set seat_type_list_in ='1234MO' ;
 end if; 
 if out_in is null then 
  set out_in =0 ;
 end if; 
 if kind_in is null then 
  set kind_in ='' ;
 end if; 
 if purpose_mode_in is null then 
  set purpose_mode_in =2 ;
 end if; 
 if tno_in is null then 
  set tno_in ='%' ;
 end if; 
 if debug_in is null then 
  set debug_in =0 ;
 end if; 
 

 
 Set Transaction Isolation Level Read uncommitted;

 set l_Version = "Ver 20141223.12:00";
        
                
               

 set l_temp_board_station  = board_station_in            , l_temp_end_station   = end_station_in
  , l_temp_board_train_date  = board_train_date_in    , l_temp_directions    = directions_in  
  , l_temp_telecode_list   = telecode_list_in     , l_temp_station_train_code = station_train_code_in
  , l_temp_purposes    = purposes_in       , l_temp_inner_code    = inner_code_in 
  , l_temp_range     = range_in        , l_temp_flag      = flag_in  
  , l_temp_seat_type_list  = seat_type_list_in     , l_temp_out      = out_in  
  , l_temp_kind      = kind_in;

 set l_d1      = NOW()        
  ,  l_cache_used   = 0
  ,  l_sale_mode   = 'A'   
  ,  l_network_mode1  = 0   
  ,  l_is_student     = 0
  ,  l_ticket_limit   = 20   
 
  ,  l_Train_Time_Proc = 'arith.DS60_Train_Time';

 set l_today     = CURDATE()+0;
 set l_board_datetime = CONVERT( board_train_date_in ,DATETIME);
 set l_now_time_char = date_format(NOW(),'%H%i');

 
 IF flag_in BETWEEN 5 AND 9 THEN set l_sale_flag = 1;
 ELSE set l_sale_flag = 0;
 end if;

 
 IF flag_in IN (13,14) THEN
   set l_network_mode = 1;
   
   set l_network_train_brand = '[CDGZTK1234567089LYA]%';    

   IF instr( purposes_in,'0X') % 2 = 1 THEN 
    set l_is_student = 1;
   ELSE set l_is_student = 0;
   end if;
 ELSE set l_network_mode = 0,l_network_train_brand = '%';
 end if;

 
 IF flag_in = 12 THEN set flag_in = 11,l_12306_flag = 1;
 ELSE set l_12306_flag = 0;
 end if;
       
 IF flag_in = 11 THEN set l_phone_reserve_flag = 1 ,l_sale_mode = 'E' ,l_12306_flag = 1; 
 ELSE set l_phone_reserve_flag = 0;
 end if;

 if  flag_in in (11,0) THEN  
   IF instr( purposes_in,'0X') % 2 = 1 THEN set l_is_student = 1;
   ELSE set l_is_student = 0;
   end if;
 end if;

 IF l_12306_flag = 1 THEN set l_sale_mode = 'E'; end if; 

 IF flag_in < 5 THEN
  set l_TVM_Flag = 1,l_num_limit = 5,l_sale_mode = 'B';
  IF instr( seat_type_list_in,'W') = 0 THEN set seat_type_list_in = concat('W' , ltrim(rtrim(seat_type_list_in))); end if;
  IF instr( seat_type_list_in,'Q') = 0 THEN set seat_type_list_in = concat(ltrim(rtrim(seat_type_list_in)) , 'Q'); end if; 
  IF instr( seat_type_list_in,'S') = 0 THEN set seat_type_list_in = concat(ltrim(rtrim(seat_type_list_in)) , 'S'); end if;
 ELSE set l_TVM_Flag = 0,l_num_limit = 1;
 end if;

 
 IF l_network_mode = 1 THEN set l_num_limit = 1,l_TVM_Flag = 1,l_sale_mode = 'E'; end if;



 
 IF l_sale_mode != 'E' THEN  
   
   
   SELECT  relation_code INTO l_relation_code FROM Basic.Dg50_Purpose_Relate_Define
    WHERE inner_code = 'AD' 
     AND start_date <= l_today
     AND stop_date  >= l_today
     AND station_telecode = "***"
     AND instr(purposes_in,purpose_code) % 2 = 1     
     AND ltrim(rtrim(obligate1)) = '1'         
    ORDER BY relation_code LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   
   set record_not_found=0;
   begin 
    
    DECLARE purpose_cursor CURSOR FOR
    SELECT  purpose_code FROM basic.DG50_purpose_relate_define
     WHERE inner_code = 'AD' 
      AND start_date <= l_today
      AND stop_date  >= l_today
      AND relation_code = l_relation_code
      AND ltrim(rtrim(obligate1)) >= '1'
    
      ORDER BY obligate1;          
    OPEN purpose_cursor;
    
    lab_purpose:
    WHILE 1 = 1 DO
     FETCH purpose_cursor INTO l_t_purpose_code;
     if record_not_found = 1 THEN
       leave lab_purpose;
     end IF;
     
     IF instr(purposes_in,l_t_purpose_code) % 2 = 0 THEN set purposes_in = concat(rtrim(purposes_in) , l_t_purpose_code); end if;
    END WHILE lab_purpose;
    
    CLOSE purpose_cursor;
  end;
 END IF;
 
 
 IF instr(purposes_in,'00') % 2 = 1 AND instr(purposes_in,'02') % 2 = 0 THEN set purposes_in = concat(rtrim(purposes_in) , '02'); end if;
 IF instr(purposes_in,'1C') % 2 = 1 AND instr(purposes_in,'2C') % 2 = 0 THEN set purposes_in = concat(rtrim(purposes_in) , '2C'); end if;


 IF flag_in = 10 THEN   
  IF substring(station_train_code_in,1,1) = '%' AND substring(station_train_code_in,2,1) = '#' THEN
  set l_GS_MODE = 1,flag_in = 1,station_train_code_in = substring(station_train_code_in,2,12);
  END if;

  IF instr( seat_type_list_in,'W') = 0 THEN set seat_type_list_in = concat('W' , ltrim(rtrim(seat_type_list_in))); end if;
 ELSE set l_GS_MODE = 0,flag_in = 0;
 end if;

 set l_bed_code_list = "3456ACFGHL", l_soft_code_list = "246789ADEFGHIJL";
 
 IF debug_in = 9 THEN
  select '2',purposes_in;
 end if;

              
 set l_default_num     = -1
  ,  l_original_default_num = -1
  ,  l_minute      = 0
  ,  l_train_brand_list  = NULL
  ,  l_train_brand    = ""
  ,  l_overtime     = -5;

 IF substring(station_train_code_in,1,1) = '#' THEN 
   set l_train_default  = 1  ;
   IF l_network_mode = 1 THEN set l_train_default = 0; end if;
   set l_command_list   = station_train_code_in;
   set station_train_code_in = '%' ;
   set l_command_list = substring(l_command_list,2,length(l_command_list));
   set l_pos = instr(l_command_list,'#');
   IF l_pos = 0 THEN 
    set l_default_num = CONVERT(l_command_list,signed);
   ELSE 
    set l_default_num = CONVERT(substring(l_command_list,1,l_pos - 1),signed);
    set l_command_list = substring(l_command_list,l_pos + 1,char_length(l_command_list));
    set l_pos = INSTR(l_command_list,'#');
    IF l_pos = 0 THEN 
      set l_minute = CONVERT(l_command_list,signed);
    ELSE
      set l_minute = CONVERT(substring(l_command_list,1,l_pos - 1),signed);
      set l_command_list   = substring(l_command_list,l_pos + 1,char_length(l_command_list));
      set l_train_brand_list = concat(l_command_list , '%');             
    END if;
   END if;

   IF l_default_num = 0 THEN set l_default_num = -1; end if;               
   set l_original_default_num = l_default_num;                  
 ELSE set l_train_default = 0 ;
 end if;
 
 IF debug_in = 9 THEN
 select '21======',board_station_in,board_train_date_in;
 end if;
 
 lab_return:loop

 set lab_null_return_s = 1;
 lab_null_return:loop
 if lab_null_return_s = 0 THEN
   leave lab_null_return;
 end if;

 IF length(rtrim(ltrim(board_station_in))) = 3 THEN
   set l_start_telecode = board_station_in;
   
   SELECT station_name,bureau_code,subbureau_code,city_code
   INTO board_station_in,l_bureau_code,l_subbureau_code,l_city_code
   FROM basic.station_dictionary 
   WHERE station_telecode = board_station_in
   AND start_date <= board_train_date_in
   AND stop_date >= board_train_date_in;
   set l_error =  @@error_count,l_rowcount = row_count();   
   IF l_rowcount = 0 THEN      
     LEAVE lab_null_return  ; 
    end if;
 ELSE
  
   SELECT station_telecode,bureau_code,subbureau_code,city_code
   INTO l_start_telecode,l_bureau_code,l_subbureau_code,l_city_code
   FROM basic.station_dictionary 
   WHERE station_name = board_station_in
   AND start_date <= board_train_date_in
   AND stop_date >= board_train_date_in;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 THEN
     LEAVE lab_null_return  ; 
   end if;
 END if;
 IF length(rtrim(ltrim(end_station_in))) = 3 THEN
   set l_end_telecode = end_station_in;
   
   SELECT station_name INTO end_station_in FROM basic.station_dictionary 
   WHERE station_telecode = end_station_in
   AND start_date <= board_train_date_in
   AND stop_date >= board_train_date_in;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 THEN LEAVE lab_null_return  ; end if;
 ELSE 
 
   SELECT station_telecode INTO l_end_telecode FROM basic.station_dictionary 
   WHERE station_name = end_station_in
   AND start_date <= board_train_date_in
   AND stop_date >= board_train_date_in;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 THEN LEAVE lab_null_return  ; end if;
 END if;
 
 IF debug_in = 9 THEN
 select '3',board_station_in,l_bureau_code,l_subbureau_code,l_city_code,l_end_telecode;
 end if;
 
 set l_old_start_telecode = l_start_telecode
  ,  l_old_end_telecode = l_end_telecode;
                 
 set l_From_To_Flag = 1
  ,  l_default_flag = 0;

 IF flag_in != 1 THEN
  set l_price_procedure = "arith.DS60_total_price";
 END if;

 set l_To_Range = range_in
  , l_delete_flag = 0  ;                                 

 
 IF l_sale_mode NOT IN ('E','9') THEN   
  
   SELECT bureau_code,subbureau_code,city_code
   INTO l_bureau_code,l_subbureau_code,l_city_code
   FROM basic.station_dictionary 
    WHERE station_telecode = inner_code_in
    AND start_date <= board_train_date_in
    AND stop_date >= board_train_date_in;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount != 1 OR l_error != 0  THEN LEAVE lab_null_return  ; end if; 
 ELSE set inner_code_in = '***';  
 end if;
            
 set l_union_flag = "0" ;
 IF flag_in != 1 AND l_sale_mode NOT IN ('E','9') THEN 
  
   INSERT INTO  temp_union_station_train_info 
   SELECT station_telecode FROM basic.DG50_same_city_dictionary 
   WHERE start_date <= board_train_date_in
   AND stop_date >= board_train_date_in
   AND city_code = l_city_code 
   AND  station_telecode <> inner_code_in
   AND  union_flag  = "1";
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount > 0 THEN set l_union_flag = "1" ; end if;
 END if;
            
 set l_From_Range = 0;
 IF (l_start_telecode <> inner_code_in) AND l_sale_mode NOT IN ('E','9') THEN 
  
   SELECT bureau_code,subbureau_code
   INTO l_start_bureau_code,l_start_subbureau_code
   FROM basic.station_dictionary 
    WHERE station_telecode = l_start_telecode
    AND start_date <= board_train_date_in
    AND stop_date >= board_train_date_in LIMIT 1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 THEN LEAVE lab_null_return  ; end if; 

   IF l_bureau_code != l_start_bureau_code THEN 
    set l_From_Range = 4  ;       
   ELSE
    set l_From_Range = 3;               
    IF l_union_flag = '1' THEN
      IF EXISTS(SELECT 1 FROM  temp_union_station_train_info WHERE my_tele_code = l_start_telecode) THEN
       set l_From_Range = 1;
      end if;
    END if;
   END if;
 ELSE set l_start_bureau_code = l_bureau_code; 
 end if;
 
 IF debug_in = 9 THEN
 select '4',l_start_bureau_code,l_start_subbureau_code;
 end if;
     
 set l_interval_num = 24;                     
 set l_interval_time = date_add(NOW(),interval -l_interval_num HOUR);
         
 
 IF debug_in = 9 THEN
  SELECT '####################DBG.20.¼ÆËãÍ¬³ÇÇ°²ÎÊýÊä³ö.##############';
  
 END if;
                
 
 
 IF flag_in != 1 THEN
 IF debug_in = 9 THEN
  select 'ds50_fetch_train_info,20_0=====';
 end if;
 
  SELECT my_center_code into l_my_center_code FROM center.DG30_my_center;
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_rowcount = 0 THEN LEAVE lab_null_return  ; end if; 
 END if;
 IF debug_in = 9 THEN
  select 'ds50_fetch_train_info,20_1=====';
 end if;
 
 IF NOT (l_my_center_code = 'Q1' AND l_phone_reserve_flag = 1) THEN
  IF debug_in = 9 THEN
   select 'ds50_fetch_train_info,20_2=====',l_start_telecode;
  end if;
  
   SELECT telecode_list,telecode_list1
   INTO l_start_tele_list,l_start_tele_list1
   FROM center.DS60_same_city_cache
   WHERE station_telecode = l_start_telecode;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN LEAVE lab_null_return  ; end if; 
   IF l_rowcount = 0 THEN
    IF debug_in = 9 THEN
     select 'ds50_fetch_train_info,20_3=====',board_station_in,board_train_date_in;
    end if;
    
    SELECT city_code INTO l_start_city_code FROM basic.station_divide_dictionary  
     WHERE station_name = board_station_in
     AND start_date <= board_train_date_in
     AND stop_date >= board_train_date_in;
     
    IF row_count() = 0 THEN set l_start_city_code = 'AAAA' ; end if; 
    IF debug_in = 9 THEN
     select 'ds50_fetch_train_info,20_3_1=====',l_start_city_code;
    end if;
    set l_start_tele_list = ""
     ,  l_start_tele_list1 = "";
    IF EXISTS(SELECT 1 FROM basic.station_divide_dictionary WHERE city_code = l_start_city_code) THEN
     IF debug_in = 9 THEN
      select 'ds50_fetch_train_info,20_4=====';
     end if;  
      set record_not_found=0;
      begin 
       DECLARE cursor_board_station CURSOR FOR 
       SELECT DISTINCT station_telecode FROM basic.station_divide_dictionary
        WHERE city_code = l_start_city_code
        AND start_date <= board_train_date_in
        AND stop_date  >= board_train_date_in;
       OPEN cursor_board_station;
       lab_board_station:
       WHILE 1 = 1 DO 
       
        FETCH cursor_board_station INTO l_station_telecode;
        if record_not_found = 1 THEN
          leave lab_board_station;
        end IF;
        
        IF l_start_tele_list = "" THEN set l_start_tele_list = concat(rtrim(l_start_tele_list) , l_station_telecode);
        ELSE set l_start_tele_list = concat(rtrim(l_start_tele_list) , ":" , l_station_telecode) ;
        end if;
       
        IF l_start_tele_list1 = '' THEN  set l_start_tele_list1 = concat('"' , l_station_telecode , '"');
        ELSE set l_start_tele_list1 = concat(rtrim(l_start_tele_list1) , ',' , '"' , l_station_telecode , '"');
        end if;
       END while lab_board_station;
       CLOSE cursor_board_station;
     end;
     IF debug_in = 9 THEN
      select 'ds50_fetch_train_info,20_5=====';
     end if;
    ELSE 
      IF l_start_tele_list = "" THEN set l_start_tele_list = concat(rtrim(l_start_tele_list) , l_start_telecode);
      ELSE set l_start_tele_list = concat(rtrim(l_start_tele_list) , ":" , l_start_telecode) ;
      end if;
     
      IF l_start_tele_list1 = '' THEN set l_start_tele_list1 = concat('"' , l_start_telecode , '"');
      ELSE set l_start_tele_list1 = concat(rtrim(l_start_tele_list1) , ',' , '"' , l_start_telecode , '"');
      end if;
    END if;
    
    IF out_in != 3 THEN
     INSERT INTO center.DS60_same_city_cache VALUES (l_start_telecode,l_start_tele_list,l_start_tele_list1,now());
    END if;
   END if;
   IF debug_in = 9 THEN
   select 'ds50_fetch_train_info,20_6=====',l_end_telecode;
  end if;
  
   SELECT telecode_list,telecode_list1
   INTO l_end_tele_list,l_end_tele_list1
   FROM center.DS60_same_city_cache
   WHERE station_telecode = l_end_telecode;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN LEAVE lab_null_return  ; end if; 
   IF l_rowcount = 0 THEN
    
    SELECT city_code INTO l_end_city_code FROM basic.station_divide_dictionary  
     WHERE station_name = end_station_in
     AND start_date <= board_train_date_in
     AND stop_date >= board_train_date_in;
    IF row_count() = 0 THEN set l_end_city_code = 'AAAA' ; end if; 
       
    set l_end_tele_list = ""  
     , l_end_tele_list1 = ""   ;
    IF EXISTS(SELECT 1 FROM basic.station_divide_dictionary WHERE city_code = l_end_city_code) then
       
      set record_not_found=0;
      begin
       DECLARE cursor_end_station CURSOR FOR 
      SELECT DISTINCT station_telecode FROM basic.station_divide_dictionary
       WHERE city_code = l_end_city_code
       AND start_date <= board_train_date_in
       AND stop_date  >= board_train_date_in;
       OPEN cursor_end_station;
       lab_end_station:
       WHILE 1 = 1 DO 
       FETCH cursor_end_station INTO l_station_telecode;
       if record_not_found = 1 THEN
         leave lab_end_station;
       end IF;
       
       IF l_end_tele_list = "" THEN set l_end_tele_list = concat(rtrim(l_end_tele_list) , l_station_telecode);
       ELSE set l_end_tele_list = concat(l_end_tele_list , ":" , l_station_telecode) ;
       end if;

       IF l_end_tele_list1 = '' THEN set l_end_tele_list1 = concat('"' , l_station_telecode , '"');
       ELSE set l_end_tele_list1 = concat(rtrim(l_end_tele_list1) , ',' , '"' , l_station_telecode , '"');
       end if;
       END while lab_end_station;
       CLOSE cursor_end_station;
     end;
    ELSE                            
      IF l_end_tele_list = ""  THEN set l_end_tele_list = concat(rtrim(l_end_tele_list) , l_end_telecode);
      ELSE set l_end_tele_list = concat(l_end_tele_list , ":" , l_end_telecode) ;
      end if;
     
      IF l_end_tele_list1 = '' THEN set l_end_tele_list1 = concat('"' , l_end_telecode , '"');
      ELSE set l_end_tele_list1 = concat(rtrim(l_end_tele_list1) , ',' , '"' , l_end_telecode , '"');
      end if;
    END if;
    
    IF out_in != 3 THEN
     INSERT INTO center.DS60_same_city_cache VALUES (l_end_telecode,l_end_tele_list,l_end_tele_list1,now());
    END if;
   END if;
 ELSE 
   set l_start_tele_list = l_start_telecode,l_end_tele_list = l_end_telecode
   , l_start_tele_list1 = concat('"' , l_start_telecode , '"')
   , l_end_tele_list1   = concat('"' , l_end_telecode , '"');
 END if;

 IF instr(l_start_telecode,l_end_tele_list) > 0 THEN set l_start_tele_list = l_start_telecode,l_end_tele_list = l_end_telecode
          , l_start_tele_list1 = concat('"' , l_start_telecode , '"')
          , l_end_tele_list1   = concat('"' , l_end_telecode , '"');
 end if;
 
 
 IF l_sale_mode IN ('E','9') AND 1 = 2 THEN 
   IF EXISTS(SELECT 1 FROM center.DS60_seat_cache a WHERE train_date = board_train_date_in AND train_no = inner_code_in 
    AND start_telecode = l_old_start_telecode AND end_telecode = l_old_end_telecode AND purpose_code = purposes_in
    AND seat_type_code = seat_type_list_in AND a.range = range_in ) THEN
    set inner_code_in = '***'; 
   ELSE 
    IF debug_in = 9 THEN
     select 'ds50_fetch_train_info,31=====';
    end if;
    
    SELECT start_telecode,end_telecode
     into l_old_start_telecode,l_old_end_telecode
     FROM center.DS60_seat_cache a
     WHERE train_date   = board_train_date_in 
     AND  train_no   = inner_code_in
     AND instr(l_start_tele_list,start_telecode) > 0
     AND  instr(l_end_tele_list,end_telecode) > 0      
     AND  purpose_code  = purposes_in 
     AND  seat_type_code = seat_type_list_in 
     AND  a.range    = range_in;
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount = 0 AND l_error = 0 then
      set l_old_start_telecode = l_start_telecode
      ,  l_old_end_telecode = l_end_telecode;
    END if;
    IF debug_in = 9 THEN
     select 'ds50_fetch_train_info,31_1=====';
    end if;
   END if;
 END if;
 
 IF UPPER(station_train_code_in) = 'DEL' then
   DELETE FROM center.DS60_stop_time_cache  
   WHERE train_date    = board_train_date_in
    AND start_tele_list = l_old_start_telecode
    AND end_tele_list  = l_old_end_telecode
    AND  inner_code  = inner_code_in
    AND  DS60_stop_time_cache.range    = range_in
    AND  purposes    = purposes_in
    AND  seat_type_list = seat_type_list_in;

   DELETE FROM center.DS60_seat_cache 
   WHERE train_date    = board_train_date_in
    AND train_no   = inner_code_in
    AND start_telecode = l_old_start_telecode
    AND end_telecode  = l_old_end_telecode
    AND DS60_seat_cache.range    = range_in
    AND purpose_code  = purposes_in
    AND seat_type_code = seat_type_list_in;
   set station_train_code_in = '%'          
   , l_delete_flag = 1    ;
 END if;

 set l_d2 = now();
 set l_t1 = timestampdiff(second,l_d1,l_d2)*1000; 

 
 IF debug_in = 9 THEN
  SELECT 'DS50_Fetch_Train_Info ####################DBG.30.²é»º´æÇ°µÄ²ÎÊýÊä³ö.##############';
  
 END if;

 
 set l_train_seat_cache = 9; 
  begin 
    declare tmp_train_info_list VARCHAR(255);
    declare tmp_tbs_info VARCHAR(255);
    declare tmp_cache_info_list VARCHAR(255);
    
    
    
    set tmp_train_info_list='';
    set tmp_tbs_info='';
    set tmp_cache_info_list='';
     IF debug_in = 9 THEN
      select '1====CALL arith.DS60_Proc_Seat_Cache(',board_train_date_in
    , inner_code_in  
    , l_old_start_telecode
    , l_old_end_telecode
    , purposes_in
    , seat_type_list_in
    , l_To_Range
     , tmp_train_info_list
     , tmp_tbs_info
     , tmp_cache_info_list
    , l_train_seat_cache 
    , l_12306_flag 
    , l_delete_flag
    , l_train_modify_time 
    , ''
    , ''
    , ''
    , '',0,'',4;
    end if;
   
   CALL arith.DS60_Proc_Seat_Cache(
    board_train_date_in
   , inner_code_in
   , l_old_start_telecode
   , l_old_end_telecode
   , purposes_in
   , seat_type_list_in
   , l_To_Range
    , tmp_train_info_list
    , tmp_tbs_info
    , tmp_cache_info_list
   , l_train_seat_cache 
   , l_12306_flag 
   , l_delete_flag
   , l_train_modify_time 
   , ''
   , ''
   , ''
   , '',0,'',4);
     IF debug_in = 9 THEN
    select '====end CALL arith.DS60_Proc_Seat_Cache(',board_train_date_in
     , inner_code_in  
     , l_old_start_telecode
     , l_old_end_telecode
     , purposes_in
     , seat_type_list_in
     , l_To_Range
      , tmp_train_info_list
      , tmp_tbs_info
      , tmp_cache_info_list
     , l_train_seat_cache 
     , l_12306_flag 
     , l_delete_flag
     , l_train_modify_time;
    end if;
  end ;

  
 IF l_train_seat_cache IN (1,2) THEN
IF debug_in = 9 THEN 
 select '1_1===',board_train_date_in,l_old_start_telecode,l_old_end_telecode,inner_code_in,range_in,purposes_in,seat_type_list_in,l_network_train_brand,l_GS_MODE;
 SELECT start_station_name,end_station_name,train_class_code,seat_types,start_time,arrive_time,train_no,start_station_no
    , end_station_no,board_train_code,start_telecode,start_bureau_code,start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code
    , ticket_office,location_code,day_difference,arrive_date,info_list, 0 default_flag,start_tele_list,end_tele_list,start_pycode,end_pycode
    , train_code,train_class_code train_type,seat_feature,train_date,cache_time,'' start_code,'' end_code,'' start_date,'' purposes
    ,end_station_no,'0','','','',control_day,sale_time,control_train_day,''  
    FROM center.DS60_stop_time_cache a
    WHERE train_date   = board_train_date_in
    AND  start_tele_list = l_old_start_telecode
    AND  end_tele_list = l_old_end_telecode
    AND  inner_code  = inner_code_in
    AND  a.range    = range_in
    AND  purposes    = purposes_in
    AND  seat_type_list = seat_type_list_in
    AND  l_GS_MODE    = 0  
    AND  board_train_code LIKE l_network_train_brand ;
 end if;
 
   INSERT INTO  tmp_stop_time_train_info
   SELECT start_station_name,end_station_name,train_class_code,seat_types,start_time,arrive_time,train_no,start_station_no
    , end_station_no,board_train_code,start_telecode,start_bureau_code,start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code
    , ticket_office,location_code,day_difference,arrive_date,info_list, 0 default_flag,start_tele_list,end_tele_list,start_pycode,end_pycode
    , train_code,train_class_code train_type,seat_feature,train_date,cache_time,'' start_code,'' end_code,'' start_date,'' purposes
    ,end_station_no,'0','','','',control_day,sale_time,control_train_day,''  
    FROM center.DS60_stop_time_cache a
    WHERE train_date   = board_train_date_in
    AND  start_tele_list = l_old_start_telecode
    AND  end_tele_list = l_old_end_telecode
    AND  inner_code  = inner_code_in
    AND  a.range    = range_in
    AND  purposes    = purposes_in
    AND  seat_type_list = seat_type_list_in
    AND  l_GS_MODE    = 0  
    AND  board_train_code LIKE l_network_train_brand ;
   set l_rowcount = row_count();
    IF debug_in = 9 THEN
      select '1_2===';
      select * from tmp_stop_time_train_info;
    end if;
   IF l_rowcount = 0 THEN
    IF debug_in = 9 THEN
     select '1_3===';
    end if;
    set l_cache_flag = 0;
    set @l_SQL = concat(' INSERT INTO  tmp_stop_time_train_info '
     , ' SELECT DISTINCT a.station_name,b.station_name,"0" train_class_code,0 seat_types,a.start_time,b.arrive_time,a.train_no,a.station_no,b.station_no,a.station_train_code'
     , ' ,a.station_telecode,a.bureau_code,a.subbureau_code,b.station_telecode,b.bureau_code,b.subbureau_code'
     , ' ,concat(a.bureau_code , "1" , a.subbureau_code , a.station_telecode) ticket_office,"" location_code, b.day_difference - a.day_difference day_difference,"" arrive_date'
     , ' ,"" info_list,0 default_flag,"" start_tele_list,"" end_tele_list,"" start_pycode,"" end_pycode,substring(a.train_no,3,8) train_code,"" train_type,"3" seat_feature'
     , ' ,"' , board_train_date_in , '",now(),  "" start_code,  "" end_code, date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference as signed) day),"%Y%m%d") start_date,'
     , ' "",b.station_no,"0","","","",0,"0000","',CURDATE()+0,'"',",'","","'" 
     , ' FROM basic.stop_time a ,basic.stop_time b  '
     , ' WHERE a.train_no   = b.train_no '
     , ' AND a.station_telecode IN (' , l_start_tele_list1 , ')'
     , ' AND b.station_telecode IN (' , l_end_tele_list1   , ')'
     , ' AND a.start_date <= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference  as signed) day),"%Y%m%d")'
     , ' AND a.stop_date >= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference  as signed) day),"%Y%m%d")'
     , '  AND a.station_no < b.station_no '
     , ' AND a.station_name NOT LIKE "%*%"'
     , ' AND b.station_name NOT LIKE "%*%"'
     , '  AND a.station_train_code LIKE "' , l_network_train_brand , '"');

    prepare stmt_1 from @l_sql;
    EXECUTE stmt_1;

    set l_rowcount = row_count();
    deallocate prepare stmt_1;
    IF l_rowcount = 0  THEN LEAVE lab_null_return  ; end if; 
    
    

    UPDATE  tmp_stop_time_train_info SET train_code = trim( LEADING '0' FROM train_code);

   ELSEIF l_train_seat_cache = 1 THEN 
    set l_cache_flag = 1    ;

    
      SELECT min(cache_time) INTO l_cache_time FROM  tmp_stop_time_train_info;
      IF timestampdiff(minute ,l_cache_time,now() ) > 8 THEN 
       set @l_SQL = concat(' INSERT INTO   tmp_train_no_train_info SELECT a.train_no,0,substring(a.train_no,3,8) FROM basic.stop_time a,basic.stop_time b '
        , ' WHERE a.train_no   = b.train_no '
        , ' AND a.station_telecode IN (' , l_start_tele_list1 , ')'
        , ' AND b.station_telecode IN (' , l_end_tele_list1   , ')'
        , ' AND a.start_date <= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference as signed) day),"%Y%m%d")'
        , ' AND a.stop_date >= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference as signed) day),"%Y%m%d")'
        , '  AND a.station_no < b.station_no '
        , ' AND a.station_name NOT LIKE "%*%"'
        , ' AND b.station_name NOT LIKE "%*%"'
        , '  AND a.station_train_code LIKE "' , l_network_train_brand , '"');

       prepare stmt_1 from @l_sql;
       EXECUTE stmt_1;
       deallocate prepare stmt_1;
       
       UPDATE   tmp_train_no_train_info SET flag = trim(LEADING '0' from flag);

       
       SELECT count(distinct substring(train_no,1,10)) INTO l_total FROM   tmp_train_no_train_info a
        WHERE EXISTS(SELECT 1 FROM basic.train_dir where subbureau_code = substring(a.train_no,1,2) AND train_code = a.flag
        AND double_id = substring(a.train_no,11,1) AND schema_id = substring(a.train_no,12,1)
        AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
        );
       SELECT count(distinct train_no) INTO l_rowcount FROM  tmp_stop_time_train_info;
       IF row_count() != l_total THEN 
         set @l_SQL = concat('DELETE FROM center.DS60_stop_time_cache '
         , ' WHERE train_date = "' , board_train_date_in , '"'
         , ' AND start_tele_list = "' , l_old_start_telecode , '"'
         , ' AND end_tele_list   = "' , l_old_end_telecode   , '"');
         prepare stmt_1 from @l_sql;
         EXECUTE stmt_1;
         set l_rowcount = row_count();
         deallocate prepare stmt_1;
         IF l_rowcount > 0 THEN set l_cache_flag = 0; end if; 
          
         
         truncate table tmp_stop_time_train_info;
         set @l_SQL = concat(' INSERT INTO  tmp_stop_time_train_info '
          , ' SELECT DISTINCT a.station_name,b.station_name,"0" train_class_code,0 seat_types,a.start_time,b.arrive_time,a.train_no,a.station_no,b.station_no,a.station_train_code'
          , ' ,a.station_telecode,a.bureau_code,a.subbureau_code,b.station_telecode,b.bureau_code,b.subbureau_code'
          , ' ,concat(a.bureau_code , "1" , a.subbureau_code , a.station_telecode) ticket_office,"" location_code,b.day_difference - a.day_difference day_difference,"" arrive_date'
          , ' ,"" info_list,0 default_flag,"" start_tele_list,"" end_tele_list,"" start_pycode,"" end_pycode,substring(a.train_no,3,8) train_code,"" train_type,"3" seat_feature'
          , ' ,"' , board_train_date_in , '",now(), "" start_code, "" end_code,date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference as signed) day),"%Y%m%d") start_date,"",b.station_no,"0"'
          , ',"","","",0,"0000","',CURDATE()+0,'"',",'","","'"    
          , ' FROM basic.stop_time a ,basic.stop_time b  '
          , ' WHERE a.train_no   = b.train_no '
          , ' AND a.station_telecode IN (' , l_start_tele_list1 , ')'
          , ' AND b.station_telecode IN (' , l_end_tele_list1   , ')'
          , ' AND a.start_date <= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference as signed) day),"%Y%m%d")'
          , ' AND a.stop_date >= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference as signed) day),"%Y%m%d")'
          , '  AND a.station_no < b.station_no '
          , ' AND a.station_name NOT LIKE "%*%"'
          , ' AND b.station_name NOT LIKE "%*%"'
          , '  AND a.station_train_code LIKE "' , l_network_train_brand , '"');
        
         prepare stmt_1 from @l_sql;
         EXECUTE stmt_1;
         set l_rowcount = row_count();
         deallocate prepare stmt_1;        
         
         IF l_rowcount = 0 OR l_error != 0 THEN LEAVE lab_null_return  ; end if; 
      
         UPDATE  tmp_stop_time_train_info SET train_code = TRIM(LEADING '0' FROM train_code);
       END if;
      END if;
    
   END if;
IF debug_in = 9 THEN
select '5_1===',l_cache_flag;
end if; 
   IF l_cache_flag = 0 THEN set l_train_seat_cache = 0; end if;
 
 ELSEIF l_train_seat_cache = 0 THEN 
IF debug_in = 9 THEN
 select '5_2====';
 end if;
   set l_cache_flag = 0;
   set @l_SQL = concat(' INSERT INTO  tmp_stop_time_train_info '
    , ' SELECT DISTINCT a.station_name,b.station_name,"0" train_class_code,0 seat_types,a.start_time,b.arrive_time,a.train_no,a.station_no,b.station_no,a.station_train_code'
    , ' ,a.station_telecode,a.bureau_code,a.subbureau_code,b.station_telecode,b.bureau_code,b.subbureau_code'
    , ' ,concat(a.bureau_code , "1" , a.subbureau_code , a.station_telecode) ticket_office, concat(a.bureau_code , "1") location_code,  b.day_difference - a.day_difference day_difference,"" arrive_date'
    , ' ,"" info_list,0 default_flag,"" start_tele_list,"" end_tele_list,"" start_pycode,"" end_pycode,substring(a.train_no,3,8) train_code,"" train_type,"3" seat_feature'
    , ' ,"' , board_train_date_in , '",now(), "" start_code, "" end_code,date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference  as signed) day),"%Y%m%d") start_date,"",b.station_no,"0"'
    , ',"","","",0,"0000","',CURDATE()+0,'"',",'","","'"   
    , ' FROM basic.stop_time a ,basic.stop_time b  '
    , ' WHERE a.train_no   = b.train_no '
    , ' AND a.station_telecode IN (' , l_start_tele_list1 , ')'
    , ' AND b.station_telecode IN (' , l_end_tele_list1   , ')'
    , ' AND a.start_date <= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference  as signed) day),"%Y%m%d")'
    , ' AND a.stop_date >= date_format(date_add("' , board_train_date_in , '",interval 0 - cast(a.day_difference  as signed) day),"%Y%m%d")'
    , '  AND a.station_no < b.station_no '
    , ' AND a.station_name NOT LIKE "%*%"'
    , ' AND b.station_name NOT LIKE "%*%"'
    , '  AND a.station_train_code LIKE "' , l_network_train_brand , '"');
   
   prepare stmt_1 from @l_sql;
   EXECUTE stmt_1;
    IF debug_in = 9 THEN
  select '5_3===',@l_sql;
  select count(*) from tmp_stop_time_train_info;
    end if;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 OR l_error != 0 THEN LEAVE lab_null_return  ; end if;  

   UPDATE  tmp_stop_time_train_info SET train_code = TRIM(LEADING '0' FROM train_code);
 END if;
IF debug_in = 9 THEN
select '6===';
end if;



 set l_d3 = now();
 set l_t2 = timestampdiff(SECOND,l_d2, l_d3)*1000; 

 
 delete from tmp_stop_time_train_info                                       
  where train_no in (SELECT train_no 
            FROM basic.DG50_train_lock 
            where lock_status = '1'
           );
 IF debug_in = 9 THEN           
 select '11111111111';
 select count(*) from tmp_stop_time_train_info;
 end if;
 
IF debug_in = 9 THEN
 select '7===',l_train_seat_cache;
end if;
 set l_input_purposes = purposes_in ;
 IF l_train_seat_cache != 2 THEN 
    

    
    INSERT INTO tmp_stop_time_train_train_info 
    SELECT distinct a.* FROM basic.stop_time a, tmp_stop_time_train_info b                
    WHERE a.train_no = b.train_no;

     
IF debug_in = 9 THEN
select '8==='; 
end if;
    IF l_train_seat_cache = 1 THEN  
     UPDATE tmp_stop_time_train_info a,tmp_stop_time_train_train_info b SET a.start_date = date_format(date_add(board_train_date_in,INTERVAL 0 - cast(b.day_difference as signed) DAY),'%Y%m%d')
      WHERE a.train_no = b.train_no
      AND  a.start_telecode = b.station_telecode;
     set l_error =  @@error_count,l_rowcount = row_count();
    END if;

    
    INSERT INTO tmp_train_cache_train_info 
    SELECT DISTINCT train_no,train_code,0 FROM tmp_stop_time_train_info a
    WHERE EXISTS(SELECT 1 FROM basic.train_dir where train_code = a.train_code AND subbureau_code = substring(a.train_no,1,2)
     AND double_id = substring(a.train_no,11,1) AND schema_id = substring(a.train_no,12,1)
     AND running_rule & (power(2,datediff(a.start_date,start_date) % running_style)) > 0 
     AND start_date <= a.start_date AND stop_date >= a.start_date    
     )
     AND train_no LIKE tno_in ;    
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount > 0 THEN   
     SELECT count(*) INTO l_total FROM tmp_stop_time_train_info;
     
     
     
     IF l_rowcount != l_total THEN 
      DELETE FROM tmp_stop_time_train_info WHERE train_no NOT IN (SELECT train_no FROM tmp_train_cache_train_info) ;
       IF debug_in = 9 THEN 
       select '11111111112 É¾³ýÊý¾Ý' ;
       select count(*) from tmp_stop_time_train_info;
      end if;
     END if;
    END if;
IF debug_in = 9 THEN
 select '9===';
 end if;
    
    IF l_train_seat_cache = 0 then
     TRUNCATE table tmp_train_no_train_info;
     INSERT INTO tmp_train_no_train_info (train_no,num,flag)
      SELECT train_no,count(*),'0' FROM tmp_stop_time_train_info
      GROUP BY train_no
      HAVING count(*) > 1;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount > 0 AND l_error = 0 THEN
       WHILE EXISTS(SELECT 1 FROM tmp_train_no_train_info ) DO
        
        SELECT train_no INTO l_train_no FROM tmp_train_no_train_info LIMIT 1;
        DELETE FROM tmp_train_no_train_info WHERE train_no = l_train_no;

        
        IF EXISTS(SELECT 1 FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND start_telecode = l_old_start_telecode AND end_telecode = l_old_end_telecode) THEN
         DELETE FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND NOT (start_telecode = l_old_start_telecode AND end_telecode = l_old_end_telecode);
          IF debug_in = 9 THEN 
          select '11111111113 É¾³ýÊý¾Ý' ;
          select count(*) from tmp_stop_time_train_info;
         end if;
        
        ELSEIF EXISTS(SELECT 1 FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND start_telecode = l_old_start_telecode ) THEN
         
          SELECT end_telecode INTO l_end_telecode
          FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND start_telecode = l_old_start_telecode
          ORDER BY end_station_no LIMIT 1;  
          DELETE FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND NOT (start_telecode = l_old_start_telecode AND end_telecode = l_end_telecode);
          IF debug_in = 9 THEN 
          select '11111111114 É¾³ýÊý¾Ý' ;
          select count(*) from tmp_stop_time_train_info;
          end if;
        
        ELSEIF EXISTS(SELECT 1 FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND end_telecode = l_old_end_telecode ) THEN
          SELECT start_telecode INTO l_start_telecode
          FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND end_telecode = l_old_end_telecode
          ORDER BY start_station_no LIMIT 1; 
          DELETE FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND NOT (start_telecode = l_start_telecode AND end_telecode = l_old_end_telecode);
           IF debug_in = 9 THEN 
           select '11111111115 É¾³ýÊý¾Ý' ;
           select count(*) from tmp_stop_time_train_info;
          end if;
        
        ELSE
         
          SELECT start_telecode,end_telecode INTO l_start_telecode,l_end_telecode
          FROM tmp_stop_time_train_info WHERE train_no = l_train_no 
          ORDER BY start_station_no,end_station_no LIMIT 1;
          DELETE FROM tmp_stop_time_train_info WHERE train_no = l_train_no AND NOT (start_telecode = l_start_telecode AND end_telecode = l_end_telecode);
          IF debug_in = 9 THEN  
          select '11111111116 É¾³ýÊý¾Ý' ;
          select count(*) from tmp_stop_time_train_info;
         end if;
        END if;
       END while;
     END if;
    END if;
IF debug_in = 9 THEN
select '10===';
end if;
    

    UPDATE tmp_stop_time_train_info a,basic.train_dir b SET a.seat_feature = ( CASE WHEN b.service_type = '0' THEN '0' ELSE '3' END )
    , a.start_code = b.start_station_name,a.end_code = b.end_station_name
    , a.seat_types = b.seat_types,a.train_class_code = b.train_class_code
    WHERE a.train_code = b.train_code AND b.subbureau_code = substring(a.train_no,1,2)
    AND b.double_id = substring(a.train_no,11,1) AND b.schema_id = substring(a.train_no,12,1);
    set l_error =  @@error_count,l_rowcount = row_count();

    
    UPDATE tmp_stop_time_train_info a,basic.station_dictionary b SET a.start_code = b.station_telecode,a.start_name = b.station_name   
     , management_bureau = b.bureau_code                 
    WHERE a.start_code = b.station_name;
    set l_error =  @@error_count,l_rowcount = row_count();

    
    UPDATE tmp_stop_time_train_info a,basic.station_dictionary b SET a.end_code = b.station_telecode,a.end_name = b.station_name   
    WHERE a.end_code = b.station_name;
    set l_error =  @@error_count,l_rowcount = row_count();

    
    UPDATE tmp_stop_time_train_info a,basic.CG52_train_dir_appendix b SET a.train_type = b.special_flag
    WHERE a.train_no = b.train_no;
    set l_error =  @@error_count,l_rowcount = row_count();
    
    IF l_train_seat_cache = 0 THEN
     
     UPDATE tmp_stop_time_train_info a,basic.station_dictionary b SET a.start_pycode = b.station_pycode
      WHERE a.start_telecode = b.station_telecode;
     set l_error =  @@error_count,l_rowcount = row_count();
     
     UPDATE tmp_stop_time_train_info a,basic.station_dictionary b SET a.end_pycode = b.station_pycode
      WHERE a.end_telecode = b.station_telecode;
     set l_error =  @@error_count,l_rowcount = row_count();
      
     
     UPDATE tmp_stop_time_train_info a,tmp_stop_time_train_train_info b SET a.day_difference = (CASE WHEN a.day_difference < 0 THEN 0 
              WHEN (b.arrive_time > b.start_time AND a.day_difference >= 1) THEN a.day_difference - 1 
              ELSE a.day_difference END)
      WHERE a.train_no = b.train_no
      AND a.end_telecode = b.station_telecode  ; 
     set l_error =  @@error_count,l_rowcount = row_count();
     
     
     UPDATE tmp_stop_time_train_info SET arrive_date = DATE_FORMAT(date_add(board_train_date_in,INTERVAL day_difference DAY),'%Y%m%d');
     set l_error =  @@error_count,l_rowcount = row_count();
     
     
     UPDATE tmp_stop_time_train_info a,basic.DG50_train_location_auth b SET a.location_code = b.location_code
      WHERE a.train_code = b.train_code
      AND a.start_code = b.start_station_telecode
      AND a.end_code  = b.end_station_telecode
      AND b.start_date  <= board_train_date_in 
      AND  b.stop_date   >= board_train_date_in;
     set l_error =  @@error_count,l_rowcount = row_count();
    END if;
 IF debug_in = 9 THEN
 select '11===';
 end if;
    
    set @l_SQL = concat('INSERT INTO tmp_center_notice_train_info SELECT a.* FROM basic.CJ30_center_notice a,tmp_train_cache_train_info b'
     , ' WHERE a.train_no = b.train_no'
     , ' AND a.station_telecode IN (' , l_start_tele_list1 , ',' , l_end_tele_list1 , ')'
     , ' AND a.command_code IN ("O","P","Q","R","V","W","S","U","M") '              
     , ' AND a.command_enable = 0 '
     , ' AND a.stop_date >= "' , board_train_date_in , '"');
    prepare stmt_1 from @l_SQL;
    EXECUTE stmt_1;
    
    IF flag_in != 1 THEN
     IF l_sale_mode IN ('E','9') THEN set l_station_telecode = l_start_telecode; 
     ELSE set l_station_telecode = inner_code_in; 
     end if;
IF debug_in = 9 THEN
 select 'DS50_Fetch_Train_Info.303====clone table tmp_train_cache_train_info';
end if;
     TRUNCATE TABLE tmp_train_cache_train_info1;
     TRUNCATE TABLE tmp_train_cache_train_info2;
     TRUNCATE TABLE tmp_train_cache_train_info3;
     insert into tmp_train_cache_train_info1 select * from tmp_train_cache_train_info;
     insert into tmp_train_cache_train_info2 select * from tmp_train_cache_train_info;
     insert into tmp_train_cache_train_info3 select * from tmp_train_cache_train_info;

     INSERT INTO tmp_cancel_limit_define_train_info 
      SELECT * FROM basic.DJ50_cancel_limit_define a
      WHERE inner_code IN (l_bureau_code,l_station_telecode)  
       AND start_date <= board_train_date_in       
       AND stop_date  >= board_train_date_in
       AND (train_code IN (SELECT train_code FROM tmp_train_cache_train_info) OR train_code = '*' OR EXISTS(SELECT 1 FROM tmp_train_cache_train_info1 WHERE train_code LIKE a.train_code)) 
       AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0                
       AND sale_mode IN (l_sale_mode,'*')                                  
       AND (seat_type_code = '*' OR instr( seat_type_list_in,seat_type_code) > 0 )                    
       AND (purpose_code   = '*' OR instr( purposes_in,purpose_code) % 2  = 1 )                     
       AND cancel_office_no   = '%'
       AND cancel_window_no   = 0
      UNION                                             
      SELECT * FROM basic.DJ50_cancel_limit_define a
      WHERE inner_code IN (SELECT start_telecode FROM tmp_stop_time_train_info)  
       AND start_date <= board_train_date_in       
       AND stop_date  >= board_train_date_in
       AND (train_code IN (SELECT train_code FROM tmp_train_cache_train_info2) OR train_code = "*" OR EXISTS(SELECT 1 FROM tmp_train_cache_train_info3 WHERE train_code LIKE a.train_code)) 
       AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0                
       AND sale_mode IN (l_sale_mode,'*')                                  
       AND (seat_type_code = '*' OR instr( seat_type_list_in,seat_type_code) > 0 )                    
       AND (purpose_code   = '*' OR instr( purposes_in,purpose_code) % 2  = 1 )                     
       AND cancel_office_no   = '%'
       AND cancel_window_no   = 0;
     
     IF purpose_mode_in = 2 THEN
       
       INSERT INTO tmp_train_para_define_train_info 
       SELECT * FROM basic.DJ50_train_sale_define a
        WHERE inner_code  = l_start_bureau_code
        AND start_date   <= l_today
        AND stop_date    >= l_today
        AND ( purpose_code = '*' OR instr( purposes_in,purpose_code) % 2 = 1 )   
        AND (seat_type_code ='*' OR instr(seat_type_list_in,seat_type_code) > 0 )  
        AND (train_code IN (SELECT train_code FROM tmp_train_cache_train_info) OR a.train_code = '*' OR EXISTS(SELECT 1 FROM tmp_train_cache_train_info1 WHERE train_code LIKE a.train_code))
        AND (l_is_student = 1 OR (l_is_student = 0 AND ticket_type  NOT IN (3,12)))   
        AND flag1    IN (l_sale_mode,'*')                
        AND flag2    IN ('*','') ;                 
       
       INSERT INTO tmp_train_para_define_train_info 
       SELECT * FROM basic.DJ50_train_sale_define a
        WHERE start_date   <= l_today
        AND stop_date    >= l_today
        AND train_code IN (SELECT train_code FROM tmp_train_cache_train_info)
        AND station_telecode = '*'                    
        AND ( purpose_code   = '*' OR instr( purposes_in,purpose_code) % 2 = 1 )   
        AND (seat_type_code  ='*' OR instr(seat_type_list_in,seat_type_code) > 0 )   
        AND (l_is_student = 1 OR (l_is_student = 0 AND ticket_type  NOT IN (3,12)))    
        AND flag1    IN (l_sale_mode,'*')                 
        AND flag2     = '1'   ;                  
     END if;

     
    END if;
    
    set l_d4  = now();
    set l_t3  = timestampdiff(second,l_d3, l_d4)*1000;  
    
    lab_while:
    WHILE EXISTS(SELECT 1 FROM tmp_train_cache_train_info WHERE flag = 0) DO
    
     SELECT train_no INTO l_train_no FROM tmp_train_cache_train_info WHERE flag = 0 LIMIT 1;
     UPDATE tmp_train_cache_train_info SET flag = 1 WHERE train_no = l_train_no AND flag = 0;
     set l_cancel_purpose = ''  ;
     
     SELECT  start_time
      ,  board_train_code
      ,  start_station_name
      ,  train_code
      ,  start_telecode
      ,  start_subbureau_code
      ,  start_bureau_code
      ,  start_station_no
      ,  arrive_time
      ,  end_telecode
      ,  end_subbureau_code
      ,  end_bureau_code
      ,  end_station_no
      ,  ticket_office
      ,  location_code
      ,  day_difference
      ,  arrive_date
      ,  train_class_code
      ,  seat_types
      ,  end_station_name
      ,  info_list
      ,  start_pycode
      ,  end_pycode
      ,  start_date
      ,  train_type
      ,  start_name    
      ,  end_name 
      ,  management_bureau  
      INTO l_start_time,l_board_train_code,board_station_in,l_train_code,l_start_telecode,l_start_subbureau_code,l_start_bureau_code,l_start_station_no,
       l_arrive_time,l_end_telecode,l_end_subbureau_code,l_end_bureau_code,l_end_station_no,l_ticket_office,l_location_code,l_day_difference,l_arrive_train_date,
       l_train_class_code,l_seat_types,end_station_in,l_cache_info_list,l_start_pycode,l_end_pycode,l_start_train_date,l_train_type_code,l_start_name,l_end_name,l_management_bureau
      FROM tmp_stop_time_train_info
      WHERE board_train_date = board_train_date_in
       AND train_no = l_train_no limit 1;

     set l_train_stop_sale = 0
      ,  purposes_in    = l_input_purposes
      ,   l_ls_purposes   = l_input_purposes
      ,  l_purpose_cache  = '';
     
     IF purpose_mode_in = 1 THEN
       
       WHILE NOT (l_ls_purposes IS NULL OR l_ls_purposes = '') do
        set l_purpose_code = substring(l_ls_purposes,1,2);
        set l_ls_purposes  = insert(l_ls_purposes,1,2,'');
        
        set l_t_range = 0,l_range1 = 0,l_range2 = 1,l_range3 = 2,l_range4 = 3,l_range5 = 4,l_return_code = 0
         ,  l_t_seat_type_code = 'z';
        CALL arith.DS60_Train_Time (board_train_date_in,l_train_no,l_train_code,l_t_seat_type_code,l_t_range,l_purpose_code,'100000000000000000000000000000001000'
         , range1_in ,range2_in,range3_in,range4_in,range5_in
         , 1, l_start_telecode,1,l_sale_mode ,l_return_code);
        IF l_return_code = 0 THEN set l_purpose_code = ''; end if;
        set l_purpose_cache = concat(rtrim(l_purpose_cache) , l_purpose_code);
       END while;
       set purposes_in = l_purpose_cache;
       IF purposes_in = '' OR rtrim(purposes_in) IS NULL THEN set l_train_period = 1;  end if;
      
     ELSEIF purpose_mode_in = 2 THEN
       
       WHILE NOT (l_ls_purposes IS NULL OR l_ls_purposes = '') DO
        set l_purpose_code = substring(l_ls_purposes,1,2);
        set l_ls_purposes  = INSERT(l_ls_purposes,1,2,'');
        
        
        set l_train_period = 0 ;   
        

        delete FROM tmp_train_group_train_info ;
        
        insert into tmp_train_group_train_info 
        select group_code
         from basic.DJ52_train_group_define
         where inner_code = l_bureau_code 
          and module_code='J' 
          and type_code='T' 
          and start_station_telecode = l_start_telecode;
           
         
        
        SELECT control_day
         ,  RIGHT(concat('0000' , trim(CONVERT(ahead_time,CHAR(4)))),4)
         ,  control_train_day,
         from_period,
         control_min_date,
         start_date, 
         '1'
         INTO l_max_day,l_tmp_start_time,l_stop_date,l_C_from_period,l_C_control_min_date,l_C_start_date,l_min_time_flag
         FROM tmp_train_para_define_train_info a
         WHERE inner_code   = l_management_bureau
         AND train_code    = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name
         AND (station_telecode  in (l_start_telecode,'*')  and  group_code = '*'  
           or                                                                  
           station_telecode = '*'  and group_code in ( select group_code from tmp_train_group_train_info)) 
         AND train_type      IN (l_train_type_code,'*')
         AND purpose_code   IN (l_purpose_code,'*') 
         AND flag1       IN (l_sale_mode,'*')    
         AND flag2       = '1'         
         and train_class   IN (l_train_class_code,'*') 
         
         
          
           ORDER BY level_flag desc,train_code desc ,station_telecode desc ,group_code desc,ticket_type desc,purpose_code desc,a.l_range desc ,seat_type_code desc,train_type desc,train_class desc,flag1 desc limit 1;
        set l_error =  @@error_count,l_rowcount = row_count();

        
        IF l_rowcount = 0 AND l_error = 0 THEN

        
          SELECT control_day
          ,  RIGHT(concat('0000' , trim(CONVERT(ahead_time,CHAR(4)))),4)
          ,  control_train_day,
          from_period,
            control_min_date,
            start_date, 
            '2'
          INTO l_max_day,l_tmp_start_time,l_stop_date,l_C_from_period,l_C_control_min_date,l_C_start_date,l_min_time_flag
          FROM tmp_train_para_define_train_info
          WHERE inner_code   =  l_start_bureau_code
           AND (station_telecode  in (l_start_telecode,'*')  and  group_code = '*'  
             or                                                                    
             station_telecode = '*'  and group_code in ( select group_code from tmp_train_group_train_info)) 
           AND train_type      IN (l_train_type_code,'*')
           AND (train_code = l_train_code OR train_code = '*' OR (train_code != l_train_code AND l_train_code LIKE train_code) )
           AND purpose_code   IN (l_purpose_code,'*') 
           AND flag1       IN (l_sale_mode,'*')    
           AND flag2     IN ('*','')
           and train_class   IN (l_train_class_code,'*')
         
           
           
          ORDER BY level_flag desc,train_code desc,station_telecode desc,group_code desc,ticket_type desc,purpose_code desc,l_range desc,seat_type_code desc,train_type desc,train_class desc,flag1 desc limit 1 ;
          set l_error =  @@error_count,l_rowcount = row_count();
        END if;

        IF l_rowcount > 0 AND l_error = 0 THEN
          set l_date_after = datediff(board_train_date_in,NOW());
          set l_train_stop_sale = l_max_day;
          IF l_date_after = l_max_day THEN
           set l_tmp_start_datetime = str_to_date( concat(CURDATE(),l_tmp_start_time),'%Y-%m-%d%H%i');
           IF (timestampdiff(minute,l_tmp_start_datetime, NOW()) < 0)  THEN  
            set l_max_day = l_max_day - 1 ; 
           END if;
          END if;
 
        
        
          if l_min_time_flag = '1' THEN
           
            
            select lpad(case when min(ahead_time) is null then 0 else min(ahead_time) end,4,'0') INTO l_min_time
            FROM tmp_train_para_define_train_info
            WHERE inner_code   = l_management_bureau
            AND train_code    = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name
            AND station_telecode  = '*'
            AND train_type      IN (l_train_type_code,'*')
            AND purpose_code   IN (l_purpose_code,'*') 
            AND flag1       IN (l_sale_mode,'*')    
            AND flag2       = '1'         
            and train_class   IN (l_train_class_code,'*')
            
            and l_max_day       = control_day
            and l_stop_date    = control_train_day
            and l_C_from_period = from_period 
            and l_C_control_min_date = control_min_date 
            and l_C_start_date = start_date; 
          end if;

        
          if l_min_time_flag = '2' THEN
          
          
           select lpad(case when min(ahead_time) is null then 0 else min(ahead_time) end,4,'0') INTO l_min_time
            FROM tmp_train_para_define_train_info
            WHERE inner_code   =  l_start_bureau_code
            AND station_telecode  IN (l_start_telecode,'*')
            AND train_type      IN (l_train_type_code,'*')
            AND (train_code = l_train_code OR train_code = '*' OR (train_code != l_train_code AND l_train_code LIKE train_code) )
            AND purpose_code   IN (l_purpose_code,'*') 
            AND flag1       IN (l_sale_mode,'*')    
            AND flag2     IN ('*','')
            and train_class   IN (l_train_class_code,'*')
            
            and l_max_day       = control_day
            and l_stop_date    = control_train_day
            and l_C_from_period = from_period
            and l_C_control_min_date = control_min_date
            and l_C_start_date = start_date; 
          end if;

         
         
         
         
         
          set l_control_day = l_max_day;
          set l_now_datetime = concat(trim(DATE_FORMAT(NOW(),'%Y/%m/%d')) , ' ' ,  trim(DATE_FORMAT(NOW(),'%H:%i:%s')));
          set l_tmp_start_datetime = str_to_date(concat(CURDATE(),l_tmp_start_time),'%Y-%m-%d%H%i');
          
          if l_C_start_date = l_today and l_tmp_start_time <> "0000" THEN
            IF timestampdiff( second, l_tmp_start_datetime,l_now_datetime) < 0 and board_train_date_in > l_C_control_min_date  THEN
             set l_max_day = datediff(l_C_control_min_date,NOW());
            end if;
            if l_date_after > l_max_day THEN
             set l_train_period = 1; 
            end if;
          END if;

           
         
         
          
          
          IF l_date_after > l_max_day THEN set l_train_period = 1;  end if;
        
          IF board_train_date_in > l_stop_date THEN set l_train_period = 1; end if;
         
          
          
          SELECT train_type_code INTO l_tmp_seat_type FROM basic.train_dir 
          WHERE train_code = l_train_code AND start_date <= l_start_train_date AND stop_date >= l_start_train_date limit 1;
          IF l_tmp_seat_type NOT IN ('4','5') AND l_purpose_code = '1F' THEN
           set l_max_day = 0;
          END if;
 
          
          

          
          IF l_train_period = 1 THEN set l_purpose_code = ''; end if; 
       
         
          SELECT ahead_time INTO l_ahead_time FROM tmp_cancel_limit_define_train_info
          WHERE  inner_code IN (l_start_bureau_code,l_start_telecode)  
           AND start_date <= board_train_date_in        
           AND  stop_date  >= board_train_date_in
           AND (train_code = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name OR train_code = "*" OR (train_code != l_train_code AND l_train_code LIKE train_code))  
           AND   station_telecode IN (l_start_telecode,'*')
           AND   train_type IN ('*',l_train_type_code)                                       
           AND  purpose_code   IN ('*',l_purpose_code )                            
           AND  sale_mode   IN ('*',l_sale_mode )                            
            AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0                       
          
          ORDER BY level_flag desc,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc ,ahead_time desc LIMIT 1 ;
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount > 0 AND l_error = 0 THEN
           IF l_ahead_time IS NULL THEN set l_ahead_time = 0; end if;
           set l_start_datetime = str_to_date( concat(board_train_date_in ,l_start_time),'%Y%m%d%H%i' );
           IF timestampdiff(minute,NOW() , l_start_datetime) <= l_ahead_time then
            set l_cancel_purpose = concat(l_cancel_purpose , l_purpose_code) ;       
           END if;
          END if;

          
          
          
          
          

          lab_web_tail:
          loop

          if l_now_time_char < l_tmp_start_time THEN
           set l_declare_day = date_format(date_add(NOW(),INTERVAL l_control_day - 1 DAY),'%Y%m%d') ; 
           if l_declare_day > l_stop_date THEN
            set l_declare_day = l_stop_date;
           end if;
           
           if l_C_start_date = l_today and l_declare_day > l_C_control_min_date THEN
            set l_declare_day = l_C_control_min_date;
           end if;
           
           set l_control_day = l_control_day;
           leave lab_web_tail;
          end if;

          if l_now_time_char >= l_tmp_start_time THEN
           set l_declare_day = date_format(date_add(NOW(),interval l_control_day day),'%Y%m%d');  
            if l_declare_day > l_stop_date THEN
             set l_declare_day = l_stop_date;
            end if;
          end if;

          if l_declare_day >= board_train_date_in THEN
           set l_control_day = l_control_day;
          end if;
        
          if l_declare_day < board_train_date_in and board_train_date_in <= l_stop_date THEN
           set l_control_day = concat(l_control_day , datediff(board_train_date_in,l_declare_day)) ; 
          end if;
        
          if l_declare_day < board_train_date_in and board_train_date_in > l_stop_date THEN
            set l_control_day = datediff(l_stop_date,l_declare_day);  
            if l_control_day < 0 THEN
             set l_control_day = 0;
            end if;
          end if;

          leave lab_web_tail;
          end loop lab_web_tail;
      
      
          UPDATE tmp_stop_time_train_info 
          SET control_day = l_control_day,       
            sale_time   = l_min_time,       
            control_train_day = l_stop_date,       
            cancel_purpose_code = (CASE WHEN timestampdiff(MINUTE,NOW(),l_start_datetime ) <= l_ahead_time 
                              THEN ifnull(ltrim(rtrim(l_cancel_purpose)),'')
                          ELSE cancel_purpose_code END)
          WHERE train_no = l_train_no;

        END if;
        set l_purpose_cache = concat(rtrim(l_purpose_cache) , l_purpose_code);
       END WHILE;
       set purposes_in = l_purpose_cache;
       IF purposes_in = '' OR rtrim(purposes_in) IS NULL THEN set l_train_period = 1;  end if;
     END if;


     
     set l_tmp_start_time  = ''
      ,  l_tmp_arrive_time = ''
      ,  l_start_flag  = '0'
      ,  l_delete_flag  = 0;
     
     
     
     SELECT command_code
      ,   start_time
      INTO l_command_code,l_tmp_start_time
      FROM  tmp_center_notice_train_info
      WHERE train_no     = l_train_no  
      AND  station_telecode  = l_start_telecode
      AND start_date     <= board_train_date_in
      AND stop_date      >= board_train_date_in
      AND  command_enable  = 0 
      AND command_code     = 'P'                  
      AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
      ORDER BY operate_time DESC LIMIT 1;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 1 AND l_error = 0 THEN
       IF l_command_code = 'P' then set l_start_time = l_tmp_start_time,l_start_flag = '1'; end if;
     END if;

     
     
     SELECT command_code
      ,   start_time
      INTO l_command_code,l_tmp_start_time
      FROM  tmp_center_notice_train_info
      WHERE train_no     = l_train_no  
      AND  station_telecode  = l_start_telecode
      AND start_date     <= board_train_date_in
      AND stop_date      >= board_train_date_in
      AND  command_enable  = 0 
      AND command_code    IN ('O','P')                  
      AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
      ORDER BY operate_time DESC LIMIT 1;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 0 AND l_error = 0 THEN set l_tmp_start_time = l_start_time; end if;

     lab_Next_Train:
     loop
       
     set l_start_datetime = str_to_date( concat(board_train_date_in ,l_tmp_start_time) , '%Y%m%d%H%i');
     IF l_today = board_train_date_in THEN  
       IF timestampdiff(minute,NOW() , l_start_datetime) <= l_overtime THEN
        
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
     END if;

     
     
     SELECT command_code INTO l_command_code
      FROM  basic.CJ30_center_notice
      WHERE train_no     = l_train_no  
      AND start_date     <= l_start_train_date
      AND stop_date      >= l_start_train_date
      AND  command_enable  = 0 
      AND command_code    IN ('0','1')            
      AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
      ORDER BY operate_time DESC LIMIT 1;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 1 AND l_error = 0 THEN
       IF l_command_code = '0' THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
     END if;
     

    

      SELECT command_code
       ,   arrive_time
      INTO l_command_code,l_tmp_arrive_time
      FROM  tmp_center_notice_train_info
      WHERE train_no     = l_train_no  
      AND  station_telecode  = l_end_telecode
      AND start_date     <= l_arrive_train_date
      AND stop_date      >= l_arrive_train_date
      AND  command_enable  = 0 
      AND command_code    IN ('O','P')           
      AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0 
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount = 1 AND l_error = 0 THEN
       IF l_command_code = 'P' THEN set l_arrive_time = l_tmp_arrive_time,l_start_flag = '2' ; end if;
      END if;

      
      SELECT command_code INTO l_command_code
      FROM  basic.CJ30_center_notice 
       WHERE inner_code   = l_management_bureau       
       AND train_no     IN (l_train_no,'*')
       AND station_telecode IN (l_start_telecode,'*')      
       AND station_name   IN (l_end_telecode,'*')      
       AND command_code   = 'M'             
       AND start_date   <= l_start_train_date       
       AND stop_date    >= l_start_train_date
       AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
        AND  command_enable   = 0
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_command_code = 'M' AND l_error = 0 then
       set l_delete_flag = 1;
       LEAVE lab_Next_Train;
      END if;
      
      
      SELECT command_code INTO l_command_code
      FROM  basic.CJ30_center_notice 
       WHERE inner_code   = l_management_bureau       
       AND l_train_code   LIKE train_no         
       AND station_telecode  = '*'            
       AND station_name    = '*'            
       AND command_code   = 'M'             
       AND start_date   <= l_start_train_date       
       AND stop_date    >= l_start_train_date
       AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
      ORDER BY operate_time DESC limit 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_command_code = 'M' AND l_error = 0 THEN
       set l_delete_flag = 1;
       LEAVE lab_Next_Train;
      END if;
      
      
      SELECT command_code INTO l_command_code
      FROM  basic.CJ30_center_notice 
       WHERE train_no    = '*'
       AND station_telecode  = l_start_telecode
       AND command_code   = 'Z'   
       AND start_date   <= board_train_date_in    
       AND stop_date    >= board_train_date_in
       AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
       AND  command_enable   = 0
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_command_code = 'Z' AND l_error = 0 THEN
       set l_delete_flag = 1;
       LEAVE lab_Next_Train;
      END if;


      SELECT command_code INTO l_command_code
      FROM  tmp_center_notice_train_info
      WHERE  train_no   = l_train_no  
       AND  station_telecode = l_start_telecode
       AND start_date   <= board_train_date_in
       AND stop_date   >= board_train_date_in
       AND  command_enable = 0 
       AND command_code IN ('Q','R')                  
       AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_command_code = 'Q' AND l_error = 0 THEN
       set l_delete_flag = 1;
       LEAVE lab_Next_Train;
      END if;

      SELECT command_code INTO l_command_code
      FROM  tmp_center_notice_train_info
      WHERE  train_no   = l_train_no  
       AND  station_telecode = l_end_telecode
       AND start_date  <= l_arrive_train_date
       AND stop_date  >= l_arrive_train_date
       AND  command_enable = 0
       AND command_code IN ('Q','R') 
       AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_command_code = 'Q' AND l_error = 0 THEN
       set l_delete_flag = 1;
       LEAVE lab_Next_Train;
      END if;
 
      SELECT command_code INTO l_command_code
      FROM  tmp_center_notice_train_info
      WHERE  train_no   = l_train_no  
       AND  station_telecode = l_end_telecode
       AND start_date  <= l_arrive_train_date
       AND stop_date  >= l_arrive_train_date
       AND  command_enable = 0
       AND command_code IN ('V','W') 
       AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_command_code = 'V' AND l_error = 0 THEN
       set l_delete_flag = 1;
       LEAVE lab_Next_Train;
      END if;
      
      
      SELECT command_code
       ,start_time    
       ,arrive_time    
      INTO l_command_code,l_w_seat_type,l_w_flag
      FROM  tmp_center_notice_train_info
      WHERE  train_no   = l_train_no  
       AND  station_telecode = l_start_telecode
       AND start_date   <= board_train_date_in
       AND stop_date   >= board_train_date_in
       AND  command_enable = 0 
       AND command_code IN ('S','U')                  
       AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
      ORDER BY operate_time DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount >= 1 AND l_error = 0 THEN
       IF l_command_code = 'S' THEN
         IF l_w_seat_type = '*' THEN
          set l_delete_flag = 1;
          LEAVE lab_Next_Train;
         END if;
       end if;
      end if;

    



     set l_w_seat_type  = ''    
      ,  l_w_flag    = ''  ;
     
     IF flag_in != 1 AND EXISTS(SELECT 1 FROM tmp_center_notice_train_info WHERE train_no = l_train_no) THEN
      
       SELECT command_code,arrive_time INTO l_command_code,l_tmp_arrive_time
       FROM  tmp_center_notice_train_info
       WHERE train_no     = l_train_no  
       AND  station_telecode  = l_end_telecode
       AND start_date     <= l_arrive_train_date
       AND stop_date      >= l_arrive_train_date
       AND  command_enable  = 0 
       AND command_code    IN ('O','P')           
       AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0 
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount = 1 AND l_error = 0 THEN
        IF l_command_code = 'P' THEN set l_arrive_time = l_tmp_arrive_time,l_start_flag = '2' ; end if;
       END if;

       
       SELECT command_code INTO l_command_code
       FROM  basic.CJ30_center_notice 
        WHERE inner_code   = l_management_bureau       
        AND train_no     IN (l_train_no,'*')
        AND station_telecode IN (l_start_telecode,'*')      
        AND station_name   IN (l_end_telecode,'*')      
        AND command_code   = 'M'             
        AND start_date   <= l_start_train_date       
        AND stop_date    >= l_start_train_date
        AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
         AND  command_enable   = 0
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_command_code = 'M' AND l_error = 0 THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
       
       
       SELECT command_code INTO l_command_code
       FROM  basic.CJ30_center_notice 
        WHERE inner_code   = l_management_bureau       
        AND l_train_code   LIKE train_no         
        AND station_telecode  = '*'            
        AND station_name    = '*'            
        AND command_code   = 'M'             
        AND start_date   <= l_start_train_date       
        AND stop_date    >= l_start_train_date
        AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
        AND  command_enable   = 0
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_command_code = 'M' AND l_error = 0 THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
       
       
       SELECT command_code INTO l_command_code
       FROM  basic.CJ30_center_notice 
        WHERE train_no    = '*'
        AND station_telecode  = l_start_telecode
        AND command_code   = 'Z'   
        AND start_date   <= board_train_date_in    
        AND stop_date    >= board_train_date_in
        AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
        AND  command_enable   = 0
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_command_code = 'Z' AND l_error = 0 THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;

       SELECT command_code INTO l_command_code
       FROM  tmp_center_notice_train_info
       WHERE  train_no   = l_train_no  
        AND  station_telecode = l_start_telecode
        AND start_date   <= board_train_date_in
        AND stop_date   >= board_train_date_in
        AND  command_enable = 0 
        AND command_code IN ('Q','R')                  
        AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_command_code = 'Q' AND l_error = 0 THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
      
       SELECT command_code INTO l_command_code
       FROM  tmp_center_notice_train_info
       WHERE  train_no   = l_train_no  
        AND  station_telecode = l_end_telecode
        AND start_date  <= l_arrive_train_date
        AND stop_date  >= l_arrive_train_date
        AND  command_enable = 0
        AND command_code IN ('Q','R') 
        AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_command_code = 'Q' AND l_error = 0 THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
 
       SELECT command_code INTO l_command_code
       FROM  tmp_center_notice_train_info
       WHERE  train_no   = l_train_no  
        AND  station_telecode = l_end_telecode
        AND start_date  <= l_arrive_train_date
        AND stop_date  >= l_arrive_train_date
        AND  command_enable = 0
        AND command_code IN ('V','W') 
        AND running_rule & (power(2,datediff(l_arrive_train_date,start_date) % running_style)) > 0
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_command_code = 'V' AND l_error = 0 THEN
        set l_delete_flag = 1;
        LEAVE lab_Next_Train;
       END if;
       
       
       SELECT command_code
        , start_time    
        , arrive_time    
       into l_command_code,l_w_seat_type,l_w_flag
       FROM  tmp_center_notice_train_info
       WHERE  train_no   = l_train_no  
        AND  station_telecode = l_start_telecode
        AND start_date   <= board_train_date_in
        AND stop_date   >= board_train_date_in
        AND  command_enable = 0 
        AND command_code IN ('S','U')                  
        AND running_rule & (power(2,datediff(board_train_date_in,start_date) % running_style)) > 0 
       ORDER BY operate_time DESC LIMIT 1;
       set l_error =  @@error_count,l_rowcount = row_count();
       IF l_rowcount >= 1 AND l_error = 0 THEN
        IF l_command_code = 'S' THEN
          IF l_w_seat_type = '*' THEN
           set l_delete_flag = 1;
           LEAVE lab_Next_Train;
          ELSE set l_center_notice = 'tmp_center_notice_train_info';
          END if;
        ELSE set l_center_notice = 'tmp_center_notice_train_info';
        end if;
       END if;
     ELSE set l_center_notice = '';
     end if;   

     leave lab_Next_Train;
     end loop lab_Next_Train; 

     
     IF l_delete_flag = 1 THEN
       DELETE FROM tmp_stop_time_train_info WHERE tmp_stop_time_train_info.train_no = l_train_no;
       DELETE FROM tmp_train_cache_train_info WHERE tmp_train_cache_train_info.train_no = l_train_no;
        IF debug_in = 9 THEN 
          select '11111111118 É¾³ýÊý¾Ý' ;
         select count(*) from tmp_stop_time_train_info;
        end if;
       ITERATE lab_while;  
     END if;

     set l_to_station_no_limit = l_end_station_no;
     
     

     
     UPDATE tmp_stop_time_train_info SET purposes = purposes_in,to_limit_no = l_to_station_no_limit 
      , start_time  = (CASE WHEN l_start_flag > '0' THEN l_start_time  ELSE start_time  END)
      , arrive_time = (CASE WHEN l_start_flag > '0' THEN l_arrive_time ELSE arrive_time END)
      , notice_flag = (CASE WHEN l_center_notice != '' THEN '1' ELSE '0' END)       
     WHERE train_no = l_train_no;
    END WHILE lab_while;
    

    set l_d5 = now();
    set l_t4 = timestampdiff(second,l_d4, l_d5)*1000  
    ,  l_t8 = 0         
    ,  l_t9 = 0         
    ,  l_t10= 0         
    ,  l_t11 = 0        
    ,  l_t12 = 0 ;       
    
    WHILE EXISTS(SELECT 1 FROM tmp_train_cache_train_info WHERE flag = 1) DO  
     set l_d9 = now();
     SELECT train_no INTO l_train_no FROM tmp_train_cache_train_info WHERE flag = 1 LIMIT 1;
     UPDATE tmp_train_cache_train_info SET flag = 2 WHERE train_no = l_train_no AND flag = 1;

     SELECT start_time
      ,    board_train_code
      ,      train_code
      ,      start_station_name
      ,    start_telecode
      ,  start_subbureau_code
      ,   start_bureau_code
      ,     start_station_no
      ,     arrive_time
      ,     end_telecode
      ,   end_subbureau_code
      ,    end_bureau_code
      ,      end_station_no
      ,     ticket_office
      ,      location_code
      ,     day_difference
      ,    arrive_date
      ,     train_class_code
      ,       seat_types
      ,     start_station_name
      ,     end_station_name
      ,     info_list
      ,     start_tele_list
      ,      end_tele_list
      ,      start_pycode 
      ,       end_pycode
      ,     train_type
      ,      seat_feature
      ,   start_code
      ,   end_code       
      ,    start_date
      ,      purposes
      ,    to_limit_no
      ,      notice_flag
      ,       start_name   
      ,       end_name
      ,    management_bureau  
      ,      cancel_purpose_code 
      INTO l_start_time,l_board_train_code,l_train_code,board_station_in,l_start_telecode,l_start_subbureau_code,l_start_bureau_code,l_start_station_no,l_arrive_time,
      l_end_telecode,l_end_subbureau_code,l_end_bureau_code,l_end_station_no,l_ticket_office,l_location_code,l_day_difference,l_arrive_train_date,l_train_class_code,
      l_seat_types,board_station_in,end_station_in,l_cache_info_list,l_start_tele_list,l_end_tele_list,l_start_pycode,l_end_pycode,l_train_type_code,l_seat_feature,
      l_start_station_telecode,l_end_station_telecode,l_start_train_date,purposes_in,l_to_station_no_limit,l_notice_flag,l_start_name,l_end_name,l_management_bureau,l_cancel_purpose
      FROM tmp_stop_time_train_info
      WHERE train_no = l_train_no LIMIT 1;

     
     IF l_network_mode = 1 OR l_12306_flag = 1 THEN set l_fetch_range = 0;  
     ELSE
       IF l_bureau_code != l_start_bureau_code THEN 
        set l_fetch_range = 4   ;      
       ELSE
        set l_fetch_range = 3 ;              
        IF inner_code_in != l_start_telecode THEN
         IF EXISTS(SELECT 1 FROM  temp_union_station_train_info WHERE my_tele_code = l_start_telecode) THEN set l_fetch_range = 1; end if;
        ELSE set l_fetch_range = 0;
        end if;
       END if;
     END if;
     set l_t12 = l_t12 + timestampdiff(second,l_d9,NOW())*1000 ; 

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

     set l_d9 = now();
     

     set l_tmp_seat_type_list = ''
      ,  l_seat_type_cache  = '' ;   
     
     
     IF l_my_center_code = 'AD' THEN  
       set record_not_found=0;
       begin
        
         DECLARE cursor_get_left00 CURSOR FOR 
         SELECT seat_type_code,wseat_type_code,sum(ticket_quantity) 
          FROM center.left_base_center  FORCE INDEX(l_b_c_idx)
          WHERE  train_no  = l_train_no
          AND train_date  = board_train_date_in
          AND station_no  = l_start_station_no
          AND far_from_station_no <= l_end_station_no
          AND limit_station >= l_end_station_no 
          AND instr( seat_type_list_in,seat_type_code) > 0   
          AND instr( purposes_in,purpose_code) % 2  = 1   AND instr( l_cancel_purpose,purpose_code) % 2 = 0   
          AND ticket_quantity > 0
          GROUP BY seat_type_code,wseat_type_code
         UNION 
         SELECT seat_type_code,wseat_type_code,sum(ticket_quantity) 
          FROM center.left_base_center  FORCE INDEX(l_b_c_idx)
          WHERE  train_no  = l_train_no
          AND train_date  = board_train_date_in
          AND station_no  = l_start_station_no
          AND far_from_station_no <= '99'                            
          AND limit_station >= l_end_station_no 
          AND instr( seat_type_list_in,seat_type_code) > 0     
          AND instr( purposes_in,purpose_code) % 2  = 1   AND instr( l_cancel_purpose,purpose_code) % 2 = 1   
          AND ticket_quantity > 0
          GROUP BY seat_type_code,wseat_type_code;
        OPEN cursor_get_left00;

        lab_get_left00:
        WHILE 1 = 1 DO 
          FETCH cursor_get_left00 INTO l_t_seat_type_code,l_w_seat_type,l_t_ticket_quantity ;
          
          if record_not_found = 1 THEN
            leave lab_get_left00;
          end IF;

         
 
          set l_train_period_flag = 1  
          ,  l_fetch_w_seat    = 0  
          ,  l_return_code    = 0
          ,  l_t_range      = 0;
 
          set l_row = instr( l_seat_type_cache,concat(',' , l_t_seat_type_code));   
          IF l_row = 0 THEN
           IF l_notice_flag = '1' THEN
            
            
             IF debug_in = 9 THEN
              select 'call  arith.DS60_Notice_Period', board_train_date_in
               , l_train_no
               , l_train_code
               , l_start_telecode      
               , l_w_seat_type
               , l_fetch_w_seat
               , purposes_in
               , l_t_range
               , l_sale_mode
               , l_center_notice    
               , ''               
               , l_train_type_code
               , l_start_bureau_code,l_return_code;
             END if;
             set l_center_notice = 'tmp_center_notice_train_info';
             begin 
               declare tmp_purposes_in char(2);
               if length(purposes_in)<=2 then
                 set tmp_purposes_in=purposes_in;
               else
                 set tmp_purposes_in=substring(purposes_in,1,2);
               end if;
               
              CALL arith.DS60_Notice_Period(
              board_train_date_in
              , l_train_no
              , l_train_code
              , l_start_telecode      
              , l_w_seat_type
              , l_fetch_w_seat
              , tmp_purposes_in
              , l_t_range
              , l_sale_mode
              , l_center_notice     
              , ''             
              , l_train_type_code
              , l_start_bureau_code,l_return_code);
             end;
             
            IF debug_in = 9 THEN
              select 'end call  arith.DS60_Notice_Period', board_train_date_in
               , l_train_no
               , l_train_code
               , l_start_telecode     
               , l_w_seat_type
               , l_fetch_w_seat
               , purposes_in
               , l_t_range
               , l_sale_mode
               , l_center_notice     
               , ''             
               , l_train_type_code
               , l_start_bureau_code,l_return_code;
             END if;
             
             IF l_return_code = 0 THEN set l_train_period_flag = 0;
             
             ELSEIF l_return_code = 1  THEN set l_train_period_flag = 0;
             ELSE                           
               
              IF l_fetch_w_seat = 1 AND l_t_seat_type_code = 'W' THEN set l_train_period_flag = 0;
               
              ELSEIF l_fetch_w_seat = 9 AND l_t_seat_type_code != 'W' THEN set l_train_period_flag = 0; 
              end if;
            END if;
            
           END if;
           
           set l_seat_type_cache = concat(rtrim(l_seat_type_cache) , ',' , l_t_seat_type_code , CONVERT(l_train_period_flag,CHAR(1)));  
          ELSE
           set l_train_period_flag = CONVERT(substring(l_seat_type_cache,l_row + 2,1),signed)  ;   
          END if;

          
          IF NOT EXISTS(SELECT 1 FROM tmp_seat_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_t_seat_type_code AND wseat_type_code = l_w_seat_type) THEN
          
           INSERT INTO tmp_seat_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,purposes_in,l_t_range,l_train_period_flag,0,l_to_station_no_limit,l_w_seat_type,0) ;
            
           set l_tmp_seat_type_list = concat(rtrim(l_tmp_seat_type_list) ,l_t_seat_type_code);
            
          END if;

          IF l_t_ticket_quantity = 0 OR l_train_period_flag = 0 THEN ITERATE lab_get_left00; end if; 
          
          IF EXISTS(SELECT 1 FROM tmp_seat_type_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_t_seat_type_code AND wseat_type_code = l_w_seat_type) THEN
           UPDATE tmp_seat_type_info_train_info SET ticket_num = ticket_num + l_t_ticket_quantity 
            WHERE train_date   = board_train_date_in
            AND train_no   = l_train_no
            AND seat_type_code = l_t_seat_type_code 
            AND  wseat_type_code = l_w_seat_type;
           set l_error =  @@error_count,l_rowcount = row_count();
          ELSE
           INSERT INTO tmp_seat_type_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,l_w_seat_type,l_t_ticket_quantity,0);
          END if;
        END while lab_get_left00;
        CLOSE cursor_get_left00;
       end;
     ELSE   
       set record_not_found=0;
       begin
         DECLARE cursor_get_left01 CURSOR FOR 
          SELECT seat_type_code,wseat_type_code,sum(ticket_quantity) 
         FROM center.left_base_center  FORCE INDEX(l_b_c_idx)
         WHERE  train_no  = l_train_no
         AND train_date  = board_train_date_in
         AND station_no  = l_start_station_no
         AND far_from_station_no <= l_end_station_no
         AND limit_station >= l_end_station_no 
         AND instr( seat_type_list_in,seat_type_code) > 0     
         AND instr( purposes_in,purpose_code) % 2  = 1   AND instr( l_cancel_purpose,purpose_code) % 2 = 0   
         AND ticket_quantity > 0
         GROUP BY seat_type_code,wseat_type_code
         UNION 
          SELECT seat_type_code,wseat_type_code,sum(ticket_quantity)  
         FROM center.left_base_center  FORCE INDEX(l_b_c_idx)
         WHERE  train_no  = l_train_no
         AND train_date  = board_train_date_in
         AND station_no  = l_start_station_no
         AND far_from_station_no <= '99'                            
         AND limit_station >= l_end_station_no 
         AND instr( seat_type_list_in,seat_type_code) > 0     
         AND instr( purposes_in,purpose_code) % 2  = 1   AND instr( l_cancel_purpose,purpose_code) % 2 = 1   
         AND ticket_quantity > 0
         GROUP BY seat_type_code,wseat_type_code
         UNION 
          SELECT seat_type_code,wseat_type_code,sum(ticket_quantity) 
         FROM center.left_base_AD  FORCE INDEX(l_b_c_idx)
         WHERE  train_no  = l_train_no
         AND train_date  = board_train_date_in
         AND station_no  = l_start_station_no
         AND far_from_station_no <= l_end_station_no 
         AND limit_station >= l_end_station_no 
         AND instr( seat_type_list_in,seat_type_code) > 0     
         AND instr( purposes_in,purpose_code) % 2  = 1   AND instr( l_cancel_purpose,purpose_code) % 2 = 0   
         AND ticket_quantity > 0
         GROUP BY seat_type_code,wseat_type_code
         UNION 
          SELECT seat_type_code,wseat_type_code,sum(ticket_quantity) 
         FROM center.left_base_AD  FORCE INDEX(l_b_c_idx)
         WHERE  train_no  = l_train_no
         AND train_date  = board_train_date_in
         AND station_no  = l_start_station_no
         AND far_from_station_no <= '99'                            
         AND limit_station >= l_end_station_no 
         AND instr( seat_type_list_in,seat_type_code) > 0     
         AND instr( purposes_in,purpose_code) % 2  = 1   AND instr( l_cancel_purpose,purpose_code) % 2 = 1   
         AND ticket_quantity > 0
         GROUP BY seat_type_code,wseat_type_code;
   
        OPEN cursor_get_left01;

        lab_get_left01:
        WHILE 1 = 1 DO 
          FETCH cursor_get_left01 INTO l_t_seat_type_code,l_w_seat_type,l_t_ticket_quantity ;
          
          if record_not_found = 1 THEN
            leave lab_get_left01;
          end IF;

          IF debug_in = 9 THEN
           SELECT '####################DS50_Fetch_Train_Info.DBG.hhh2_2.»º´æÐ´Èë.##############';
           select l_t_seat_type_code,l_w_seat_type,l_t_ticket_quantity ;
          END if;

          set l_train_period_flag = 1  
          ,  l_fetch_w_seat    = 0  
          ,  l_return_code    = 0
          ,  l_t_range      = 0;

          set l_row = instr( l_seat_type_cache,concat(',' , l_t_seat_type_code));   
          IF l_row = 0 THEN
           IF l_notice_flag = '1' THEN
             set l_center_notice = 'tmp_center_notice_train_info';
             begin 
               declare tmp_purposes_in char(2);
               if length(purposes_in)<=2 then
                 set tmp_purposes_in=purposes_in;
               else
                 set tmp_purposes_in=substring(purposes_in,1,2);
               end if;
              CALL arith.DS60_Notice_Period(
              board_train_date_in
              , l_train_no
              , l_train_code
              , l_start_telecode      
              , l_w_seat_type
              , l_fetch_w_seat
              , tmp_purposes_in
              , l_t_range
              , l_sale_mode
              , l_center_notice     
              , ''             
              , l_train_type_code
              , l_start_bureau_code,l_return_code);
            end;
             
             IF l_return_code = 0 THEN set l_train_period_flag = 0;
             
             ELSEIF l_return_code = 1  THEN set l_train_period_flag = 0;
             ELSE                           
               
              IF l_fetch_w_seat = 1 AND l_t_seat_type_code = 'W' THEN set l_train_period_flag = 0;
               
              ELSEIF l_fetch_w_seat = 9 AND l_t_seat_type_code != 'W' THEN set l_train_period_flag = 0; 
              end if;
            END if;
           END if;
           
           set l_seat_type_cache = concat(rtrim(l_seat_type_cache) , ',' , l_t_seat_type_code , CONVERT(l_train_period_flag,CHAR(1)));  
          ELSE
           set l_train_period_flag = CONVERT(substring(l_seat_type_cache,l_row + 2,1),signed)  ;   
          END if;
          
          IF NOT EXISTS(SELECT 1 FROM tmp_seat_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_t_seat_type_code AND wseat_type_code = l_w_seat_type) THEN
           INSERT INTO tmp_seat_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,purposes_in,l_t_range,l_train_period_flag,0,l_to_station_no_limit,l_w_seat_type,0) ;
           set l_tmp_seat_type_list = rtrim(l_tmp_seat_type_list) + l_t_seat_type_code;
          END if;
          IF l_t_ticket_quantity = 0 OR l_train_period_flag = 0 THEN ITERATE lab_get_left01; end if; 
          
          IF EXISTS(SELECT 1 FROM tmp_seat_type_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_t_seat_type_code AND wseat_type_code = l_w_seat_type) THEN
           UPDATE tmp_seat_type_info_train_info SET ticket_num = ticket_num + l_t_ticket_quantity 
            WHERE train_date   = board_train_date_in
            AND train_no   = l_train_no
            AND seat_type_code = l_t_seat_type_code 
            AND  wseat_type_code = l_w_seat_type;
           set l_error =  @@error_count,l_rowcount = row_count();
          ELSE
           INSERT INTO tmp_seat_type_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,l_w_seat_type,l_t_ticket_quantity,0);
          END if;
        END while lab_get_left01;
        CLOSE cursor_get_left01;
       end;
       
     END if;


     set l_t8 = l_t8 + timestampdiff(second,l_d9, NOW())*1000;  


     set l_d9 = NOW();
     
     set l_tmp_list = seat_type_list_in;
     IF l_network_mode = 1 OR l_TVM_Flag = 1 THEN
       WHILE EXISTS (SELECT 1 FROM tmp_seat_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND flag = 0) DO  
        SELECT seat_type_code, period_flag INTO l_t_seat_type_code,l_train_period_flag
         FROM tmp_seat_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND flag = 0 LIMIT 1;
        UPDATE tmp_seat_info_train_info SET flag = 1 WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_t_seat_type_code AND flag = 0 ;

        SELECT ticket_num INTO l_t_ticket_quantity FROM tmp_seat_type_info_train_info
         WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_t_seat_type_code;
        set l_error =  @@error_count,l_rowcount = row_count(); 
        IF l_rowcount = 0 AND l_error = 0 THEN set l_t_ticket_quantity = 0; end if;
        IF l_t_ticket_quantity >= l_ticket_limit OR l_train_period_flag = 0 THEN  
          set l_row = instr(l_tmp_list,l_t_seat_type_code);
          IF l_row > 0 THEN set l_tmp_list = insert(l_tmp_list,l_row,1,''); end if;
        END if;
       END WHILE;
     END if;
     set l_t12 = l_t12 + timestampdiff(second,l_d9, NOW())*1000;  

     

     
     set l_d9 = now();
     TRUNCATE TABLE tmp_share_train_info;
     IF l_tmp_list IS NULL THEN set l_tmp_list = ''; end if;
     IF l_tmp_list != '' THEN
       
       IF l_start_station_telecode != l_start_telecode THEN 
        set range_in    = 0  
         ,  l_fetch_w_seat = 0
         ,  l_share_string = ''
         ,  l_cancel_station = '';   
         begin 
         declare l_out_in TINYINT unsigned;
         declare l_sale_mode_in char(1);
         declare l_DBG_in TINYINT unsigned;
         declare l_return_in int;
         set l_out_in = 0;
         set l_sale_mode_in='*';
         set l_DBG_in=0;
         
               
         CALL arith.DS50_Proc_Share_Pre (
          board_train_date_in
          ,l_train_no
          , l_start_telecode
          , seat_type_list_in
          ,  purposes_in
          , range_in 
          , l_share_string
          , l_out_in
          , l_sale_mode_in
          , l_DBG_in
          , l_return_in) ;
          
          
        end;
        
        IF l_share_string IS NULL THEN set l_share_string = ''; end if;
        
        IF l_share_string != '' then
          
          set l_row = 0 ;
          WHILE l_row < length(rtrim(l_share_string)) / 27 DO
           set l_original_station_telecode  = substring(l_share_string,l_row * 27 + 1,3);
           set l_transform_date      = substring(l_share_string,l_row * 27 + 1 + 3, 8);
           set l_transform_no      = substring(l_share_string,l_row * 27 + 1 + 3 + 8, 2);
           set l_fetch_w_seat      = CONVERT(substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2, 1),signed);
           set l_tmp_range       = CONVERT(substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1, 1),signed);
           set l_tmp_start_coach_no    = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1, 2);
           set l_tmp_end_coach_no    = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2, 2);
           set l_schedule_coach     = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2, 2) ; 
           set l_auto_share      = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 4, 1);  
           set l_tmp_purpose      = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 5, 2);
           set l_seat_type_code     = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 7, 1);

           lab_share_lable: LOOP

           select bureau_code,
             subbureau_code
           INTO l_R_original_station_bureau,l_R_original_subbureau_code
           from basic.station_dictionary
           where station_telecode = l_original_station_telecode;


           select bureau_code,
             subbureau_code
           INTO l_R_sale_bureau,l_R_sale_subbureau
           from basic.station_dictionary
           where station_telecode = inner_code_in;

           
           IF l_R_original_station_bureau != l_R_sale_bureau THEN set l_From_Range = 4 ;
           ELSEIF l_R_original_subbureau_code != l_R_sale_subbureau THEN set l_From_Range = 3 ;
           ELSEIF inner_code_in != l_original_station_telecode THEN
             CALL arith.CS50_Same_City (board_train_date_in,inner_code_in,l_original_station_telecode,'1',l_rowcount) ;  
             IF l_rowcount = 1 THEN set l_From_Range = 1;                
             ELSE set l_From_Range = 2  ;
             end if;
           ELSE set l_From_Range = 0;
           end if;

            
           set l_w_seat_type = l_seat_type_code;
           IF l_w_seat_type = 'z' THEN set l_w_seat_type = '%' ; end if;          
           IF l_seat_type_code = 'z' THEN set l_seat_type_code = l_tmp_list;
           ELSEIF instr(l_tmp_list,l_seat_type_code) = 0 THEN leave lab_share_lable;      
           end if;
           IF l_tmp_purpose  = '**'  THEN set l_tmp_purpose  = purposes_in; end if;
           IF l_tmp_range    = 9 THEN  set l_tmp_range = 255; end if;
           set l_purpose_cache = l_tmp_purpose;
           IF l_fetch_w_seat = 9 THEN set l_seat_type_code = 'W' ;  
           ELSEIF l_fetch_w_seat = 1 THEN         
             set l_rowcount = instr(l_seat_type_code,'W');
             IF l_rowcount > 0 THEN set l_seat_type_code = INSERT(l_seat_type_code,l_rowcount,1,''); end if;
           END if;

           
           set l_cancel_seat_type = ''
            ,  l_cancel_purpose   = '';
           IF l_start_telecode != l_original_station_telecode THEN
             
             IF EXISTS(SELECT 1 FROM tmp_share_train_info WHERE station_telecode = l_original_station_telecode AND transform_date = l_transform_date AND transform_no = l_transform_no
             AND fetch_w_seat = l_fetch_w_seat AND l_range = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
             AND schedule_coach = l_schedule_coach AND seat_type_code = l_seat_type_code AND old_purposes = l_tmp_purpose) THEN  
              leave lab_share_lable; 
             end if;
             
             
             
             SELECT bureau_code INTO l_original_bureau_code FROM basic.station_dictionary
             WHERE station_telecode = l_original_station_telecode;

             
             set l_to_station_no_limit = l_end_station_no;
             IF l_bureau_code = l_original_bureau_code THEN   
              
              IF instr(l_cancel_station,l_original_station_telecode) = 0 THEN 
                set l_cancel_station = concat(rtrim(l_cancel_station) , l_original_station_telecode);

                INSERT INTO tmp_cancel_limit_define_train_info 
                SELECT * FROM basic.DJ50_cancel_limit_define
                WHERE inner_code IN (l_original_station_telecode)  
                 AND start_date <= l_transform_date       
                 AND stop_date  >= l_transform_date
                 AND (train_code = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name OR train_code = "*" OR (train_code != l_train_code AND l_train_code LIKE train_code)) 
                 AND running_rule & (power(2,datediff(l_transform_date,start_date) % running_style)) > 0                       
                 AND sale_mode IN (l_sale_mode,'*')                                        
                 AND (seat_type_code = '*' OR instr( seat_type_list_in,seat_type_code) > 0 )                          
                 AND (purpose_code   = '*' OR instr( l_tmp_purpose,purpose_code) % 2  = 1 )                          
                 AND cancel_office_no   = '%'
                 AND cancel_window_no   = 0;

              END if;
              
          
              
               SELECT start_time,
                  start_time 
               INTO l_tmp_start_time,l_tmp_start_time1
                FROM tmp_stop_time_train_train_info 
               WHERE train_no = l_train_no
               AND   station_telecode = l_original_station_telecode ;
               IF row_count() = 0 THEN set l_tmp_start_time = '0000',l_tmp_start_time1 = '0000'; end if;  

             END if;
             
             
             
             

             IF purpose_mode_in = 2 AND l_start_bureau_code != l_original_bureau_code THEN  
              SELECT count(*) INTO l_rowcount FROM tmp_train_para_define_train_info
               WHERE inner_code = l_original_bureau_code;
              IF l_rowcount = 0 THEN
                
                IF debug_in = 9 THEN
                select 'DS50_Fetch_Train_Info.304========clone table tmp_train_cache_train_info';
                end if;
                truncate table tmp_train_cache_train_info1;
                insert into tmp_train_cache_train_info1 select * from tmp_train_cache_train_info;
                INSERT INTO tmp_train_para_define_train_info 
                SELECT * FROM basic.DJ50_train_sale_define a
                 WHERE inner_code  = l_original_bureau_code
                 AND start_date   <= l_today
                 AND stop_date    >= l_today
                 AND flag1     IN (l_sale_mode,'*')               
                 AND ( purpose_code = '*' OR instr( l_input_purposes,purpose_code) % 2 = 1 )   
                 AND (seat_type_code ='*' OR instr(seat_type_list_in,seat_type_code) > 0 )  
                 AND (train_code IN (SELECT train_code FROM tmp_train_cache_train_info) OR a.train_code = '*' OR EXISTS(SELECT 1 FROM tmp_train_cache_train_info1 WHERE train_code LIKE a.train_code))
                 AND (l_is_student = 1 OR (l_is_student = 0 AND ticket_type  NOT IN (3,12))) ;  
              END if;
             END if;

             delete from tmp_train_group_train_info ;                                
             
             insert into tmp_train_group_train_info                            
             select group_code
              from basic.DJ52_train_group_define
             where inner_code = l_original_bureau_code 
             and module_code='J' 
             and type_code='T' 
             and start_station_telecode = l_original_station_telecode;

             
             set l_ls_purposes = l_tmp_purpose
             ,  l_purpose_cache = '';

 
 
 
             
             
             SELECT purpose_code INTO l_purpose_cache FROM tmp_share_train_info 
             WHERE station_telecode = l_original_station_telecode AND transform_date = l_transform_date 
              AND seat_type_code = seat_type_code AND old_purposes = l_tmp_purpose limit 1;

             set l_error =  @@error_count,l_rowcount = row_count();
             IF l_rowcount = 0 AND l_error = 0 THEN
              
              IF purpose_mode_in = 1 THEN
                WHILE NOT (l_ls_purposes IS NULL OR l_ls_purposes = '') do
                set l_purpose_code = substring(l_ls_purposes,1,2);
                 set l_ls_purposes  = INSERT(l_ls_purposes,1,2,'');
                 
                 set l_t_range = 0,l_range1 = 0,l_range2 = 1,l_range3 = 2,l_range4 = 3,l_range5 = 4,l_return_code = 0
                  ,  l_t_seat_type_code = 'z';

                 CALL arith.DS60_Train_Time  (l_transform_date,l_train_no,l_train_code,l_t_seat_type_code,l_t_range,l_purpose_code,'100000000000000000000000000000001000'
                  , l_range1,l_range2 ,l_range3 ,l_range4 ,l_range5 
                  , 1, l_original_station_telecode,1,l_sale_mode,l_return_code);
                 IF l_return_code = 0 THEN set l_purpose_code = ''; end if;
                 set l_purpose_cache = concat(rtrim(l_purpose_cache) , l_purpose_code);
 
                 if l_start_bureau_code = l_original_bureau_code THEN
                  
                   SELECT ahead_time INTO l_ahead_time FROM tmp_cancel_limit_define_train_info
                   WHERE  inner_code IN (l_start_bureau_code,l_original_station_telecode)  
                   AND start_date <= l_transform_date        
                   AND  stop_date  >= l_transform_date
                   AND (train_code = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name OR train_code = "*" OR (train_code != l_train_code AND l_train_code LIKE train_code))  
                   AND   station_telecode IN (l_original_station_telecode,'*')
                   AND   train_type IN ('*',l_train_type_code)                                       
                   AND  purpose_code   IN ('*',l_purpose_code )                            
                   AND  sale_mode   IN ('*',l_sale_mode )                            
                    AND running_rule & (power(2,datediff(l_transform_date,start_date) % running_style)) > 0                       
                   
                   ORDER BY level_flag desc,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc ,ahead_time desc  LIMIT 1;
                   set l_error =  @@error_count,l_rowcount = row_count();
                   IF l_rowcount > 0 AND l_error = 0 THEN
                    IF l_ahead_time IS NULL THEN set l_ahead_time = 0; end if;
                    set l_start_datetime = str_to_date( concat(l_transform_date , l_tmp_start_time1),'%Y%m%d%H%i' );
                    IF timestampdiff(minute,now(), l_start_datetime ) <= l_ahead_time THEN
                     set l_cancel_purpose = concat(l_cancel_purpose ,l_purpose_code) ;                 
                    END if;
                   END if;
                 end if;
                END WHILE;

              
              ELSEIF purpose_mode_in = 2 THEN
                WHILE NOT (l_ls_purposes IS NULL OR l_ls_purposes = '') DO
                 set l_purpose_code = substring(l_ls_purposes,1,2);
                 set l_ls_purposes  = INSERT(l_ls_purposes,1,2,'');
                
                 
                 set l_train_period = 0 ;   
                 
            
            
            
            
            
            
            
            
            
                    
                  

                 SELECT control_day
                  ,  RIGHT(concat('0000' , ltrim(rtrim(CONVERT(ahead_time,CHAR(4))))),4)
                  ,   control_train_day,
                  from_period,
                    control_min_date,
                    start_date 
                  into l_max_day,l_tmp_start_time,l_stop_date,l_C_from_period,l_C_control_min_date,l_C_start_date
                  FROM tmp_train_para_define_train_info
                  WHERE inner_code   = l_management_bureau
                  AND train_code    = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name
                  AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'         
                     or                                                                                  
                     station_telecode = '*'  and group_code in ( select group_code from tmp_train_group_train_info))   
                  AND train_type      IN (l_train_type_code,'*')
                  AND purpose_code   IN (l_purpose_code,'*') 
                  AND flag1       IN (l_sale_mode,'*')    
                  AND flag2      = '1'        
                  and train_class   IN (l_train_class_code,'*')
                 
                  
                  
                   ORDER BY level_flag  desc,train_code  desc,station_telecode  desc,group_code desc,ticket_type desc,purpose_code desc,l_range  desc,seat_type_code desc,train_type desc,train_class desc,flag1 desc limit 1;
                 set l_error =  @@error_count,l_rowcount = row_count();
                 IF l_rowcount = 0 AND l_error = 0 THEN
                   SELECT control_day
                   ,  RIGHT(concat('0000' , ltrim(rtrim(CONVERT(ahead_time,CHAR(4))))),4)
                   ,  control_train_day,
                    from_period,
                     control_min_date,
                     start_date 
                   INTO l_max_day,l_tmp_start_time,l_stop_date,l_C_from_period,l_C_control_min_date,l_C_start_date
                   FROM tmp_train_para_define_train_info
                   WHERE inner_code   =  l_original_bureau_code     
                    AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'             
                      or                                                                                      
                      station_telecode = '*'  and group_code in ( select group_code from tmp_train_group_train_info))       
                    AND train_type      IN (l_train_type_code,'*')
                    AND (train_code = l_train_code OR train_code = '*' OR (train_code != l_train_code AND l_train_code LIKE train_code) )
                    AND purpose_code   IN (l_purpose_code,'*') 
                    AND flag1       IN (l_sale_mode,'*')    
                    AND flag2     IN ('*','')       
                    and train_class   IN (l_train_class_code,'*')
                  
                    
                   
                   ORDER BY level_flag desc,train_code  desc,station_telecode desc ,group_code desc,ticket_type desc,purpose_code desc,l_range  desc,seat_type_code desc,train_type desc,train_class desc,flag1 desc limit 1;
                   set l_error =  @@error_count,l_rowcount = row_count();
                 END if;

                 IF l_rowcount > 0 AND l_error = 0 THEN
                   set l_date_after = datediff(board_train_date_in,NOW());
                   set l_train_stop_sale = l_max_day;
                   IF l_date_after = l_max_day THEN
                    set l_tmp_start_datetime = str_to_date( concat( CURDATE()+0 , l_tmp_start_time),'%Y%m%d%H%i' );    
                    IF (timestampdiff( minute,l_tmp_start_datetime,NOW()) < 0)  THEN  
                     set l_max_day = l_max_day - 1;  
                    END if;
                   END if;

                   
                   set l_now_datetime = concat(ltrim(rtrim(DATE_FORMAT(NOW(),'%Y/%m%d'))) , ' ' ,  rtrim(ltrim(DATE_FORMAT(NOW(),'%H:%i:%s'))));
                   set l_tmp_start_datetime = str_to_date( concat(CURDATE()+0 ,l_tmp_start_time) ,'%Y%m%d%H%i');
                   
                   if l_C_start_date = l_today and l_tmp_start_time <> "0000" THEN
                    IF timestampdiff( second, l_tmp_start_datetime,l_now_datetime) < 0 and board_train_date_in > l_C_control_min_date  THEN
                     set l_max_day = datediff(l_C_control_min_date,NOW());
                    end if;
                    if l_date_after > l_max_day THEN
                     set l_train_period = 1; 
                    end if;
                   END if;

                   

                   IF l_date_after > l_max_day THEN set l_train_period = 1 ; end if; 
                   IF board_train_date_in > l_stop_date THEN set l_train_period = 1; end if;
                   
                   IF l_train_period = 1 THEN set l_purpose_code = '' ; end if; 
                 END if;
                 set l_purpose_cache = concat(rtrim(l_purpose_cache) , l_purpose_code);

                 if l_start_bureau_code = l_original_bureau_code THEN
                    SELECT ahead_time INTO l_ahead_time FROM tmp_cancel_limit_define_train_info
                    WHERE  inner_code IN (l_start_bureau_code,l_original_station_telecode)  
                    AND start_date <= l_transform_date        
                    AND  stop_date  >= l_transform_date
                    AND (train_code = l_train_code AND start_station_name = l_start_name AND end_station_name = l_end_name OR train_code = "*" OR (train_code != l_train_code AND l_train_code LIKE train_code))  
                    AND   station_telecode IN (l_original_station_telecode,'*')
                    AND   train_type IN ('*',l_train_type_code)                                       
                    AND  purpose_code   IN ('*',l_purpose_code )                            
                    AND  sale_mode   IN ('*',l_sale_mode )                            
                    AND running_rule & (power(2,datediff(l_transform_date,start_date) % running_style)) > 0                       
                    
                    ORDER BY level_flag desc,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc   ,ahead_time desc LIMIT 1;
                    set l_error =  @@error_count,l_rowcount = row_count();
                    IF l_rowcount > 0 AND l_error = 0 THEN
                     IF l_ahead_time IS NULL THEN set l_ahead_time = 0; end if;
                     set l_start_datetime = str_to_date( concat(l_transform_date , l_tmp_start_time1),'%Y%m%d%H%i' );
                     IF timestampdiff(minute,  now(),l_start_datetime ) <= l_ahead_time THEN
                       set l_cancel_purpose = concat(l_cancel_purpose , l_purpose_code);                  
                     END if;
                    END if;
                  end if;
                END WHILE;
              END if;
 
              IF l_purpose_cache = '' OR rtrim(l_purpose_cache) IS NULL THEN set l_train_period = 1 ; end if; 
              IF l_train_period = 1 THEN LEAVE lab_share_lable; end if;
             END if;
            
             IF l_auto_share = ':' THEN set l_to_station_no_limit = ':' ; 
             ELSE set l_to_station_no_limit = l_end_station_no;
             end if;

             INSERT INTO tmp_share_train_info 
             VALUES (l_original_station_telecode,l_transform_date,l_transform_no,l_fetch_w_seat,l_tmp_range
               ,l_tmp_start_coach_no,l_tmp_end_coach_no,l_schedule_coach,l_purpose_cache,l_seat_type_code,l_train_no,l_to_station_no_limit,l_tmp_purpose,l_w_seat_type
               ,l_cancel_seat_type,ifnull(ltrim(rtrim(l_cancel_purpose)),'')  
               ,l_From_Range );  

           END if;


           LEAVE lab_share_lable;
           end loop lab_share_lable;

           set l_row = l_row + 1;
          END WHILE; 
        END if; 
       END if; 
       set l_t10 = l_t10 + timestampdiff(second,l_d9, NOW())*1000;  

       
 

       IF EXISTS(SELECT 1 FROM tmp_share_train_info) THEN
        set l_d9 = now();
        set l_seat_type_code = '';
        
        IF l_my_center_code = 'AD' THEN  
          set record_not_found=0;
          
          Truncate Table tmp_share_train_info2;
          Truncate Table tmp_share_train_info3;
          insert into tmp_share_train_info2 select * from tmp_share_train_info;
          insert into tmp_share_train_info3 select * from tmp_share_train_info;
IF debug_in = 9 THEN
 select '10001========';
SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info b            
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= l_end_station_no
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1 
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 0         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info2 b            
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= '99'                   
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 1         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info3 b            
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no = l_start_station_no               
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit = ':'                    
            ORDER BY ticket_quantity DESC;
end if;
          begin
           DECLARE cursor_get_left10 CURSOR FOR 
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info b            
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= l_end_station_no
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1 
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 0         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info2 b            
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= '99'                   
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 1         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info3 b            
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no = l_start_station_no               
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit = ':'                    
            ORDER BY ticket_quantity DESC;
            
           OPEN cursor_get_left10;
           TRUNCATE TABLE tmp_ticket_left_train_info;

           lab_get_left10:
           WHILE 1 = 1 DO 
             FETCH cursor_get_left10 INTO 
             l_t_train_no,l_t_train_date,l_t_station_no,l_t_assign_station,l_t_far_from_station_no,l_t_limit_station,l_t_coach_no,l_t_seat_type_code,l_t_purpose_code
             , l_t_range,l_t_ticket_quantity,l_t_up_quantity,l_t_mid_quantity,l_t_down_quantity,l_t_wseat_type_code,l_t_seat_feature,l_t_inner_code;

             if record_not_found = 1 THEN               
               leave lab_get_left10;
             end IF;

             IF EXISTS(SELECT 1 FROM tmp_ticket_left_train_info WHERE train_no = l_t_train_no AND train_date = l_t_train_date AND station_no = l_t_station_no AND assign_station = l_t_assign_station
             AND far_from_station_no = l_t_far_from_station_no AND limit_station = l_t_limit_station AND coach_no = l_t_coach_no AND seat_type_code = l_t_seat_type_code 
             AND purpose_code = l_t_purpose_code AND l_range = l_t_range AND ticket_quantity = l_t_ticket_quantity AND up_quantity = l_t_up_quantity AND mid_quantity = l_t_mid_quantity 
             AND down_quantity = l_t_down_quantity AND wseat_type_code = l_t_wseat_type_code AND seat_feature = l_t_seat_feature AND inner_code = l_t_inner_code) THEN
              
              ITERATE lab_get_left10;
             ELSE
              IF l_network_mode = 1 OR l_TVM_Flag = 1 THEN  
                SELECT sum(ticket_quantity) INTO l_ticket_num FROM tmp_ticket_left_train_info WHERE seat_type_code = l_t_seat_type_code;
                IF l_ticket_num >= l_ticket_limit THEN 
                
                ITERATE lab_get_left10; 
                end if;
              END if;

              
              
              
              set l_train_period_flag = 1  
               ,  l_fetch_w_seat    = 0  
               ,  l_return_code    = 0;
             
              set l_row = instr( l_seat_type_cache, concat(',' , l_t_seat_type_code));  
              IF l_row = 0 THEN
                IF l_notice_flag = '1' THEN
               
                 set l_center_notice = 'tmp_center_notice_train_info';
                 begin 
                   declare tmp_purposes_in char(2);
                   if length(purposes_in)<=2 then
                    set tmp_purposes_in=purposes_in;
                   else
                    set tmp_purposes_in=substring(purposes_in,1,2);
                   end if;
                  CALL arith.DS60_Notice_Period
                   (board_train_date_in
                  , l_train_no
                  , l_train_code
                  , l_start_telecode      
                  , l_t_wseat_type_code
                  , l_fetch_w_seat 
                  , tmp_purposes_in
                  , l_t_range
                  , l_sale_mode
                  , l_center_notice     
                  , ''             
                  , l_train_type_code
                  , l_start_bureau_code,l_return_code);
                 end;
                 
                 
                 IF l_return_code = 0 THEN set l_train_period_flag = 0;
                 
                 ELSEIF l_return_code = 1 THEN set l_train_period_flag = 0;
                 ELSE   
                   
                   IF l_fetch_w_seat = 1 AND l_t_seat_type_code = 'W' THEN set l_train_period_flag = 0;
                   
                   ELSEIF l_fetch_w_seat = 9 AND l_t_seat_type_code != 'W' THEN set l_train_period_flag = 0;
                   end if;
                 END if;
                END if;
                 
                set l_seat_type_cache = concat(rtrim(l_seat_type_cache) , ',' , l_t_seat_type_code , CONVERT(l_train_period_flag,CHAR(1))) ; 
              ELSE
               set l_train_period_flag = CONVERT(substring(l_seat_type_cache,l_row + 2,1),signed);
              END if;
              
              INSERT INTO tmp_seat_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,purposes_in,l_t_range,l_train_period_flag,0,l_to_station_no_limit,l_t_wseat_type_code,0) ;

              set l_tmp_seat_type_list = concat(rtrim(l_tmp_seat_type_list) , l_t_seat_type_code);
              IF l_train_period_flag = 0 THEN 
               
               ITERATE lab_get_left10; 
              end if;  
              
              IF l_t_ticket_quantity = 0 THEN 
               
               ITERATE lab_get_left10; 
              end if; 
            
              INSERT INTO tmp_ticket_left_train_info VALUES(l_t_assign_station,l_t_train_no,l_t_train_date,l_t_station_no,l_t_far_from_station_no,l_t_limit_station,l_t_coach_no
               ,l_t_seat_type_code,l_t_purpose_code,l_t_range,l_t_ticket_quantity,l_t_up_quantity,l_t_mid_quantity,l_t_down_quantity,l_t_wseat_type_code,l_t_seat_feature,l_t_inner_code);
               
             END if;
           
           END while lab_get_left10;
           CLOSE cursor_get_left10;
          end;
        ELSE  
          set record_not_found=0;
          IF debug_in = 9 THEN
           select '302=====clone table tmp_share_train_info';
          end if;
          Truncate Table tmp_share_train_info2;
          Truncate Table tmp_share_train_info3;
          Truncate Table tmp_share_train_info4;
          Truncate Table tmp_share_train_info5;
          Truncate Table tmp_share_train_info6;
          insert into tmp_share_train_info2 select * from tmp_share_train_info;
          insert into tmp_share_train_info3 select * from tmp_share_train_info;
          insert into tmp_share_train_info4 select * from tmp_share_train_info;
          insert into tmp_share_train_info5 select * from tmp_share_train_info;
          insert into tmp_share_train_info6 select * from tmp_share_train_info;
          begin
           DECLARE cursor_get_left11 CURSOR FOR 
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info b           
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= l_end_station_no
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 0         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range   
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info2 b           
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= '99'                   
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 1         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range    
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),tmp_share_train_info3 b           
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no = l_start_station_no               
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit = ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_AD a  FORCE INDEX(l_b_c_idx),tmp_share_train_info4 b             
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= l_end_station_no 
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 0         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_AD a  FORCE INDEX(l_b_c_idx),tmp_share_train_info5 b             
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no <= '99'                   
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            AND instr( b.cancel_purpose_code,a.purpose_code) % 2  = 1         
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit != ':'                    
           UNION
           SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
            ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
            FROM center.left_base_AD a  FORCE INDEX(l_b_c_idx),tmp_share_train_info6 b             
            WHERE a.train_no    = l_train_no
            AND a.train_date   >= l_start_train_date
            AND a.train_date   <= board_train_date_in
            AND  a.train_date   = b.transform_date
            AND  a.train_no   = b.train_no
            AND a.assign_station = b.station_telecode
            AND a.station_no   = b.transform_no
            AND a.limit_station  >= l_end_station_no 
            AND a.far_from_station_no = l_start_station_no               
            AND instr(b.seat_type_code,a.seat_type_code) > 0
            
            AND instr( b.purpose_code,a.purpose_code) % 2  = 1
            
            AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
            AND  a.coach_no != b.schedule_coach
            
            AND   (a.range <= b.l_range OR b.l_range = 255)
            and  a.range >= b.from_range 
            AND a.ticket_quantity > 0
            AND b.to_station_limit = ':'                    
            ORDER BY ticket_quantity DESC;
           OPEN cursor_get_left11;
           TRUNCATE TABLE tmp_ticket_left_train_info;

           lab_get_left11:
           WHILE 1 = 1 DO 
             FETCH cursor_get_left11 INTO 
             l_t_train_no,l_t_train_date,l_t_station_no,l_t_assign_station,l_t_far_from_station_no,l_t_limit_station,l_t_coach_no,l_t_seat_type_code,l_t_purpose_code
             , l_t_range,l_t_ticket_quantity,l_t_up_quantity,l_t_mid_quantity,l_t_down_quantity,l_t_wseat_type_code,l_t_seat_feature,l_t_inner_code;

             if record_not_found = 1 THEN
               leave lab_get_left11;
             end IF;
            
             IF EXISTS(SELECT 1 FROM tmp_ticket_left_train_info WHERE train_no = l_t_train_no AND train_date = l_t_train_date AND station_no = l_t_station_no AND assign_station = l_t_assign_station
             AND far_from_station_no = l_t_far_from_station_no AND limit_station = l_t_limit_station AND coach_no = l_t_coach_no AND seat_type_code = l_t_seat_type_code 
             AND purpose_code = l_t_purpose_code AND l_range = l_t_range AND ticket_quantity = l_t_ticket_quantity AND up_quantity = l_t_up_quantity AND mid_quantity = l_t_mid_quantity 
             AND down_quantity = l_t_down_quantity AND wseat_type_code = l_t_wseat_type_code AND seat_feature = l_t_seat_feature AND inner_code = l_t_inner_code) THEN
              ITERATE lab_get_left11;
             ELSE
              IF l_network_mode = 1 OR l_TVM_Flag = 1 THEN  
                SELECT sum(ticket_quantity) INTO l_ticket_num FROM tmp_ticket_left_train_info WHERE seat_type_code = l_t_seat_type_code;
                IF l_ticket_num >= l_ticket_limit THEN ITERATE lab_get_left11; end if;
              END if;

              
              
              
              set l_train_period_flag = 1  
               ,  l_fetch_w_seat    = 0  
               ,  l_return_code    = 0;
             
              set l_row = instr( l_seat_type_cache, concat(',' , l_t_seat_type_code));  
              IF l_row = 0 THEN
                IF l_notice_flag = '1' THEN
                 set l_center_notice = 'tmp_center_notice_train_info';
                 begin 
                   declare tmp_purposes_in char(2);
                   if length(purposes_in)<=2 then
                    set tmp_purposes_in=purposes_in;
                   else
                    set tmp_purposes_in=substring(purposes_in,1,2);
                   end if;
                  CALL arith.DS60_Notice_Period
                   (board_train_date_in
                  , l_train_no
                  , l_train_code
                  , l_start_telecode      
                  , l_t_wseat_type_code
                  , l_fetch_w_seat 
                  , tmp_purposes_in
                  , l_t_range
                  , l_sale_mode
                  , l_center_notice     
                  , ''             
                  , l_train_type_code
                  , l_start_bureau_code,l_return_code);
                 end;
                 
                 IF l_return_code = 0 THEN set l_train_period_flag = 0;
                 
                 ELSEIF l_return_code = 1 THEN set l_train_period_flag = 0;
                 ELSE   
                   
                   IF l_fetch_w_seat = 1 AND l_t_seat_type_code = 'W' THEN set l_train_period_flag = 0;
                   
                   ELSEIF l_fetch_w_seat = 9 AND l_t_seat_type_code != 'W' THEN set l_train_period_flag = 0;
                   end if;
                 END if;
                END if;
                 
                set l_seat_type_cache = concat(rtrim(l_seat_type_cache) , ',' , l_t_seat_type_code , CONVERT(l_train_period_flag,CHAR(1))) ; 
              ELSE
               set l_train_period_flag = CONVERT(substring(l_seat_type_cache,l_row + 2,1),signed);
              END if;

              INSERT INTO tmp_seat_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,purposes_in,l_t_range,l_train_period_flag,0,l_to_station_no_limit,l_t_wseat_type_code,0) ;
              set l_tmp_seat_type_list = concat(rtrim(l_tmp_seat_type_list) , l_t_seat_type_code);
              IF l_train_period_flag = 0 THEN ITERATE lab_get_left11; end if;  
              
              IF l_t_ticket_quantity = 0 THEN ITERATE lab_get_left11; end if; 
            
              INSERT INTO tmp_ticket_left_train_info VALUES(l_t_assign_station,l_t_train_no,l_t_train_date,l_t_station_no,l_t_far_from_station_no,l_t_limit_station,l_t_coach_no
               ,l_t_seat_type_code,l_t_purpose_code,l_t_range,l_t_ticket_quantity,l_t_up_quantity,l_t_mid_quantity,l_t_down_quantity,l_t_wseat_type_code,l_t_seat_feature,l_t_inner_code);
             END if;
           
           END while lab_get_left11;
           CLOSE cursor_get_left11;
          end ;
        END if;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

        set l_t9 = l_t9 + timestampdiff(second,l_d9, NOW())*1000;  

        
        set l_d9 = now();
        set l_share_to_wseat = '0';
        
        IF EXISTS(SELECT 1 FROM tmp_ticket_left_train_info WHERE seat_type_code IN ('1','B')) THEN
          
         
          SELECT  reuse_flag into l_share_to_wseat FROM basic.DJ50_reuse_train_define
          WHERE start_date      <= l_start_train_date
          AND stop_date      >= l_start_train_date
          AND train_code      = l_train_code AND start_station_telecode = l_start_station_telecode AND end_station_telecode = l_end_station_telecode  
          AND seat_type_code     IN ('1','B','*') 
          AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
          ORDER BY seat_type_code desc,start_date desc,stop_date desc limit 1;  
         
          IF row_count() = 0 AND @@error_count = 0 THEN     
          
           SELECT  reuse_flag into l_share_to_wseat FROM basic.DJ60_reuse_para_define
            WHERE start_date   <= l_start_train_date
            AND stop_date   >= l_start_train_date
            AND (start_train_code   ='*' OR (start_train_code != '*' AND l_train_code BETWEEN start_train_code AND end_train_code))    
            AND special_flag   = l_train_type_code    
            AND seat_type_code  IN ('1','B','*')
           ORDER BY seat_type_code desc,start_train_code desc,start_date desc,stop_date desc limit 1;                        
           IF row_count() = 0 AND @@error_count = 0 THEN set l_share_to_wseat = '0'; end if;   
          END if;
        END if;

        
        lab_assign_station:
        WHILE 1 = 1 DO
         
          SELECT train_date,assign_station,purpose_code,seat_type_code
          , wseat_type_code
          INTO l_t_train_date,l_t_assign_station,l_t_purpose_code,l_t_seat_type_code,l_w_seat_type
          FROM tmp_ticket_left_train_info WHERE inner_code != ''
          ORDER BY wseat_type_code LIMIT 1;
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount = 0 THEN LEAVE lab_assign_station; end if;

          set l_seat_type_code = l_t_seat_type_code;
          
          IF l_share_to_wseat = '1' AND l_t_seat_type_code IN ('1','B') THEN 
           
           SELECT city_code INTO l_city_code FROM basic.station_divide_dictionary 
            WHERE station_telecode = l_t_assign_station     
            AND start_date     <= l_t_train_date
            AND   stop_date    >= l_t_train_date;
           IF row_count() != 0 AND @@error_count = 0 THEN 
             
             SELECT city_code INTO l_city_code FROM basic.station_divide_dictionary 
             WHERE station_telecode = l_start_telecode     
             AND city_code   = l_city_code
             AND start_date     <= l_t_train_date
             AND   stop_date    >= l_t_train_date;
             IF row_count() != 0 AND @@error_count = 0 THEN set l_share_to_wseat = '0'; end if;
           END if;
           
           IF l_share_to_wseat = '1' AND l_t_seat_type_code IN ('1','B') THEN set l_seat_type_code = 'W'; end if;
          END if;

          UPDATE tmp_ticket_left_train_info SET inner_code = '' 
          WHERE train_date = l_t_train_date AND assign_station = l_t_assign_station AND purpose_code = l_t_purpose_code AND wseat_type_code = l_w_seat_type
           AND seat_type_code = l_t_seat_type_code AND inner_code != '';
          
          set l_ticket_num = 0;
           
          SELECT sum(ticket_quantity) into l_ticket_num FROM tmp_ticket_left_train_info
          WHERE train_date = l_t_train_date AND assign_station = l_t_assign_station AND purpose_code = l_t_purpose_code 
           AND wseat_type_code = l_w_seat_type AND seat_type_code = l_t_seat_type_code;
          IF l_ticket_num IS NULL THEN set l_ticket_num = 0; end if;

          IF l_seat_type_code = 'W' AND l_t_seat_type_code IN ('1','B') THEN set l_t_seat_type_code = 'W'; end if; 

          IF EXISTS(SELECT 1 FROM tmp_seat_type_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND wseat_type_code = l_w_seat_type AND seat_type_code = l_t_seat_type_code) THEN
          UPDATE tmp_seat_type_info_train_info SET ticket_num = ticket_num + l_ticket_num 
           WHERE train_date   = board_train_date_in
           AND train_no   = l_train_no
           AND wseat_type_code= l_w_seat_type 
           AND seat_type_code = l_t_seat_type_code;
           set l_error =  @@error_count,l_rowcount = row_count();
          ELSE
           INSERT INTO tmp_seat_type_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,l_w_seat_type,l_ticket_num,0);
          END if;
        END while lab_assign_station; 
        set l_t12 = l_t12 + timestampdiff(second,l_d9, NOW())*1000;  
       END if; 
     END if;  
     
     set l_d9     = now()
      ,  l_tmp_list = '';
     
     
     
     IF l_my_center_code = 'AD' THEN  
       set record_not_found=0;
       begin
        DECLARE cursor_get_left20 CURSOR FOR
        SELECT DISTINCT seat_type_code,wseat_type_code
         FROM center.left_base_center  FORCE INDEX(l_b_c_idx)
         WHERE  train_no = l_train_no
         AND train_date   >= l_start_train_date
         AND train_date   <= board_train_date_in
         AND instr( seat_type_list_in,seat_type_code) > 0
         AND instr( l_tmp_seat_type_list,seat_type_code) = 0   
         ORDER BY seat_type_code;
        OPEN cursor_get_left20;
        lab_get_left20:
        WHILE 1 = 1 DO 
          FETCH cursor_get_left20 INTO l_t_seat_type_code,l_w_seat_type;
          if record_not_found = 1 THEN
           leave lab_get_left20;
          end IF;
          set l_train_period_flag = 1  
          ,  l_t_range      = 0;
          INSERT INTO tmp_seat_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,purposes_in,l_t_range,l_train_period_flag,0,l_to_station_no_limit,l_w_seat_type,0) ;
        END while lab_get_left20;
        CLOSE cursor_get_left20;
       end;
     ELSE  
       set record_not_found=0;
       begin
        DECLARE cursor_get_left21 CURSOR FOR
         SELECT DISTINCT seat_type_code,wseat_type_code
          FROM center.left_base_center  FORCE INDEX(l_b_c_idx)
          WHERE  train_no = l_train_no
          AND train_date   >= l_start_train_date
          AND train_date   <= board_train_date_in
          AND instr( seat_type_list_in,seat_type_code) > 0
          AND instr( l_tmp_seat_type_list,seat_type_code) = 0   
         UNION
         SELECT DISTINCT seat_type_code,wseat_type_code
          FROM center.left_base_AD  FORCE INDEX(l_b_c_idx)
          WHERE  train_no = l_train_no
          AND train_date   >= l_start_train_date
          AND train_date   <= board_train_date_in
          AND instr( seat_type_list_in,seat_type_code) > 0
          AND instr( l_tmp_seat_type_list,seat_type_code) = 0   
          ORDER BY seat_type_code;
        OPEN cursor_get_left21;
        lab_get_left21:
        WHILE 1 = 1 DO 
          FETCH cursor_get_left21 INTO l_t_seat_type_code,l_w_seat_type;
          if record_not_found = 1 THEN
           leave lab_get_left21;
          end IF;
          set l_train_period_flag = 1  
          ,  l_t_range      = 0;
          INSERT INTO tmp_seat_info_train_info VALUES(board_train_date_in,l_train_no,l_t_seat_type_code,purposes_in,l_t_range,l_train_period_flag,0,l_to_station_no_limit,l_w_seat_type,0) ;
        END while lab_get_left21;
        CLOSE cursor_get_left21;
       end;
     END if;
    
    
     
      
      
     
     
     IF l_sale_mode NOT IN ('E','G') AND l_bureau_code != l_start_bureau_code THEN
       UPDATE tmp_seat_type_info_train_info SET ticket_num = 0
       WHERE train_date   = board_train_date_in 
       AND train_no   = l_train_no;
     END if;
     set l_t11 = l_t11 + timestampdiff(second,l_d9, NOW())*1000 ; 
    END while;   

    set l_d6 = now();
    set l_t5 = timestampdiff(second,l_d5, l_d6)*1000;  
    
    
    WHILE EXISTS(SELECT 1 FROM tmp_train_cache_train_info WHERE flag = 2) DO
    SELECT train_no INTO l_train_no FROM tmp_train_cache_train_info WHERE flag = 2 LIMIT 1;
    UPDATE tmp_train_cache_train_info SET flag = 3 WHERE train_no = l_train_no AND flag = 2;
    
    
    SELECT
    start_time
    ,board_train_code
    ,start_station_name
    ,train_code
    ,start_telecode
    ,start_subbureau_code
    ,start_bureau_code
    ,start_station_no
    ,arrive_time
    ,end_telecode
    ,end_subbureau_code
    ,end_bureau_code
    ,end_station_no
    ,ticket_office
    ,location_code
    ,day_difference
    ,arrive_date
    ,train_class_code
    ,seat_types
    ,start_station_name
    ,end_station_name
    ,info_list
    ,start_pycode
    ,end_pycode
    ,start_date
    ,train_type
    ,seat_feature
    into
    l_start_time
    ,l_board_train_code
    ,board_station_in
    ,l_train_code
    ,l_start_telecode
    ,l_start_subbureau_code
    ,l_start_bureau_code
    ,l_start_station_no
    ,l_arrive_time
    ,l_end_telecode
    ,l_end_subbureau_code
    ,l_end_bureau_code
    ,l_end_station_no
    ,l_ticket_office
    ,l_location_code
    ,l_day_difference
    ,l_arrive_train_date
    ,l_train_class_code
    ,l_seat_types
    ,board_station_in
    ,end_station_in
    ,l_cache_info_list
    ,l_start_pycode
    ,l_end_pycode
    ,l_start_train_date
    ,l_train_type_code
    ,l_seat_feature

    FROM tmp_stop_time_train_info
     WHERE board_train_date=board_train_date_in
     AND train_no=l_train_no limit 1;


    set l_ticket_num   = 0
     ,  l_train_info_list = ''
     ,  l_cache_info_list = '';

    
    WHILE flag_in != 1 AND EXISTS(SELECT 1 FROM tmp_seat_info_train_info WHERE train_no = l_train_no) DO

      SELECT seat_type_code,wseat_type_code INTO l_seat_type_code,l_w_seat_type
      FROM tmp_seat_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no
      ORDER BY seat_type_code LIMIT 1;
      DELETE FROM tmp_seat_info_train_info WHERE train_date = board_train_date_in AND train_no = l_train_no AND seat_type_code = l_seat_type_code;
      
    
      if l_temp_flag in (12,13,14) and instr( l_temp_purposes,'0X') % 2  = 1 THEN
        set l_init_train_period_flag = 0;
        begin 
          declare tmp_purposes_in char(2);
          if length(purposes_in)<=2 then
           set tmp_purposes_in=purposes_in;
          else
           set tmp_purposes_in=substring(purposes_in,1,2);
          end if;
         CALL arith.DS60_Notice_Period
          (board_train_date_in
         , l_train_no
         , l_train_code
         , l_start_telecode      
         , l_seat_type_code
         , l_fetch_w_seat  
         , tmp_purposes_in
         , l_t_range
         , l_sale_mode
         , ''     
         , 'tmp_train_para_define_train_info'             
         , l_train_type_code
         , l_start_bureau_code,l_return_code);
        end;
         
        IF l_return_code = 1 THEN set l_init_train_period_flag = 2; end if;
      end if;
    
      set l_ticket_price = 0;
      SELECT ticket_num INTO l_total
      FROM tmp_seat_type_info_train_info 
      WHERE train_date = board_train_date_in AND train_no = l_train_no
      AND  seat_type_code = l_seat_type_code AND wseat_type_code = l_w_seat_type LIMIT 1;   
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount = 0 AND l_error = 0 THEN set l_total = 0; end if;
      
      
       
       
       
      
      
      IF l_sale_mode IN ('E','9','B','D') AND l_seat_type_code = 'W' THEN set l_tmp_seat_type = l_w_seat_type;   
      ELSE set l_tmp_seat_type = l_seat_type_code;
      end if;

      
      set l_ticket_num = l_ticket_num + l_total;

      IF l_phone_reserve_flag = 1 THEN  

       set l_ticket_price = 0;
      ELSE

       IF instr( l_bed_code_list,l_tmp_seat_type ) > 0 THEN set l_Is_Bed = 1;
       ELSE set l_Is_Bed = 0;
       end if;
      
       IF instr( l_soft_code_list,l_tmp_seat_type ) > 0 THEN set l_Is_soft = 1;
       ELSE set l_Is_soft = 0;
       end if;
           
       IF l_Is_Bed = 1 AND l_Is_soft = 0 THEN set l_bed_level = '2' ;        
       ELSEIF l_Is_Bed = 1 AND l_Is_soft = 1 THEN set l_bed_level = '1' ;            
       ELSE set l_bed_level = '' ;               
       end if;
                  
       IF l_Is_Bed = 1 AND l_w_seat_type = '5' THEN set l_bed_level = '1'; end if;
      
       IF l_train_seat_cache = 1 THEN  
         IF l_cache_info_list IS NULL THEN set l_cache_info_list = ''; end if;

         lab_cache_info_list:
         WHILE substring(l_cache_info_list,1,1) <> l_tmp_seat_type DO
          
          IF ltrim(l_cache_info_list) IS NULL or ltrim(l_cache_info_list)='' THEN 
           LEAVE lab_cache_info_list; 
          end if;
          set l_cache_info_list = INSERT(l_cache_info_list,1,10,'');
         END while lab_cache_info_list;
       ELSEIF l_train_seat_cache = 0 THEN  
         IF l_seat_type_code = 'W' THEN  
          set l_cache_info_list = l_train_info_list;
          lab_cache_info_list2:
          WHILE substring(l_cache_info_list,1,1) <> l_tmp_seat_type DO

            IF ltrim(l_cache_info_list) IS NULL or ltrim(l_cache_info_list)='' THEN
            LEAVE lab_cache_info_list2; 
           end if;
            set l_cache_info_list = INSERT(l_cache_info_list,1,10,'');
          END while lab_cache_info_list2;
         END if;
       END if;

       set l_ticket_price = 0   ;        
       IF substring(l_cache_info_list,1,1) = l_tmp_seat_type THEN
         set l_ticket_price = CONVERT(substring(l_cache_info_list,2,5),signed);
         IF l_ticket_price IS NULL THEN set l_ticket_price = 0; end if;
       ELSE
         set l_relay_ticket_type  = 9             
         ,  l_special_visa   = 0             
         ,  l_ticket_type   = 1  ;
         begin
          declare return_value int;
IF debug_in = 9 THEN
 select '304_1====call arith.DS60_total_price',0,                                
 board_train_date_in,
 l_train_no,
 l_start_station_no,
 l_end_station_no,
 l_tmp_seat_type,
 l_bed_level,              
 l_ticket_type,
 l_seat_feature,
 l_special_visa,
 l_relay_ticket_type,
 l_ticket_price ,
 0,
 return_value;
 end if;
          call arith.DS60_total_price
           (0,                                
           board_train_date_in,
           l_train_no,
           l_start_station_no,
           l_end_station_no,
           l_tmp_seat_type,
           l_bed_level,              
           l_ticket_type,
           l_seat_feature,
           l_special_visa,
           l_relay_ticket_type,
           l_ticket_price ,
           0,
           return_value);
  IF debug_in = 9 THEN
 select '304_2====end call DS60_total_price',l_ticket_price;
 end if;
          end ;

         
         set l_error = @@error_count;
         IF (l_error = 0) AND (l_ticket_price < 0) THEN set l_ticket_price = 0; end if;
         IF l_error != 0 THEN set l_ticket_price = 0; end if;
       END if;
      END if;

      

      IF (l_TVM_Flag = 1 OR l_phone_reserve_flag = 1) AND l_seat_type_code = 'W' THEN                                     
       IF l_total < 3000  THEN set l_total = 3000 + l_total; end if;
       if l_init_train_period_flag = 2 THEN
         set l_total = 9999;  
       end if;
                   
       set l_train_info_list = concat(rtrim(l_train_info_list) , l_tmp_seat_type , RIGHT(concat('00000' , rtrim(ltrim(CONVERT(l_ticket_price,CHAR)))),5)
        , RIGHT(concat('0000' , rtrim(ltrim(CONVERT(l_total,CHAR)))),4));
      ELSE 
       if l_init_train_period_flag = 2 THEN
         set l_total = 9999 ;  
       end if;
       set l_train_info_list = concat(rtrim(l_train_info_list) , l_seat_type_code , RIGHT(concat('00000' , rtrim(ltrim(CONVERT(l_ticket_price,CHAR)))),5)
         , RIGHT(concat('0000' , rtrim(ltrim(CONVERT(l_total,CHAR)))),4));
      END if;
 
    END while;
    IF l_train_info_list IS NULL THEN set l_train_info_list = ""; end if;

    

    IF l_cache_flag = 1 AND l_12306_flag = 0 THEN  
 IF debug_in = 9 THEN
 select 'DS50_Fetch_Train_Info:304====call arith.DS60_Proc_Seat_Cache',board_train_date_in
      , l_train_no
      , l_start_telecode
      , l_end_telecode
      , purposes_in
      , seat_type_list_in
      , l_fetch_range
      , l_train_info_list 
      , l_tbs_info    
      , l_cache_info_list 
      , l_train_seat_cache   
      , l_12306_flag    
      , l_delete_flag  
      , l_my_modify_time    
      , board_station_in 
      , l_start_station_no 
      , end_station_in  
      , l_end_station_no 
      , l_cache_flag      
      , inner_code_in
      , l_To_Range;
 end if;
      call arith.DS60_Proc_Seat_Cache
      (board_train_date_in
      , l_train_no
      , l_start_telecode
      , l_end_telecode
      , purposes_in
      , seat_type_list_in
      , l_fetch_range
      , l_train_info_list 
      , l_tbs_info    
      , l_cache_info_list 
      , l_train_seat_cache   
      , l_12306_flag    
      , l_delete_flag  
      , l_my_modify_time    
      , board_station_in 
      , l_start_station_no 
      , end_station_in  
      , l_end_station_no 
      , l_cache_flag      
      , inner_code_in
      , l_To_Range
      );
 IF debug_in = 9 THEN
 select 'DS50_Fetch_Train_Info:305====end call DS60_Proc_Seat_Cache',l_train_info_list,l_tbs_info,l_cache_info_list,l_train_seat_cache,l_my_modify_time;
 end if;
    END if;
    IF l_ticket_num >= l_num_limit THEN set l_default_flag = 1;                                          
    ELSE set l_default_flag = 0;
    end if;

    
    UPDATE tmp_stop_time_train_info SET info_list = l_train_info_list,default_flag = l_default_flag
     WHERE train_no = l_train_no;

    END WHILE; 

    set l_d7 = now();
    set l_t6 = timestampdiff(second,l_d6, l_d7)*1000;  

    
    IF debug_in = 9 THEN
     SELECT '####################DBG.90.»º´æÐ´Èë.##############';
     
     
     
     
     
     
    END if;

    
    IF out_in != 3 AND l_train_seat_cache = 0 AND (l_TVM_Flag = 1 OR flag_in = 0) THEN  
      IF EXISTS(SELECT 1 FROM center.DS60_stop_time_cache a
        WHERE train_date    = board_train_date_in
        AND start_tele_list = l_old_start_telecode
        AND end_tele_list  = l_old_end_telecode
        AND   inner_code   = inner_code_in
        AND   a.range     = l_To_Range
        AND   purposes    = l_input_purposes
        AND   seat_type_list  = seat_type_list_in)
      THEN
       
       DELETE from center.DS60_stop_time_cache
       WHERE train_date    = board_train_date_in  
       AND start_tele_list = l_old_start_telecode
       AND end_tele_list  = l_old_end_telecode
       AND   inner_code   = inner_code_in
       AND   DS60_stop_time_cache.range     = l_To_Range
       AND   purposes    = l_input_purposes
       AND   seat_type_list  = seat_type_list_in;
     END if;
     
     
     
     INSERT INTO center.DS60_stop_time_cache 
      SELECT board_train_date,train_code,start_station_name,end_station_name,train_class_code,seat_types,start_time,arrive_time,train_no
      ,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code,start_subbureau_code,end_telecode
      ,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date,info_list,cache_time
      ,l_old_start_telecode,l_old_end_telecode,start_pycode,end_pycode,seat_feature,l_input_purposes,seat_type_list_in,l_To_Range,inner_code_in   
      ,control_day,sale_time,control_train_day
       FROM tmp_stop_time_train_info;
      
    END  if;

    
    begin 
    declare tmp_train_info_list VARCHAR(255);
    declare tmp_tbs_info VARCHAR(255);
    declare tmp_cache_info_list VARCHAR(255);
    
    
    
    set tmp_train_info_list='';
    set tmp_tbs_info='';
    set tmp_cache_info_list='';
    
   
    
    CALL arith.DS60_Proc_Seat_Cache
    (board_train_date_in
    , inner_code_in
    , l_old_start_telecode
    , l_old_end_telecode
    , l_input_purposes
    , seat_type_list_in
    , l_To_Range
    , tmp_train_info_list
    , tmp_tbs_info
    , tmp_cache_info_list
    , l_train_seat_cache   
    , l_12306_flag 
    , l_delete_flag
    , l_train_modify_time    
    , ''
    , ''
    , ''
    , '',0,'',4);
    
    
    
    
    end;
    set l_d8 = now();
    set l_t7 = timestampdiff(second,l_d7, l_d8)*1000;  
    
 END if;

 
 IF l_sale_flag = 1 THEN
  UPDATE tmp_stop_time_train_info SET train_class_code = seat_feature;
 END if;

 set l_d11 = now();
 set l_t0 = timestampdiff(second,l_d1, l_d11)*1000;  

 lab_OK_return:LOOP

 IF out_in = 2 THEN LEAVE lab_OK_return; end if;
                         
 lab_NEXT_FETCH:LOOP

 set l_train_brand = '%';
 IF l_network_mode = 0 THEN 
   IF length(l_train_brand_list) > 0 THEN
     set l_train_brand = substring(l_train_brand_list,1,1);
     set l_train_brand_list = substring(l_train_brand_list,2,char_length(l_train_brand_list));
   END if;
 END if;
       
       
       
 
 
 

IF l_original_default_num > 0 then
 IF l_phone_reserve_flag = 1 OR l_network_mode = 1 THEN  
   IF l_network_mode = 1 THEN
    IF l_train_brand_list IS NULL THEN
       set @l_SQL = concat('INSERT INTO ' , kind_in , ' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code'
      , ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code'
      , ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date'
      , ',info_list,control_day,sale_time,control_train_day FROM tmp_stop_time_train_info WHERE board_train_code LIKE station_train_code_in AND info_list != "" AND ((l_network_mode1 = 1 AND default_flag = 1) OR (l_network_mode1 = 0)) ');
    ELSE
       set @l_SQL = concat('INSERT INTO ' , kind_in , ' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code'
      , ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code'
      , ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date'
      , ',info_list,control_day,sale_time,control_train_day FROM tmp_stop_time_train_info WHERE instr(l_train_brand_list,substring(board_train_code,1,1)) > 0 AND info_list != "" AND ((l_network_mode1 = 1 AND default_flag = 1) OR (l_network_mode1 = 0)) ');
    END if;
   ELSE
     set @l_SQL = concat('INSERT INTO ' , kind_in , ' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code'
     , ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code'
     , ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date'
     , ',info_list FROM tmp_stop_time_train_info '  
     , ' WHERE board_train_code LIKE station_train_code_in  ');
   END if;
   set @l_SQL=concat(@l_SQL,' limit ',l_original_default_num);
   
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;
   set l_error =  @@error_count,l_rowcount = row_count();
   DROP prepare stmt_1;
 ELSEIF l_cache_flag = 1 OR l_original_default_num = -1 THEN                                                    
   IF l_train_brand = '%' THEN
   
   
    SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
     , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
     , ticket_office, location_code, day_difference, arrive_date, info_list 
     FROM tmp_stop_time_train_info
     WHERE board_train_code LIKE station_train_code_in
     AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
       OR 
       ( l_train_default = 0 )      
      )
     AND ( l_today = board_train_date_in AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
      OR l_today < board_train_date_in )  
     ORDER BY start_time LIMIT l_original_default_num;
     set l_error =  @@error_count,l_rowcount = row_count();
     
   ELSE
    
     set l_train_brand = concat(l_train_brand , '%');
     IF EXISTS(SELECT 1 FROM tmp_stop_time_train_info 
       WHERE board_train_code LIKE station_train_code_in
        AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
          (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
          AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i')) < l_minute
          )
         )
         OR
         ( l_today < board_train_date_in )                                                                                    
         )
        AND board_train_code LIKE l_train_brand
        AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode)
          OR 
          ( l_train_default = 0 )      
         ) limit l_original_default_num
       ) THEN
       SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
       , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
       , ticket_office, location_code, day_difference, arrive_date, info_list 
       FROM tmp_stop_time_train_info 
       WHERE board_train_code LIKE station_train_code_in
        AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
         (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
           AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  < l_minute
         )
         )
         OR
         ( l_today < board_train_date_in )                                                                                    
         )
        AND board_train_code LIKE l_train_brand
        AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
         OR 
         ( l_train_default = 0 )      
         )
       ORDER BY start_time LIMIT l_original_default_num ;
       set l_error =  @@error_count,l_rowcount = row_count();
     ELSE   set l_rowcount = 0;
     end if;
   END if;
 ELSE       
  
   IF l_train_brand = '%' THEN
     
     SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
     , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
     , ticket_office, location_code, day_difference, arrive_date, info_list 
     FROM tmp_stop_time_train_info 
     WHERE board_train_code LIKE station_train_code_in
     AND ( (l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
      OR (l_train_default = 0)
      )
     
       AND ( l_today = board_train_date_in AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE(),start_time),'%Y-%m-%d%H%i')) > l_overtime
      OR l_today < board_train_date_in )  
     ORDER BY start_time LIMIT l_original_default_num;
     set l_error =  @@error_count,l_rowcount = row_count();
   ELSE
    
    set l_train_brand = concat(l_train_brand , '%');
    IF EXISTS(SELECT 1 FROM tmp_stop_time_train_info 
     WHERE default_flag = 1
     AND board_train_code LIKE station_train_code_in
     AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
       (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
       AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  < l_minute
       )
      ) 
      OR
      ( l_today < board_train_date_in )                                                                                    
      )
     AND board_train_code LIKE l_train_brand  
     AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
       OR 
       ( l_train_default = 0 )      
      ) limit l_original_default_num
    )
    THEN
    
      SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
      , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
      , ticket_office, location_code, day_difference, arrive_date, info_list 
      FROM tmp_stop_time_train_info 
      WHERE default_flag = 1
       AND board_train_code LIKE station_train_code_in
       AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
        (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
          AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i')) < l_minute
        )
        )
        OR
        ( l_today < board_train_date_in )                                                                                    
        )
       AND board_train_code LIKE l_train_brand
       AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
        OR 
        ( l_train_default = 0 )      
        )
      ORDER BY start_time  LIMIT l_original_default_num;
       set l_error =  @@error_count,l_rowcount = row_count();
    ELSE   set l_rowcount = 0;
    end if;
   END if;
 END if;
else 
 IF l_phone_reserve_flag = 1 OR l_network_mode = 1 THEN  
   IF l_network_mode = 1 THEN
    IF l_train_brand_list IS NULL THEN
       set @l_SQL = concat('INSERT INTO ' , kind_in , ' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code'
      , ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code'
      , ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date'
      , ',info_list,control_day,sale_time,control_train_day FROM tmp_stop_time_train_info WHERE board_train_code LIKE station_train_code_in AND info_list != "" AND ((l_network_mode1 = 1 AND default_flag = 1) OR (l_network_mode1 = 0))');
    ELSE
       set @l_SQL = concat('INSERT INTO ' , kind_in , ' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code'
      , ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code'
      , ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date'
      , ',info_list,control_day,sale_time,control_train_day FROM tmp_stop_time_train_info WHERE instr(l_train_brand_list,substring(board_train_code,1,1)) > 0 AND info_list != "" AND ((l_network_mode1 = 1 AND default_flag = 1) OR (l_network_mode1 = 0))');
    END if;
   ELSE
     set @l_SQL = concat('INSERT INTO ' , kind_in , ' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code'
     , ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code'
     , ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date'
     , ',info_list FROM tmp_stop_time_train_info '  
     , ' WHERE board_train_code LIKE station_train_code_in');
   END if;
   
   
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;
   set l_error =  @@error_count,l_rowcount = row_count();
   DROP prepare stmt_1;
 ELSEIF l_cache_flag = 1 OR l_original_default_num = -1 THEN                                                    
   IF l_train_brand = '%' THEN
   
   
    SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
     , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
     , ticket_office, location_code, day_difference, arrive_date, info_list 
     FROM tmp_stop_time_train_info
     WHERE board_train_code LIKE station_train_code_in
     AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
       OR 
       ( l_train_default = 0 )      
      )
     AND ( l_today = board_train_date_in AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() , start_time),'%Y-%m-%d%H%i') ) > l_overtime
      OR l_today < board_train_date_in )  
     ORDER BY start_time;
     set l_error =  @@error_count,l_rowcount = row_count();
     
   ELSE
    
     set l_train_brand = concat(l_train_brand , '%');
     IF EXISTS(SELECT 1 FROM tmp_stop_time_train_info 
       WHERE board_train_code LIKE station_train_code_in
        AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
          (timestampdiff(MINUTE,NOW(),str_to_date(concat(CURDATE() ,start_time),'%Y-%m-%d%H%i') ) > l_overtime
          AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i')) < l_minute
          )
         )
         OR
         ( l_today < board_train_date_in )                                                                                    
         )
        AND board_train_code LIKE l_train_brand
        AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode)
          OR 
          ( l_train_default = 0 )      
         )
       ) THEN
       SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
       , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
       , ticket_office, location_code, day_difference, arrive_date, info_list 
       FROM tmp_stop_time_train_info 
       WHERE board_train_code LIKE station_train_code_in
        AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
         (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
           AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  < l_minute
         )
         )
         OR
         ( l_today < board_train_date_in )                                                                                    
         )
        AND board_train_code LIKE l_train_brand
        AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
         OR 
         ( l_train_default = 0 )      
         )
       ORDER BY start_time ;
       set l_error =  @@error_count,l_rowcount = row_count();
     ELSE   set l_rowcount = 0;
     end if;
   END if;
 ELSE       
  
   IF l_train_brand = '%' THEN
     
     SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
     , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
     , ticket_office, location_code, day_difference, arrive_date, info_list 
     FROM tmp_stop_time_train_info 
     WHERE board_train_code LIKE station_train_code_in
     AND ( (l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
      OR (l_train_default = 0)
      )
     
       AND ( l_today = board_train_date_in AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE(),start_time),'%Y-%m-%d%H%i')) > l_overtime
      OR l_today < board_train_date_in )  
     ORDER BY start_time ;
     set l_error =  @@error_count,l_rowcount = row_count();
   ELSE
    
    set l_train_brand = concat(l_train_brand , '%');
    IF EXISTS(SELECT 1 FROM tmp_stop_time_train_info 
     WHERE default_flag = 1
     AND board_train_code LIKE station_train_code_in
     AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
       (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  > l_overtime
       AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i')) < l_minute
       )
      ) 
      OR
      ( l_today < board_train_date_in )                                                                                    
      )
     AND board_train_code LIKE l_train_brand  
     AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
       OR 
       ( l_train_default = 0 )      
      )
    )
    THEN
    
      SELECT start_station_name, start_pycode, end_station_name, end_pycode, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no
      , end_station_no, board_train_code, start_telecode, start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code
      , ticket_office, location_code, day_difference, arrive_date, info_list 
      FROM tmp_stop_time_train_info 
      WHERE default_flag = 1
       AND board_train_code LIKE station_train_code_in
       AND ( (l_today = board_train_date_in AND l_minute > 0 AND 
        (timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i')) > l_overtime
          AND timestampdiff(MINUTE,now(),str_to_date(concat(CURDATE() ,start_time), '%Y-%m-%d%H%i'))  < l_minute
        )
        )
        OR
        ( l_today < board_train_date_in )                                                                                    
        )
       AND board_train_code LIKE l_train_brand
       AND (  ( l_train_default = 1 AND start_telecode = l_old_start_telecode AND  end_telecode = l_old_end_telecode AND (l_GS_MODE = 1 OR info_list <> ''))
        OR 
        ( l_train_default = 0 )      
        )
      ORDER BY start_time  ;
       set l_error =  @@error_count,l_rowcount = row_count();
    ELSE   set l_rowcount = 0;
    end if;
   END if;
 END if;
end if;
 
 IF l_network_mode = 0 THEN  
   IF l_rowcount = 0 THEN
    IF length(l_train_brand_list) > 0  THEN iterate lab_NEXT_FETCH; end if;
   END if;
 END if;

 LEAVE lab_NEXT_FETCH;
 end loop lab_NEXT_FETCH;
         
 truncate table tmp_stop_time_train_info;
            
 LEAVE lab_OK_return;
 end loop lab_OK_return;

 
 
 
 
 
 
 
 
 
 
 
 
 

 IF out_in <> 0 THEN
    set @l_SQL =  concat('total time=' , rtrim(CONVERT(l_t0,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',PreData=' , rtrim(CONVERT(l_t1,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchTrain=' , rtrim(CONVERT(l_t2,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',BatchDeal=' , rtrim(CONVERT(l_t3,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',NoticePeriod=' , rtrim(CONVERT(l_t4,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchLeftTicket=' , rtrim(CONVERT(l_t5,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',(FetchYFTicket=' , rtrim(CONVERT(l_t8,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',CALShare=' , rtrim(CONVERT(l_t10,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchGYTicket=' , rtrim(CONVERT(l_t9,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchST=' , rtrim(CONVERT(l_t11,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  ',GYAndOTJH=' , rtrim(CONVERT(l_t12,CHAR)) , 'ms');
    set @l_SQL =  concat(rtrim(l_SQL) ,  '),CALTrainList=', rtrim(CONVERT(l_t6,CHAR)) , 'ms');
   SELECT @l_SQL;
 END if;

 
 if exists(select 1 from information_schema.`TABLES` where TABLE_NAME='DS50_Train_Info_Statist' and TABLE_SCHEMA='center') then
   INSERT INTO center.DS50_Train_Info_Statist VALUES
   ( l_temp_board_station, l_temp_end_station, l_temp_board_train_date, l_temp_directions, l_temp_telecode_list, l_temp_station_train_code, l_temp_purposes, l_temp_inner_code, l_temp_range
   , l_temp_flag, l_temp_seat_type_list,  l_temp_out, l_temp_kind,  now() 
   ,rtrim(CONVERT(l_t0,CHAR))    
    ,rtrim(CONVERT(l_t1,CHAR))    
    ,rtrim(CONVERT(l_t2,CHAR))    
    ,rtrim(CONVERT(l_t3,CHAR))     
    ,rtrim(CONVERT(l_t4,CHAR))     
   ,l_rowcount         
     ,l_t5           
    ,l_t6           
     ,l_t7           
     ,l_t8           
     ,l_t9           
   );
 end if;

 set return_out =0;
 LEAVE lab_return;

 LEAVE lab_null_return;

 set lab_null_return_s = 0;
 end loop lab_null_return;

 IF out_in = 2 THEN
   IF out_in <> 0 THEN
     set @l_SQL =  concat('total time=' , rtrim(CONVERT(l_t0,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',PreData=' , rtrim(CONVERT(l_t1,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchTrain=' , rtrim(CONVERT(l_t2,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',BatchDeal=' , rtrim(CONVERT(l_t3,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',NoticePeriod=' , rtrim(CONVERT(l_t4,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchLeftTicket=' , rtrim(CONVERT(l_t5,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',(FetchYFTicket=' , rtrim(CONVERT(l_t8,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',CALShare=' , rtrim(CONVERT(l_t10,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchGYTicket=' , rtrim(CONVERT(l_t9,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchST=' , rtrim(CONVERT(l_t11,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',GYAndOTJH=' , rtrim(CONVERT(l_t12,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  '),CALTrainList=', rtrim(CONVERT(l_t6,CHAR)) , 'ms');
     SELECT @l_SQL;
   END if;

   
   if exists(select 1 from information_schema.`TABLES` where TABLE_NAME='DS50_Train_Info_Statist' and TABLE_SCHEMA='center') then
     INSERT INTO center.DS50_Train_Info_Statist VALUES
     ( l_temp_board_station, l_temp_end_station, l_temp_board_train_date, l_temp_directions, l_temp_telecode_list, l_temp_station_train_code, l_temp_purposes, l_temp_inner_code, l_temp_range
     , l_temp_flag, l_temp_seat_type_list,  l_temp_out, l_temp_kind,  now() 
     ,rtrim(CONVERT(l_t0,CHAR))    
      ,rtrim(CONVERT(l_t1,CHAR))    
      ,rtrim(CONVERT(l_t2,CHAR))    
      ,rtrim(CONVERT(l_t3,CHAR))     
      ,rtrim(CONVERT(l_t4,CHAR))     
     ,l_rowcount         
       ,l_t5           
      ,l_t6           
       ,l_t7           
       ,l_t8           
       ,l_t9           
     );
   end if;

   set return_out =0;
   LEAVE lab_return;
 end if;

 IF l_phone_reserve_flag = 1 THEN  
   IF out_in <> 0 THEN
     set @l_SQL =  concat('total time=' , rtrim(CONVERT(l_t0,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',PreData=' , rtrim(CONVERT(l_t1,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchTrain=' , rtrim(CONVERT(l_t2,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',BatchDeal=' , rtrim(CONVERT(l_t3,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',NoticePeriod=' , rtrim(CONVERT(l_t4,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchLeftTicket=' , rtrim(CONVERT(l_t5,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',(FetchYFTicket=' , rtrim(CONVERT(l_t8,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',CALShare=' , rtrim(CONVERT(l_t10,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchGYTicket=' , rtrim(CONVERT(l_t9,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',FetchST=' , rtrim(CONVERT(l_t11,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  ',GYAndOTJH=' , rtrim(CONVERT(l_t12,CHAR)) , 'ms');
     set @l_SQL =  concat(rtrim(l_SQL) ,  '),CALTrainList=', rtrim(CONVERT(l_t6,CHAR)) , 'ms');
     SELECT @l_SQL;
   END if;

   
   if exists(select 1 from information_schema.`TABLES` where TABLE_NAME='DS50_Train_Info_Statist' and TABLE_SCHEMA='center') then
     INSERT INTO center.DS50_Train_Info_Statist VALUES
     ( l_temp_board_station, l_temp_end_station, l_temp_board_train_date, l_temp_directions, l_temp_telecode_list, l_temp_station_train_code, l_temp_purposes, l_temp_inner_code, l_temp_range
     , l_temp_flag, l_temp_seat_type_list,  l_temp_out, l_temp_kind,  now() 
     ,rtrim(CONVERT(l_t0,CHAR))    
      ,rtrim(CONVERT(l_t1,CHAR))    
      ,rtrim(CONVERT(l_t2,CHAR))    
      ,rtrim(CONVERT(l_t3,CHAR))     
      ,rtrim(CONVERT(l_t4,CHAR))     
     ,l_rowcount         
       ,l_t5           
      ,l_t6           
       ,l_t7           
       ,l_t8           
       ,l_t9           
     );
   end if;

   set return_out =0;
   LEAVE lab_return;
 end if;

 SELECT start_station_name, end_station_name, train_class_code, seat_types, start_time, arrive_time, train_no, start_station_no, end_station_no, board_train_code, start_telecode, 
     start_bureau_code, start_subbureau_code, end_telecode, end_bureau_code, end_subbureau_code, ticket_office, location_code, day_difference, arrive_date, info_list, default_flag
  FROM tmp_stop_time_train_info 
  WHERE 1=2;

 set return_out=0;

 LEAVE lab_return;

 end loop lab_return;
  if open_statistics='1' then
    set proc_stat_end =now();
    set proc_stat_time_diff = timestampdiff(SECOND,proc_stat_start,proc_stat_end);
    insert into arith.proc_stat values('DS50_Fetch_Train_Info',proc_stat_start,proc_stat_end,proc_stat_time_diff);
  end if;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS50_Proc_Share`(INOUT `transform_date_in` char(8),IN `train_no_in` char(12),IN `train_code_in` char(8),IN `start_station_telecode_in` char(3),IN `end_station_telecode_in` char(3),IN `transform_station_telecode_in` char(3),INOUT `transform_no_in` char(2),IN `seat_type_code_in` VARCHAR(255),INOUT `purpose_code_in` VARCHAR(255),INOUT `range_in` tinyint unsigned,IN `day_difference_from_in` tinyint ,INOUT `fetch_w_seat_in` tinyint unsigned,INOUT `share_flag_in` CHAR(1),INOUT `share_string_in` VARCHAR(8192),IN `output_in` CHAR(1),INOUT `sale_station_in` char(3),IN `sale_center_code_in` CHAR(2),IN `sale_subbureau_in` CHAR(2),IN `GCN_in` CHAR(2),IN `GSN_in` CHAR(4),IN `GDP_in` CHAR(1),IN `SB_LIST_in` char(3),IN `to_station_no_in` CHAR(2),IN `to_station_no_limit_in` CHAR(2),IN `module_type_in` CHAR(1),IN `operate_type_in` CHAR(1),IN `window_range_in` tinyint unsigned,IN `v_FromRange_in` tinyint unsigned,IN `v_ToRange_in` tinyint unsigned,INOUT `range_in1` tinyint unsigned,INOUT `range_in2` tinyint unsigned,INOUT `range_in3` tinyint unsigned,INOUT `range_in4` tinyint unsigned,INOUT `range_in5` tinyint unsigned,IN `GU_in` smallint,IN `GM_in` smallint,IN `GD_in` smallint,IN `ticket_num_in` smallint,IN `Is_Bed_in` tinyint unsigned,INOUT `start_coach_no_in` CHAR(2),INOUT `end_coach_no_in` CHAR(2),INOUT `start_seat_no_in` CHAR(4),INOUT `end_seat_no_in` CHAR(4),IN `application_msg_in` CHAR(10),IN `ticket_num_ary_in` VARCHAR(36),IN `share_station_in` VARCHAR(30),IN `operater_msg_in` VARCHAR(30),IN `right_limit_in` CHAR(10),IN `train_type_in` CHAR(1),OUT `return_in` int)
BEGIN
 DECLARE l_Version CHAR(30)

 ;DECLARE l_train_date      CHAR(8)   ;DECLARE l_from_station_no    CHAR(2)
  ;DECLARE l_sale_mode      CHAR(1)   ;DECLARE l_return_code     INTEGER
  ;DECLARE l_rowcount      INTEGER   ;DECLARE l_error       INTEGER
  ;DECLARE l_original_station_telecode VARCHAR(3)  ;DECLARE l_original_subbureau_code CHAR(2)
  ;DECLARE l_original_bureau_code  CHAR(1)   ;DECLARE l_delay_days      SMALLINT
  ;DECLARE l_pre_sale_time     INTEGER   ;DECLARE l_transform_start_time  CHAR(4)
  ;DECLARE l_old_fetch_w_seat    tinyint unsigned   ;DECLARE l_new_fetch_w_seat    tinyint unsigned
  ;DECLARE l_old_sale_station    CHAR(3)   ;DECLARE  l_transform_bureau_code   CHAR(1)
  ;DECLARE l_transform_subbureau_code  CHAR(2)   ;DECLARE l_old_range      tinyint unsigned
  ;DECLARE l_location_share_string   VARCHAR(8192) ;DECLARE l_day_difference1    tinyint unsigned
  ;DECLARE  l_day_difference2     tinyint unsigned   ;DECLARE l_tmp_range      tinyint unsigned
  ;DECLARE l_tmp_start_coach_no    CHAR(2)   ;DECLARE l_tmp_end_coach_no    CHAR(2)
  ;DECLARE l_tmp_start_seat_no   CHAR(4)   ;DECLARE l_tmp_end_seat_no    CHAR(4)
  ;DECLARE l_old_range1      tinyint unsigned   ;DECLARE l_old_range2      tinyint unsigned
  ;DECLARE l_old_range3      tinyint unsigned   ;DECLARE l_old_range4      tinyint unsigned
  ;DECLARE l_old_range5      tinyint unsigned   ;DECLARE l_fetch_range     tinyint unsigned
  ;DECLARE l_old_start_coach_no   CHAR(2)   ;DECLARE l_old_end_coach_no    CHAR(2)
  ;DECLARE l_old_start_seat_no   CHAR(4)   ;DECLARE l_old_end_seat_no    CHAR(4)
  ;DECLARE l_Kind        CHAR(1)   ;DECLARE l_Kind_flag      tinyint unsigned
  ;DECLARE l_row         SMALLINT   ;DECLARE  l_total_row       INTEGER 
  ;DECLARE  l_w_seat_flag      CHAR(1)   ;DECLARE l_union_flag      tinyint unsigned
  ;DECLARE l_tmp_station_telecode  CHAR(3)   ;DECLARE l_train_start_date    CHAR(8)
  ;DECLARE l_pre_time      INTEGER   ;DECLARE l_seat_type      CHAR(1)
  ;DECLARE l_purpose_list     VARCHAR(512) ;DECLARE l_old_purpose_code    CHAR(2)
  ;DECLARE l_basic_station_telecode  CHAR(3)   ;DECLARE l_basic_ahead_time    INTEGER
  ;DECLARE l_basic_start_time    CHAR(4)   ;DECLARE l_tmp_purpose_code    CHAR(2)
  ;DECLARE l_basic_station_no    CHAR(2)   ;DECLARE l_STM        CHAR(3)
  ;DECLARE l_ATT        tinyint unsigned   ;DECLARE l_schedule_flag     tinyint unsigned
  ;DECLARE l_seat_coach_no     CHAR(2)   ;DECLARE l_schedule_coach    CHAR(2)
  ;DECLARE l_seat_type_list    VARCHAR(512) ;DECLARE l_share_base_id     SMALLINT   
  ;DECLARE l_tmp_seat_type     CHAR(1)   ;DECLARE l_transform_num     SMALLINT   
  ;DECLARE l_SQL        VARCHAR(512) ;DECLARE l_multi_flag      tinyint unsigned
  ;DECLARE l_old_to_station_no_limit CHAR(2)   ;DECLARE l_office_no      CHAR(7)
  ;DECLARE l_window_no      tinyint unsigned   ;DECLARE l_ahead_time      INTEGER
  ;DECLARE l_start_datetime    DATETIME   ;DECLARE l_start_time      CHAR(4)
  ;DECLARE l_start_station_name   CHAR(10)   ;DECLARE l_end_station_name    CHAR(10)   
 ;DECLARE Lable_s int;DECLARE Lable_OK_s int;
  Declare record_not_found Integer Default 0;

  DECLARE cursor_share_station CURSOR FOR
   SELECT station_telecode,train_date,station_no,range_in,fetch_w_seat,start_coach_no,end_coach_no,start_seat_no,end_seat_no
   ,  purpose_code,seat_type_code,ticket_num,range1,range2,range3,range4,range5,far_from_no
   FROM tmp_share_detail WHERE flag = 1 AND ticket_num > 0 AND station_no < l_from_station_no
   ORDER BY ticket_num,station_no;
 Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;

 
  if output_in='9' then
  select '1===come in procedure DS50_Proc_Share';
  end if;
 SET l_Version = "Ver20150130.08:40"; 
 
        
        

 set Lable_OK_s = 1;
 Lable_OK_RETURN:loop
 if Lable_OK_s = 0 THEN
   leave Lable_OK_RETURN;
 end if;
  
 
 IF transform_no_in = '01' THEN  
   SET l_multi_flag = 0
   ,  l_transform_num = 0;
   LEAVE lable_OK_return;
 END if;

 
 SELECT station_name into l_start_station_name FROM basic.station_dictionary 
  WHERE station_telecode = start_station_telecode_in;
 SELECT station_name into l_end_station_name FROM basic.station_dictionary 
  WHERE station_telecode = start_station_telecode_in;

 
 SET l_old_range       = range_in
  ,  l_old_to_station_no_limit = to_station_no_limit_in;

 
 IF transform_station_telecode_in = sale_station_in THEN 
  set range_in = 0;
 ELSE 
  SET range_in = v_FromRange_in;
 end if;

 
 
 CREATE Temporary TABLE If Not Exists tmp_share2
  (   
   station_telecode CHAR(8) NOT NULL
  , delay_days   SMALLINT NOT NULL
  , pre_saletime   INTEGER NOT NULL
  , w_seat_flag    CHAR(1) NOT NULL 
  , purpose_code   CHAR(2) NOT NULL
  , seat_type_code  CHAR(1) NOT NULL
  , range_in     tinyint unsigned NOT NULL
  , start_coach_no  CHAR(2) NOT NULL
  , end_coach_no   CHAR(2) NOT NULL
  , start_seat_no   CHAR(4) NOT NULL
  , end_seat_no   CHAR(4) NOT NULL
  , basic_station_telecode CHAR(3) NOT NULL 
  , basic_ahead_time INTEGER NOT NULL
  );
  delete from tmp_share2;
 
 
 CREATE Temporary TABLE if not exists  tmp_share_schedule 
  (station_telecode CHAR(3) NOT NULL
  , delay_days   SMALLINT NOT NULL
  , pre_saletime   INTEGER NOT NULL
  , w_seat_flag    CHAR(1) NOT NULL 
  , purpose_code   CHAR(2) NOT NULL
  , seat_type_code  CHAR(1) NOT NULL
  , range_in     tinyint unsigned NOT NULL
  , start_coach_no  CHAR(2) NOT NULL
  , end_coach_no   CHAR(2) NOT NULL
  , start_seat_no   CHAR(4) NOT NULL
  , end_seat_no   CHAR(4) NOT NULL);
  delete from  tmp_share_schedule;
 
 
 CREATE Temporary TABLE if not exists tmp_share_stop_time
 (
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_no char(12)   NOT NULL,
  station_no char(2)   NOT NULL,
  station_name char(10)   NOT NULL,
  station_shortcode char(3)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  station_train_code char(8)   NOT NULL,
  route_tele_code char(3)   NOT NULL,
  segment_code char(4)   NOT NULL,
  bureau_code char(1)   NOT NULL,
  subbureau_code char(2)   NOT NULL,
  day_difference tinyint unsigned   NOT NULL,
  arrive_time char(4)   NOT NULL,
  start_time char(4)   NOT NULL,
  distance smallint   NOT NULL,
  distance1 smallint   NOT NULL,
  distance2 smallint   NOT NULL,
  distance3 smallint   NOT NULL,
  distance4 smallint   NOT NULL,
  distance5 smallint   NOT NULL,
  line_alter1 char(7)   NOT NULL,
  line_alter2 char(7)   NOT NULL,
  line_alter3 char(7)   NOT NULL,
  line_alter4 char(7)   NOT NULL,
  origin char(2)   NOT NULL
 );
 delete from tmp_share_stop_time;
 
 CREATE Temporary TABLE if not exists tmp_share_detail
 (station_telecode CHAR(3) NOT NULL,
  train_date     CHAR(8) NOT NULL,
  station_no   CHAR(2) NOT NULL,
  range_in      tinyint unsigned NOT NULL,
  fetch_w_seat  tinyint unsigned NOT NULL,
  define_range  tinyint unsigned NOT NULL,
  start_coach_no  CHAR(2) NOT NULL,
  end_coach_no  CHAR(2) NOT NULL,
  start_seat_no  CHAR(4) NOT NULL,
  end_seat_no   CHAR(4) NOT NULL,
  purpose_code  CHAR(2) NOT NULL,
  flag     tinyint unsigned NOT NULL,   
  seat_type_code  CHAR(1) NOT NULL    
 , ticket_num   SMALLINT NOT NULL   
 , range1    SMALLINT NOT NULL
 , range2    SMALLINT NOT NULL
 , range3    SMALLINT NOT NULL
 , range4    SMALLINT NOT NULL
 , range5    SMALLINT NOT NULL
 , board_bureau  CHAR(1)  NOT NULL   
 , far_from_no   CHAR(2)  NOT NULL
 , start_time   CHAR(4)  NOT NULL
  );
  delete from tmp_share_detail;
 if output_in='9' then
  select '1_1===come here',transform_date_in;
  end if;
 set l_train_date   = transform_date_in
  , l_from_station_no  = transform_no_in
  , l_sale_mode   = share_flag_in              
  , l_office_no    = substring( operater_msg_in, 10, 7 );
  begin
  declare tmp_op varchar(30);
  set tmp_op=substring( operater_msg_in, 18, 3 );
  if trim(tmp_op)='' then 
   set tmp_op='0';
  end if;
  set l_window_no    = cast(tmp_op as SIGNED integer);
  end ;
  if output_in='9' then 
  select '2===',fetch_w_seat_in,sale_station_in,range_in1,range_in2,range_in3,range_in4,range_in5,start_coach_no_in,end_coach_no_in,start_seat_no_in,end_seat_no_in,purpose_code_in;
  end if;
 
 set l_old_fetch_w_seat = fetch_w_seat_in
  , l_old_sale_station = sale_station_in
  , l_old_range1   = range_in1
  , l_old_range2   = range_in2
  , l_old_range3   = range_in3
  , l_old_range4   = range_in4
  , l_old_range5   = range_in5
  , l_old_start_coach_no = start_coach_no_in
  , l_old_end_coach_no  = end_coach_no_in
  , l_old_start_seat_no = start_seat_no_in
  , l_old_end_seat_no  = end_seat_no_in
  
  , l_multi_flag    = 0
  , l_train_start_date  = date_format(date_add(l_train_date,interval 0 - day_difference_from_in day),'%Y%m%d') 
  , l_transform_num   = 0;
  set l_old_purpose_code  = substring(purpose_code_in,1,2);

 
 IF seat_type_code_in = '%' THEN 
  SET seat_type_code_in = '0123456789ABCDTFGHIJKLMOPQS';
 end if;
 IF l_office_no = '' then
  SET l_office_no = '%',l_window_no = 0;
 end if;
 if output_in='9' then
  select '3===come is here',train_no_in;
  end if;
 
  
 INSERT INTO tmp_share_stop_time SELECT start_date, stop_date, train_no, station_no, station_name, station_shortcode, station_telecode, station_train_code, route_tele_code, 
 segment_code, bureau_code, subbureau_code, day_difference, arrive_time, start_time, distance, distance1, distance2, distance3, distance4, distance5, line_alter1, line_alter2, 
 line_alter3, line_alter4, origin FROM basic.stop_time WHERE train_no = train_no_in;

 
  if output_in='9' then 
  select '5_1===',train_code_in,start_station_telecode_in,end_station_telecode_in,transform_station_telecode_in,purpose_code_in,l_train_start_date;
  end if;
 INSERT INTO tmp_share_schedule 
  SELECT station_telecode,delay_days,pre_saletime,wseat_flag,purpose_code,seat_type_code,DJ52_share_schema.`range`
  ,start_coach_no,end_coach_no,start_seat_no,end_seat_no
  FROM basic.DJ52_share_schema  FORCE INDEX(share_define_idx1)
   WHERE (train_code = train_code_in AND start_station_telecode = start_station_telecode_in AND end_station_telecode = end_station_telecode_in)
  AND transform_station_telecode IN (transform_station_telecode_in,'*')      
  
  AND (purpose_code   = '**' OR (instr(purpose_code_in,purpose_code) % 2 = 1) )  
  
  AND start_date <= l_train_start_date
  AND stop_date >= l_train_start_date
  AND running_rule & (power(2,datediff(l_train_start_date,start_date) % running_style)) > 0
  UNION
  SELECT station_telecode,delay_days,pre_saletime,wseat_flag,purpose_code,seat_type_code,a.`range`
  ,start_coach_no,end_coach_no,start_seat_no,end_seat_no
  FROM basic.DJ52_share_schema a FORCE INDEX(share_define_idx1)
   WHERE train_code = '*'
  AND transform_station_telecode IN (transform_station_telecode_in,'*')      
  
  AND (purpose_code   = '**' OR (instr(purpose_code_in,purpose_code) % 2 = 1) )  
  
  AND start_date <= l_train_start_date
  AND stop_date >= l_train_start_date
  AND running_rule & (power(2,datediff(l_train_start_date,start_date) % running_style)) > 0
 ;
  if output_in='9' then
  select '5===come is here';
  select * from tmp_share_schedule order by station_telecode , delay_days, pre_saletime, w_seat_flag, purpose_code, seat_type_code, range_in, start_coach_no, end_coach_no, start_seat_no, end_seat_no;
  end if;
 
 set l_Kind = substring(application_msg_in,5,1); 

 
 SET l_Kind = '0';
 
 IF l_Kind IN ('1','2') THEN 
  IF EXISTS ( SELECT  count(*) FROM basic.station_dictionary FORCE INDEX(station_telecode_idx)
         WHERE station_telecode in (transform_station_telecode_in,start_station_telecode_in)
         GROUP BY bureau_code HAVING count(*) > 1
   ) THEN 
   set l_Kind_flag = 1 ; 
  ELSE 
   SET l_Kind_flag = 0;
  end if;
 end if;

  
  IF l_Kind_flag = 1 THEN
   IF sale_station_in = transform_station_telecode_in THEN 
     SET l_Kind_flag = 0 ; 
   ELSE
     CALL arith.CS50_Same_City (l_transform_date,sale_station_in,transform_station_telecode_in,"2",l_return_code);
     IF l_return_code = 1 THEN
      SET l_Kind_flag = 0; 
     ELSE 
      SET l_Kind_flag = 1;
     END if;
   END if;
 ELSE 
   SET l_Kind_flag = 0;
 end if;

 
 IF l_Kind_flag = 1 THEN 
  set l_original_station_telecode = start_station_telecode_in  
  ,  transform_no_in   = '01'
  ,  fetch_w_seat_in   =  l_old_fetch_w_seat
  ,  l_tmp_range    =  9 
  ,  l_tmp_start_coach_no = '00'
  ,  l_tmp_end_coach_no   = 'A9'
  ,  l_tmp_start_seat_no  = '0000'
  ,  l_tmp_end_seat_no    = '9999'
  ,  share_flag_in    = '1'  
  ,  transform_date_in   = l_train_start_date 
 ;
 if output_in='9' then
  select '6===come is here';
  end if;
  
  SELECT pre_saletime into l_pre_sale_time FROM tmp_share_schedule
  WHERE station_telecode IN (start_station_telecode_in,'*')
  AND purpose_code IN ('**',purpose_code_in)
  AND start_coach_no != end_coach_no;   
  set l_error =  @@error_count,l_rowcount = found_rows();
  IF l_rowcount > 0 AND l_error = 0 THEN 
  
  SELECT start_time into l_transform_start_time
   FROM tmp_share_stop_time
   WHERE train_no = train_no_in
   AND station_telecode = l_original_station_telecode
   AND station_no   = '01'
   AND start_date <= l_train_start_date
   AND stop_date >= l_train_start_date;

  set l_error =  @@error_count,l_rowcount = found_rows();
  IF l_rowcount = 0 OR l_error != 0 THEN
  
   set share_flag_in = '0'
   ,  l_location_share_string = '';
  ELSE
   
   IF timestampdiff(MINUTE,now(),str_to_date(concat(transform_date_in,l_transform_start_time),'%Y%m%d%H%i')) <= l_pre_sale_time THEN
   
   SELECT share_flag_in = '0'
    ,  l_location_share_string = '';
   ELSE
   set l_location_share_string = concat(l_original_station_telecode , transform_date_in , transform_no_in ,  CONVERT(fetch_w_seat_in,CHAR(1))
    , CONVERT(l_tmp_range,CHAR(1)) , l_tmp_start_coach_no , l_tmp_end_coach_no ,l_tmp_start_seat_no , l_tmp_end_seat_no);
   END if;
  END if;
  ELSE 
  SET l_location_share_string = concat(l_original_station_telecode , transform_date_in , transform_no_in ,  CONVERT(fetch_w_seat_in,CHAR(1))
    , CONVERT(l_tmp_range,CHAR(1)) , l_tmp_start_coach_no , l_tmp_end_coach_no , l_tmp_start_seat_no , l_tmp_end_seat_no);
  END IF;
  IF purpose_code_in = '**' THEN
   set purpose_code_in = l_old_purpose_code; 
  end if;
  set l_purpose_list = concat(l_purpose_list , purpose_code_in);
 END if;
 

 
 set  l_return_code = -22560;
 
 IF l_Kind_flag = 0 THEN
  if output_in='9' then
   select '7===come is here';
   end if;
  
   set share_string_in    = ''
   ,  l_location_share_string = '' 
   ,  share_flag_in      = '0' 
   ,  l_purpose_list    = ''     
   ,  l_schedule_coach    = 'AA'
   ,  l_seat_type_list   = '';

   
    if output_in='9' then 
   select '7_1====',train_code_in,start_station_telecode_in,end_station_telecode_in,transform_station_telecode_in,seat_type_code_in,purpose_code_in,l_train_start_date;
   
    end if;
  
    INSERT INTO tmp_share2 
   SELECT station_telecode,delay_days,pre_saletime,wseat_flag,purpose_code,seat_type_code,a.range
    ,start_coach_no,end_coach_no,start_seat_no,end_seat_no,station_telecode,pre_saletime
    FROM basic.DG50_share_define  a
    WHERE  train_code = train_code_in 
    AND start_station_telecode = start_station_telecode_in 
    AND end_station_telecode = end_station_telecode_in
    AND transform_station_telecode IN (transform_station_telecode_in,'*')      
    AND (seat_type_code = 'z'  OR (INSTR(seat_type_code_in,seat_type_code) > 0 ) )    
    AND (purpose_code   = '**' OR (INSTR(purpose_code_in,purpose_code) % 2 = 1) )  
   
    AND start_date <= l_train_start_date
    AND stop_date >= l_train_start_date
    AND running_rule & (power(2,datediff(l_train_start_date,start_date) % running_style)) > 0;
   
   INSERT INTO tmp_share2 
   SELECT station_telecode,delay_days,pre_saletime,wseat_flag,purpose_code,seat_type_code,YT52_share_detail.range
    ,start_coach_no,end_coach_no,start_seat_no,end_seat_no,station_telecode,pre_saletime
    FROM basic.YT52_share_detail 
    WHERE  train_code = train_code_in 
    AND start_station_telecode = start_station_telecode_in 
    AND end_station_telecode = end_station_telecode_in
    AND transform_station_telecode IN (transform_station_telecode_in,'*')      
    AND (seat_type_code = 'z'  OR (INSTR(seat_type_code_in,seat_type_code) > 0 ) )    
    AND (purpose_code   = '**' OR (INSTR(purpose_code_in,purpose_code) % 2 = 1) )  
   
    AND start_date <= l_train_start_date
    AND stop_date >= l_train_start_date
    AND running_rule & (power(2,datediff(l_train_start_date,start_date) % running_style)) > 0;
    if output_in='9' then
     select '8===come is here';
    select * from TMP_share2 order by station_telecode,delay_days,pre_saletime,w_seat_flag,purpose_code,seat_type_code,range_in
   ,start_coach_no,end_coach_no,start_seat_no,end_seat_no;
     end if;
   set l_error =  @@error_count,l_rowcount = found_rows();
   IF l_rowcount >= 1 AND l_error = 0 THEN      
  
    SET share_flag_in = '1' ;                    
    SELECT count(*) into l_total_row FROM tmp_share2;                
    SET l_row = l_total_row;
    
    IF GCN_in != '%' THEN 
     SET seat_type_code_in = '%';
    END IF;
     if output_in='9' then
      select '8_1===come is here',l_row;
    
     end if;
    WHILE l_row > 0 DO
      
       
       
      set Lable_s = 1;
      Lable:loop
      if Lable_s = 0 THEN
        leave Lable;
      end if;
       
      
       SELECT station_telecode
       ,  delay_days
       ,  pre_saletime 
       ,  seat_type_code
       ,  w_seat_flag
       ,  a.range_in
       ,  start_coach_no
       ,  end_coach_no
       ,  start_seat_no
       ,  end_seat_no
       ,  purpose_code
       into l_original_station_telecode,l_delay_days,l_pre_sale_time,l_seat_type,l_w_seat_flag,l_tmp_range,l_tmp_start_coach_no,
          l_tmp_end_coach_no,l_tmp_start_seat_no,l_tmp_end_seat_no,purpose_code_in 
       FROM tmp_share2 a limit 1;
      
       
       delete from tmp_share2 limit 1;
      
      
      
       
       
        
      
      
       IF found_rows() = 0 THEN
        
        leave Lable; 
       end if;
       
         
       IF seat_type_code_in IN ('W','1') OR (Is_Bed_in = 0 ) THEN 
        IF l_w_seat_flag = "0" THEN 
        
          IF (seat_type_code_in = "W" OR l_old_fetch_w_seat = 9) THEN
           leave Lable; 
            
          ELSE 
           
           SET fetch_w_seat_in = 1 ;
            
           
          END if;
        ELSEIF l_w_seat_flag = "2" THEN 
          IF l_old_fetch_w_seat = 1 THEN
           leave Lable;  
          ELSE 
           SET fetch_w_seat_in = 9; 
          end if;
        ELSEIF l_w_seat_flag = "1" THEN 
         set fetch_w_seat_in = l_old_fetch_w_seat;
        END if;
      ELSEIF l_w_seat_flag = '2' THEN
        LEAVE Lable; 
       end if;

       
      
       IF output_in = '0' THEN  
       IF not (l_tmp_start_seat_no = '0000' AND l_tmp_end_seat_no = '9999') THEN
         
         LEAVE Lable;
       end if;
       END if;
       
       
       
       
      
       
       SELECT day_difference,station_no ,start_time, bureau_code ,subbureau_code
       into l_day_difference1,transform_no_in,l_transform_start_time,l_original_bureau_code,l_original_subbureau_code
       FROM tmp_share_stop_time
        WHERE  train_no = train_no_in
        AND station_telecode = l_original_station_telecode
        AND start_date <= l_train_start_date
        AND stop_date >= l_train_start_date limit 1;
      
       IF found_rows() = 0 THEN 
        LEAVE Lable;
       end if;
    
       
       
       
       SELECT day_difference,bureau_code,subbureau_code
       into l_day_difference2,l_transform_bureau_code,l_transform_subbureau_code
       FROM tmp_share_stop_time
        WHERE train_no = train_no_in
        AND station_telecode = transform_station_telecode_in
        AND start_date <= l_train_start_date
        AND stop_date >= l_train_start_date limit 1;
       IF found_rows() = 0 THEN
        leave Lable;
       end if;
       
       IF transform_no_in >= l_from_station_no THEN
        LEAVE Lable;
       end if;

       
       set l_delay_days = l_day_difference2 - l_day_difference1;
       set transform_date_in = date_format(Date_add(l_train_date,interval - l_delay_days DAY), '%Y%m%d' );
      
       
       
       
       
       
       IF timestampdiff(MINUTE,now(),str_to_date(concat(transform_date_in ,l_transform_start_time),'%Y%m%d%H%i')) > l_pre_sale_time THEN
        LEAVE Lable;
       end if;
       
       SELECT pre_saletime 
       into l_pre_sale_time
       FROM tmp_share_schedule
        WHERE station_telecode IN (l_original_station_telecode,'*')
        AND purpose_code IN ('**',purpose_code_in)
        AND start_coach_no != end_coach_no;   
       set l_error =  @@error_count,l_rowcount = found_rows();
       IF l_rowcount > 0 AND l_error = 0 THEN 
        
        IF timestampdiff(MINUTE,NOW(),str_to_date(concat(transform_date_in ,l_transform_start_time),'%Y%m%d%H%i')) <= l_pre_sale_time THEN
         LEAVE Lable;
        end if;
       END if;
      
       
        if output_in='9' then
       select * from tmp_share_schedule;
       select '11===come is here',l_original_station_telecode;
        end if;
       SELECT pre_saletime 
       ,  start_coach_no 
       into l_pre_sale_time,l_schedule_coach
       FROM tmp_share_schedule
        WHERE station_telecode IN (l_original_station_telecode,'*')
         AND start_coach_no = end_coach_no   
       ORDER BY start_coach_no desc limit 1;       
       set l_error =  @@error_count,l_rowcount = found_rows();
       
      
       
       IF l_rowcount > 0 AND l_error = 0 THEN 
        
        
        IF timestampdiff(MINUTE,NOW(),str_to_date(concat(transform_date_in ,l_transform_start_time),'%Y%m%d%H%i')) > l_pre_sale_time THEN 
         
         DELETE FROM tmp_share_schedule WHERE start_coach_no = l_schedule_coach AND pre_saletime = l_pre_sale_time;
         set l_schedule_coach = 'AA';
         
        
         
        END if;
        
        
         
       ELSE 
        SET l_schedule_coach = 'AA';
       end if;
       
       IF output_in = '0' THEN
        SET l_tmp_start_seat_no = concat(l_schedule_coach , RIGHT(l_tmp_start_seat_no,2)); 
       end if;
       
      
      
       
       
       IF l_tmp_range = 255 THEN
        set l_tmp_range = 9;
       end if;

       
       
       
       
       
      
       
       set share_string_in = '';
       IF output_in = '0' THEN 
        
        set share_string_in = concat(l_original_station_telecode , transform_date_in , transform_no_in , CONVERT(fetch_w_seat_in,CHAR(1)) 
         , CONVERT(l_tmp_range,CHAR(1)) , l_tmp_start_coach_no , l_tmp_end_coach_no , l_tmp_start_seat_no 
         , substring(l_tmp_end_seat_no,1,1) , purpose_code_in , l_seat_type);
        
         
        
        IF instr(l_location_share_string,share_string_in) = 0 then  
          set l_location_share_string = concat(rtrim(l_location_share_string) , share_string_in);
        END if;
       ELSE 
         set share_string_in = concat(l_original_station_telecode , transform_date_in , transform_no_in , CONVERT(fetch_w_seat_in,CHAR(1)) 
          , CONVERT(l_tmp_range,CHAR(1)) , l_tmp_start_coach_no , l_tmp_end_coach_no , l_tmp_start_seat_no , l_tmp_end_seat_no);
         
         IF instr(l_location_share_string,share_string_in) = 0 then  
           set l_location_share_string = concat(rtrim(l_location_share_string) , share_string_in);
         END if;
       END if;

       IF purpose_code_in = '**' THEN 
        SET purpose_code_in = l_old_purpose_code; 
       end if;
      if LENGTH(l_purpose_list)+length(purpose_code_in)<512 then
       set l_purpose_list  = concat(l_purpose_list  , purpose_code_in) ; 
       set  l_seat_type_list = concat(l_seat_type_list , l_seat_type);   
      end if;
      
     
     set lable_s = 0;
     leave lable;
     end loop lable;
     set l_row = l_row - 1;
    END WHILE;
    
    
    IF instr(l_location_share_string,concat(transform_station_telecode_in , l_train_date , l_from_station_no)) = 0 THEN
      set l_tmp_range  = 9         
      ,  purpose_code_in = l_old_purpose_code
      ,  l_seat_type  = seat_type_code_in;     
      IF output_in = "0" then   
       set start_seat_no_in = concat('AA' , RIGHT(start_coach_no_in,2)); 
       set l_location_share_string = concat(rtrim(l_location_share_string) , transform_station_telecode_in , l_train_date 
        , l_from_station_no ,  CONVERT(l_old_fetch_w_seat,CHAR(1)) , CONVERT(l_tmp_range,CHAR(1)) , start_coach_no_in 
        , end_coach_no_in , start_seat_no_in , substring(end_seat_no_in,1,1) , purpose_code_in , l_seat_type);
      ELSE        
       SET l_location_share_string = concat(rtrim(l_location_share_string) , transform_station_telecode_in , l_train_date , l_from_station_no
        ,  CONVERT(l_old_fetch_w_seat,CHAR(1)) , CONVERT(l_tmp_range,CHAR(1)) , start_coach_no_in , end_coach_no_in , start_seat_no_in
        , end_seat_no_in);
      END if;

      set l_purpose_list  = concat(l_purpose_list , l_old_purpose_code)  
      ,  l_seat_type_list = concat(l_seat_type_list , seat_type_code_in);  
    END if;
   END if;
 END if;
 

 
 SET l_new_fetch_w_seat = fetch_w_seat_in;
 SET share_string_in = l_location_share_string; 
 IF share_string_in = "" OR share_string_in IS NULL THEN
 
   set share_flag_in = "0";
 end if;

 IF output_in = "0"  THEN
   set return_in = 0;  
 end if;
 

 
 
 IF share_flag_in = "0" then 
   SET fetch_w_seat_in = l_old_fetch_w_seat
   , transform_date_in= l_train_date
   , transform_no_in = l_from_station_no
   , sale_station_in  = l_old_sale_station
   , range_in      = l_old_range;
   LEAVE lable_OK_RETURN;
 END if;
 
 IF output_in IN ("1","9") THEN
  if output_in='9' then 
   select '14=====',share_flag_in;
  end if;
   IF share_flag_in = "1" THEN 
    set l_rowcount = 0 
     ,  l_share_base_id = 27;
    
    WHILE l_rowcount < length(rtrim(l_location_share_string)) / (14 + 13) DO
      set l_original_station_telecode = substring(l_location_share_string,l_rowcount * l_share_base_id + 1,3);
      set transform_date_in = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3, 8);
      set transform_no_in = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8, 2);
      set transform_no_in = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8, 2);
      set fetch_w_seat_in = CONVERT(substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8 + 2, 1),signed);
      
      set l_tmp_range    = CONVERT(substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8 + 2 + 1, 1),signed);
      
      IF l_tmp_range = 9 THEN 
       set l_tmp_range = 255;
      end if;
      
      set l_tmp_start_coach_no = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8 + 2 + 1 + 1, 2);
      set l_tmp_end_coach_no = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8 + 2 + 1 + 1 + 2, 2);
      set l_tmp_start_seat_no = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2, 4);
      set l_tmp_end_seat_no  = substring(l_location_share_string,l_rowcount * l_share_base_id + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 4, 4);

      
      
      SELECT bureau_code, subbureau_code, start_time
      into l_transform_bureau_code,l_transform_subbureau_code,l_start_time
       FROM basic.stop_time
       WHERE train_no = train_no_in
       AND station_telecode = l_original_station_telecode limit 1; 
     
      IF substring(sale_center_code_in,1,1) != l_transform_bureau_code THEN
       set range_in = 4; 
      ELSEIF sale_subbureau_in != l_transform_subbureau_code THEN
       set range_in = 3; 
      ELSEIF l_old_sale_station != l_original_station_telecode then 
       set range_in = 2; 
      ELSE 
       set range_in = 0;
      end if;

      
      IF transform_station_telecode_in <> l_old_sale_station THEN                                       
       CALL arith.CS50_Same_City(transform_date_in,l_old_sale_station,transform_station_telecode_in,"1",l_union_flag);                                     
       IF l_union_flag = 1 THEN
        set range_in = 1  ;
       end if;
      END if;
      
     
      set purpose_code_in = substring(ltrim(l_purpose_list),l_rowcount * 2 + 1,2)
      ,  l_seat_type  = substring(ltrim(l_seat_type_list),l_rowcount * 1 + 1,1);
      
      
      INSERT INTO tmp_share_detail VALUES (l_original_station_telecode,transform_date_in,transform_no_in,range_in,fetch_w_seat_in
        ,l_tmp_range,l_tmp_start_coach_no,l_tmp_end_coach_no,l_tmp_start_seat_no,l_tmp_end_seat_no,purpose_code_in,0,l_seat_type,0,0,0,0,0,0,l_transform_bureau_code,'00',l_start_time);
      set l_rowcount = l_rowcount + 1;
      
    END WHILE;
   END if;
 
   IF output_in = '9' then       
    select '+++++++++++++-DBG.10.DS50_Proc_Share.共用定义明细++++++++++++++-';
    
    SELECT purpose_code AS purpose_code,station_no AS station_no,tmp_share_detail.station_telecode, tmp_share_detail.train_date, tmp_share_detail.station_no, tmp_share_detail.range_in, 
    tmp_share_detail.fetch_w_seat, tmp_share_detail.define_range, tmp_share_detail.start_coach_no, tmp_share_detail.end_coach_no, tmp_share_detail.start_seat_no, 
    tmp_share_detail.end_seat_no, tmp_share_detail.purpose_code, tmp_share_detail.flag, tmp_share_detail.seat_type_code, tmp_share_detail.ticket_num, tmp_share_detail.range1, 
    tmp_share_detail.range2, tmp_share_detail.range3, tmp_share_detail.range4, tmp_share_detail.range5, tmp_share_detail.board_bureau, tmp_share_detail.far_from_no, 
    tmp_share_detail.start_time FROM tmp_share_detail ORDER BY station_no DESC;
   END if;

   
   SET l_STM = substring( GSN_in, 2, 3);
   SET l_ATT = 0; 
   IF l_STM = "ATT" THEN  
    
    IF substring(GSN_in,1,1) != "%" THEN 
      SET GSN_in = concat(substring(GSN_in,1,1) , "%" );
    ELSE 
      SET GSN_in = '%';
    end if;
    
    IF ascii(l_GDP) >= 48 AND ascii(l_GDP) <= 57 then
      SET l_ATT = ascii(l_GDP) - 48; 
    ELSEIF ascii(l_GDP) >= 65 THEN
      SET l_ATT = ascii(l_GDP) - 65 + 10;     
    end if;
    SET l_ATT = l_ATT + 1; 
    SET GDP_in = '%';
   END if;
  
   IF share_flag_in = "1" THEN  
     IF l_old_fetch_w_seat <> 9 THEN 
      SET l_row = 0;
      SELECT count(*) into l_total_row FROM tmp_share_detail; 

      lable_while:
      WHILE l_row <= l_total_row DO      

        SET l_row = l_row + 1;
         

        SELECT station_telecode
        , train_date
        ,  station_no
        ,  a.range_in
        ,  fetch_w_seat
        ,  define_range
        ,  start_coach_no
        ,  end_coach_no
        ,  start_seat_no
        ,  end_seat_no
        ,  purpose_code
        ,  seat_type_code  
        ,  board_bureau  
        ,  far_from_no 
        ,  start_time
        into sale_station_in,transform_date_in,transform_no_in,range_in,fetch_w_seat_in,l_tmp_range,l_tmp_start_coach_no,l_tmp_end_coach_no,l_tmp_start_seat_no,
        l_tmp_end_seat_no,purpose_code_in,l_seat_type,l_transform_bureau_code,to_station_no_limit_in,l_start_time
        FROM tmp_share_detail a
         WHERE flag = 0   
        ORDER BY station_no DESC LIMIT 1;
        
         
        UPDATE tmp_share_detail SET flag = 1 WHERE station_telecode = sale_station_in 
         AND train_date = transform_date_in AND station_no = transform_no_in 
         AND define_range = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
         AND fetch_w_seat = fetch_w_seat_in AND start_seat_no = l_tmp_start_seat_no AND end_seat_no = l_tmp_end_seat_no  
         AND purpose_code = purpose_code_in AND seat_type_code = l_seat_type
         AND flag = 0;
        
        IF fetch_w_seat_in = 9 THEN
         Iterate lable_while; 
        end if;
        
        
        SET range_in1   = l_old_range1
        , range_in2   = l_old_range2
        , range_in3   = l_old_range3
        , range_in4   = l_old_range4
        , range_in5   = l_old_range5;
        
        
        IF sale_station_in = l_old_sale_station THEN
         SET range_in = l_old_range;
        end if;
       

        IF sale_station_in <> l_old_sale_station THEN
        
         IF l_tmp_range <> 255 THEN
           IF l_tmp_range = 0 THEN
            SET range_in = 0;  
            IF range_in1 = 0 THEN
              SET range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
            ELSE 
              Iterate lable_while;
            end if;
           ElSEIF l_tmp_range = 1 THEN
            SET range_in = 1;  
            IF range_in2 = 1 THEN
              SET range_in1 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
            ELSE 
              Iterate lable_while;
            end if;
           ELSEIF l_tmp_range = 2 THEN
            SET range_in = 2;  
            IF range_in3 = 2 THEN
              SET range_in1 = 255,range_in2 = 255,range_in4 = 255,range_in5 = 255;
            ELSE 
              Iterate lable_while;
            end if;
           ELSEIF l_tmp_range = 3 THEN
            SET range_in = 3;  
            IF range_in4 = 3 THEN
              SET range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in5 = 255;
            ELSE 
              Iterate lable_while;
            end if;
           ELSEIF l_tmp_range = 4 THEN
            SET range_in = 4;  
            IF range_in5 = 4 THEN
              SET range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255;
            ELSE 
              Iterate lable_while;
            end if;
           END if;
         
         ELSE
           SET range_in = 0; 
         END if;
        END if;
             
         

        
        IF seat_type_code_in = '%' AND l_seat_type != 'z' THEN
         SET l_tmp_seat_type = l_seat_type; 
        ELSE 
         SET l_tmp_seat_type = seat_type_code_in;
        end if;
       
        CALL arith.DS50_Train_Time  (transform_date_in,train_no_in,train_code_in,l_tmp_seat_type,range_in,purpose_code_in,ticket_num_ary_in
        , range_in1,range_in2,range_in3,range_in4,range_in5 ,1
        , sale_station_in,1,l_sale_mode ,l_return_code);
        IF l_return_code = 0 THEN
         
         UPDATE tmp_share_detail SET flag = 9
          WHERE station_telecode = sale_station_in 
          AND train_date = transform_date_in AND station_no = transform_no_in 
          AND define_range = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
          AND fetch_w_seat = fetch_w_seat_in AND start_seat_no = l_tmp_start_seat_no AND end_seat_no = l_tmp_end_seat_no  
          AND purpose_code = purpose_code_in AND seat_type_code = l_seat_type
          AND flag = 1;
         Iterate lable_while; 
        END if;
        
         

        
        
        
        IF to_station_no_limit_in = '00' THEN                     
          
          set l_start_datetime = str_to_date(concat(transform_date_in , " " , substring(l_start_time,1,2) , ":" , substring(l_start_time,3,2) , ":00"),'%Y%m%d %H:%i:%S')
          ,  to_station_no_limit_in = to_station_no_in;
          
          
         
          SELECT ahead_time 
          into l_ahead_time
          FROM basic.DJ50_cancel_limit_define 
          WHERE  inner_code IN (l_transform_bureau_code,sale_station_in)                       
           AND start_date <= transform_date_in                              
           AND  stop_date  >= transform_date_in                              
           AND ((train_code = train_code_in AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name)  
            OR train_code = '*' OR (train_code != train_code_in AND train_code_in LIKE train_code))           
           AND   station_telecode IN (sale_station_in,'*')                          
           AND purpose_code IN (purpose_code_in,'*')                            
           AND train_type   IN (train_type_in,'*')                            
           AND sale_mode   IN (l_sale_mode,'*')                             
           AND  l_office_no LIKE cancel_office_no
           AND (cancel_window_no = l_window_no OR cancel_window_no = 0)
           AND   running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
          ORDER BY level_flag desc,cancel_office_no desc,cancel_window_no desc,purpose_code desc,train_code desc,
           station_telecode desc,far_from_station desc,seat_type_code desc,train_type desc,sale_mode desc limit 1; 

          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount = 0 THEN 
           SET l_ahead_time = CONVERT(substring(right_limit_in, 2,  4),signed); 
          end if;
          
          
           IF timestampdiff( MINUTE, now(),l_start_datetime )  <= l_ahead_time THEN
           
           SET to_station_no_limit_in = '99';
          end if;
        END if;
        
        
        
         

        IF output_in = '9' THEN       
         SELECT '+++++++++++-DBG.15.DS50_Proc_Share.根据共用定义查询票库条件++++++++++++-';
         SELECT Left(purpose_code_in,2) AS '用途',sale_station_in AS '被共用站',transform_no_in AS '被共用站序',to_station_no_limit_in AS '以远站',substring(sale_center_code_in,1,1) AS sale_bureau
         , l_transform_bureau_code AS transform_bureau_code;
         SELECT '++++++++++++++++++-DBG.16.DS50_Proc_Share.共用例外+++++++++++-';
         SELECT start_coach_no,station_telecode, delay_days, pre_saletime, w_seat_flag, purpose_code, seat_type_code, range_in, start_coach_no, end_coach_no, start_seat_no, end_seat_no FROM tmp_share_schedule;
        END if;

        IF seat_type_code_in = "%" OR GCN_in != "%" OR (GSN_in != "%" AND GSN_in != "3%") OR GDP_in != ""  THEN
         SELECT count(*) into l_transform_num FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
          WHERE train_date = transform_date_in 
          AND train_no  = train_no_in 
          AND limit_station >= to_station_no_in
          AND coach_no   LIKE GCN_in
          AND coach_no  >= l_tmp_start_coach_no
          AND coach_no    <= l_tmp_end_coach_no
          AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
          AND seat_no   LIKE GSN_in
          AND seat_no   >= l_tmp_start_seat_no
          AND seat_no   <= l_tmp_end_seat_no
          AND seat_type_code LIKE seat_type_code_in AND (seat_type_code = l_seat_type OR l_seat_type = 'z') 
          AND ( ( a.range >= range_in AND a.range <= window_range_in AND a.range in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
           OR ( a.range = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
           ) 
          AND arrive_station_no = transform_no_in 
          AND far_from_station_no <= to_station_no_limit_in  
          AND ( (module_type_in != 'R' AND useful_flag = '0') 
           OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
           OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
           )
          AND ticket_type  = 0
          AND department  LIKE GDP_in
          AND (l_ATT = 0 OR (l_ATT > 0 AND substring(flag1,l_ATT,1) = '1') ) 
          AND a.range BETWEEN v_FromRange_in AND v_ToRange_in;
        ELSEIF GU_in + GM_in + GD_in > 0 THEN
         SELECT count(*) into l_transform_num FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
          WHERE train_date  = transform_date_in 
          AND train_no   = train_no_in 
          AND limit_station   >= to_station_no_in
          AND ( ( a.range >= range_in AND a.range <= window_range_in AND a.range in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
           OR ( a.range = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
           )  
          AND coach_no >= l_tmp_start_coach_no
          AND coach_no   <= l_tmp_end_coach_no
          AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
          AND seat_no  >= l_tmp_start_seat_no
          AND seat_no  <= l_tmp_end_seat_no
          AND seat_type_code     = seat_type_code_in
          AND arrive_station_no = transform_no_in 
          AND far_from_station_no<= to_station_no_limit_in 
          AND ( (module_type_in != 'R' AND useful_flag = '0') 
           OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
           OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
           )
          AND ticket_type   = 0
          AND instr( SB_LIST_in ,RIGHT(seat_no,1)) > 0
          AND a.range BETWEEN v_FromRange_in AND v_ToRange_in;
        ELSE
        SELECT count(*) into l_transform_num FROM  center.aseat_area a FORCE INDEX(seat_area_fetch_idx)
         WHERE train_date   = transform_date_in  
         AND train_no    = train_no_in 
         AND limit_station    >= to_station_no_in
         AND seat_type_code     = seat_type_code_in
         AND ((GSN_in != "3%" AND seat_no < "3000") 
         OR (GSN_in = "3%" AND seat_no >= "3000" ))
         AND coach_no     >= l_tmp_start_coach_no
         AND coach_no       <= l_tmp_end_coach_no
         AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
         AND seat_no      >= l_tmp_start_seat_no
         AND seat_no      <= l_tmp_end_seat_no
         AND (  ( a.range >= range_in AND a.range <= window_range_in AND a.range in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
          OR ( a.range = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
          )  
         AND arrive_station_no = transform_no_in 
         AND far_from_station_no<= to_station_no_limit_in 
         AND ( (module_type_in != 'R' AND useful_flag = '0') 
          OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
          OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )  
          )
         AND ticket_type    = 0
         AND a.range BETWEEN v_FromRange_in AND v_ToRange_in ;
        END if;
       
        
        IF l_transform_num > 0 THEN
         IF output_in = '9' THEN       
           IF transform_no_in = l_from_station_no THEN
            SELECT '++++++++++++++++++-DBG.20.DS50_Proc_Share.乘车站票额信息++++++++++++++++-';
            SELECT l_row AS '第n条定义',Left(purpose_code_in,2) AS '用途',l_transform_num AS '票额张数',ticket_num_in AS '取票张数',sale_station_in AS '乘车站',transform_no_in AS '乘车站序',share_station_in AS tmp_table;
           ELSE
            SELECT '+++++++++++++++-DBG.21.DS50_Proc_Share.被共用站票额信息++++++++++++++++++++-';
            SELECT l_row AS '第n条定义',Left(purpose_code_in,2) AS '用途',l_transform_num AS '可共用张数',ticket_num_in AS '取票张数',sale_station_in AS '被共用站',transform_no_in AS '被共用站序',l_from_station_no AS '乘车站',share_station_in AS tmp_table;
           END if;
         END if;

         IF l_transform_num >= ticket_num_in THEN
           set fetch_w_seat_in = 1 
           , start_coach_no_in = l_tmp_start_coach_no
           , end_coach_no_in  = l_tmp_end_coach_no
           , start_seat_no_in  = l_tmp_start_seat_no
           , end_seat_no_in  = l_tmp_end_seat_no;
           
           IF EXISTS(SELECT 1 FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) THEN
             IF seat_type_code_in = "%" OR GCN_in != "%" OR (GSN_in != "%" AND GSN_in != "3%") OR GDP_in != ""  THEN
               SELECT coach_no into l_seat_coach_no FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
               WHERE train_date = transform_date_in 
               AND train_no  = train_no_in 
               AND limit_station >= to_station_no_in
               AND coach_no   LIKE GCN_in
               AND coach_no  >= l_tmp_start_coach_no
               AND coach_no    <= l_tmp_end_coach_no
               AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
               AND seat_no   LIKE GSN_in
               AND seat_no   >= l_tmp_start_seat_no
               AND seat_no   <= l_tmp_end_seat_no
               AND seat_type_code LIKE seat_type_code_in AND (seat_type_code = l_seat_type OR l_seat_type = 'z') 
               AND ( ( a.range >= range_in AND a.range <= window_range_in AND a.range in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
                OR ( a.range = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
                ) 
               AND arrive_station_no = transform_no_in 
               AND far_from_station_no <= to_station_no_limit_in  
               AND ( (module_type_in != 'R' AND useful_flag = '0') 
                OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
                OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
                )
               AND ticket_type  = 0
               AND department  LIKE GDP_in
               AND (l_ATT = 0 OR (l_ATT > 0 AND substring(flag1,l_ATT,1) = '1') ) 
               AND a.range BETWEEN v_FromRange_in AND v_ToRange_in LIMIT 1;
             ELSEIF GU_in + GM_in + GD_in > 0 THEN
               SELECT coach_no into l_seat_coach_no FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
               WHERE train_date  = transform_date_in 
               AND train_no   = train_no_in 
               AND limit_station   >= to_station_no_in
               AND ( ( a.range >= range_in AND a.range <= window_range_in AND a.range in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
                OR ( a.range = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
                )  
               AND coach_no >= l_tmp_start_coach_no
               AND coach_no   <= l_tmp_end_coach_no
               AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
               AND seat_no  >= l_tmp_start_seat_no
               AND seat_no  <= l_tmp_end_seat_no
               AND seat_type_code     = seat_type_code_in
               AND arrive_station_no = transform_no_in 
               AND far_from_station_no<= to_station_no_limit_in 
               AND ( (module_type_in != 'R' AND useful_flag = '0') 
                OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
                OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
                )
               AND ticket_type   = 0
               AND instr(SB_LIST_in,RIGHT(seat_no,1) ) > 0
               AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in LIMIT 1;
             ELSE 
               SELECT coach_no into l_seat_coach_no FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
               WHERE train_date   = transform_date_in 
               AND train_no    = train_no_in 
               AND limit_station    >= to_station_no_in
               AND seat_type_code     = seat_type_code_in
               AND ((GSN_in != "3%" AND seat_no < "3000") 
                OR (GSN_in = "3%" AND seat_no >= "3000" ))
               AND coach_no     >= l_tmp_start_coach_no
               AND coach_no       <= l_tmp_end_coach_no
               AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
               AND seat_no      >= l_tmp_start_seat_no
               AND seat_no      <= l_tmp_end_seat_no
               AND (  ( a.`range` >= range_in AND a.`range` <= window_range_in AND a.range in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
                OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
                )  
               AND arrive_station_no = transform_no_in 
               AND far_from_station_no<= to_station_no_limit_in 
               AND ( (module_type_in != 'R' AND useful_flag = '0') 
                OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
                OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
                 )
               AND ticket_type    = 0
               AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in  LIMIT 1;
             END if;
             IF row_count() > 0 THEN 
               set start_coach_no_in = l_seat_coach_no
               ,  end_coach_no_in   = l_seat_coach_no;
             END if;      
           END if;
           LEAVE lable_OK_return; 
         
         ELSE
           UPDATE tmp_share_detail SET ticket_num = ticket_num + l_transform_num,range1 = range_in1,range2 = range_in2,range3 = range_in3,range4 = range_in4,range5 = range_in5,range_in = range_in
           , far_from_no = to_station_no_limit_in
           WHERE station_telecode = sale_station_in 
            AND train_date = transform_date_in AND station_no = transform_no_in 
            AND define_range = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
            AND fetch_w_seat = fetch_w_seat_in AND start_seat_no = l_tmp_start_seat_no AND end_seat_no = l_tmp_end_seat_no  
            AND purpose_code = purpose_code_in AND seat_type_code = l_seat_type
            AND flag = 1;
         END if;
         
        
        ELSE
        UPDATE tmp_share_detail SET ticket_num = ticket_num + l_transform_num,range1 = range_in1,range2 = range_in2,range3 = range_in3,range4 = range_in4,range5 = range_in5,range_in = range_in
         , far_from_no = to_station_no_limit_in
         WHERE station_telecode = sale_station_in 
         AND train_date = transform_date_in AND station_no = transform_no_in 
         AND define_range = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
         AND fetch_w_seat = fetch_w_seat_in AND start_seat_no = l_tmp_start_seat_no AND end_seat_no = l_tmp_end_seat_no  
         AND purpose_code = purpose_code_in AND seat_type_code = l_seat_type
         AND flag = 1;
        END if;
      END WHILE lable_while;
      
      IF output_in = '9' THEN       
       SELECT '+++++++++++++++++++-DBG.25.DS50_Proc_Share.票额不足时所有有票的共用站信息++++++++++++++++++++++++-';
       SELECT ticket_num_in AS fetch_num,ticket_num AS left_num,station_telecode,train_date,station_no,a.range_in,fetch_w_seat,start_coach_no,end_coach_no,start_seat_no,end_seat_no
       ,  purpose_code,seat_type_code,ticket_num,range1,range2,range3,range4,range5,far_from_no
       FROM tmp_share_detail a WHERE flag = 1 AND ticket_num > 0     
        ORDER BY ticket_num,station_no;
      END if;

      
      
      OPEN cursor_share_station;

      lab_share_station:
      WHILE 1 = 1 DO
        FETCH cursor_share_station INTO sale_station_in,transform_date_in,transform_no_in,range_in,fetch_w_seat_in,l_tmp_start_coach_no,l_tmp_end_coach_no
         , l_tmp_start_seat_no,l_tmp_end_seat_no,purpose_code_in,l_seat_type,l_transform_num,range_in1,range_in2,range_in3,range_in4,range_in5,to_station_no_limit_in;
       
       if record_not_found = 1 THEN
         leave lab_share_station;
       end IF;
       
        SET fetch_w_seat_in = 1; 
        
        IF EXISTS(SELECT 1 FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) THEN
         IF seat_type_code_in = "%" OR GCN_in != "%" OR (GSN_in != "%" AND GSN_in != "3%") OR GDP_in != ""  then
           SELECT coach_no into l_seat_coach_no FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
           WHERE train_date = transform_date_in 
           AND train_no  = train_no_in 
           AND limit_station >= to_station_no_in
           AND coach_no   LIKE GCN_in
           AND coach_no  >= l_tmp_start_coach_no
           AND coach_no    <= l_tmp_end_coach_no
           AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
           AND seat_no   LIKE GSN_in
           AND seat_no   >= l_tmp_start_seat_no
           AND seat_no   <= l_tmp_end_seat_no
           AND seat_type_code LIKE seat_type_code_in AND (seat_type_code = l_seat_type OR l_seat_type = 'z') 
           AND ( ( a.`range` >= range_in AND a.`range` <= window_range_in AND a.`range` in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
            OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
            ) 
           AND arrive_station_no = transform_no_in 
           AND far_from_station_no <= to_station_no_limit_in  
           AND ( (module_type_in != 'R' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
            )
           AND ticket_type  = 0
           AND department  LIKE GDP_in
           AND (l_ATT = 0 OR (l_ATT > 0 AND substring(flag1,l_ATT,1) = '1') ) 
           AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in LIMIT 1;
         ELSEIF GU_in + GM_in + GD_in > 0 THEN
           SELECT coach_no into l_seat_coach_no FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
           WHERE train_date  = transform_date_in 
           AND train_no   = train_no_in 
           AND limit_station   >= to_station_no_in
           AND ( ( a.`range` >= range_in AND a.`range` <= window_range_in AND a.`range` in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
            OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
            )  
           AND coach_no >= l_tmp_start_coach_no
           AND coach_no   <= l_tmp_end_coach_no
           AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
           AND seat_no  >= l_tmp_start_seat_no
           AND seat_no  <= l_tmp_end_seat_no
           AND seat_type_code     = seat_type_code_in
           AND arrive_station_no = transform_no_in 
           AND far_from_station_no<= to_station_no_limit_in 
           AND ( (module_type_in != 'R' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
            )
           AND ticket_type   = 0
           AND instr(SB_LIST_in ,RIGHT(seat_no,1)) > 0
           AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in LIMIT 1;
         ELSE
           SELECT coach_no into l_seat_coach_no FROM  center.seat_area a FORCE INDEX(seat_area_fetch_idx)
           WHERE train_date   = transform_date_in 
           AND train_no    = train_no_in 
           AND limit_station    >= to_station_no_in
           AND seat_type_code     = seat_type_code_in
           AND ((GSN_in != "3%" AND seat_no < "3000") 
            OR (GSN_in = "3%" AND seat_no >= "3000" ))
           AND coach_no     >= l_tmp_start_coach_no
           AND coach_no       <= l_tmp_end_coach_no
           AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
           AND seat_no      >= l_tmp_start_seat_no
           AND seat_no      <= l_tmp_end_seat_no
           AND (  ( a.`range` >= range_in AND a.`range` <= window_range_in AND a.`range` in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
            OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
            )  
           AND arrive_station_no = transform_no_in 
           AND far_from_station_no<= to_station_no_limit_in 
           AND ( (module_type_in != 'R' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
             )
           AND ticket_type    = 0
           AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in LIMIT 1 ;
         END if;
         IF row_count() > 0 THEN 
          set start_coach_no_in = l_seat_coach_no
          ,  end_coach_no_in   = l_seat_coach_no;
         END if;
        END if;
       
        
        IF share_station_in != '' THEN
         set @l_SQL = concat('INSERT INTO ' , share_station_in , ' VALUES("' , transform_date_in , '","' , transform_no_in , '","' , purpose_code_in , '",' , CONVERT(range_in,CHAR(3)) , ',' , CONVERT(fetch_w_seat_in,CHAR(1))
          , ',"' , share_flag_in , '","' , sale_station_in , '",' , CONVERT(range_in1,CHAR(3)) , ',' , CONVERT(range_in2,CHAR(3)) , ',' + CONVERT(range_in3,CHAR(3)) , ',' , CONVERT(range_in4,CHAR(3))
          , ',' , CONVERT(range_in5,CHAR(3)) , ',"' , start_coach_no_in , '","' , end_coach_no_in , '","' , start_seat_no_in , '","' , end_seat_no_in , '",' , CONVERT(l_transform_num,CHAR(5)) , ',"' , to_station_no_limit_in , '")');
         IF output_in = '9' THEN
          SELECT '++++++++++++++-DBG.insert -- share_station+++++++++++++++';
          SELECT @l_SQL;
         END if;

         prepare stmt_1 from @l_SQL;
         EXECUTE stmt_1;
         set l_multi_flag = 1;     
        END if;
      END while lab_share_station;
      close cursor_share_station;

      
      IF l_multi_flag = 1 THEN
        IF output_in = '9' THEN      
        SELECT '+++++++++++++++-DBG.30.DS50_Proc_Share.票额不足时优先共用的车站票额信息+++++++++++++++++++-';
        SELECT Left(purpose_code_in,2) AS '用途',l_transform_num AS '票额张数',transform_date_in AS '被共用日期',sale_station_in AS '被共用站',transform_no_in AS '被共用',l_from_station_no AS '乘车站序';
        END if;
        LEAVE lable_OK_return;
      END if;
      
     ELSE 
      SET l_row = l_total_row + 1; 
     end if;
    
     IF l_old_fetch_w_seat = 1 OR Is_Bed_in = 1 THEN 
      
      SET transform_date_in= l_train_date
       , transform_no_in = l_from_station_no
       , sale_station_in  = transform_station_telecode_in 
       , range_in      = l_old_range
       , range_in1   = l_old_range1
       , range_in2   = l_old_range2
       , range_in3   = l_old_range3
       , range_in4   = l_old_range4
       , range_in5   = l_old_range5
       , purpose_code_in = l_old_purpose_code
       ,  to_station_no_limit_in = l_old_to_station_no_limit;
      LEAVE lable_OK_return; 
     END if;

    
     
     IF l_row > l_total_row THEN 
       SET fetch_w_seat_in = 9 
       , transform_date_in= l_train_date
       , transform_no_in = l_from_station_no
       , sale_station_in  = transform_station_telecode_in 
       , range_in      = l_old_range
       , range_in1   = l_old_range1
       , range_in2   = l_old_range2
       , range_in3   = l_old_range3
       , range_in4   = l_old_range4
       , range_in5   = l_old_range5
       , purpose_code_in = l_old_purpose_code
       ,  to_station_no_limit_in = l_old_to_station_no_limit;
     
       
       SET GCN_in = "%", GSN_in = "3%";

       IF output_in = '9' THEN      
        SELECT '+++++++++++++++++-DBG.40.DS50_Proc_Share.开始计算无座席+++++++++++++++-';
        SELECT 'CALL arith.DS50_Train_Time',transform_date_in,train_no_in,train_code_in,seat_type_code_in,range_in,purpose_code_in,ticket_num_ary_in
         , range_in1,range_in2,range_in3,range_in4,range_in5,1
         , sale_station_in,1,l_sale_mode,l_return_code;
       END if;

       
       CALL arith.DS50_Train_Time  (transform_date_in,train_no_in,train_code_in,seat_type_code_in,range_in,purpose_code_in,ticket_num_ary_in
       , range_in1,range_in2,range_in3,range_in4,range_in5,1
       , sale_station_in,1,l_sale_mode,l_return_code);
       
      IF output_in = '9' THEN      
        SELECT 'end CALL arith.DS50_Train_Time',transform_date_in,train_no_in,train_code_in,seat_type_code_in,range_in,purpose_code_in,ticket_num_ary_in
         , range_in1,range_in2,range_in3,range_in4,range_in5,1
         , sale_station_in,1,l_sale_mode,l_return_code;
       END if;
       
       IF (fetch_w_seat_in = 9 OR fetch_w_seat_in = 0) AND l_return_code = 1 THEN 
         
         IF seat_type_code_in = "%" OR GCN_in != "%" OR (GSN_in != "%" AND GSN_in != "3%") OR GDP_in != ""  THEN
          SELECT coach_no INTO l_seat_coach_no FROM center.seat_area a FORCE INDEX(seat_area_fetch_idx)
           WHERE train_date  = transform_date_in 
           AND train_no  = train_no_in 
           AND limit_station >= to_station_no_in
           AND coach_no   LIKE GCN_in
           AND coach_no  >= start_coach_no_in
           AND coach_no    <= end_coach_no_in
           AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
           AND seat_no   LIKE GSN_in
           AND seat_no   >= start_seat_no_in
           AND seat_no   <= end_seat_no_in
           AND seat_type_code LIKE seat_type_code_in
           AND ( ( a.`range` >= range_in AND a.`range` <= window_range_in AND a.`range` in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
            OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
            )
           AND arrive_station_no = transform_no_in 
           AND far_from_station_no <= to_station_no_limit_in   
           AND ( (module_type_in != 'R' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in = '1' AND useful_flag = '0') 
            OR (module_type_in = 'R' AND operate_type_in <> '1' AND useful_flag IN ('0','D') )
            )
           AND ticket_type  = 0
           AND department  LIKE GDP_in
           AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in  LIMIT 1;
         ELSE 
          SELECT coach_no INTO l_seat_coach_no FROM center.seat_area a FORCE INDEX(seat_area_fetch_idx)
           WHERE train_date    = transform_date_in 
           AND train_no    = train_no_in 
           AND limit_station    >= to_station_no_in
           AND seat_type_code     = seat_type_code_in
           AND ((GSN_in != "3%" AND seat_no < "3000") 
           OR (GSN_in = "3%" AND seat_no >= "3000" ))
           AND coach_no     >= start_coach_no_in
           AND coach_no       <= end_coach_no_in
           AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
           AND seat_no      >= start_seat_no_in
           AND seat_no      <= end_seat_no_in
           AND (  ( a.`range` >= range_in AND a.`range` <= window_range_in AND a.`range` in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in) 
            OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
            )  
           AND arrive_station_no  = transform_no_in 
           AND far_from_station_no <= to_station_no_limit_in 
           AND ( (module_type_in   != 'R' AND useful_flag    = '0') 
            OR (module_type_in   = 'R' AND operate_type_in  = '1' AND useful_flag = '0') 
            OR (module_type_in   = 'R' AND operate_type_in != '1' AND useful_flag IN ('0','D') )
            )
           AND ticket_type     = 0
           AND a.`range` BETWEEN v_FromRange_in AND v_ToRange_in LIMIT 1;
         END if;
         
         IF row_count() > 0 THEN
          SET start_coach_no_in = "00"
           , end_coach_no_in  = "A9"
           , start_seat_no_in  = "0000"
           , end_seat_no_in  = "9999";

          
          IF EXISTS(SELECT 1 FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) THEN
            SET start_coach_no_in = l_seat_coach_no
            ,  end_coach_no_in   = l_seat_coach_no;
          END if;
          LEAVE lable_OK_return; 
         END if;

         
         DELETE FROM tmp_share_detail WHERE station_telecode = sale_station_in   
          AND train_date = transform_date_in AND station_no = transform_no_in; 
       END if;
      
       
       
      
       DELETE FROM tmp_share_detail WHERE flag = 9;    
       SELECT count(*) INTO l_total_row FROM tmp_share_detail; 
       
       lab_share_detail:
       WHILE l_total_row > 0 DO      
        set l_total_row = l_total_row - 1;
        SELECT station_telecode
         ,  train_date
         ,  station_no
         ,  a.range_in
         ,  fetch_w_seat 
         ,  define_range
         ,  start_coach_no
         ,  end_coach_no
         ,  start_seat_no
         ,  end_seat_no
         ,  purpose_code
         ,  seat_type_code  
         ,  range1     
         ,  range2
         ,  range3
         ,  range4
         ,  range5
         ,  far_from_no
         into sale_station_in,transform_date_in,transform_no_in,range_in,fetch_w_seat_in,l_tmp_range,l_tmp_start_coach_no,l_tmp_end_coach_no,
           l_tmp_start_seat_no,l_tmp_end_seat_no,purpose_code_in,l_seat_type,range_in1,range_in2,range_in3,range_in4,range_in5,to_station_no_limit_in
         FROM tmp_share_detail a 
         ORDER BY station_no DESC LIMIT 1;
        IF row_count() = 0 THEN
          leave lab_share_detail;
        end if;
       
        DELETE FROM tmp_share_detail WHERE station_telecode = sale_station_in 
         AND train_date = transform_date_in AND station_no = transform_no_in 
         AND define_range = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
         AND fetch_w_seat = fetch_w_seat_in AND start_seat_no = l_tmp_start_seat_no AND end_seat_no = l_tmp_end_seat_no  
         AND purpose_code = purpose_code_in AND seat_type_code = l_seat_type;

        
        IF fetch_w_seat_in = 1 THEN
          ITERATE lab_share_detail;
        end if;
        IF instr("3456ACFGHL",l_seat_type) > 0 THEN 
          ITERATE lab_share_detail;  
        end if;
        IF to_station_no_limit_in = '00' THEN
          SET to_station_no_limit_in = l_old_to_station_no_limit;
        end if;
        
        
        IF 1 = 1 OR range_in1 = 0 AND range_in2 = 0 AND range_in3 = 0 AND range_in4 = 0 AND range_in5 = 0 THEN  
          
          SET range_in1   = l_old_range1
          , range_in2   = l_old_range2
          , range_in3   = l_old_range3
          , range_in4   = l_old_range4
          , range_in5   = l_old_range5;
       
          IF l_tmp_range <> 255 THEN
           IF l_tmp_range = 0 THEN
             SET range_in = 0;  
             IF range_in1 = 0 THEN 
              SET range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
             ELSE 
              ITERATE lab_share_detail;
             end if;
           ELSEIF l_tmp_range = 1 THEN
             SET range_in = 1;  
             IF range_in2 = 1 THEN 
              SET range_in1 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
             ELSE 
              ITERATE lab_share_detail;
             end if;
           ELSEIF l_tmp_range = 2 THEN 
             SET range_in = 2;  
             IF range_in3 = 2 THEN 
              SELECT range_in1 = 255,range_in2 = 255,range_in4 = 255,range_in5 = 255;
             ELSE 
              ITERATE lab_share_detail;
             end if;
           ELSEIF l_tmp_range = 3 THEN 
             SET range_in = 3;  
             IF range_in4 = 3 THEN 
              SET range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in5 = 255;
             ELSE 
              ITERATE lab_share_detail;
             end if;
           ELSEIF l_tmp_range = 4 THEN 
             SET range_in = 4;  
             IF range_in5 = 4 THEN 
              SET range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255;
             ELSE 
              ITERATE lab_share_detail;
             end if;
           END if;
          
          ELSE
          SET range_in = 0;
          END if;
       
          
          CALL arith.DS50_Train_Time  (transform_date_in,train_no_in,train_code_in,seat_type_code_in,range_in,purpose_code_in,ticket_num_ary_in
          , range_in1,range_in2 ,range_in3 ,range_in4 ,range_in5 ,1
          , sale_station_in,1,l_sale_mode,l_return_code);
          IF l_return_code = 0 THEN 
           ITERATE lab_share_detail; 
          end if;
          
        END if;
        
        
        SELECT coach_no into l_seat_coach_no FROM center.left_base_center a
         WHERE  train_no  = train_no_in
         AND train_date = transform_date_in 
         AND station_no = transform_no_in
         AND assign_station = sale_station_in
         AND far_from_station_no <= to_station_no_limit_in 
         AND limit_station >= to_station_no_in
         AND coach_no   >= l_tmp_start_coach_no
         AND coach_no   <= l_tmp_end_coach_no
         AND coach_no NOT IN (SELECT DISTINCT start_coach_no FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) 
         AND seat_type_code = "W" 
         AND (( a.`range` >= range_in AND a.`range` <= window_range_in AND a.`range` in (range_in1,range_in2,range_in3,range_in4,range_in5) AND purpose_code = purpose_code_in)
          OR ( a.`range` = 0 AND range_in1 = 0 AND purpose_code != '00' AND purpose_code = purpose_code_in AND  assign_station = sale_station_in ) 
          )  
         AND ticket_quantity >= 1 LIMIT 1;
        IF ROW_COUNT() > 0 THEN 
          SET start_coach_no_in = l_tmp_start_coach_no
          , end_coach_no_in   = l_tmp_end_coach_no
          
          , start_seat_no_in  = l_tmp_start_seat_no
          , end_seat_no_in  = l_tmp_end_seat_no;

          
          IF EXISTS(SELECT 1 FROM tmp_share_schedule WHERE sale_station_in != transform_station_telecode_in AND station_telecode IN ('*',sale_station_in) AND start_coach_no = end_coach_no) THEN
          SET start_coach_no_in = l_seat_coach_no
           ,  end_coach_no_in   = l_seat_coach_no;
          END if;
          LEAVE lable_OK_return; 
        END if;
       
       END while lab_share_detail; 
       
       SET fetch_w_seat_in = 9 
       , transform_date_in= l_train_date
       , transform_no_in = l_from_station_no
       , sale_station_in  = transform_station_telecode_in 
       , range_in      = l_old_range
       , range_in1   = l_old_range1
       , range_in2   = l_old_range2
       , range_in3   = l_old_range3
       , range_in4   = l_old_range4
       , range_in5   = l_old_range5
       , start_coach_no_in = l_old_start_coach_no
       , end_coach_no_in  = l_old_end_coach_no
       , start_seat_no_in  = l_old_start_seat_no
       , end_seat_no_in  = l_old_end_seat_no
       , purpose_code_in  = l_old_purpose_code
       ,  to_station_no_limit_in = l_old_to_station_no_limit;
     END if;
     
   END if;
 END if;
 
 set Lable_OK_s = 0;
 end loop lable_OK_return;

 IF output_in = '9' THEN       
  SELECT '++++++++++++DBG.100.DS50_Proc_Share.OK_return++++++++++++';
  SELECT transform_no_in AS transform_no,purpose_code_in AS purpose_code,share_station_in AS share_station,l_multi_flag AS multi_flag;
 END if;

 
 
 IF l_from_station_no = transform_no_in THEN 
 
  SET start_coach_no_in = "00",end_coach_no_in = "A9",start_seat_no_in = "0000" ,end_seat_no_in = "9999"
  ,fetch_w_seat_in = l_old_fetch_w_seat, transform_date_in= l_train_date, transform_no_in = l_from_station_no,range_in = l_old_range
  ,range_in1 = l_old_range1, range_in2 = l_old_range2, range_in3 = l_old_range3, range_in4 = l_old_range4,range_in5 = l_old_range5
  ,purpose_code_in  = l_old_purpose_code,share_flag_in = '0',sale_station_in = l_old_sale_station,to_station_no_limit_in = l_old_to_station_no_limit;
 END if;
 
 
 IF l_multi_flag IS NULL THEN SET l_multi_flag = 0; end if;
 IF l_transform_num IS NULL THEN SET l_transform_num = 0; end if;

 
 IF share_station_in != '' AND l_multi_flag = 0 THEN
   SET @l_SQL = concat('INSERT INTO ' , share_station_in , ' VALUES("' , transform_date_in , '","' , transform_no_in , '","' , purpose_code_in , '",' , CONVERT(range_in,CHAR(3)) , ',' , CONVERT(fetch_w_seat_in,CHAR(1))
   , ',"' , share_flag_in , '","' , sale_station_in , '",' , CONVERT(range_in1,CHAR(3)) , ',' , CONVERT(range_in2,CHAR(3)) , ',' , CONVERT(range_in3,CHAR(3)) , ',' , CONVERT(range_in4,CHAR(3))
   , ',' , CONVERT(range_in5,CHAR(3)) , ',"' , start_coach_no_in , '","' , end_coach_no_in , '","' , start_seat_no_in , '","' , end_seat_no_in , '",' , CONVERT(l_transform_num,CHAR(5)) , ',"' , to_station_no_limit_in , '")');
  
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;
 END if;

  IF output_in = '9' THEN       
   SELECT '++++++-DBG.110.DS50_Proc_Share.OK_return.details++++++++++++++-',share_station_in;
   select '31====',share_string_in;
   if share_station_in != '' then 
    SET @l_SQL = concat('SELECT * FROM ' , share_station_in);
    select @l_SQL;
    prepare stmt_1 from @l_SQL;
    EXECUTE stmt_1;
  end if;
  END if;

 SET  return_in =0;
 IF output_in = '9' THEN
  select 'end DS50_Proc_Share';
 end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS50_Proc_Share_Pre`(IN `train_date_in` char(8),IN `train_no_in` char(12),IN `from_telecode_in` char(3),IN `seat_type_code_in` varchar(255),IN `purpose_code_in` varchar(255),IN `range_in` tinyint,OUT `share_string_in` varchar(8192),IN `out_in` tinyint,IN `sale_mode_in` char(1),IN `DBG_in` tinyint,OUT `return_in` int)
BEGIN
 DECLARE l_Version CHAR(30)

 ;DECLARE  l_train_code    CHAR(12)      
  ;DECLARE l_start_station_telecode CHAR(3)    
  ;DECLARE l_end_station_telecode CHAR(3)    
  ;DECLARE l_from_station_no    CHAR(2)
  ;DECLARE l_day_difference_from  TINYINT
  ;DECLARE l_fetch_w_seat    TINYINT     
  ;DECLARE l_share_flag     CHAR(1)
  ;DECLARE l_return_code    SMALLINT
  ;DECLARE l_rowcount     SMALLINT
  ;DECLARE l_error      SMALLINT
  ;DECLARE l_ticket_num_ary   VARCHAR(36)
  ;DECLARE l_output      CHAR(1) 
  ;DECLARE l_d1       DATETIME
  ;DECLARE l_d2       DATETIME
  ;DECLARE l_SQL       VARCHAR(255)
  ;DECLARE l_row       INTEGER
  ;DECLARE l_loc_share_string   VARCHAR(8192)
  ;DECLARE l_tmp_purpose    CHAR(2)
  ;DECLARE l_tmp_range     TINYINT
  ;DECLARE l_station_telecode   CHAR(8)
  ;DECLARE  l_transform_date   CHAR(8)  
  ;DECLARE  l_transform_no    CHAR(2)
  ;DECLARE  l_tmp_seat_type     CHAR(1)

 ;DECLARE  l_tmp_start_coach_no   CHAR(2)   ;DECLARE l_tmp_end_coach_no   CHAR(2)  ;DECLARE l_schedule_coach    CHAR(2);

  declare l_share_cache_flag char(1)  
  ;declare l_change_time datetime   
  ;declare l_modify_time datetime  
  ;declare l_my_modify_time datetime 
  ;declare l_diff_time1 integer   
  ;declare l_diff_time2 integer  
  ;declare l_table_change_time integer 
  ;declare l_table_modify_time integer 
  ;declare l_table_flag  char(1) 
  ;declare l_cur_change_time datetime 
  ;DECLARE lab1_s INT;
  declare call_return_value int;
  declare cccount int default 0;
 
 
 
 
 CREATE Temporary TABLE if not exists DS50_Proc_Share_Pre_tmp_share_pre
  ( station_telecode CHAR(8) NOT NULL
  , transform_date  CHAR(8) NOT NULL  
  , transform_no   CHAR(2) NOT NULL
  , fetch_w_seat   TINYINT NOT NULL
  , range_in      TINYINT NOT NULL
  , start_coach_no   CHAR(2) NOT NULL
  , end_coach_no    CHAR(2) NOT NULL
  , schedule_coach  CHAR(2) NOT NULL
  , purpose_code    VARCHAR(60) NOT NULL
  , seat_type_code   CHAR(30) NOT NULL
  );
  
  delete from DS50_Proc_Share_Pre_tmp_share_pre;

 Set Transaction Isolation Level Read uncommitted;

 SET l_Version = "Ver20120717.10:58";

 set lab1_s = 1;
 lab1:loop
 if lab1_s = 0 THEN
   leave lab1;
 end if;

 
 SET l_d1 = now();

 
 set l_fetch_w_seat = 0 
  ,  l_share_flag = sale_mode_in  
  ,  l_output = '0';

 
 IF DBG_in = 1 then 
  SET l_output = '9';
 end if;

 IF rtrim(seat_type_code_in) IS NULL THEN
  set seat_type_code_in = '%';
 end if;

 SET l_ticket_num_ary = '100000000000000000000000000000001000';

 
 IF ltrim(rtrim(seat_type_code_in)) = '%' THEN
  set seat_type_code_in = '0123456789ABCDTFGHIJKLMOPQS';
 end if;

 

 

 
 set l_table_change_time = 600 
  ,  l_table_modify_time = 120 
  ,  l_table_flag = '2'    
 ;

 
 SELECT CONVERT(share_string,CHAR)
  , change_time
  , modify_time
  , share_cache_flag
 INTO share_string_in,l_change_time,l_modify_time,l_share_cache_flag
  FROM center.DS50_Share_Pre_Cache a
  WHERE train_date = train_date_in
  AND train_no = train_no_in
  AND from_telecode = from_telecode_in
  AND purpose_code = purpose_code_in
  AND a.range = range_in ;

 set l_error =  @@error_count,l_rowcount = row_count();
 if l_output='9' then 
  select l_error,l_rowcount,train_date_in,train_no_in,from_telecode_in,purpose_code_in,range_in;
 end if;
 

 IF l_rowcount = 0 THEN 
   set l_table_flag = '0';
 ELSE
   set l_my_modify_time = NOW();
   
  
    set l_diff_time1 = TIMESTAMPDIFF(second,l_change_time,l_my_modify_time);
  
  set  l_diff_time2 = TIMESTAMPDIFF(second,l_modify_time,l_my_modify_time);
  
  set   l_table_flag = '1';
  
   IF l_share_cache_flag = '0' AND l_diff_time1 > l_table_change_time THEN
   UPDATE center.DS50_Share_Pre_Cache a SET share_cache_flag = '1', modify_time = l_my_modify_time
    WHERE  train_date = train_date_in
    AND train_no = train_no_in
    AND from_telecode = from_telecode_in
    AND purpose_code = purpose_code_in
    AND a.range = range_in 
    AND share_cache_flag = '0';
   ELSEIF l_share_cache_flag = '1' AND l_diff_time2 > l_table_modify_time THEN
    UPDATE center.DS50_Share_Pre_Cache a SET modify_time = l_my_modify_time
     WHERE  train_date = train_date_in
     AND train_no = train_no_in
     AND from_telecode = from_telecode_in
     AND purpose_code = purpose_code_in
     AND a.range = range_in 
     AND share_cache_flag = '1';
   ELSE 
    SET l_table_flag = '2';
   END if;
 end if;
 
 if l_output='9' then 
  SELECT l_table_flag;
 end if;

 
 IF l_table_flag != '2' THEN
   set l_train_code = train_no_in;
   
   if l_output='9' then 
   SELECT "101===call CS50_Get_Train_Parameter",l_train_code, l_start_station_telecode, l_end_station_telecode,NULL;
  end if;
   CALL arith.CS50_Get_Train_Parameter(l_train_code, l_start_station_telecode, l_end_station_telecode,NULL) ;
   if l_output='9' then 
   SELECT "102===end call CS50_Get_Train_Parameter",l_train_code, l_start_station_telecode, l_end_station_telecode,NULL;
  end if;
   IF l_train_code = '-1' THEN
    set l_return_code = -5;
    LEAVE lab1;
   end if;
   
  SELECT station_no,day_difference  
   into l_from_station_no,l_day_difference_from
   FROM basic.stop_time 
    WHERE train_no = train_no_in 
    AND station_telecode = from_telecode_in
    ORDER BY station_no LIMIT 1;  

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 THEN
    set l_return_code = -10;
    LEAVE lab1;
   END if;
  if l_output='9' then
   select train_date_in ,train_no_in,l_train_code
    , l_start_station_telecode , l_end_station_telecode 
    , from_telecode_in,l_from_station_no
    , seat_type_code_in , purpose_code_in, range_in  
    , l_day_difference_from
    , l_fetch_w_seat , l_share_flag
    , share_string_in
    , l_output 
    , l_ticket_num_ary;
  end if;
  
  
   
   begin
    
    
    declare output_train_date_in CHAR(8) ;
    declare output_transform_no CHAR(2);
    declare output_purpose_code VARCHAR(255);
    declare output_range_in TINYINT;
    declare output_fetch_w_seat TINYINT;    
    
    declare l_sale_station CHAR(3) ; 
    declare l_range1 TINYINT UNSIGNED; 
    declare l_range2 TINYINT UNSIGNED; 
    declare l_range3 TINYINT UNSIGNED; 
    declare l_range4 TINYINT UNSIGNED; 
    declare l_range5 TINYINT UNSIGNED;
    declare l_start_coach_no CHAR(2) ; 
    declare l_end_coach_no CHAR(2) ; 
    declare l_start_seat_no CHAR(4) ; 
    declare l_end_seat_no CHAR(4) ; 
 
    set output_train_date_in=train_date_in;
    set output_transform_no=l_from_station_no;
    set output_purpose_code = purpose_code_in;
    set output_range_in = range_in;
    set output_fetch_w_seat = l_fetch_w_seat;
    
    set l_sale_station = "" ;
    set l_range1 = 0 ;
    set l_range2 = 0 ;
    set l_range3 = 0 ;
    set l_range4 = 0 ;
    set l_range5 = 0 ; 
    set l_start_coach_no = "00" ;
    set l_end_coach_no = "A9" ;
    set l_start_seat_no = "0000" ;
    set l_end_seat_no = "9999" ;
    
    
    
    
    CALL arith.DS50_Proc_Share (
    output_train_date_in ,
    train_no_in, 
    l_train_code,
    l_start_station_telecode , 
    l_end_station_telecode, 
     from_telecode_in, 
    output_transform_no, 
    seat_type_code_in , 
    output_purpose_code, 
    output_range_in,
    l_day_difference_from, 
    output_fetch_w_seat , 
    l_share_flag, 
    share_string_in, 
    l_output ,
    l_sale_station , 
    "", 
    "" , 
    "" , 
     "" , 
    "" , 
    "" , 
    "" , 
    "" , 
    "" , 
     "" , 
    0 , 
    0 , 
    0 , 
    l_range1 , 
    l_range2 , 
    l_range3 , 
    l_range4 , 
    l_range5 , 
    0 , 
     0 , 
     0 , 
     0 , 
    0 , 
    l_start_coach_no , 
    l_end_coach_no , 
    l_start_seat_no , 
    l_end_seat_no , 
    "" , 
     l_ticket_num_ary, 
    '' , 
     '' , 
    '0000000000' , 
    '*' , 
    call_return_value);
   end ;
   if l_output = '9' then
    select l_share_flag,share_string_in;
   end if;
  
  
   
   IF l_share_flag <> '1' THEN
    SET share_string_in  = '';
   end if;

   
   set l_row   = 0 
   ,   l_rowcount = char_length(rtrim(share_string_in)) / 27
   ,   l_loc_share_string = '';

   tab_share_lable:
   WHILE l_row < l_rowcount DO
   
   set l_station_telecode = substring(share_string_in,l_row * 27 + 1,3);
   set l_transform_date  = substring(share_string_in,l_row * 27 + 1 + 3, 8);
   set l_transform_no    = substring(share_string_in,l_row * 27 + 1 + 3 + 8, 2);
   set l_fetch_w_seat   = CONVERT(substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2, 1),signed);
   set l_tmp_range    = CONVERT(substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2 + 1, 1),signed);
   set l_tmp_start_coach_no = substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1, 2);
   set l_tmp_end_coach_no = substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2, 2);
   set l_schedule_coach  = substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2, 2); 
   set l_tmp_purpose   = substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 5, 2);
   set l_tmp_seat_type  = substring(share_string_in,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 7, 1);

   
   IF EXISTS(SELECT 1 FROM DS50_Proc_Share_Pre_tmp_share_pre a WHERE station_telecode = l_station_telecode AND transform_date = l_transform_date AND transform_no = l_transform_no
     AND fetch_w_seat = l_fetch_w_seat AND a.range_in = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
     AND schedule_coach = l_schedule_coach AND purpose_code = l_tmp_purpose AND seat_type_code = l_tmp_seat_type) THEN
      set l_row = l_row + 1;
      ITERATE tab_share_lable;
   ELSEIF EXISTS(SELECT 1 FROM DS50_Proc_Share_Pre_tmp_share_pre a WHERE station_telecode = l_station_telecode AND transform_date = l_transform_date AND transform_no = l_transform_no
     AND fetch_w_seat = l_fetch_w_seat AND a.range_in = l_tmp_range AND start_coach_no = l_tmp_start_coach_no AND end_coach_no = l_tmp_end_coach_no
     AND schedule_coach = l_schedule_coach AND purpose_code = l_tmp_purpose AND seat_type_code = 'z') then
      set l_row = l_row + 1;
      ITERATE tab_share_lable;
  
  
  
  
  
  
  
  
   ELSE 
    
     
     INSERT INTO DS50_Proc_Share_Pre_tmp_share_pre VALUES 
     (l_station_telecode,l_transform_date,l_transform_no,l_fetch_w_seat,l_tmp_range,l_tmp_start_coach_no,l_tmp_end_coach_no
     ,l_schedule_coach,l_tmp_purpose,l_tmp_seat_type);
     set l_loc_share_string = concat(rtrim(l_loc_share_string) , substring(share_string_in,l_row * 27 + 1,27));
   END if;
   set l_row = l_row + 1;
   END WHILE tab_share_lable;
   set share_string_in = l_loc_share_string;
 END if;

 
 IF l_table_flag != '2' THEN
  
   IF l_table_flag ='0' THEN
    if l_output='9' then
     select train_date_in, train_no_in , from_telecode_in , '%'
     , purpose_code_in, range_in , share_string_in , now(), now(), '0';
    end if;
    INSERT INTO center.DS50_Share_Pre_Cache
    VALUES(train_date_in, train_no_in , from_telecode_in , '%'
     , purpose_code_in, range_in , share_string_in , now(), now(), '0');
   ELSE
    UPDATE center.DS50_Share_Pre_Cache a
     SET share_string = share_string_in
     ,change_time = now()
     ,modify_time = now()
     ,share_cache_flag = '0'
     WHERE  train_date = train_date_in
     AND train_no  = train_no_in
     AND from_telecode = from_telecode_in
     AND purpose_code  = purpose_code_in
     AND a.range = range_in 
     AND share_cache_flag = '1'
     AND modify_time = l_my_modify_time;
   END if;
 END if;
 
 if l_output='9' then 
  select '201====';
 end if;
 
 set l_d2 = now();

 set l_SQL = concat('Consume Time:', rtrim(CONVERT(TIMEDIFF(l_d2,l_d1),CHAR)) , 'ms');

 IF out_in = 1 then 
   SELECT substring(share_string_in,1,243);
 ELSEIF out_in = 2 THEN 
   SELECT l_SQL;
 end if;
 if l_output='9' then 
  select '202====';
 end if;
 SET return_in= 0;
 

 set lab1_s = 0;
 end loop lab1;

 set return_in = l_return_code;

 Commit;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS50_Train_Time`(IN `train_date_in` CHAR(8),IN `train_no_in` CHAR(12),IN `train_code_in` CHAR(8),IN `seat_type_code_in` CHAR(1),IN `range_in` tinyint unsigned,IN `purpose_code_in` CHAR(2),IN `ticket_num_ary_in` CHAR(36),INOUT `range_in1` tinyint unsigned,INOUT `range_in2` tinyint unsigned ,INOUT `range_in3` tinyint unsigned,INOUT `range_in4` tinyint unsigned,INOUT `range_in5` tinyint unsigned,IN `output_in` tinyint unsigned,IN `station_telecode_in` CHAR(3),IN `flag_in` tinyint unsigned,IN `sale_mode_in` CHAR(1),OUT `return_in` int)
BEGIN
 DECLARE l_Version CHAR(30)
 ;DECLARE l_C_train_date   CHAR(8)  ;DECLARE   l_C_seat_type_code   CHAR(1)
  ;DECLARE    l_C_ticket_type    tinyint unsigned  ;DECLARE   l_C_range       tinyint unsigned
  ;DECLARE   l_C_train_divide    CHAR(1)  ;DECLARE   l_C_train_code     CHAR(8)
  ;DECLARE   l_C_days      SMALLINT  ;DECLARE   l_C_flag        SMALLINT
  ;DECLARE   l_C_ahead_time    CHAR(4)  ;DECLARE   l_C_station_telecode  CHAR(3)
  ;DECLARE   l_return_code    SMALLINT  ;DECLARE   l_v_Days       SMALLINT
  ;DECLARE   l_train_type     CHAR(1)  ;DECLARE   l_ticket_type      tinyint unsigned
  ;DECLARE   l_ticket_id     tinyint unsigned  ;DECLARE   l_ticket_num_by_type  tinyint unsigned
  ;DECLARE   l_ticket_num   SMALLINT  ;DECLARE   l_old_ticket_type  SMALLINT
  ;DECLARE   l_ticket_type_list CHAR(32)  ;DECLARE   l_today      CHAR(8) 
  ;DECLARE   l_start_datetime  DATETIME  ;DECLARE   l_ticket_type_flag   tinyint unsigned 
  ;DECLARE   l_bureau_code   CHAR(1)  ;DECLARE   l_start_station_name CHAR(10)
  ;DECLARE   l_end_station_name CHAR(10)  ;DECLARE   l_start_tele_code  CHAR(3)
  ;DECLARE   l_end_tele_code  CHAR(3)  ;DECLARE   l_tmp_train_code   CHAR(12)
  ;DECLARE   l_rowcount    SMALLINT  ;DECLARE   l_error      SMALLINT
  ;DECLARE   l_relate_sale_mode CHAR(1)  ;DECLARE   l_start_bureau_code  CHAR(1)
  ;DECLARE   l_SQL     VARCHAR(255);DECLARE   l_error_txt    VARCHAR(128)
  ;DECLARE   l_tmp_date    CHAR(8)  ;DECLARE   l_now_datetime   VARCHAR(30);

 
 DECLARE l_group_code char(20)
  ;DECLARE l_train_class_code char(1)
  ;DECLARE l_C_from_period tinyint unsigned
  ;DECLARE l_C_control_min_date char(8)
  ;DECLARE l_C_start_date char(8)
  ;DECLARE l_max_level_flag char(1)
 
 
 
 ;DECLARE l_old_range1 tinyint unsigned ;DECLARE l_old_range2   tinyint unsigned ;DECLARE l_old_range3   tinyint unsigned ;DECLARE l_old_range4   tinyint unsigned ;DECLARE l_old_range5   tinyint unsigned ;
   DECLARE OK_RETURN_s int;
 Declare record_not_found Integer Default 0;

 DECLARE cur_train_para_define CURSOR FOR
  SELECT train_date,days,ticket_type,l_range,ahead_time,station_telecode,train_code,from_period,control_min_date,start_date 
   FROM  ds50_train_time_tmp_train_para_define
  ORDER BY level_flag desc,train_code,station_telecode,group_code,ticket_type,purpose_code,l_range,seat_type_code,train_divide,train_class,sale_mode; 

 Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;

 
 lab_exit:loop 
 
 
 CREATE Temporary TABLE  if not exists ds50_train_time_tmp_train_para_define
 (train_date   CHAR(8) NOT NULL,
 train_code   CHAR(8) NOT NULL,
 seat_type_code CHAR(1) NOT NULL,
 ticket_type   tinyint unsigned NOT NULL,
 l_range    tinyint unsigned NOT NULL,
 train_divide  CHAR(1) NOT NULL,
 days     SMALLINT NOT NULL,
 ahead_time   CHAR(4) NOT NULL 
 ,purpose_code  CHAR(10) NOT NULL 
 ,station_telecode CHAR(3) NOT NULL  
 ,sale_mode   CHAR(1) NOT NULL 
 
 ,group_code char(20) not null
 ,train_class char(1) not null
 ,level_flag char(1) not null
 ,from_period tinyint unsigned not null
 ,control_min_date char(8) not null
 ,start_date char(8) not null
 
 );
  Truncate Table ds50_train_time_tmp_train_para_define;
 
 CREATE Temporary TABLE if not exists ds50_train_time_tmp_group
 (
 group_code char(20)   NOT NULL
 );
 Truncate Table ds50_train_time_tmp_group;

 Set Transaction Isolation Level Read uncommitted;

 set l_Version = "Ver20140701.16:20"; 
        
 set l_old_range1 = range_in1  , l_old_range2 = range_in2 , l_old_range3 = range_in3 , l_old_range4 = range_in4 , l_old_range5 = range_in5;
 
 
 set range_in1 = 0, range_in2 = 1, range_in3 = 2, range_in4 = 3, range_in5 = 4 ;
 
 

 set OK_RETURN_s = 1;
 OK_RETURN:loop
 if OK_RETURN_s = 0 THEN
   leave OK_RETURN;
 end if;

 
 IF seat_type_code_in = 'W' THEN
  set seat_type_code_in = '1';
 end if;

 set l_today = CURDATE()+0;

 SELECT train_type_code,start_station_name,end_station_name
 ,train_class_code 
  into l_train_type,l_start_station_name,l_end_station_name,l_train_class_code
  FROM basic.train_dir 
  WHERE subbureau_code  = substring(train_no_in, 1, 2)
  AND train_code   = train_code_in
  AND double_id    = substring(train_no_in, 11, 1)
  AND schema_id    = substring(train_no_in, 12, 1) ;
 
 set l_error =  @@error_count,l_rowcount = row_count();
 if output_in='9' then
   select '1===come is here',l_rowcount,l_error;
  end if;
 IF l_rowcount = 0 OR l_error !=0 Then
   IF flag_in = 0 THEN
    select "22565 å–ç¥¨æ—¶,èŽ·å–è½¦æ¬¡ç›®å½•ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!";
    set return_in=0;  
    leave lab_exit;
   end if;
 END if;

 
 SELECT bureau_code 
  into l_bureau_code
  FROM basic.station_dictionary
   WHERE station_telecode = station_telecode_in;
 
 set l_error =  @@error_count,l_rowcount = row_count();
 if output_in='9' then
   select '2===come is here',l_rowcount,l_error;
 end if;
 IF l_rowcount = 0 OR l_error !=0 Then
   set l_SQL = "å–ç¥¨æ—¶,èŽ·å–è½¦ç«™"" + station_telecode_in + ""å­—å…¸ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!";
   IF flag_in = 0 THEN
    select concat( '22565 ',l_SQL);
    set return_in=0;  
    leave lab_exit;
   end if;
 END if;
 if output_in='9' then
   select '3_1===come is here',l_start_station_name;
   end if;
 SELECT station_telecode 
  into l_start_tele_code
  FROM basic.station_dictionary 
 WHERE  station_name = l_start_station_name;
 if output_in='9' then
  select '3_2===come is here',l_start_station_name;
  end if;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 OR l_error != 0 THEN
  set l_SQL = "å–ç¥¨æ—¶,èŽ·å–è½¦ç«™"" + l_start_station_name + ""å­—å…¸ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!";
  IF flag_in = 0 THEN
   select concat( '22565', l_SQL);
   set return_in=0;  
   leave lab_exit;
  end if;
 END if;

 SELECT station_telecode 
 into  l_end_tele_code
  FROM basic.station_dictionary 
 WHERE  station_name = l_end_station_name;
 
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 OR l_error != 0 THEN
   set l_SQL = "å–ç¥¨æ—¶,èŽ·å–è½¦ç«™"" + l_end_station_name + ""å­—å…¸ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!";
   IF flag_in = 0 THEN
    SELECT concat(' 22565 ' ,"å–ç¥¨æ—¶,èŽ·å–è½¦ç«™",l_end_station_name, "å­—å…¸ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!");
    set return_in=0;  
    leave lab_exit;
   end if;
 END if;

 
 SELECT inner_code 
 into l_start_bureau_code
  FROM basic.DG50_train_admin_auth
  WHERE train_code      = train_code_in
   AND start_station_telecode = l_start_tele_code
   AND end_station_telecode   = l_end_tele_code
   AND station_telecode    = station_telecode_in;

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 THEN
   set l_start_bureau_code = l_bureau_code;
 end if;
 IF l_error != 0 THEN
   set l_SQL = "å–ç¥¨æ—¶,èŽ·å–è½¦æ¬¡ç®¡ç†æƒé™ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!";
   IF flag_in = 0 then
    select concat('22565 ', l_SQL);
    set return_in=0;  
    leave lab_exit;
   end if;
 END if;

 
 IF train_code_in IN ('Q97','Q98') then
  set l_bureau_code = 'P',l_start_bureau_code = 'P';
 ELSEIF train_code_in IN ('Q99','Q100') THEN
  set l_bureau_code = 'H',l_start_bureau_code = 'H';
 end if;

 
 IF sale_mode_in != 'A' THEN
   SELECT field_name
   into l_relate_sale_mode
   FROM basic.DG50_little_dictionary
   WHERE little_code  = 'e'
   AND field_code  = sale_mode_in;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount != 0 AND l_error = 0 THEN
    set sale_mode_in = l_relate_sale_mode;
   end if;
 END if;
  

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 insert into ds50_train_time_tmp_group select group_code
 from basic.DJ52_train_group_define
 where inner_code = l_start_bureau_code 
 and module_code = 'J' 
 and type_code = 'T' 
 and start_station_telecode = station_telecode_in;

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN
   set l_SQL = "å–ç¥¨æ—¶,ä¹˜è½¦ç«™åˆ†ç»„ä¿¡æ¯å¤±è´¥,ä¸èƒ½å”®ç¥¨!";
   IF flag_in = 0 THEN
    select concat( '22565 ',l_SQL);
    set return_in=0;  
    leave lab_exit;
   end if;
 END if;

 
 

 
 
 INSERT INTO ds50_train_time_tmp_train_para_define 
  SELECT control_train_day,train_code,seat_type_code,ticket_type,a.range,train_type,control_day
  , RIGHT(concat("0000" , rtrim(ltrim(CONVERT(ahead_time,CHAR(4))))),4)  AS ahead_time
  ,  purpose_code
  , station_telecode
  , flag1 
  ,group_code,train_class,level_flag,from_period,control_min_date,start_date 
   FROM basic.DJ50_train_sale_define a
   WHERE inner_code   = l_start_bureau_code
   AND start_date  <= l_today
   AND stop_date   >= l_today
   AND (train_code  = train_code_in AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name)
   AND station_telecode = "*"               
   AND (train_type = l_train_type OR train_type = "*")       
   AND (seat_type_code = seat_type_code_in OR seat_type_code = '*')   
   AND (purpose_code   = purpose_code_in OR purpose_code = "*")     
   AND (flag1 = sale_mode_in OR flag1 = '*')          
   AND flag2 = '1' 
   
   AND (group_code in (select group_code from ds50_train_time_tmp_group) OR group_code = '*')
   AND (train_class = l_train_class_code OR train_class = "*") ; 

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 AND l_error = 0 THEN

  
   delete from ds50_train_time_tmp_group;
   
   insert into ds50_train_time_tmp_group select group_code
   from basic.DJ52_train_group_define
   where inner_code = l_bureau_code 
   and module_code = 'J' 
   and type_code = 'T' 
   and start_station_telecode = station_telecode_in;
   
   INSERT INTO ds50_train_time_tmp_train_para_define 
   SELECT control_train_day,train_code,seat_type_code,ticket_type,a.range,train_type,control_day
    , RIGHT(concat("0000" , rtrim(ltrim(CONVERT(ahead_time,CHAR(4))))),4)  AS ahead_time
    ,  purpose_code
    , station_telecode
    , flag1 
    ,group_code,train_class,level_flag,from_period,control_min_date,start_date 
    FROM basic.DJ50_train_sale_define a
    WHERE  inner_code  = l_bureau_code
    AND start_date  <= l_today
    AND stop_date   >= l_today
    AND ( (train_code = train_code_in AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name)
      OR (train_code = "*")
      OR (train_code != train_code_in AND train_code_in LIKE train_code)
     )
    AND (station_telecode = station_telecode_in OR station_telecode = "*") 
    AND (train_type = l_train_type OR train_type = "*")
    AND (seat_type_code = seat_type_code_in OR seat_type_code = '*') 
    AND (purpose_code   = purpose_code_in OR purpose_code = "*") 
    AND (flag1 = sale_mode_in OR flag1 = '*')
    AND flag2 IN ('*','')
    
    AND (group_code in (select group_code from ds50_train_time_tmp_group) OR group_code = '*')
    AND (train_class = l_train_class_code OR train_class = "*"); 

   set l_error =  @@error_count,l_rowcount = row_count();
 END if;
 IF l_rowcount > 0 AND l_error = 0 THEN
   
   set l_ticket_num =ascii(substring( ticket_num_ary_in, 33, 1 )) - 48
    , l_ticket_id = 1
    , l_ticket_type_list = ""
    , l_ticket_type = 0
    , l_ticket_num_by_type = 0;
   
   lable_while2:
   WHILE l_ticket_id <= l_ticket_num AND l_ticket_type <= 32 DO 
    IF l_ticket_num_by_type = 0 THEN
     set l_ticket_type = l_ticket_type + 1;
     set l_ticket_num_by_type = ascii(substring( ticket_num_ary_in, l_ticket_type, 1 )) - 48;
     Iterate lable_while2;
    END if;
   
    
    IF EXISTS(SELECT 1 FROM ds50_train_time_tmp_train_para_define WHERE ticket_type = l_ticket_type) THEN
      IF charindex(CHAR( l_ticket_type + 48 ),l_ticket_type_list) = 0 THEN 
      set l_ticket_type_list = ltrim(rtrim(l_ticket_type_list)) + CHAR( l_ticket_type + 48 );
      END if;
    ELSEIF EXISTS(SELECT 1 FROM ds50_train_time_tmp_train_para_define WHERE ticket_type = 0) THEN
      IF instr(l_ticket_type_list,CHAR( l_ticket_type + 48 )) = 0 THEN 
      set l_ticket_type_list = ltrim(rtrim(l_ticket_type_list)) + CHAR( l_ticket_type + 48 );
      end if;
    END if;
    

    set l_ticket_num_by_type = l_ticket_num_by_type - 1
     , l_ticket_id = l_ticket_id + 1;
   END while lable_while2; 
  set l_ticket_type_list = "0" + l_ticket_type_list; 

  
  DELETE FROM ds50_train_time_tmp_train_para_define WHERE instr(l_ticket_type_list,CHAR(ticket_type + 48)) = 0; 
  

  
  IF sale_mode_in IN ('E','D') THEN 
  SELECT min(days) into l_C_days FROM ds50_train_time_tmp_train_para_define WHERE sale_mode = sale_mode_in;
  IF l_C_days IS NULL THEN                 
   SELECT min(days) into l_C_days FROM ds50_train_time_tmp_train_para_define;
   IF l_C_days IS NULL then
    set l_C_days = 99;
   end if;
  END if;
  ELSE 
  SELECT min(days) into l_C_days FROM ds50_train_time_tmp_train_para_define;
  END if;
  IF length(rtrim(l_ticket_type_list)) > 2 
  AND (substring( ticket_num_ary_in,3,1) != '0' OR substring( ticket_num_ary_in,12,1) != '0' ) THEN
  UPDATE ds50_train_time_tmp_train_para_define SET days = l_C_days;
  END if;
  

  
  set l_v_Days=timestampdiff(DAY,train_date_in,curdate());
  set l_C_flag = 0 
  ,  l_ticket_type_flag = 0;

  select max(level_flag) into l_max_level_flag                        
   from ds50_train_time_tmp_train_para_define;                     

  delete from ds50_train_time_tmp_train_para_define where level_flag <> l_max_level_flag;   

  set record_not_found = 0;

  
  OPEN cur_train_para_define;

  loop_train_para_define: 
  WHILE 1=1 DO
   FETCH cur_train_para_define INTO l_C_train_date,l_C_days,l_C_ticket_type,l_C_range,l_C_ahead_time,l_C_station_telecode,l_C_train_code
   ,l_C_from_period,l_C_control_min_date,l_C_start_date; 

   if record_not_found = 1 THEN
     leave loop_train_para_define;
   end IF;

   
   set l_start_datetime = CONVERT( concat(CURDATE()+0 , " "  
    , substring(l_C_ahead_time,1,2) , ":" , substring(l_C_ahead_time,3,2) , ":00") ,DATETIME );

   set l_error_txt = '';

   
   IF l_C_ahead_time <> "0000" THEN
     
     IF l_C_days = l_v_Days THEN                     
      set l_error_txt = concat(char(10) , char(10) , char(10) , 'æœ¬æ¬¡è½¦ä»Žä»Šæ—¥' , substring(l_C_ahead_time,1,2) , ':' , substring(l_C_ahead_time,3,2) , 'å¼€å§‹å‘å”®"' , train_date_in , '"æ—¥ç¥¨é¢!' , char(10));
     ELSEIF l_C_days < l_v_Days THEN                   
     set l_tmp_date = date_format(date_add(train_date_in, INTERVAL - l_C_days DAY),'%Y%m%d');   
     set l_error_txt = concat(char(10) , char(10) , char(10) , 'æœ¬æ¬¡è½¦ä»Ž"' , l_tmp_date , '"æ—¥' , substring(l_C_ahead_time,1,2) , ':' , substring(l_C_ahead_time,3,2) , 'å¼€å§‹å‘å”®"' , train_date_in + '"æ—¥ç¥¨é¢!' , char(10));
     END if;
     
     
     
     set l_now_datetime = concat(date_format(now(),'%Y/%m/%d') , ' ' ,  date_format(now(),'%H:%i:%s'));
     
     IF (timediff( l_now_datetime,l_start_datetime) < 0)  THEN 
     set l_C_days = l_C_days - 1; 
     END if;
   END if;
   

   
   IF l_C_train_date >= train_date_in THEN
     set l_C_flag = 1; 
     IF l_C_range = 0 THEN
      set range_in1 = 0;
     ELSEIF l_C_range = 1 THEN 
      set range_in2 = 1;
     ELSEIF l_C_range = 2 THEN 
      set range_in3 = 2;
     ELSEIF l_C_range = 3 THEN 
      set range_in4 = 3;
     ELSEIF l_C_range = 4 THEN 
      set range_in5 = 4;
     ELSEIF l_C_range = 255 THEN 
      set range_in1 = 0,range_in2 = 1,range_in3 = 2,range_in4 = 3,range_in5 = 4;
     END if;
   ELSE 
     set l_error_txt = concat(char(10) , char(10) , char(10) , 'æœ¬æ¬¡è½¦åªèƒ½å‘å”®"' , l_C_train_date , '"æ—¥ä¹‹å†…çš„ç¥¨é¢!' , char(10));
     
     IF l_C_range = 255 THEN
      set range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
     ELSEIF l_C_range = 0 THEN 
      set range_in1 = 255;
     ELSEIF l_C_range = 1 THEN 
      set range_in2 = 255;
     ELSEIF l_C_range = 2 THEN 
      set range_in3 = 255;
     ELSEIF l_C_range = 3 THEN 
      set range_in4 = 255;
     ELSEIF l_C_range = 4 THEN 
      set range_in5 = 255;
     end if;
     set l_C_flag = 0;
     Iterate loop_train_para_define; 
   END if;

   
   
   
   IF (l_C_days >= l_v_Days and sale_mode_in <> 'D') or (l_C_days >= l_v_Days and l_v_Days >= l_C_from_period and sale_mode_in = 'D') THEN
     set l_C_flag = 1; 
     IF l_C_range = 0 THEN set range_in1 = 0;
     ELSEIF l_C_range = 1 THEN set range_in2 = 1;
     ELSEIF l_C_range = 2 THEN set range_in3 = 2;
     ELSEIF l_C_range = 3 THEN set range_in4 = 3;
     ELSEIF l_C_range = 4 THEN set range_in5 = 4;
     ELSEIF l_C_range = 255 THEN set range_in1 = 0,range_in2 = 1,range_in3 = 2,range_in4 = 3,range_in5 = 4;
     END if;
   ELSE
     
     IF l_C_range = 255 THEN set range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
     ELSEIF l_C_range = 0 THEN set range_in1 = 255;
     ELSEIF l_C_range = 1 THEN set range_in2 = 255;
     ELSEIF l_C_range = 2 THEN set range_in3 = 255;
     ELSEIF l_C_range = 3 THEN set range_in4 = 255;
     ELSEIF l_C_range = 4 THEN set range_in5 = 255;
     end if;
     set l_C_flag = 0   ;
     Iterate loop_train_para_define; 
   END if;
   
   
   IF l_today = l_C_start_date and l_C_ahead_time <> "0000" THEN
     IF timediff( l_now_datetime,l_start_datetime) < 0 and train_date_in > l_C_control_min_date THEN
      
      set l_error_txt = concat(char(10) , char(10) , char(10) , 'æœ¬æ¬¡è½¦åœ¨' , substring(l_C_ahead_time,1,2) , ':' , substring(l_C_ahead_time,3,2) , 'ä¹‹å‰,åªèƒ½å‘å”®åˆ°â€œ' , l_C_control_min_date , 'â€æ—¥' , char(10));
      
      IF l_C_range = 255 THEN set range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
      ELSEIF l_C_range = 0 THEN set range_in1 = 255;
      ELSEIF l_C_range = 1 THEN set range_in2 = 255;
      ELSEIF l_C_range = 2 THEN set range_in3 = 255;
      ELSEIF l_C_range = 3 THEN set range_in4 = 255;
      ELSEIF l_C_range = 4 THEN set range_in5 = 255;
      end if;
      set l_C_flag = 0   ;
      Iterate loop_train_para_define; 
     END if;
   END if;
   

   IF char_length(rtrim(l_ticket_type_list)) > 1 THEN
     
     IF l_ticket_type_flag = 0 THEN
      IF INSTR(l_ticket_type_list,CHAR(48+l_C_ticket_type)) > 0 THEN  set l_ticket_type_flag = 1;
      ELSEIF l_C_ticket_type = 0 THEN set l_ticket_type_flag = 1;
      end if;

      IF l_C_ticket_type > 0 THEN 
        IF substring(ticket_num_ary_in,l_C_ticket_type,1) = "0" THEN 
         IF l_C_range = 255 THEN set range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
         ELSEIF l_C_range = 0 THEN set range_in1 = 255;
         ELSEIF l_C_range = 1 THEN set range_in2 = 255;
         ELSEIF l_C_range = 2 THEN set range_in3 = 255;
         ELSEIF l_C_range = 3 THEN set range_in4 = 255;
         ELSEIF l_C_range = 4 THEN set range_in5 = 255;
         end if;
         Iterate loop_train_para_define; 
        ELSE 
         IF l_C_range = 0 THEN set range_in1 = 0;
         ELSEIF l_C_range = 1 THEN set range_in2 = 1;
         ELSEIF l_C_range = 2 THEN set range_in3 = 2;
         ELSEIF l_C_range = 3 THEN set range_in4 = 3;
         ELSEIF l_C_range = 4 THEN set range_in5 = 4;
         ELSEIF l_C_range = 255 THEN set range_in1 = 0,range_in2 = 1,range_in3 = 2,range_in4 = 3,range_in5 = 4;
         end if;
        END if;
      ELSEIF l_C_ticket_type = 0 THEN 
        IF l_C_range = 0 THEN set range_in1 = 0;
        ELSEIF l_C_range = 1 THEN set range_in2 = 1;
        ELSEIF l_C_range = 2 THEN set range_in3 = 2;
        ELSEIF l_C_range = 3 THEN set range_in4 = 3;
        ELSEIF l_C_range = 4 THEN set range_in5 = 4;
        ELSEIF l_C_range = 255 THEN set range_in1 = 0,range_in2 = 1,range_in3 = 2,range_in4 = 3,range_in5 = 4;
        end if;
      END if;
     
     END if;
   ELSE
     IF l_C_ticket_type > 0 THEN
      IF substring(ticket_num_ary_in,l_C_ticket_type,1) = "0" THEN 
        IF l_C_range = 255 THEN set range_in1 = 255,range_in2 = 255,range_in3 = 255,range_in4 = 255,range_in5 = 255;
        ELSEIF l_C_range = 0 THEN set range_in1 = 255;
        ELSEIF l_C_range = 1 THEN set range_in2 = 255;
        ELSEIF l_C_range = 2 THEN set range_in3 = 255;
        ELSEIF l_C_range = 3 THEN set range_in4 = 255;
        ELSEIF l_C_range = 4 THEN set range_in5 = 255;
        end if;
        Iterate loop_train_para_define; 
      ELSE 
        IF l_C_range = 0 THEN set range_in1 = 0;
        ELSEIF l_C_range = 1 THEN set range_in2 = 1;
        ELSEIF l_C_range = 2 THEN set range_in3 = 2;
        ELSEIF l_C_range = 3 THEN set range_in4 = 3;
        ELSEIF l_C_range = 4 THEN set range_in5 = 4;
        ELSEIF l_C_range = 255 THEN set range_in1 = 0,range_in2 = 1,range_in3 = 2,range_in4 = 3,range_in5 = 4;
        end if;
      END if;
     ELSEIF l_C_ticket_type = 0 THEN 
      IF l_C_range = 0 THEN set range_in1 = 0;
      ELSEIF l_C_range = 1 THEN set range_in2 = 1;
      ELSEIF l_C_range = 2 THEN set range_in3 = 2;
      ELSEIF l_C_range = 3 THEN set range_in4 = 3;
      ELSEIF l_C_range = 4 THEN set range_in5 = 4;
      ELSEIF l_C_range = 255 THEN set range_in1 = 0,range_in2 = 1,range_in3 = 2,range_in4 = 3,range_in5 = 4;
      end if;
     END if;
     
   END if;
  end while loop_train_para_define;
  CLOSE cur_train_para_define;
  
  
  
  
  IF range_in1 = 255 AND range_in2 = 255 AND range_in3 = 255 AND range_in4 = 255 AND range_in5 = 255 THEN
   IF output_in = 9 then
     SELECT '################-DBG.DS50_Train_Time.####################';
     SELECT purpose_code_in AS purpose_code,flag_in AS flag ,sale_mode_in AS sale_mode,l_error_txt AS error_txt;
   END if;
   IF flag_in = 0 AND sale_mode_in IN ('A','C') THEN 
     SELECT concat('22565',l_error_txt);       
     leave lab_exit;
   end if;
   set return_in = 0;  
  END if;
  

  leave ok_RETURN;  
 END IF;
 
 set OK_RETURN_s = 0;
 end loop ok_RETURN;

 
 IF range_in1 = 0 THEN 
  IF (0 IN (l_old_range1,l_old_range2,l_old_range3,l_old_range4,l_old_range5) ) THEN set range_in1 = 0;
  ELSE set range_in1 = 255;
  end if;
 END if;
 IF range_in2 = 1 THEN  
  IF (1 IN (l_old_range1,l_old_range2,l_old_range3,l_old_range4,l_old_range5) ) THEN set range_in2 = 1;
  ELSE set range_in2 = 255;
  end if;
 END if;
 IF range_in3 = 2 THEN  
  IF (2 IN (l_old_range1,l_old_range2,l_old_range3,l_old_range4,l_old_range5) ) THEN set range_in3 = 2;
  ELSE set range_in3 = 255;
  end if;
 END if;
 IF range_in4 = 3 THEN  
  IF (3 IN (l_old_range1,l_old_range2,l_old_range3,l_old_range4,l_old_range5) ) THEN set range_in4 = 3;
  ELSE set range_in4 = 255;
  end if;
 END if;
 IF range_in5 = 4 THEN  
  IF (4 IN (l_old_range1,l_old_range2,l_old_range3,l_old_range4,l_old_range5) ) THEN set range_in5 = 4;
  ELSE set range_in5 = 255;
  end if;
 END if;
 

 set return_in = 1;
  

 Commit;
 leave lab_exit;
 end loop lab_exit;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_left_train`(IN `c_train_date_in` CHAR(8),IN `c_train_no_in` CHAR(12),IN `c_purpose_code_in` VARCHAR(255),IN `tele_code_in` CHAR(3),IN `range_in` tinyint unsigned,IN `office_no_in` CHAR(7),IN `window_no_in` tinyint unsigned,IN `flag_in` tinyint unsigned,IN `from_station_in` CHAR(10),IN `to_station_in` CHAR(10),IN `sale_mode_in` CHAR(1),IN `day_diff_in` tinyint unsigned,IN `debug_in` tinyint unsigned,OUT `return_out` int)
BEGIN
 DECLARE l_Version CHAR(20);
 Declare l_train_no    CHAR(12)     ;DECLARE l_From_Station_No    CHAR(2)                                             
  ;DECLARE l_train_date     CHAR(8)              ;DECLARE l_to_station_name    CHAR(10)                                           
  ;DECLARE l_start_time     CHAR(4)                                                       
  ;DECLARE l_station_train_code  CHAR(8)              ;DECLARE l_arrive_time     CHAR(4)                                               
  ;DECLARE l_station_no     CHAR(2)              ;DECLARE l_share_train_flag    INT                                            
  ;DECLARE l_coach_no     CHAR(2)              ;DECLARE l_city_code      CHAR(4)                                               
  ;DECLARE l_board_station_no   CHAR(2)              ;DECLARE  l_start_station_telecode  CHAR(3)                                         
  ;DECLARE l_From_To_Flag   CHAR(1)              ;DECLARE l_end_station_telecode  CHAR(3)                                             
  ;DECLARE l_to_station_no   CHAR(2)              ;DECLARE l_end_start_time    CHAR(4)
  ;DECLARE l_limit_station    CHAR(2)              ;DECLARE l_seat_feature     CHAR(1) 
  ;DECLARE l_limit_station_name  CHAR(10)             ;DECLARE l_start_datetime    DATETIME                                              
  ;DECLARE l_purpose_code    CHAR(2)              ;DECLARE l_error       SMALLINT 
  ;DECLARE l_purpose_name    CHAR(8)              ;DECLARE l_limit_station_time   CHAR(4)  
  ;DECLARE l_seat_type_code   CHAR(1)              ;DECLARE l_start_sale_time    CHAR(4) 
  ;DECLARE l_seat_type_name   CHAR(8)              ;DECLARE l_purpose_num     INTEGER 
  ;DECLARE l_coach_num     INTEGER              ;DECLARE l_inner_code      CHAR(3)  
  ;DECLARE l_from_station_name  CHAR(10)             ;DECLARE l_rowcount       SMALLINT             
  ;DECLARE l_today      CHAR(8)             ;DECLARE l_ticket_quantity     INTEGER              
  ;DECLARE l_up_quantity    INTEGER              ;DECLARE l_mid_quantity      INTEGER              
  ;DECLARE l_down_quantity    INTEGER              ;DECLARE l_far_from_station_no    CHAR(2)              
  ;DECLARE l_far_from_station_name CHAR(10)            ;DECLARE l_assign_station     CHAR(3)                                                             
  ;DECLARE l_From_Range    tinyint unsigned            ;DECLARE l_To_Range       tinyint unsigned            
  ;DECLARE l_day_difference_from  SMALLINT           ;DECLARE l_day_difference_to    SMALLINT 
  ;DECLARE l_left_new     tinyint unsigned             ;DECLARE l_SQL        VARCHAR(512) 
  ;DECLARE l_train_code    CHAR(12);
 DECLARE lab_exit_s int;DECLARE lab_lab1_s int;
 Declare record_not_found Integer Default 0;
 DECLARE l_return_code INTEGER;
 
declare proc_stat_start datetime;
   declare proc_stat_end datetime;
   declare proc_stat_time_diff int;
declare open_statistics varchar(20);
select parameter_value into open_statistics from arith.parameters where parameter_code='open_statistics';
if open_statistics='1' then
 set proc_stat_start = now();
end if;
 
 if tele_code_in is null then 
  set tele_code_in ='Y' ; 
 end if; 
 if range_in is null then 
  set range_in = 4 ; 
 end if; 
 if office_no_in is null then 
  set office_no_in = 'X' ; 
 end if; 
 if window_no_in is null then 
  set window_no_in = 0 ; 
 end if; 
 if flag_in is null then 
  set flag_in = 1 ; 
 end if; 
 if from_station_in is null then 
  set from_station_in = '%' ; 
 end if; 
 if to_station_in is null then 
  set to_station_in = '%' ; 
 end if; 
 if sale_mode_in is null then 
  set sale_mode_in = 'A' ; 
 end if; 
 if day_diff_in is null then 
  set day_diff_in = 0 ; 
 end if; 
 if debug_in is null then 
  set debug_in = 0 ; 
 end if; 

 
 
 set l_Version = 'Ver20100921.23:09';  

 

 Set Transaction Isolation Level Read uncommitted;

 set lab_exit_s = 1;
 lab_exit:loop
 if lab_exit_s = 0 THEN
   leave lab_exit;
 end if;

 set lab_lab1_s = 1;
 lab_lab1:loop
 if lab_lab1_s = 0 THEN
   leave lab_lab1;
 end if;

 IF c_train_no_in = '000000000000' THEN 
   SET return_out= 0;
   LEAVE lab_exit;
 end if;

 IF flag_in = 6 THEN 
   SET return_out= 0;
   LEAVE lab_exit;
 end if;

 If tele_code_in Is Null Then
   Set tele_code_in = 'Y';
 End If;

 If from_station_in Is Null Then
   Set from_station_in = '%';
 End If;

 If to_station_in Is Null Then
   Set to_station_in = '%';
 End If;

 If sale_mode_in Is Null Then
   Set sale_mode_in = 'A';
 End If;

 If day_diff_in Is Null Then
   Set day_diff_in = 0;
 End If;

 If debug_in Is Null Then
   Set debug_in = 0;
 End If;

 If return_out Is Null Then
   Set return_out = 0;
 End If;


 CREATE Temporary TABLE If Not Exists temp_left_train
 ( train_no char(12) NULL,
  train_date  char(8) NULL,
   start_time  char(4) NULL,
  station_train_code char(8)NULL,
  station_no char(2) NULL,
   assign char(10) NULL,
  far_from_station_no char(2) NULL,
  far_from_station_name char(10) NULL,
  limit_station_name char(10) NULL,
  limit_station char(2) NULL,
  coach_no char(2) NULL,
   seat_type_code char(1) NULL,        
  seat_type_name char(10) NULL,
  purpose_name char(8) NULL,
   up_quantity int NULL,
   mid_quantity int NULL,
   down_quantity int NULL,
  ticket_quantity int NULL,
  coach_num int NULL,
  arrive_time CHAR(4) NULL, 
  share_flag tinyint unsigned NULL 
 , day_difference tinyint unsigned NULL 
 , seat_feature CHAR(1) NULL 
 , from_station CHAR(10) NULL
 , to_station  CHAR(10) NULL 
 , to_station_no CHAR(2) NULL
 );
 Truncate Table  temp_left_train;

 

 CREATE Temporary TABLE If Not Exists temp_left_base_center_train
 ( train_no char(12) NULL,
  train_date  char(8) NULL,
  station_train_code char(8)NULL,
  station_no char(2) NULL,
  assign_station char(3),
  far_from_station_no char(2) NULL,
  limit_station char(2) NULL,
  coach_no  char(2) NULL,
  seat_type_code char(1) NULL,
  purpose_code char(2) NULL,
  up_quantity int NULL,
  mid_quantity int NULL,
  down_quantity int NULL,
  ticket_quantity int NULL,
  wseat_type_code char(1) NULL,
  seat_feature  char(1) NULL,
  seat_type_name char(10) NULL,
  purpose_name char(8) NULL
 );
 Truncate Table temp_left_base_center_train;
 

 CREATE Temporary TABLE If Not Exists  tmp_union_station_train(station_telecode char(3) NOT NULL);
 Truncate Table  tmp_union_station_train;

 CREATE Temporary TABLE If Not Exists  tmp_train_info_train
  (train_date   CHAR(8) NOT NULL,
  train_no   CHAR(12) NOT NULL,
  train_code   CHAR(8) NOT NULL,
  from_station  CHAR(3) NOT NULL, 
  to_station   CHAR(3) NOT NULL 
  );
 Truncate Table tmp_train_info_train;
 

 CREATE Temporary TABLE If Not Exists tmp_ticket_left_train (
   assign_station  char(3) NOT NULL,
   train_no  char(12) NOT NULL,
   train_date  char(8) NOT NULL,
   station_no  char(2) NOT NULL,
   far_from_station_no  char(2) NOT NULL,
   limit_station  char(2) NOT NULL,
   coach_no  char(2) NOT NULL,
   seat_type_code  char(1) NOT NULL,
   purpose_code  char(2) NOT NULL,
   ticket_quantity  int(11) NOT NULL,
   up_quantity  int(11) NOT NULL,
   mid_quantity  int(11) NOT NULL,
   down_quantity  int(11) NOT NULL,
   ticket_source  char(1) NOT NULL,
   l_range  tinyint(3) unsigned NOT NULL,
   inner_code  char(7) NOT NULL,
   wseat_type_code  char(1) NOT NULL,
   seat_feature  char(1) NOT NULL
  );
 Truncate Table tmp_ticket_left_train;

 CREATE Temporary TABLE If Not Exists tmp_stop_time_train (
   start_date  char(8) NOT NULL,
   stop_date  char(8) NOT NULL,
   train_no  char(12) NOT NULL,
   station_no  char(2) NOT NULL,
   station_name  char(10) NOT NULL,
   station_shortcode  char(3) NOT NULL,
   station_telecode  char(3) NOT NULL,
   station_train_code  char(8) NOT NULL,
   route_tele_code  char(3) NOT NULL,
   segment_code  char(4) NOT NULL,
   bureau_code  char(1) NOT NULL,
   subbureau_code  char(2) NOT NULL,
   day_difference  tinyint(3) unsigned NOT NULL,
   arrive_time  char(4) NOT NULL,
   start_time  char(4) NOT NULL,
   distance  smallint(6) NOT NULL,
   distance1  smallint(6) NOT NULL,
   distance2  smallint(6) NOT NULL,
   distance3  smallint(6) NOT NULL,
   distance4  smallint(6) NOT NULL,
   distance5  smallint(6) NOT NULL,
   line_alter1  char(7) NOT NULL,
   line_alter2  char(7) NOT NULL,
   line_alter3  char(7) NOT NULL,
   line_alter4  char(7) NOT NULL,
   origin  char(2) NOT NULL
 );
 Truncate Table  tmp_stop_time_train;

 SET l_To_Range   = range_in
  ,  l_today      = CURDATE()+0
  ,  l_inner_code = ltrim(rtrim(tele_code_in))
  ,  l_train_date =  c_train_date_in;

 
 IF EXISTS(SELECT 1 FROM information_schema.Columns WHERE table_name = 'left_base_center' and TABLE_SCHEMA='center' AND column_name = 'seat_feature') THEN
   SET l_left_new = 1;
 ELSE 
   SET l_left_new = 0 ;
 end if;

 
 IF from_station_in = '%' OR to_station_in = '%' THEN 
   SET l_From_To_Flag = '0'; 
 ELSE 
   SET l_From_To_Flag = '1'; 
 end if;
 if debug_in=9 THEN
  select '1===is here';
 end if;
 
 INSERT INTO  tmp_stop_time_train 
  SELECT * FROM basic.stop_time
  WHERE train_no = c_train_no_in;
  
 if debug_in=9 THEN
  select '2===is here';
 end if;

 
 IF l_From_To_Flag = '1' THEN 
   SELECT station_train_code,station_no,day_difference, start_time
   INTO l_station_train_code,l_board_station_no,l_day_difference_from,l_start_time
   FROM   tmp_stop_time_train
   WHERE train_no = c_train_no_in
    AND station_telecode = from_station_in;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 OR l_error != 0 THEN 
   
   LEAVE lab_lab1; 
  end if;
 if debug_in=9 THEN
  select '3===is here';
 end if;
 ELSE 
   SELECT station_train_code,station_no,day_difference
   , station_telecode,start_time
   INTO l_station_train_code,l_board_station_no,l_day_difference_from,from_station_in,l_start_time
   FROM   tmp_stop_time_train
   WHERE train_no = c_train_no_in
    AND station_telecode = l_inner_code ;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0  THEN 
   
    LEAVE  lab_lab1; 
   end if;
 if debug_in=9 THEN
  select '4===is here';
 end if;
   IF l_rowcount = 0 AND l_error = 0 THEN 
      INSERT INTO  tmp_union_station_train  
       SELECT station_telecode FROM basic.DG50_same_city_dictionary 
       WHERE start_date <= l_train_date 
        AND stop_date >= l_train_date
        AND city_code IN (SELECT DISTINCT city_code FROM basic.DG50_same_city_dictionary WHERE station_telecode = l_inner_code )
        AND station_telecode <> l_inner_code
        AND union_flag = '1';
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_error != 0 THEN
       
       LEAVE  lab_lab1; 
      end if;

      SELECT station_train_code,station_no,day_difference
       , station_telecode,start_time
      INTO l_station_train_code,l_board_station_no,l_day_difference_from,from_station_in,l_start_time
       FROM   tmp_stop_time_train
       WHERE train_no = c_train_no_in
       AND ( station_telecode IN (SELECT station_telecode FROM  tmp_union_station_train)
        OR station_no = '01'
        )
       ORDER BY station_no DESC LIMIT 1;
      set l_error =  @@error_count,l_rowcount = row_count();
      IF l_rowcount = 0 OR l_error != 0 THEN
       
       LEAVE  lab_lab1; 
      end if;
    END if;
 END if;
 if debug_in=9 THEN
  select '5===is here';
 end if;
 
 IF c_train_date_in = l_today THEN
   SET l_start_datetime = str_to_date( concat(c_train_date_in , l_start_time),'%Y%m%d%H%i' );
   
   IF timediff(l_start_datetime,NOW() ) <= -10  THEN
   
   LEAVE  lab_lab1; 
  end if;
 END if;
 if debug_in=9 THEN
  select '5===is here',l_start_datetime;
 end if;
 SET l_train_code=c_train_no_in;



 CALL arith.CS50_Get_Train_Parameter(l_train_code,l_start_station_telecode,l_end_station_telecode,l_return_code); 


 INSERT INTO tmp_train_info_train VALUES(c_train_date_in,c_train_no_in,l_train_code,from_station_in,to_station_in);



 
 IF flag_in = 7 AND day_diff_in > 0 THEN
   IF day_diff_in IN (1,2) THEN

    SET l_train_date = DATE_FORMAT(date_add(c_train_date_in,INTERVAL -1 DAY),'%Y%m%d');
    IF l_train_date >= l_today THEN
     INSERT INTO tmp_train_info_train VALUES(l_train_date,c_train_no_in,l_train_code,from_station_in,to_station_in);
    END if;
    
    SET l_train_date = DATE_FORMAT(date_add(c_train_date_in,INTERVAL 1 DAY),'%Y%m%d');
    INSERT INTO tmp_train_info_train VALUES(l_train_date,c_train_no_in,l_train_code,from_station_in,to_station_in);
   END if;

   IF day_diff_in = 2 THEN
    SET l_train_date = DATE_FORMAT(date_add(c_train_date_in,INTERVAL -2 DAY),'%Y%m%d');
    IF l_train_date >= l_today then
     INSERT INTO tmp_train_info_train VALUES(l_train_date,c_train_no_in,l_train_code,from_station_in,to_station_in);
    END if;
    
    SET l_train_date = DATE_FORMAT(date_add(c_train_date_in,INTERVAL 2 DAY),'%Y%m%d');
    INSERT INTO tmp_train_info_train VALUES(l_train_date,c_train_no_in,l_train_code,from_station_in,to_station_in);
   END if;
 END if;







SET l_share_train_flag=9;
 
 
 CALL arith.DS60_ticket_left
  ('tmp_train_info_train'   
  , c_purpose_code_in
  , l_inner_code
  , l_To_Range      
  , 'A'       
  , 'tmp_ticket_left_train'  
  , 0         
  , debug_in,0,l_share_train_flag) ;     
 SET l_error =  @@error_count;
 IF l_error != 0   THEN
  
    LEAVE  lab_lab1; 
 end if;
 
 if debug_in=9 then 
 select '100====end call procedure arith.DS60_ticket_left';
 end if;







 
 IF l_left_new = 1 THEN
  SET @l_SQL = concat('INSERT INTO temp_left_base_center_train SELECT train_no,train_date,"' , l_station_train_code , '", station_no,assign_station '
  , ' ,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,up_quantity,mid_quantity,down_quantity '
  , ' ,ticket_quantity,wseat_type_code,seat_feature,"" AS seat_type_name,"" AS purpose_name '
  , ' FROM  tmp_ticket_left_train ');
 ELSE 
  SET @l_SQL = concat('INSERT INTO temp_left_base_center_train SELECT train_no,train_date,"' , l_station_train_code , '", station_no,assign_station '
  , ' ,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,up_quantity,mid_quantity,down_quantity '
  , ' ,ticket_quantity,"","","","" '
  , ' FROM  tmp_ticket_left_train ');
 END if;
 prepare stmt_1 from @l_SQL;
 EXECUTE stmt_1;

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 OR l_error != 0  THEN LEAVE  lab_lab1; end if;

 
 

 UPDATE  temp_left_base_center_train a,basic.seat_type b SET a.seat_type_name = b.seat_type_name
  WHERE a.seat_type_code = b.seat_type_code and a.seat_type_code != 'W';

 IF l_error != 0 THEN LEAVE  lab_lab1; end if;

 UPDATE  temp_left_base_center_train a,basic.seat_type b SET a.seat_type_name = 'ÎÞ×ù'
  WHERE a.seat_type_code = b.seat_type_code and a.seat_type_code = 'W';

 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN LEAVE  lab_lab1; end if;
 

 
 UPDATE  temp_left_base_center_train a,basic.DG50_purpose_define b FORCE INDEX(purpose_define_idx) SET a.purpose_name = b.purpose_name
  WHERE a.purpose_code = b.purpose_code;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN LEAVE  lab_lab1; end if;
  set record_not_found = 0;
 begin 
 DECLARE cur CURSOR FOR
  SELECT train_no,train_date,station_train_code,station_no,assign_station,
      far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,
      up_quantity,mid_quantity,down_quantity,ticket_quantity,seat_feature,seat_type_name,purpose_name
   FROM  temp_left_base_center_train 
  ORDER BY train_no,coach_no,seat_type_code;
 declare continue handler for not found Set record_not_found = 1;
 OPEN cur;
 if debug_in=9 then 
  select '100====select * from temp_left_base_center_train';
 
 end if;
 lab_cur:
 WHILE 1 = 1 DO
   
    FETCH cur INTO l_train_no,l_train_date,l_station_train_code,l_station_no,l_assign_station,
     l_far_from_station_no,l_limit_station,l_coach_no,l_seat_type_code,l_purpose_code,
     l_up_quantity,l_mid_quantity,l_down_quantity,l_ticket_quantity,l_seat_feature,l_seat_type_name,l_purpose_name;

    if record_not_found = 1 THEN
      
      
      
      leave lab_cur;
    end IF;

    
    SELECT start_time
    ,  day_difference
    ,  station_telecode
    ,  station_name
    ,  station_train_code
    INTO l_start_time,l_day_difference_from,from_station_in,l_from_station_name,l_station_train_code
    FROM  tmp_stop_time_train
    WHERE train_no = l_train_no
     AND station_no = l_station_no;
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount = 0 OR l_error != 0 THEN 
 if debug_in=9 THEN
   select '103===is here';
 end if;
     ITERATE lab_cur; 
   end if;

    IF l_far_from_station_no  = l_station_no THEN
     SET l_far_from_station_name =  l_from_station_name;
    ELSE 
     SELECT station_name 
     INTO l_far_from_station_name
      FROM  tmp_stop_time_train
      WHERE train_no = l_train_no
      AND station_no = l_far_from_station_no;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 0 OR l_error != 0 THEN 
 if debug_in=9 THEN
  select '104===is here';
 end if;
       ITERATE lab_cur; 
     end if;
    END if;
    

    
    IF to_station_in = '%' THEN 
     
     SELECT arrive_time
      , day_difference
      , start_time 
      , station_telecode
      , station_name  
      ,  station_no
      INTO l_arrive_time,l_day_difference_to,l_end_start_time,to_station_in,l_to_station_name,l_to_station_no
      FROM  tmp_stop_time_train
      WHERE train_no = l_train_no 
       AND station_no = l_limit_station LIMIT 1;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 0 OR l_error != 0 THEN 
 if debug_in=9 THEN
  select '105===is here';
 end if;
      ITERATE lab_cur; 
     end if;
    ELSE 
     
     SELECT arrive_time
      , day_difference
      , start_time 
      , station_telecode
      , station_name  
      ,  station_no
      INTO l_arrive_time,l_day_difference_to,l_end_start_time,to_station_in,l_to_station_name,l_to_station_no
      FROM  tmp_stop_time_train
      WHERE train_no = l_train_no 
      AND station_telecode = to_station_in LIMIT 1;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 0 OR l_error != 0 THEN 
 if debug_in=9 THEN
  select '106===is here';
 end if;
      ITERATE lab_cur; 
     end if;
    END if;

    IF l_to_station_no = l_limit_station THEN 
     SET l_limit_station_name = l_to_station_name
      ,  l_limit_station_time = l_arrive_time;
    ELSE 
     SELECT station_name 
      ,  arrive_time
      INTO l_limit_station_name,l_limit_station_time
      FROM  tmp_stop_time_train
      WHERE train_no = l_train_no 
      AND station_no = l_limit_station;
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount = 0 OR l_error != 0 THEN 
 if debug_in=9 THEN
  select '107===is here';
end if;
      ITERATE lab_cur; 
     end if;
    END if;

    
    IF l_end_start_time < l_arrive_time THEN SET l_day_difference_to = l_day_difference_to - 1; end if;
    SET l_day_difference_to = l_day_difference_to - l_day_difference_from;
    IF l_day_difference_to < 0 THEN SET l_day_difference_to = 0; end if;
    

    IF l_seat_feature = '' OR l_seat_feature IS NULL THEN
     SET l_train_code = l_train_no;
     CALL arith.CS50_Get_Train_Parameter(l_train_code,l_start_station_telecode,l_end_station_telecode,l_return_code);  

     SELECT  service_type INTO l_seat_feature
      FROM basic.train_dir 
      WHERE train_code    = l_train_code
      AND subbureau_code = substring(l_train_no,1,2)
      AND double_id    = substring(l_train_no,11,1)
      AND schema_id    = substring(l_train_no,12,1);
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount != 1 AND l_error = 0 THEN 
 if debug_in=9 THEN
  select '107_1===is here';
 end if;
       ITERATE lab_cur; 
     end if;  
     IF l_seat_feature <> '0' THEN SET l_seat_feature = '3'; end if;
    END if;

    SET l_coach_num = 0;

    INSERT INTO  temp_left_train VALUES
      ( l_train_no,l_train_date,l_start_time,l_station_train_code,
      l_station_no, l_from_station_name,l_far_from_station_no,l_far_from_station_name,
     l_limit_station_name,l_limit_station,l_coach_no,l_seat_type_code,l_seat_type_name,l_purpose_name,
       l_up_quantity,l_mid_quantity,l_down_quantity,l_ticket_quantity,l_coach_num,l_arrive_time,l_share_train_flag,
     l_day_difference_to,l_seat_feature, l_from_station_name,l_to_station_name,l_board_station_no
    );
 END WHILE lab_cur;

 CLOSE cur;
 end ; 
 set lab_lab1_s = 0;
 end loop lab_lab1;





 IF EXISTS(SELECT 1 FROM  temp_left_train) THEN
    IF flag_in = 6 THEN 
      DELETE FROM  temp_left_train WHERE limit_station < l_to_station_no ;
      DELETE FROM  temp_left_train WHERE far_from_station_no > l_to_station_no;

      UPDATE  temp_left_train SET far_from_station_no = l_board_station_no,limit_station = l_to_station_no
       , far_from_station_name =  l_from_station_name,limit_station_name = l_to_station_name;
      SELECT DISTINCT train_no,train_date,start_time,station_train_code,assign,station_no
       ,far_from_station_name,limit_station_name,to_station_no,seat_type_code,seat_type_name
       ,purpose_name,sum(up_quantity) up_quantity ,sum(mid_quantity) mid_quantity,sum(down_quantity) down_quantity
       ,sum(ticket_quantity) ticket_quantity,sum(coach_num) coach_num ,station_no,share_flag,seat_feature,to_station_no
      FROM  temp_left_train 
      GROUP BY train_no,train_date,start_time,station_train_code,assign,seat_type_code,seat_type_name,purpose_name ;
    ELSEIF flag_in IN (5,7) THEN
      SELECT DISTINCT train_no,train_date,start_time,station_train_code,assign,far_from_station_no
       ,far_from_station_name,limit_station_name,limit_station,seat_type_code,seat_type_name
       ,purpose_name,sum(up_quantity) up_quantity ,sum(mid_quantity) mid_quantity,sum(down_quantity) down_quantity
       ,sum(ticket_quantity) ticket_quantity,sum(coach_num) coach_num ,station_no,share_flag,seat_feature,to_station_no
      FROM  temp_left_train 
      GROUP BY train_no,train_date,start_time,station_train_code,assign,far_from_station_no,far_from_station_name,limit_station_name
       ,limit_station,seat_type_code,seat_type_name,purpose_name 
       ,station_no,share_flag,seat_feature,to_station_no
      ORDER BY limit_station,far_from_station_no ASC ;
    ELSEIF flag_in = 4 THEN 
      IF l_From_To_Flag = '1' THEN 
         SELECT DISTINCT train_no,train_date,start_time,station_train_code,station_no,from_station,to_station
         ,seat_type_code,seat_type_name,purpose_name,sum(up_quantity) up_quantity,sum(mid_quantity) mid_quantity,sum(down_quantity) down_quantity
         ,sum(ticket_quantity) ticket_quantity,sum(coach_num) coach_num,arrive_time,share_flag,day_difference,seat_feature
         FROM  temp_left_train 
         GROUP BY train_no,train_date,start_time,station_train_code,station_no,from_station,to_station,seat_type_code,seat_type_name,purpose_name
         ,arrive_time,share_flag,day_difference,seat_feature;
      ELSE  
         SELECT DISTINCT train_no,train_date,start_time,station_train_code,assign ,far_from_station_no
         ,far_from_station_name,limit_station_name,limit_station,seat_type_code,seat_type_name
         ,purpose_name,sum(up_quantity) up_quantity ,sum(mid_quantity) mid_quantity,sum(down_quantity) down_quantity
         ,sum(ticket_quantity) ticket_quantity,sum(coach_num) coach_num ,station_no,share_flag,seat_feature,to_station_no
         FROM  temp_left_train 
         GROUP BY train_no,train_date,start_time,station_train_code,assign,far_from_station_no,far_from_station_name,limit_station_name
         ,limit_station,seat_type_code,seat_type_name,purpose_name 
         ,station_no,share_flag,seat_feature,to_station_no
         ORDER BY limit_station,far_from_station_no ASC ;
      END if;
    ELSEIF flag_in = 1 THEN 
      SELECT DISTINCT train_no,start_time,station_train_code,far_from_station_name,limit_station_name,seat_type_code
       ,sum(up_quantity) up_quantity ,sum(mid_quantity) mid_quantity, sum(down_quantity) down_quantity 
       ,sum(ticket_quantity) ticket_quantity 
      FROM  temp_left_train 
      GROUP BY train_no,start_time,station_train_code,far_from_station_name,limit_station_name,seat_type_code
      ORDER BY limit_station,far_from_station_no ASC  ;
    END if;
  END if;

 
 

 SET return_out = 0 ;
 LEAVE lab_exit;

 set lab_exit_s = 0;
 end loop lab_exit;
if open_statistics='1' then
 set proc_stat_end =now();
   set proc_stat_time_diff = timestampdiff(SECOND,proc_stat_start,proc_stat_end);
   insert into proc_stat values('DS60_left_train',proc_stat_start,proc_stat_end,proc_stat_time_diff);
end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_Notice_Period`(IN `train_date_in` CHAR(8),IN `train_no_in` CHAR(12),IN `train_code_in` CHAR(8),IN `station_telecode_in` CHAR(3),IN `seat_type_code_in` CHAR(1),INOUT `fetch_w_seat_in` tinyint,IN `purpose_code_in` CHAR(2),IN `range_in` tinyint,IN `sale_mode_in` CHAR(1),IN `table_name_in` VARCHAR(50),IN `table_name1_in` VARCHAR(50),IN `train_type_in` CHAR(1),IN `bureau_code_in` CHAR(1),OUT `return_out` int)
BEGIN
 DECLARE l_Ver VARCHAR(30)
 ;DECLARE  l_command_code   CHAR(1)   ;DECLARE  l_w_seat_type_code  CHAR(1)
 ;DECLARE  l_w_flag     CHAR(1)   ;DECLARE  l_rowcount    SMALLINT
 ;DECLARE  l_error     SMALLINT   ;DECLARE  l_Is_Bed     TINYINT
 ;DECLARE  l_bed_code_list   VARCHAR(30)  ;DECLARE  l_soft_code_list  VARCHAR(30)
 ;DECLARE  l_start_sale_time  CHAR(4)   ;DECLARE  l_start_station_name CHAR(10)
 ;DECLARE  l_end_station_name  CHAR(10)   ;DECLARE  l_control_train_date CHAR(8)
 ;DECLARE  l_diff_day    SMALLINT   ;DECLARE  l_start_datetime  DATETIME
 ;DECLARE  l_define_range   SMALLINT   ;DECLARE  l_max_day     SMALLINT
 ;DECLARE   l_train_class_code char(1)    ;DECLARE  l_today      char(8);

 
 declare 
 l_C_from_period     tinyint
 ;DECLARE l_C_control_min_date  char(8)
 ;DECLARE l_C_start_date     char(8)
 ;DECLARE l_now_datetime    VARCHAR(30)
 
 ;DECLARE lab_Next_Step_s INTEGER;DECLARE lab_null_return_s INTEGER;DECLARE lab_return_s INTEGER;
 DECLARE lab_sale_return_s INTEGER;DECLARE lab_ok_return_s INTEGER;
 
 Declare record_not_found Integer Default 0;
 Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;
 
  

 

 


 SET l_Ver = 'Ver.20110218.15:36';
 Set Transaction Isolation Level Read uncommitted;


 
 

 set lab_return_s = 1;
 lab_return:loop
 if lab_return_s = 0 THEN
   leave lab_return;
 end if;

 set lab_null_return_s = 1;
 lab_null_return:loop
 if lab_null_return_s = 0 THEN
   leave lab_null_return;
 end if;

 set lab_sale_return_s = 1;
 lab_sale_return:loop
 if lab_sale_return_s = 0 THEN
   leave lab_sale_return;
 end if;

 set lab_ok_return_s = 1;
 lab_ok_return:loop
 if lab_ok_return_s = 0 THEN
   leave lab_ok_return;
 end if;

 set lab_Next_Step_s = 1;
 lab_Next_Step:loop
 if lab_Next_Step_s = 0 THEN
   leave lab_Next_Step;
 end if;

 IF table_name_in != '' THEN
   CREATE Temporary TABLE If Not Exists tmp_notice 
    (
    inner_code    char(3)   NOT NULL,
    start_date    char(8)   NOT NULL,
    stop_date    char(8)   NOT NULL,
    train_no    char(12)   NOT NULL,
    running_style   tinyint   NOT NULL,
    running_rule   int   NOT NULL,
    station_no    char(2)   NOT NULL,
    station_telecode  char(3)   NOT NULL,
    station_name   char(10)   NOT NULL,
    board_train_code  char(8)   NOT NULL,
    command_no    char(7)   NOT NULL,
    command_code   char(1)   NOT NULL,
    inform_type   char(1)   NOT NULL,
    day_difference  tinyint   NOT NULL,
    w_flag     char(4)   NOT NULL,
    seat_type_code  char(4)   NOT NULL,
    time_interval   tinyint   NOT NULL,
    command_id   char(16)   NOT NULL,
    operate_time   datetime   NOT NULL,
    operater_no   char(4)   NOT NULL,
    operater_name   char(8)   NOT NULL,
    command_enable  tinyint   NOT NULL
    );
   delete from tmp_notice;

   
   set @l_SQL = concat('INSERT INTO tmp_notice SELECT * FROM ' , table_name_in);
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 AND l_error = 0  THEN LEAVE lab_Next_Step; end if;
   
   SET l_bed_code_list = "3456ACFGHL", l_soft_code_list = "246789ADEFGHIJL";
   IF instr(l_bed_code_list,seat_type_code_in) > 0  THEN 
    SET l_Is_Bed = 1 ;
   ELSE 
     SET l_Is_Bed = 0;
   end if;

   SET l_today = CURDATE()+0;
   
   
   SELECT command_code   
   , seat_type_code  
   ,w_flag     
   into l_command_code ,l_w_seat_type_code,l_w_flag
   FROM  tmp_notice 
    WHERE train_no       = train_no_in
    AND station_telecode = station_telecode_in
    AND command_code   IN ('S','U')   
    AND  seat_type_code  IN ('*',seat_type_code_in,'')  
    AND start_date   <= train_date_in
    AND stop_date    >= train_date_in
    AND running_rule & (power(2,datediff(train_date_in,start_date) % running_style)) > 0 
   ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount >= 1 AND l_command_code = 'S' AND l_error = 0 THEN 
    IF l_w_seat_type_code IN ('*','') THEN 
      LEAVE lab_null_return; 
    ELSEIF fetch_w_seat_in = 9 THEN 
      IF l_w_flag IN ('0','2') THEN   
      LEAVE lab_null_return; 
      END if;
    ELSEIF seat_type_code_in = l_w_seat_type_code THEN 
      IF l_Is_Bed = 1 THEN LEAVE lab_null_return; end if; 
      IF fetch_w_seat_in = 0 THEN 
       IF l_w_flag = '0' THEN   
        LEAVE lab_null_return; 
       ELSEIF l_w_flag = '1' THEN 
        SET fetch_w_seat_in = 9 ; 
       ELSEIF l_w_flag = '2' THEN 
        SET fetch_w_seat_in = 1;
       END if;
      ELSEIF fetch_w_seat_in = 1 THEN  
       IF l_w_flag = '0' THEN   
        LEAVE lab_null_return; 
       ELSEIF l_w_flag = '1' THEN 
        SET fetch_w_seat_in = 9  ;
       END if;
      END if;
    END if;
   END if;
   IF l_rowcount >= 1 AND l_command_code = 'U' AND l_error = 0 THEN 
    IF l_w_seat_type_code = seat_type_code_in THEN 
      
      IF fetch_w_seat_in = 9 THEN 
       IF l_w_flag = '1' THEN 
         
         SELECT seat_type_code
          , w_flag     
         into l_w_seat_type_code,l_w_flag
         FROM  tmp_notice 
          WHERE train_no       = train_no_in
          AND station_telecode = station_telecode_in
          AND command_code   IN ('S')   
          AND  seat_type_code  IN (seat_type_code_in,'*','')
          AND start_date   <= train_date_in
          AND stop_date    >= train_date_in
          AND running_rule & (power(2,datediff(train_date_in,start_date) % running_style)) > 0 
         ORDER BY operate_time DESC LIMIT 1;
         IF @@error_count > 0 AND row_count() = 0 THEN 
          IF l_w_seat_type_code IN ('*','') THEN 
           LEAVE lab_null_return;   
          ELSEIF l_w_flag IN ('0','2') THEN 
           LEAVE lab_null_return;  
          end if;
         END if;
       END if;
      
      ELSEIF l_Is_Bed = 0 THEN
       IF l_w_flag = '1' THEN 
         
         SELECT seat_type_code
          , w_flag     
         into l_w_seat_type_code,l_w_flag
         FROM  tmp_notice 
          WHERE train_no       = train_no_in
          AND station_telecode = station_telecode_in
          AND command_code   IN ('S')   
          AND  seat_type_code  IN (seat_type_code_in,'*','')
          AND start_date   <= train_date_in
          AND stop_date    >= train_date_in
          AND running_rule & (power(2,datediff(train_date_in,start_date) % running_style)) > 0 
         ORDER BY operate_time DESC LIMIT 1;
         IF @@error_count > 0 AND row_count() = 0 THEN 
         
         IF l_w_seat_type_code IN ('*','') OR l_w_flag IN ('0','2') THEN SET fetch_w_seat_in = 1 ; end if;
         END if;
       ELSEIF l_w_flag = '2' THEN 
         
         SELECT seat_type_code
          , w_flag     
         INTO l_w_seat_type_code,l_w_flag
         FROM  tmp_notice 
          WHERE train_no       = train_no_in
          AND station_telecode = station_telecode_in
          AND command_code   IN ('S')   
          AND  seat_type_code  IN (seat_type_code_in,'*','')
          AND start_date   <= train_date_in
          AND stop_date    >= train_date_in
          AND running_rule & (power(2,datediff(train_date_in,start_date) % running_style)) > 0 
         ORDER BY operate_time DESC limit 1;
         IF @@error_count > 0 AND row_count() = 0 THEN 
          
          IF l_w_seat_type_code IN ('*','') OR l_w_flag IN ('0','2') THEN SET fetch_w_seat_in = 9; end if;
         END if;
       END if;
      END if;
    END if;
   END if;
 END if;

 
 set lab_Next_Step_s = 0;
 end loop lab_Next_Step;

 
 IF table_name1_in != '' THEN
    CREATE Temporary TABLE If Not Exists tmp_train_sale
    (
    inner_code char(3)   NOT NULL,
    start_date char(8)   NOT NULL,
    stop_date char(8)   NOT NULL,
    train_code char(8)   NOT NULL,
    start_station_name char(10)   NOT NULL,
    end_station_name char(10)   NOT NULL,
    station_telecode char(3)   NOT NULL,
    train_type char(1)   NOT NULL,
    seat_type_code char(1)   NOT NULL,
    ticket_type tinyint   NOT NULL,
    purpose_code char(2)   NOT NULL,
    l_range tinyint   NOT NULL,
    control_day tinyint   NOT NULL,
    control_train_day char(8)   NOT NULL,
    ahead_time smallint   NOT NULL,
    location_code char(2)   NOT NULL,
    office_no char(7)   NOT NULL,
    window_no tinyint   NOT NULL,
    operater_no char(4)   NOT NULL,
    operater_time datetime   NOT NULL,
    flag1 char(10)   NOT NULL,
    flag2 char(10)   NOT NULL,
    group_code         char(20) NOT NULL,
    level_flag         char(1)  NOT NULL,
    from_period        tinyint  NOT NULL,
    control_min_date   char(8)  NOT NULL,
    train_class        char(1)  NOT NULL,
    demand_id          char(18) NOT NULL,
    flag3              char(30) NOT NULL,
    flag4              char(30) NOT NULL,
    flag5              char(30) NOT NULL,
    flag6              char(30) NOT NULL,
    flag7              char(30) NOT NULL,
    flag8              char(30) NOT NULL 
    );
   
   Truncate Table tmp_train_sale;
   
   CREATE Temporary TABLE If Not Exists ds60_n_p_tt_train_group 
   (
    group_code   char(20)
    );
   delete from ds60_n_p_tt_train_group;

   insert into ds60_n_p_tt_train_group
   select group_code
    from basic.DJ52_train_group_define
    where inner_code = bureau_code_in 
     and module_code='J' 
     and type_code='T' 
     and start_station_telecode = station_telecode_in ;
    


    
    
   set @l_SQL = concat('INSERT INTO #train_sale SELECT * FROM ' , table_name1_in);
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 AND l_error = 0 THEN LEAVE lab_ok_return; end if;

   IF train_type_in = '' THEN 
    SELECT train_type_code,start_station_name,end_station_name,
      train_class_code 
     INTO train_type_in,l_start_station_name,l_end_station_name,l_train_class_code
     FROM basic.train_dir 
     WHERE subbureau_code = substring(train_no_in, 1, 2)
     AND train_code = l_train_code
     AND double_id = substring(train_no_in, 11, 1)
     AND schema_id = substring(train_no_in, 12, 1) ;
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount = 0 OR l_error != 0 THEN LEAVE lab_sale_return; end if;
   END if;
   IF bureau_code_in = '' THEN 
   SELECT bureau_code INTO bureau_code_in
    FROM basic.station_dictionary 
    WHERE station_telecode = station_telecode_in LIMIT 1;
   END if;
   
   IF train_code_in IN ('Q97','Q98') THEN SET bureau_code_in = 'P';
   ELSEIF train_code_in IN ('Q99','Q100') THEN SET bureau_code_in = 'H';
   end if;

   
   IF range_in = 255 THEN 
   SELECT  control_day,
       RIGHT(concat('0000' , rtrim(ltrim(CONVERT(ahead_time,CHAR(4))))),4),
       control_train_day,
       from_period,
       control_min_date,
       start_date
    into  l_max_day,l_start_sale_time,l_control_train_date,l_C_from_period,l_C_control_min_date,l_C_start_date
    FROM tmp_train_sale 
    WHERE inner_code        = bureau_code_in
     AND (station_telecode  in (station_telecode_in,'*')  and  group_code = '*'  
       or                                                                    
       station_telecode = '*'  and group_code in ( select group_code from ds60_n_p_tt_train_group)) 
     AND train_type     IN (train_type_in,'*')
     AND flag1      IN (sale_mode_in,'*')   
     AND ( train_code = train_code_in OR train_code = '*' OR (train_code != train_code_in AND train_code_in LIKE train_code) )
     AND purpose_code    IN (purpose_code_in,'*')  
     AND seat_type_code   IN (seat_type_code_in,'*')
     
     AND (train_class = l_train_class_code OR train_class = "*") 
     
     ORDER BY level_flag,train_code ,station_telecode ,group_code,ticket_type,purpose_code,l_range  ,seat_type_code,train_type,train_class,flag1; 
   
   
   ELSE
   SELECT  control_day,
       RIGHT(concat('0000' , rtrim(ltrim(CONVERT(ahead_time,CHAR(4))))),4),
       control_train_day,
       from_period,
       control_min_date,
       start_date   
    INTO l_max_day,l_start_sale_time,l_control_train_date,l_C_from_period,l_C_control_min_date,l_C_start_date
    FROM tmp_train_sale 
    WHERE inner_code        = bureau_code_in
     AND (station_telecode  in (station_telecode_in,'*')  and  group_code = '*'  
       or                                                                    
       station_telecode = '*'  and group_code in ( select group_code from ds60_n_p_tt_train_group)) 
     AND train_type     IN (train_type_in,'*')
     AND flag1      IN (sale_mode_in,'*')   
     AND ( train_code = train_code_in OR train_code = '*' OR (train_code != train_code_in AND train_code_in LIKE train_code) )
     AND purpose_code    IN (purpose_code_in,'*')  
     AND seat_type_code   IN (seat_type_code_in,'*')
     AND l_range      IN (range_in,255)
     
     AND (train_class = l_train_class_code OR train_class = "*") 
     
     ORDER BY level_flag ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,l_range ,seat_type_code,train_type,train_class,flag1;  
   END IF;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount > 0 THEN
    
    
    SET l_diff_day = timestampdiff(day,now(),train_date_in);
    
    SET l_now_datetime = now();
    
    
     SET l_start_datetime = str_to_date( concat(CURDATE(), l_start_sale_time) ,'%Y-%m-%d%H%i');
    
    if l_C_start_date = l_today and l_start_sale_time <> "0000" THEN 
      IF timestampdiff(second,l_start_datetime, l_now_datetime) < 0 and train_date_in > l_C_control_min_date THEN
       SET l_max_day = timestampdiff(day,now(),l_C_control_min_date);
      end if;
    END if;


    IF l_diff_day = l_max_day THEN
      SET l_start_datetime = str_to_date( concat(CURDATE(),l_start_sale_time),'%Y-%m-%d%H%i' );
      IF (timediff(now(),l_start_datetime) < 0) then
      
      SET l_max_day = l_max_day - 1; 
      END if;
    END if;
    IF l_diff_day > l_max_day THEN LEAVE lab_sale_return; end if; 
    IF train_date_in > l_control_train_date THEN LEAVE lab_sale_return; end if; 
   END if;
 END if;

 
 set lab_ok_return_s = 0;
 leave lab_ok_return;
 end loop lab_ok_return;

 set return_out=99;
 LEAVE lab_return;

 
 set lab_sale_return_s = 0;
 leave lab_sale_return;
 end loop lab_sale_return;

 set return_out=1;
 LEAVE lab_return;

 
 set lab_null_return_s = 0;
 leave lab_null_return;
 end loop lab_null_return;

 set return_out=0;
 LEAVE lab_return;


 set lab_return_s = 0;
 leave lab_return;
 end loop lab_return;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_Notice_Period2`(IN `train_date_in` CHAR(8),IN `train_no_in` CHAR(12),IN `train_code_in` CHAR(8),IN `station_telecode_in` CHAR(3),IN `seat_type_code_in` CHAR(1),INOUT `fetch_w_seat_in` tinyint,IN `purpose_code_in` CHAR(2),IN `range_in` tinyint,IN `sale_mode_in` CHAR(1),IN `table_name_in` VARCHAR(20),IN `table_name1_in` VARCHAR(20),IN `train_type_in` CHAR(1),IN `bureau_code_in` CHAR(1),OUT `return_out` int)
BEGIN
 DECLARE l_Ver VARCHAR(30)
 ;DECLARE  l_command_code   CHAR(1)   ;DECLARE  l_w_seat_type_code  CHAR(1)
 ;DECLARE  l_w_flag     CHAR(1)   ;DECLARE  l_rowcount    SMALLINT
 ;DECLARE  l_error     SMALLINT   ;DECLARE  l_Is_Bed     TINYINT
 ;DECLARE  l_bed_code_list   VARCHAR(30)  ;DECLARE  l_soft_code_list  VARCHAR(30)
 ;DECLARE  l_start_sale_time  CHAR(4)   ;DECLARE  l_start_station_name CHAR(10)
 ;DECLARE  l_end_station_name  CHAR(10)   ;DECLARE  l_control_train_date CHAR(8)
 ;DECLARE  l_diff_day    SMALLINT   ;DECLARE  l_start_datetime  DATETIME
 ;DECLARE  l_define_range   SMALLINT   ;DECLARE  l_max_day     SMALLINT
 ;DECLARE   l_train_class_code char(1)    ;DECLARE  l_today      char(8);

 
 declare 
 l_C_from_period     tinyint
 ;DECLARE l_C_control_min_date  char(8)
 ;DECLARE l_C_start_date     char(8)
 ;DECLARE l_now_datetime    VARCHAR(30)
 
 ;DECLARE lab_Next_Step_s INTEGER;DECLARE lab_null_return_s INTEGER;DECLARE lab_return_s INTEGER;
 DECLARE lab_sale_return_s INTEGER;DECLARE lab_ok_return_s INTEGER;

  CREATE Temporary TABLE If Not Exists tmp_notice 
  (
  inner_code    char(3)   NOT NULL,
  start_date    char(8)   NOT NULL,
  stop_date    char(8)   NOT NULL,
  train_no    char(12)   NOT NULL,
  running_style   tinyint   NOT NULL,
  running_rule   int   NOT NULL,
  station_no    char(2)   NOT NULL,
  station_telecode  char(3)   NOT NULL,
  station_name   char(10)   NOT NULL,
  board_train_code  char(8)   NOT NULL,
  command_no    char(7)   NOT NULL,
  command_code   char(1)   NOT NULL,
  inform_type   char(1)   NOT NULL,
  day_difference  tinyint   NOT NULL,
  w_flag     char(4)   NOT NULL,
  seat_type_code  char(4)   NOT NULL,
  time_interval   tinyint   NOT NULL,
  command_id   char(16)   NOT NULL,
  operate_time   datetime   NOT NULL,
  operater_no   char(4)   NOT NULL,
  operater_name   char(8)   NOT NULL,
  command_enable  tinyint   NOT NULL
  );
 Truncate Table tmp_notice;

  CREATE Temporary TABLE If Not Exists tmp_train_sale
  (
  inner_code char(3)   NOT NULL,
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_code char(8)   NOT NULL,
  start_station_name char(10)   NOT NULL,
  end_station_name char(10)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  train_type char(1)   NOT NULL,
  seat_type_code char(1)   NOT NULL,
  ticket_type tinyint   NOT NULL,
  purpose_code char(2)   NOT NULL,
  l_range tinyint   NOT NULL,
  control_day tinyint   NOT NULL,
  control_train_day char(8)   NOT NULL,
  ahead_time smallint   NOT NULL,
  location_code char(2)   NOT NULL,
  office_no char(7)   NOT NULL,
  window_no tinyint   NOT NULL,
  operater_no char(4)   NOT NULL,
  operater_time datetime   NOT NULL,
  flag1 char(10)   NOT NULL,
  flag2 char(10)   NOT NULL,
  group_code         char(20) NOT NULL,
  level_flag         char(1)  NOT NULL,
  from_period        tinyint  NOT NULL,
  control_min_date   char(8)  NOT NULL,
  train_class        char(1)  NOT NULL,
  demand_id          char(18) NOT NULL,
  flag3              char(30) NOT NULL,
  flag4              char(30) NOT NULL,
  flag5              char(30) NOT NULL,
  flag6              char(30) NOT NULL,
  flag7              char(30) NOT NULL,
  flag8              char(30) NOT NULL 
  );
 Truncate Table tmp_train_sale;

 CREATE Temporary TABLE If Not Exists tmp_train_group 
 (
  group_code   char(20)
  );
 Truncate Table tmp_train_group;


 SET l_Ver = 'Ver.20110218.15:36';
 


 
 

 set lab_return_s = 1;
 lab_return:loop
 if lab_return_s = 0 THEN
   leave lab_return;
 end if;

 set lab_null_return_s = 1;
 lab_null_return:loop
 if lab_null_return_s = 0 THEN
   leave lab_null_return;
 end if;

 set lab_sale_return_s = 1;
 lab_sale_return:loop
 if lab_sale_return_s = 0 THEN
   leave lab_sale_return;
 end if;

 set lab_ok_return_s = 1;
 lab_ok_return:loop
 if lab_ok_return_s = 0 THEN
   leave lab_ok_return;
 end if;

 set lab_Next_Step_s = 1;
 lab_Next_Step:loop
 if lab_Next_Step_s = 0 THEN
   leave lab_Next_Step;
 end if;

 IF table_name_in != '' THEN

   
   set @l_SQL = concat('INSERT INTO tmp_notice SELECT * FROM ' , table_name_in);
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 AND l_error = 0  THEN LEAVE lab_Next_Step; end if;
   
   SET l_bed_code_list = "3456ACFGHL", l_soft_code_list = "246789ADEFGHIJL";
   IF instr(l_bed_code_list,l_seat_type_code) > 0  THEN 
    SET l_Is_Bed = 1 ;
   ELSE 
     SET l_Is_Bed = 0;
   end if;

   SET l_today = CURDATE()+0;
   
   
   SELECT command_code   
   , seat_type_code  
   ,w_flag     
   into l_command_code ,l_w_seat_type_code,l_w_flag
   FROM  tmp_notice 
    WHERE train_no       = l_train_no
    AND station_telecode = l_station_telecode
    AND command_code   IN ('S','U')   
    AND  seat_type_code  IN ('*',l_seat_type_code,'')  
    AND start_date   <= l_train_date
    AND stop_date    >= l_train_date
    AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
   ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount >= 1 AND l_command_code = 'S' AND l_error = 0 THEN 
    IF l_w_seat_type_code IN ('*','') THEN 
      LEAVE lab_null_return; 
    ELSEIF fetch_w_seat_in = 9 THEN 
      IF l_w_flag IN ('0','2') THEN   
      LEAVE lab_null_return; 
      END if;
    ELSEIF seat_type_code_in = l_w_seat_type_code THEN 
      IF l_Is_Bed = 1 THEN LEAVE lab_null_return; end if; 
      IF fetch_w_seat_in = 0 THEN 
       IF l_w_flag = '0' THEN   
        LEAVE lab_null_return; 
       ELSEIF l_w_flag = '1' THEN 
        SET fetch_w_seat_in = 9 ; 
       ELSEIF l_w_flag = '2' THEN 
        SET fetch_w_seat_in = 1;
       END if;
      ELSEIF fetch_w_seat_in = 1 THEN  
       IF l_w_flag = '0' THEN   
        LEAVE lab_null_return; 
       ELSEIF l_w_flag = '1' THEN 
        SET fetch_w_seat_in = 9  ;
       END if;
      END if;
    END if;
   END if;
   IF l_rowcount >= 1 AND l_command_code = 'U' AND l_error = 0 THEN 
    IF l_w_seat_type_code = seat_type_code_in THEN 
      
      IF fetch_w_seat_in = 9 THEN 
       IF l_w_flag = '1' THEN 
         
         SELECT seat_type_code
          , w_flag     
         into l_w_seat_type_code,l_w_flag
         FROM  tmp_notice 
          WHERE train_no       = l_train_no
          AND station_telecode = l_station_telecode
          AND command_code   IN ('S')   
          AND  seat_type_code  IN (l_seat_type_code,'*','')
          AND start_date   <= l_train_date
          AND stop_date    >= l_train_date
          AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
         ORDER BY operate_time DESC LIMIT 1;
         IF @@error_count > 0 AND row_count() = 0 THEN 
          IF l_w_seat_type_code IN ('*','') THEN 
           LEAVE lab_null_return;   
          ELSEIF l_w_flag IN ('0','2') THEN 
           LEAVE lab_null_return;  
          end if;
         END if;
       END if;
      
      ELSEIF l_Is_Bed = 0 THEN
       IF l_w_flag = '1' THEN 
         
         SELECT seat_type_code
          , w_flag     
         into l_w_seat_type_code,l_w_flag
         FROM  tmp_notice 
          WHERE train_no       = l_train_no
          AND station_telecode = l_station_telecode
          AND command_code   IN ('S')   
          AND  seat_type_code  IN (l_seat_type_code,'*','')
          AND start_date   <= l_train_date
          AND stop_date    >= l_train_date
          AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
         ORDER BY operate_time DESC LIMIT 1;
         IF @@error_count > 0 AND row_count() = 0 THEN 
         
         IF l_w_seat_type_code IN ('*','') OR l_w_flag IN ('0','2') THEN SET fetch_w_seat_in = 1 ; end if;
         END if;
       ELSEIF l_w_flag = '2' THEN 
         
         SELECT seat_type_code
          , w_flag     
         INTO l_w_seat_type_code,l_w_flag
         FROM  tmp_notice 
          WHERE train_no       = l_train_no
          AND station_telecode = l_station_telecode
          AND command_code   IN ('S')   
          AND  seat_type_code  IN (l_seat_type_code,'*','')
          AND start_date   <= l_train_date
          AND stop_date    >= l_train_date
          AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
         ORDER BY operate_time DESC limit 1;
         IF @@error_count > 0 AND row_count() = 0 THEN 
          
          IF l_w_seat_type_code IN ('*','') OR l_w_flag IN ('0','2') THEN SET fetch_w_seat_in = 9; end if;
         END if;
       END if;
      END if;
    END if;
   END if;
 END if;

 
 set lab_Next_Step_s = 0;
 end loop lab_Next_Step;

 
 IF table_name1_in != '' THEN

   insert into tmp_train_group
   select group_code
    from basic.DJ52_train_group_define
    where inner_code = bureau_code_in 
     and module_code='J' 
     and type_code='T' 
     and start_station_telecode = station_telecode_in ;
    


    
    
   set @l_SQL = concat('INSERT INTO #train_sale SELECT * FROM ' , table_name1_in);
   prepare stmt_1 from @l_SQL;
   EXECUTE stmt_1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 AND l_error = 0 THEN LEAVE lab_ok_return; end if;

   IF train_type_in = '' THEN 
    SELECT train_type_code,start_station_name,end_station_name,
      train_class_code 
     INTO train_type_in,l_start_station_name,l_end_station_name,l_train_class_code
     FROM basic.train_dir 
     WHERE subbureau_code = substring(l_train_no, 1, 2)
     AND train_code = l_train_code
     AND double_id = substring(l_train_no, 11, 1)
     AND schema_id = substring(l_train_no, 12, 1) ;
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount = 0 OR l_error != 0 THEN LEAVE lab_sale_return; end if;
   END if;
   IF bureau_code_in = '' THEN 
   SELECT bureau_code INTO bureau_code_in
    FROM basic.station_dictionary 
    WHERE station_telecode = l_station_telecode LIMIT 1;
   END if;
   
   IF train_code_in IN ('Q97','Q98') THEN SET bureau_code_in = 'P';
   ELSEIF train_code_in IN ('Q99','Q100') THEN SET bureau_code_in = 'H';
   end if;

   
   IF range_in = 255 THEN 
   SELECT  control_day,
       RIGHT(concat('0000' , rtrim(ltrim(CONVERT(ahead_time,CHAR(4))))),4),
       control_train_day,
       from_period,
       control_min_date,
       start_date
    into  l_max_day,l_start_sale_time,l_control_train_date,l_C_from_period,l_C_control_min_date,l_C_start_date
    FROM tmp_train_sale 
    WHERE inner_code        = bureau_code_in
     AND (station_telecode  in (station_telecode_in,'*')  and  group_code = '*'  
       or                                                                    
       station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) 
     AND train_type     IN (train_type_in,'*')
     AND flag1      IN (l_sale_mode,'*')   
     AND ( train_code = train_code_in OR train_code = '*' OR (train_code != train_code_in AND train_code_in LIKE train_code) )
     AND purpose_code    IN (l_purpose_code,'*')  
     AND seat_type_code   IN (l_seat_type_code,'*')
     
     AND (train_class = l_train_class_code OR train_class = "*") 
     
     ORDER BY level_flag,train_code ,station_telecode ,group_code,ticket_type,purpose_code,l_range  ,seat_type_code,train_type,train_class,flag1; 
   
   
   ELSE
   SELECT  control_day,
       RIGHT(concat('0000' , rtrim(ltrim(CONVERT(ahead_time,CHAR(4))))),4),
       control_train_day,
       from_period,
       control_min_date,
       start_date   
    INTO l_max_day,l_start_sale_time,l_control_train_date,l_C_from_period,l_C_control_min_date,l_C_start_date
    FROM tmp_train_sale 
    WHERE inner_code        = bureau_code_in
     AND (station_telecode  in (station_telecode_in,'*')  and  group_code = '*'  
       or                                                                    
       station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) 
     AND train_type     IN (train_type_in,'*')
     AND flag1      IN (l_sale_mode,'*')   
     AND ( train_code = train_code_in OR train_code = '*' OR (train_code != train_code_in AND train_code_in LIKE train_code) )
     AND purpose_code    IN (l_purpose_code,'*')  
     AND seat_type_code   IN (l_seat_type_code,'*')
     AND l_range      IN (range_in,255)
     
     AND (train_class = l_train_class_code OR train_class = "*") 
     
     ORDER BY level_flag ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,l_range ,seat_type_code,train_type,train_class,flag1;  
   END IF;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount > 0 THEN
    
    SET l_diff_day = datediff(l_train_date,NOW());
    SET l_now_datetime = concat(ltrim(rtrim(date_format(now(),'%Y/%m/%d'))) , ' ' ,  rtrim(ltrim(DATE_FORMAT(NOW(),'%H:%i:%s'))));
    SET l_start_datetime = CONVERT( concat(CURDATE()+0 , " "  
     , substring(l_start_sale_time,1,2) , ":" , substring(l_start_sale_time,3,2) , ":00") ,DATETIME);
    
    if l_C_start_date = l_today and l_start_sale_time <> "0000" THEN 
      IF timediff( l_now_datetime,l_start_datetime) < 0 and train_date_in > l_C_control_min_date THEN
       SET l_max_day = datediff(l_C_control_min_date,NOW());
      end if;
    END if;


    IF l_diff_day = l_max_day THEN
      SET l_start_datetime = CONVERT( concat(CURDATE()+0 , ' '  
      , substring(l_start_sale_time,1,2) , ':' , substring(l_start_sale_time,3,2) , ':00'),DATETIME );
      IF (timediff(now(),l_start_datetime) < 0) then
      
      SET l_max_day = l_max_day - 1; 
      END if;
    END if;
    IF l_diff_day > l_max_day THEN LEAVE lab_sale_return; end if; 
    IF train_date_in > l_control_train_date THEN LEAVE lab_sale_return; end if; 
   END if;
 END if;

 
 set lab_ok_return_s = 0;
 leave lab_ok_return;
 end loop lab_ok_return;

 set return_out=99;
 LEAVE lab_return;

 
 set lab_sale_return_s = 0;
 leave lab_sale_return;
 end loop lab_sale_return;

 set return_out=1;
 LEAVE lab_return;

 
 set lab_null_return_s = 0;
 leave lab_null_return;
 end loop lab_null_return;

 set return_out=0;
 LEAVE lab_return;


 set lab_return_s = 0;
 leave lab_return;
 end loop lab_return;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_Proc_Seat_Cache`(board_train_date  CHAR(8)
, train_no    CHAR(12)
, start_telecode  CHAR(3)
, end_telecode   CHAR(3)
, purposes    VARCHAR(60)
, seat_type_list  VARCHAR(60)
, fetch_range   TINYINT UNSIGNED
, INOUT train_info_list  VARCHAR(255)  
, INOUT tbs_info    VARCHAR(255)  
, INOUT cache_info_list  VARCHAR(255)  
, INOUT seat_cache    TINYINT UNSIGNED     
, 12306_flag    TINYINT UNSIGNED 
, delete_flag   TINYINT UNSIGNED  
, INOUT my_modify_time  DATETIME   
, board_station   CHAR(10)    
, start_station_no  CHAR(2) 
, end_station   CHAR(10) 
, end_station_no  CHAR(2) 
,  train_flag    TINYINT UNSIGNED     
, inner_code    CHAR(3)  
, range2     TINYINT UNSIGNED)
BEGIN
   DECLARE Ver VARCHAR(30);
   DECLARE cache_kind TINYINT UNSIGNED;  
   DECLARE cache_second SMALLINT;  
   DECLARE cal_cache_sec SMALLINT;  
   DECLARE cache_time DATETIME;  
   DECLARE change_time DATETIME;   

   DECLARE cache_flag TINYINT UNSIGNED;  
   DECLARE diff_time1 INT;  
   DECLARE diff_time2 INT;  
   DECLARE train_cache TINYINT UNSIGNED;
   
   IF train_info_list is null then
      set train_info_list = '';
   END IF;
   IF tbs_info is null then
      set tbs_info = '';
   END IF;
   IF cache_info_list is null then
      set cache_info_list = '';
   END IF;
   IF seat_cache is null then
      set seat_cache = 0;
   END IF;
   IF 12306_flag is null then
      set 12306_flag = 0;
   END IF;
   IF delete_flag is null then
      set delete_flag = 0;
   END IF;
   IF my_modify_time is null then
      set my_modify_time = '2011/01/01';
   END IF;
   IF board_station is null then
      set board_station = '';
   END IF;
   IF start_station_no is null then
      set start_station_no = '';
   END IF;
   IF end_station is null then
      set end_station = '';
   END IF;
   IF end_station_no is null then
      set end_station_no = '';
   END IF;
   IF train_flag is null then
      set train_flag = 0;
   END IF;
   IF inner_code is null then
      set inner_code = '';
   END IF;
   IF range2 is null then
      set range2 = 4;
   END IF;
   SET Ver = 'Ver.20120129.14:20';  

  


   SET cache_kind = seat_cache;
   IF LENGTH(ltrim(rtrim(train_no))) = 3 then 
      SET train_cache = 1;
   ELSE 
      SET train_cache = 0;
   end if; 


   IF cache_kind = 9 then 
 
      SET seat_cache = 0;
      SET cache_second = 600;
      SET cal_cache_sec = 60;  

 




 
      IF 12306_flag = 0 AND train_cache = 1 then 
         SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
         select   DS60_seat_cache.info_list, 
   DS60_seat_cache.tbs_info, 
   DS60_seat_cache.info_list, 
   DS60_seat_cache.cache_time, 
   DS60_seat_cache.change_time, 
   DS60_seat_cache.cache_flag 
   INTO train_info_list,
   tbs_info,
   cache_info_list,
   cache_time,
   change_time,
   cache_flag 
   from center.DS60_seat_cache 
   WHERE DS60_seat_cache.train_date  = board_train_date
    AND  DS60_seat_cache.train_no   = train_no
    AND DS60_seat_cache.start_telecode = start_telecode
    AND DS60_seat_cache.end_telecode =  end_telecode
    AND  DS60_seat_cache.purpose_code =  purposes
    AND  DS60_seat_cache.seat_type_code = seat_type_list
    AND DS60_seat_cache.`range`    =  fetch_range   
   LIMIT 1;
         IF ROW_COUNT() = 0 then 
  
            SET seat_cache = 0; 
         ELSE
   
            SET my_modify_time = CURRENT_TIMESTAMP;
            SET diff_time1 = TIMESTAMPDIFF(SECOND,cache_time,my_modify_time);
            SET diff_time2 = TIMESTAMPDIFF(SECOND,change_time,my_modify_time);
            SET seat_cache = 1;

       
            IF cache_flag = 0 AND diff_time1 > cache_second then  
   
               UPDATE center.DS60_seat_cache 
      SET DS60_seat_cache.cache_flag = 1,
          DS60_seat_cache.change_time = my_modify_time
               WHERE DS60_seat_cache.train_date  = board_train_date
                 AND  DS60_seat_cache.train_no   = train_no
                 AND DS60_seat_cache.start_telecode = start_telecode
                 AND DS60_seat_cache.end_telecode =  end_telecode
                 AND  DS60_seat_cache.purpose_code =  purposes
                 AND  DS60_seat_cache.seat_type_code = seat_type_list
                 AND DS60_seat_cache.`range`    =  fetch_range
                 AND  DS60_seat_cache.cache_flag   = 0;
   
            ELSE 
  
    
               IF cache_flag = 1 AND diff_time2 > cal_cache_sec then  
   
                  UPDATE center.DS60_seat_cache 
      SET DS60_seat_cache.change_time = my_modify_time
                  WHERE DS60_seat_cache.train_date  = board_train_date
                   AND  DS60_seat_cache.train_no   = train_no
                   AND DS60_seat_cache.start_telecode = start_telecode
                   AND DS60_seat_cache.end_telecode =  end_telecode
                   AND  DS60_seat_cache.purpose_code =  purposes
                   AND  DS60_seat_cache.seat_type_code = seat_type_list
                   AND DS60_seat_cache.`range`    =  fetch_range
                   AND  DS60_seat_cache.cache_flag   = 1;
               ELSE 
   
                  SET seat_cache = 2;
               end if;
            end if;
         end if;
      end if;
      IF train_cache = 0 then 
         IF train_flag = 1 then 
            SET seat_cache = 2;
         ELSE 
            SET seat_cache = 1;
         end if;
      end if;
      IF delete_flag = 1 AND seat_cache != 0 then 
         SET seat_cache = 1;
         SET cache_info_list = '';
         SET train_info_list = '';
         SET tbs_info = '';
      end if;

   ELSE
  
      IF train_cache = 1 then  
         IF 12306_flag = 0 then 
   
            IF seat_cache = 0 then  
               IF EXISTS(SELECT 1 from center.DS60_seat_cache
                 WHERE DS60_seat_cache.train_date  = board_train_date
                  AND  DS60_seat_cache.train_no   = train_no
                  AND DS60_seat_cache.start_telecode = start_telecode
                  AND DS60_seat_cache.end_telecode =  end_telecode
                  AND  DS60_seat_cache.purpose_code =  purposes
                  AND  DS60_seat_cache.seat_type_code = seat_type_list
                  AND DS60_seat_cache.`range`    =  fetch_range) then
    
                  SET seat_cache = 0;
      
               ELSE
         
                  INSERT INTO center.DS60_seat_cache 
      VALUES(board_train_date,
     train_no,
     start_telecode,
     board_station, 
     start_station_no,
     end_telecode,
     end_station,
     end_station_no,
     purposes,
     seat_type_list,
     fetch_range, 
     train_info_list,
     tbs_info,
     CURRENT_TIMESTAMP,
     CURRENT_TIMESTAMP,
     0);
               end if;
            ELSE 
               IF seat_cache = 1 then  
     
                  UPDATE center.DS60_seat_cache 
      SET DS60_seat_cache.info_list = train_info_list,
     DS60_seat_cache.tbs_info = tbs_info,
     DS60_seat_cache.cache_time  = CURRENT_TIMESTAMP, 
       DS60_seat_cache.change_time = CURRENT_TIMESTAMP,
     DS60_seat_cache.cache_flag = 0 
                  WHERE DS60_seat_cache.train_date   = board_train_date
                   AND DS60_seat_cache.train_no   = train_no
                   AND DS60_seat_cache.start_telecode = start_telecode
                   AND DS60_seat_cache.end_telecode = end_telecode
                   AND DS60_seat_cache.purpose_code = purposes
                   AND DS60_seat_cache.seat_type_code = seat_type_list
                   AND DS60_seat_cache.`range`    = fetch_range
                   AND  DS60_seat_cache.change_time  = my_modify_time 
                   AND DS60_seat_cache.cache_flag   = 1 
    LIMIT 1;
               end if;
            end if;
         end if;
      ELSE 
  
 
  
         IF train_flag = 1 then 
   
            UPDATE center.DS60_stop_time_cache 
     SET DS60_stop_time_cache.info_list = train_info_list,
      DS60_stop_time_cache.cache_time = CURRENT_TIMESTAMP
            WHERE DS60_stop_time_cache.train_date   = board_train_date
             AND DS60_stop_time_cache.train_no   = train_no
             AND DS60_stop_time_cache.start_telecode = start_telecode
             AND DS60_stop_time_cache.end_telecode = end_telecode
             AND  DS60_stop_time_cache.inner_code  = inner_code
             AND DS60_stop_time_cache.`range`    = range2
             AND DS60_stop_time_cache.purposes   = purposes
             AND DS60_stop_time_cache.seat_type_list = seat_type_list;
         end if;
      end if;
   end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_ticket_left`(IN `train_info_in` varchar(50),IN `purpose_code_in` VARCHAR(255),IN `inner_code_in` Char(3),IN `range_in` tinyint,IN `sale_mode_in` Char(1),IN `table_name_in` VARCHAR(50),IN `flag_in` tinyint,IN `out_in` tinyint,IN `screen_flag_in` TINYINT,OUT `return_out` int)
BEGIN

DECLARE  l_version   VARCHAR(30);
DECLARE  l_start_time  CHAR(4); Declare  l_belong_seat_type   CHAR(1);
Declare  l_station_no CHAR(2) ; Declare l_share_train_flag Integer; 
Declare  l_coach_no CHAR(2) ; Declare    l_city_code  CHAR(4) ;
Declare  l_from_station_no CHAR(2); Declare   l_to_station_no CHAR(2)     ;
Declare  l_start_station_telecode CHAR(3)  ; Declare    l_end_station_telecode CHAR(3)   ;
Declare  l_original_station_telecode CHAR(3)     ;Declare   l_share_flag CHAR(1)    ;
Declare   l_limit_station    CHAR(2)    ;Declare  l_transform_no CHAR(2) ; 
Declare   l_share_string VARCHAR(8192);Declare  l_transform_date CHAR(8)      ;
Declare   l_seat_type_code   CHAR(1)    ;Declare   l_board_bureau_code  CHAR(1)    ;
Declare   l_board_subbureau_code  CHAR(2)    ;Declare   l_Rowcount INTEGER    ;
Declare   l_ticket_bureau   CHAR(1)    ;Declare    l_sale_subbureau CHAR(2)   ;
Declare   l_diff_day  INTEGER     ;Declare      l_error  INTEGER ;
Declare   l_max_day INTEGER    ;Declare    l_seat_feature   CHAR(1)    ;
Declare   l_today  CHAR(8)    ;Declare  l_start_datetime  DATETIME   ;
Declare   l_ticket_quantity  INTEGER;Declare   l_ahead_time INTEGER ;
Declare   l_up_quantity  INTEGER;Declare l_station_name CHAR(10)  ;
Declare   l_mid_quantity  INTEGER;Declare l_sale_bureau CHAR(1) ;
Declare   l_down_quantity  Integer ;Declare  l_location_code  CHAR(2);
Declare   l_far_from_station_no CHAR(2) ;Declare  l_my_center_code  CHAR(2) ;
Declare   l_assign_station  CHAR(3);Declare l_min_station_no CHAR(2)  ;
Declare   l_train_code CHAR(12)  ;Declare l_start_station_name CHAR(10)  ;
Declare   l_From_Range TINYINT ;Declare  l_end_station_name CHAR(10)  ;
Declare   l_To_Range INTEGER ;Declare l_train_type  CHAR(1)  ;
Declare   l_day_difference_from INTEGER  ;Declare l_start_sale_time CHAR(4)   ;
Declare   l_day_difference_to INTEGER ;Declare  l_purpose_num INTEGER ;
Declare   l_tmp_range CHAR(1)   ;Declare  l_union_flag CHAR(1)  ;
Declare   l_tmp_start_coach_no CHAR(2) ;Declare  Is_Bed  INTEGER;
Declare   l_tmp_end_coach_no CHAR(2) ;Declare l_bed_code_list VARCHAR(30)  ;
Declare   l_sql  VARCHAR(1600)  ;Declare l_left_base_name VARCHAR(40) ;
Declare   ls_from_range  CHAR(1) ;Declare ls_to_range CHAR(1)  ;
Declare   l_w_seat_type_code  CHAR(1) ;Declare  l_w_flag CHAR(1) ;
Declare   l_command_code CHAR(1)  ;Declare l_arrive_train_date CHAR(8)  ;
Declare   l_fetch_w_seat INTEGER ;Declare l_ticket_source CHAR(1) ;
Declare   l_wseat_type_code CHAR(1)   ;Declare l_d1 DATETIME ;
Declare   l_show_time  INTEGER ;Declare  l_share_to_wseat CHAR(1) ;
Declare   ls_ticket_quantity  VARCHAR(5) ;Declare ls_up_quantity VARCHAR(5) ;
Declare   ls_mid_quantity VARCHAR(5) ;Declare ls_down_quantity VARCHAR(5) ;
Declare   ls_range   CHAR(1) ;Declare l_TVM_flag  INTEGER ;
Declare   l_purpose_code_cache  VARCHAR(255) ;Declare l_arrive_date CHAR(8) ;
Declare   l_to_station_no_limit CHAR(2)  ;Declare l_train_date CHAR(8) ;
Declare   l_train_no CHAR(12)  ;Declare l_from_station CHAR(3) ;
Declare   l_to_station CHAR(3)  ;Declare  l_start_date CHAR(8) ;
Declare   l_Row  INTEGER ;Declare l_stop_date CHAR(8)  ;
Declare   l_tmp_purpose VARCHAR(255)  ;Declare  l_start_train_date CHAR(8) ;
Declare   l_schedule_coach CHAR(2)  ;Declare l_return_code INTEGER ;
Declare   l_ticket_range INTEGER  ;Declare l_delete_flag INTEGER ;
Declare   l_running_style  INTEGER ;Declare l_running_rule INTEGER ;
Declare   l_date_after  INTEGER ;Declare l_original_bureau_code CHAR(1) ;
Declare   t_train_no char(12)  ;Declare t_train_date char(8)  ;
Declare   t_station_no char(2)  ;Declare t_assign_station char(3) ;
Declare   t_far_from_station_no  char(2) ;Declare t_limit_station char(2) ;
Declare   t_coach_no  char(2) ;Declare  t_seat_type_code char(1) ;
Declare   t_purpose_code char(2)  ;Declare t_range Integer ;
Declare   t_ticket_quantity int   ;Declare t_up_quantity  int;
Declare   t_mid_quantity Int  ;Declare  t_down_quantity Int ;
Declare   t_wseat_type_code  CHAR(1) ;Declare t_seat_feature CHAR(1) ;
Declare   t_ticket_source CHAR(1)  ;Declare t_inner_code CHAR(3) ;
Declare   l_w_seat_type CHAR(1)  ;Declare  l_train_type_code CHAR(1);
Declare   l_train_period  TINYINT ;Declare  tmp_start_time CHAR(4);
Declare   tmp_start_datetime DATETIME  ;Declare l_center_notice VARCHAR(30) ;
Declare   l_station_list VARCHAR(512)  ;Declare l_purpose_cache VARCHAR(255) ;
Declare   l_purpose_list  VARCHAR(255) ;Declare l_start_bureau_code CHAR(1) ;
Declare   l_min_train_date CHAR(8)  ;Declare l_max_train_date  CHAR(8) ;
Declare   temp_board_station CHAR(10)   ;Declare temp_end_station CHAR(10) ;
Declare   temp_board_train_date CHAR(8)   ;Declare  temp_directions CHAR(10) ;
Declare   temp_telecode_list VARCHAR(255)  ;Declare temp_station_train_code VARCHAR(255);
Declare   temp_purposes VARCHAR(255)  ;Declare temp_inner_code CHAR(3) ;
Declare   temp_range  INTEGER ;Declare  temp_flag Integer ;
Declare   temp_seat_type_list  VARCHAR(255) ;Declare  temp_out INTEGER;
Declare   temp_kind  CHAR(10) ;
Declare   l_t0 INTEGER  ;Declare  l_t1 INTEGER;
Declare   l_t2 INTEGER  ;Declare l_t3 INTEGER ;
Declare   l_t4 INTEGER  ;Declare l_t5 INTEGER  ;
Declare   l_t6 INTEGER  ;Declare  l_t7 INTEGER;
Declare   l_t8 INTEGER  ;Declare  l_t9 INTEGER;
Declare   l_d2 datetime  ;Declare  l_d3 datetime;
Declare   l_d4 datetime  ;Declare l_d5 datetime ;
Declare   l_d6 datetime  ;
Declare   l_seat_type_list varchar(40)  ;Declare l_relation_code  CHAR(3);
Declare   l_start_name varchar(10) ;Declare l_auto_share  CHAR(1);
Declare   l_end_name varchar(10)  ;Declare l_cancel_purpose VARCHAR(255) ;
Declare   l_local_bureau  char(1) ;Declare l_purpose_init char(2)  ;
Declare   l_train_class_code char(1)   ;Declare  C_from_period tinyint ;
Declare   C_control_min_date char(8)  ;Declare C_start_date char(8) ;
Declare   C_train_period TINYINT  ;Declare l_now_datetime VARCHAR(30) ;
Declare record_not_found Integer Default 0;
Declare lab1_s Integer;
Declare lab_lable_s Integer;

declare ccount1 int default 0;
declare ccount2 int default 0;
declare tmp_train_group_count int ;-- 李杨优化用，统计tmp_train_group数量


Declare Continue handler For Sqlstate '02000' Set record_not_found = 1;
      
Set Transaction Isolation Level Read uncommitted;

Set l_version = 'Ver.20150114.11:24';

-- 加一个判断传入的临时表是否为空如果为空则直接返回
empty_tmp_table_lab:loop
 begin
  declare train_info_in_count int;
  set @train_info_in_count=null;
  Set @l_sql = concat('select count(*) into @train_info_in_count from ',train_info_in);
  prepare stmt_1 from @l_sql;
  EXECUTE stmt_1;
  set train_info_in_count=@train_info_in_count;
  set @train_info_in_count=null;
  drop PREPARE stmt_1;
   if out_in=9 then
   select 'DS60_ticket_left.0000====come in tmp table count=',train_info_in_count;
   end if;
  if train_info_in_count=0 then
   leave empty_tmp_table_lab;
  end if;
 end; 

If train_info_in Is Null Then
   Set train_info_in = '';
End If;
If purpose_code_in Is Null Then
   Set purpose_code_in = '';
End If;
If inner_code_in Is Null Then
   Set inner_code_in = '';
End If;
If range_in Is Null Then
   Set range_in = 4;
End If;
If sale_mode_in Is Null Then
   Set sale_mode_in = 'A';
End If;
If table_name_in Is Null Then
   Set table_name_in = '';
End If;
If flag_in Is Null Then
   Set flag_in = 0;
End If;
If out_in Is Null Then
   Set out_in = 0;
End If;
If @screen_flag Is Null Then
   Set @screen_flag = 0;
End If;

/*计时开始*/
Set l_d1 = NOW(),l_seat_type_list = '0123456789ABCDEFGHIJKLMNOPQRS';

/*增加预售的控制.20100122.zzq*/
-- drop temporary table if exists tmp_query_train_info;
CREATE Temporary TABLE if not exists  tmp_query_train_info
 (train_date   CHAR(8) NOT NULL,
  train_no   CHAR(12) NOT NULL,
  train_code   CHAR(8) NOT NULL,
  from_station  CHAR(10) NOT NULL,
  to_station   CHAR(10) NOT NULL,
  flag     INTEGER NOT NULL
  );
delete from  tmp_query_train_info;
-- drop temporary table if exists tmp_query_info;
CREATE Temporary TABLE if not exists tmp_query_info
 ( train_no   CHAR(12) NOT NULL,
  train_code   CHAR(8) NOT NULL
  );
    delete from tmp_query_info;

/*增加预售的控制.20100122.zzq*/
 -- drop Temporary table  If  Exists DS60_ticket_left_tmp_train_para_define;
CREATE Temporary TABLE if not exists   DS60_ticket_left_tmp_train_para_define
 (
  inner_code char(3)   NOT NULL,
  start_date char(8)   NOT NULL,
  stop_date char(8)   NOT NULL,
  train_code char(8)   NOT NULL,
  start_station_name char(10)   NOT NULL,
  end_station_name char(10)   NOT NULL,
  station_telecode char(3)   NOT NULL,
  train_type char(1)   NOT NULL,
  seat_type_code char(1)   NOT NULL,
  ticket_type tinyint   NOT NULL,
  purpose_code char(2)   NOT NULL,
  table_range tinyint   NOT NULL,
  control_day tinyint   NOT NULL,
  control_train_day char(8)   NOT NULL,
  ahead_time int   NOT NULL,
  location_code char(2)   NOT NULL,
  office_no char(7)   NOT NULL,
  window_no tinyint   NOT NULL,
  operater_no char(4)   NOT NULL,
  operater_time datetime   NOT NULL,
  flag1 char(10)   NOT NULL,
  flag2 char(10)   NOT NULL,
  group_code         char(20) NOT NULL,
  level_flag         char(1)  NOT NULL,
  from_period        tinyint  NOT NULL,
  control_min_date   char(8)  NOT NULL,
  train_class        char(1)  NOT NULL,
  demand_id          char(18) NOT NULL,
  flag3              char(30) NOT NULL,
  flag4              char(30) NOT NULL,
  flag5              char(30) NOT NULL,
  flag6              char(30) NOT NULL,
  flag7              char(30) NOT NULL,
  flag8              char(30) NOT NULL

 );
    delete from DS60_ticket_left_tmp_train_para_define;

-- drop temporary table if exists tmp_union_station;
create Temporary table if not exists  tmp_union_station
(station_telecode char(3) NOT NULL);
delete from tmp_union_station;

create Temporary table If Not Exists tmp_seat_info 
( seat_type_code char(1) NOT NULL,
 purpose_code CHAR(2) NOT NULL,
 table_range   INTEGER NOT Null 
);
Truncate Table tmp_seat_info;

CREATE Temporary TABLE If Not Exists tmp_left_center
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) );
Truncate Table tmp_left_center;

CREATE Temporary TABLE If Not Exists tmp_left_base_center
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) );
Truncate Table tmp_left_base_center;

CREATE Temporary TABLE If Not Exists tmp_left_base
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) 
,index tmp_left_base_idx(train_date,train_no)
);
Truncate Table tmp_left_base;

/*CREATE Temporary TABLE If Not Exists tmp_left_base2
(
assign_station char(3)   NOT NULL,
train_no char(12)   NOT NULL,
train_date char(8)   NOT NULL,
station_no char(2)   NOT NULL,
far_from_station_no char(2)   NOT NULL,
limit_station char(2)   NOT NULL,
coach_no char(2)   NOT NULL,
seat_type_code char(1)   NOT NULL,
purpose_code char(2)   NOT NULL,
ticket_quantity int   NOT NULL,
up_quantity int   NOT NULL,
mid_quantity int   NOT NULL,
down_quantity int   NOT NULL,
ticket_source char(1)   NOT NULL,
table_range INTEGER   NOT NULL,
inner_code char(7)   NOT NULL,
wseat_type_code char(1) ,
seat_feature char(1) );
Truncate Table tmp_left_base2;*/

-- drop temporary table if exists tmp_stop_time;
CREATE Temporary TABLE if not exists tmp_stop_time
(
start_date char(8)   NOT NULL,
stop_date char(8)   NOT NULL,
train_no char(12)   NOT NULL,
station_name char(10)   NOT NULL,
station_telecode char(3)   NOT NULL,
station_no varchar(2)   NOT NULL,
station_train_code char(8)   NOT NULL,
bureau_code char(1)   NOT NULL,
subbureau_code char(2)   NOT NULL,
day_difference INTEGER   NOT NULL,
arrive_time char(4)   NOT NULL,
start_time char(4)   NOT Null
);
delete from  tmp_stop_time;

-- drop temporary table if exists tmp_train_dir;
CREATE Temporary TABLE if not exists tmp_train_dir
(
 start_date char(8)   NOT NULL,
 stop_date char(8)   NOT NULL,
 train_code char(8)   NOT NULL,
 subbureau_code char(2)   NOT NULL,
 double_id char(1)   NOT NULL,
 schema_id char(1)   NOT NULL,
 running_style INTEGER   NOT NULL,
 running_rule int   NOT NULL,
 start_station_name char(10)   NOT NULL,
 end_station_name char(10)   NOT NULL,
 train_type_code char(1)   NOT NULL,
 train_class_code char(1)   NOT NULL,
 seat_types int   NOT NULL,
 train_group INTEGER   NOT NULL,
 belong_line1 INTEGER   NOT NULL,
 price_style1 char(1)   NOT NULL,
 belong_line2 INTEGER   NOT NULL,
 price_style2 char(1)   NOT NULL,
 belong_line3 INTEGER   NOT NULL,
 price_style3 char(1)   NOT NULL,
 belong_line4 INTEGER   NOT NULL,
 price_style4 char(1)   NOT NULL,
 belong_line5 INTEGER   NOT NULL,
 price_style5 char(1)   NOT NULL,
 service_type char(1)   NOT NULL,
 price_style char(1)   NOT NULL,
 origin char(2)   NOT NULL
);
delete from tmp_train_dir;

CREATE Temporary TABLE If Not Exists tmp_center_notice
(
 inner_code char(3)   NOT NULL,
 start_date char(8)   NOT NULL,
 stop_date char(8)   NOT NULL,
 train_no char(12)   NOT NULL,
 running_style INTEGER   NOT NULL,
 running_rule int   NOT NULL,
 station_no char(2)   NOT NULL,
 station_telecode char(3)   NOT NULL,
 station_name char(10)   NOT NULL,
 board_train_code char(8)   NOT NULL,
 command_no char(7)   NOT NULL,
 command_code char(1)   NOT NULL,
 inform_type char(1)   NOT NULL,
 day_difference INTEGER   NOT NULL,
 arrive_time char(4)   NOT NULL,
 start_time char(4)   NOT NULL,
 time_interval INTEGER   NOT NULL,
 command_id char(16)   NOT NULL,
 operate_time datetime   NOT NULL,
 operater_no char(4)   NOT NULL,
 operater_name char(8)   NOT NULL,
 command_enable INTEGER   NOT NULL
);
Truncate Table tmp_center_notice;

-- drop temporary table if exists tmp_center_notice1;
CREATE Temporary TABLE if not exists  tmp_center_notice1
(
 inner_code char(3)   NOT NULL,
 start_date char(8)   NOT NULL,
 stop_date char(8)   NOT NULL,
 train_no char(12)   NOT NULL,
 running_style INTEGER   NOT NULL,
 running_rule int   NOT NULL,
 station_no char(2)   NOT NULL,
 station_telecode char(3)   NOT NULL,
 station_name char(10)   NOT NULL,
 board_train_code char(8)   NOT NULL,
 command_no char(7)   NOT NULL,
 command_code char(1)   NOT NULL,
 inform_type char(1)   NOT NULL,
 day_difference INTEGER   NOT NULL,
 arrive_time char(4)   NOT NULL,
 start_time char(4)   NOT NULL,
 time_interval INTEGER   NOT NULL,
 command_id char(16)   NOT NULL,
 operate_time datetime   NOT NULL,
 operater_no char(4)   NOT NULL,
 operater_name char(8)   NOT NULL,
 command_enable INTEGER   NOT NULL
);
delete from  tmp_center_notice1;

-- drop temporary table if exists tmp_cancel_limit_define;
CREATE Temporary TABLE if not exists  tmp_cancel_limit_define
(
inner_code char(3)   NOT NULL,
start_date char(8)   NOT NULL,
stop_date char(8)   NOT NULL,
train_code char(8)   NOT NULL,
start_station_name char(10)   NOT NULL,
end_station_name char(10)   NOT NULL,
station_telecode char(3)   NOT NULL,
cancel_office_no char(7)   NOT NULL,
cancel_window_no tinyint   NOT NULL,
ahead_time int   NOT Null,  
location_code char(2)   NOT NULL,
office_no char(7)   NOT NULL,
window_no tinyint   NOT NULL,
operater_no char(4)   NOT NULL,
operater_time datetime   NOT NULL,
flag1 char(10)   NOT NULL,
flag2 char(10)   NOT NULL,
running_style tinyint DEFAULT  '1' NOT NULL,
running_rule int DEFAULT  '1' NOT NULL,
seat_type_code char(1) DEFAULT  '*' NOT NULL,
purpose_code char(2) DEFAULT  '*' NOT NULL,
train_type char(1) DEFAULT  '*' NOT NULL,
sale_mode char(1) DEFAULT  '*' NOT NULL,
far_from_station char(3) DEFAULT  '*' NOT NULL,
level_flag int DEFAULT  0 NOT NULL
);
delete from tmp_cancel_limit_define;

CREATE Temporary TABLE If Not Exists tmp_train_group
(
 group_code   char(20)
 );
delete from tmp_train_group;

/*建立临时表时间*/
Set @d2 = now(),l_today = CURDATE()+0;
if out_in=9 then
select '22===',purpose_code_in;
end if;

/*-----------------------------------------增加用途自动关联的查询处理.20130717.zzq-----------------------------------------------------------*/
/*获取取票用途的关联代码，指定车站的优先，每个用途只能在一个组中存在，不能交叉出现在两组中.20071226.zzq*/
/*charindex(purpose_code,purpose_code_in) % 2 = 1    指定用途*/
/*ltrim(rtrim(obligate1)) = '1'   增加主用途的处理,为了往返票和联程票增加,一个用途可以出现在不同的组中,但是不能同时是主用途.20090223*/
Select  relation_code Into l_relation_code FROM basic.DG50_purpose_relate_define 
WHERE inner_code = 'AD' AND start_date <= l_today AND stop_date  >= l_today AND station_telecode = '***' 
AND instr(purpose_code_in,purpose_code) % 2 = 1 AND trim(obligate1) = '1' 
ORDER BY relation_code Limit 1;

set l_error =  @@error_count,l_rowcount = found_rows();

#select l_relation_code;

set record_not_found = 0;
if out_in=9 then
 select '23===',l_today,l_relation_code;
end if;
begin -- 处理游标代码块
/*本局定义需要窗口赋相应的用途权限,全路定义不需要赋相应的权限.20130717.zzq*/
 DECLARE purpose_cursor CURSOR FOR
  SELECT  purpose_code FROM basic.DG50_purpose_relate_define
   WHERE inner_code = 'AD' 
     AND start_date <= l_today
     AND stop_date  >= l_today
     AND relation_code = l_relation_code
     AND trim(obligate1) >= '1'
    
     ORDER BY obligate1;
 OPEN purpose_cursor;

 loop_purpose: 
 WHILE 1 = 1 do
  FETCH purpose_cursor INTO t_purpose_code;
  if out_in=9 then
  select '24_1===',t_purpose_code;
  end if;
  if record_not_found = 1 THEN
    leave loop_purpose;
   end IF;

  IF instr(purpose_code_in,t_purpose_code) % 2 = 0 THEN 
    set purpose_code_in = concat(purpose_code_in,t_purpose_code);
    
  end if;
  if out_in=9 then
  select '24_2===',t_purpose_code,purpose_code_in;
  end if;
 End While loop_purpose;

 CLOSE purpose_cursor;
end; -- 结束游标purpose_cursor代码块
if out_in=9 then
select '20===',purpose_code_in;
end if;

/*-----------------------------------------增加用途自动关联的查询处理.20130717.zzq----------------------------------------------------------------*/

/*用途转换.20120528.zzq*/
Set l_tmp_purpose = purpose_code_in,l_purpose_list = '';
loop_purpose_list:
WHILE 1 = 1 do
 Set t_purpose_code = LEFT(ltrim(l_tmp_purpose),2);
 Set l_tmp_purpose  = INSERT(ltrim(l_tmp_purpose),1,2,'  ');

 IF t_purpose_code = '' OR t_purpose_code IS NULL Then
     leave loop_purpose_list;
  End If;
 Set l_purpose_list = concat(rtrim(l_purpose_list),t_purpose_code, ',');

End While loop_purpose_list;
/*20120528.zzq*/
if out_in=9 then
select '21_1==',l_purpose_list,purpose_code_in,l_purpose_list;
end if;
/*update for 席位自动预分.20100814.zzq.zlj*/
IF instr(l_purpose_list,'00') > 0 AND instr(l_purpose_list,'02') = 0 Then
   Set purpose_code_in = concat(rtrim(purpose_code_in),'02'),l_purpose_list = concat(rtrim(l_purpose_list),'02,');
End If;
if out_in=9 then
select '21_1_1==',l_purpose_list,purpose_code_in,l_purpose_list;
end if;
/*update for 残疾人用途.20120426.zzq.sxh*/
IF instr(l_purpose_list,'1C') > 0 AND instr(l_purpose_list,'2C') = 0 Then
   set purpose_code_in = concat(rtrim(purpose_code_in),'2C'),l_purpose_list = concat(rtrim(l_purpose_list),'2C,');
End If;
 if out_in=9 then
 select '21_2==',l_purpose_list,purpose_code_in,l_purpose_list;
 end if;

Set l_to_Range = range_in,l_bed_code_list = '3456',l_share_train_flag = 0,l_purpose_code_cache = purpose_code_in;

IF out_in IN (3,9) Then 
   -- Set out_in = 1,l_show_time = 1;-- 李杨20160120修改，测试完毕记得修改回来
   select 'commenting out one row code ,if modify finish please restore 20160120 by liyang';
ELSE 
   IF out_in = 4 Then
      Set out_in = 0 ,l_show_time = 1;
   ELSE 
      Set l_show_time = 0;
   End If;
End If;

SELECT my_center_code Into l_my_center_code FROM center.DG30_my_center;

IF @show_time = 1 then
 SELECT '------------------------------------------------DBG.001.查询所有用途-----------------------------------------------------------------';
 SELECT char_length(trim(purpose_code_in))/2 AS purpose_num,Left(rtrim(purpose_code_in),50) AS purpose_code,Left(rtrim(l_purpose_list),50) AS purpose_list;
END if;

/*获取车次信息*/
begin
 -- declare st_start_time datetime;
 -- declare st_end_time datetime;
 -- set st_start_time=now();
 -- select 'st_start_time=',st_start_time;
 Set @l_sql = concat('INSERT INTO tmp_query_train_info SELECT *,0 FROM ',train_info_in);

 #select  @l_sql;

 prepare stmt_1 from @l_sql;

 EXECUTE stmt_1;

 set l_error =  @@error_count,l_rowcount = row_count();

 drop PREPARE stmt_1;
 
 -- set st_end_time=now();
 -- select 'stmt exectue time:',TIMESTAMPDIFF(second,st_start_time,st_end_time);
end ;
set lab1_s = 1;
lab1:loop
if lab1_s = 0 THEN
  leave lab1;
end if;

IF l_rowcount = 0 OR l_error !=0 then 
 -- select 'leave lab1;';
 LEAVE lab1;
end if;
set temp_out = l_rowcount;
  if out_in=9 then 
  select '25===select * from tmp_query_train_info';
-- select * from tmp_query_train_info;
  end if;

/*************************************************begin.批量缓存相关的查询判断数据20100801.zzq*********************************************/
/*发站须一致或同城*/
Select train_date,from_station,to_station Into l_train_date,l_from_station,l_to_station 
FROM tmp_query_train_info Limit 1;
set l_error =  @@error_count,l_rowcount = row_count();
IF l_rowcount = 0 OR l_error !=0 Then
 select '26===leave lab1;';
   LEAVE lab1;
End If;

/*获取车次列表的最小日期和最大日期.20130329.zzq*/
SELECT min(train_date),max(train_date) Into l_min_train_date,l_max_train_date FROM tmp_query_train_info;

/*获取查询车站的信息*/
Select bureau_code,subbureau_code,city_code 
Into l_sale_bureau,l_sale_subbureau,l_city_code 
FROM basic.station_dictionary 
WHERE station_telecode = inner_code_in;

set l_error =  @@error_count,l_rowcount = row_count();

IF l_rowcount = 0 OR l_error !=0 Then
   LEAVE lab1;
ELSE 
 /*优化.20090414.zzq*/
  /*售票站的联合站*/
  INSERT INTO tmp_union_station  
   SELECT station_telecode FROM basic.DG50_same_city_dictionary 
    WHERE start_date <= l_train_date 
      AND stop_date >= l_train_date
      AND city_code =  l_city_code
      AND station_telecode <> inner_code_in
      AND union_flag = '1';
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_error !=0 Then
       LEAVE lab1;
    End If;
End If;

/*计算乘车局*/
SELECT bureau_code Into l_board_bureau_code
 FROM basic.station_dictionary
 WHERE station_telecode = l_from_station
 AND start_date  <= l_train_date
 AND stop_date   >= l_train_date;
set l_error =  @@error_count,l_rowcount = row_count();
IF l_rowcount = 0 OR l_error !=0 Then
   LEAVE lab1;
end if; 

/*记录日志使用.20110304.zzq*/
Set temp_board_station  = l_from_station           
 , temp_end_station   = l_to_station
 , temp_board_train_date  = l_train_date
 , temp_directions    = '*'  
 , temp_telecode_list   = 'DS60_ticket_left'
 , temp_station_train_code = '%'
 , temp_purposes    = purpose_code_in  
 , temp_inner_code    = inner_code_in 
 , temp_range     = range_in   
 , temp_flag      = 0  
 , temp_seat_type_list  = '%'
 , temp_out      = temp_out
 , temp_kind      = concat(sale_mode_in , ':' , trim(CONVERT(temp_out,CHAR)) , ' Rows');

/*************************************************end.批量缓存相关的查询判断数据20100801.zzq*********************************************/

/*下载余票信息.20100822.zzq*/
INSERT INTO tmp_query_info SELECT DISTINCT train_no,train_code FROM tmp_query_train_info;
 if out_in=9 then
  select '31====select * from tmp_query_info';
  -- select * from tmp_query_info;
 end if;
/*缓存停靠站表*/
INSERT INTO tmp_stop_time
 SELECT DISTINCT a.start_date ,a.stop_date ,a.train_no ,a.station_name ,a.station_telecode ,a.station_no,
 a.station_train_code ,a.bureau_code ,a.subbureau_code ,a.day_difference ,a.arrive_time ,a.start_time 
 FROM basic.stop_time a,tmp_query_info b 
 WHERE a.train_no = b.train_no;

 if out_in=9 then
   select '31_1====select * from tmp_stop_time';
--   select * from tmp_stop_time;
--  select '31_2===select * from tmp_query_info';
--  select * from tmp_query_info;
 end if;

INSERT INTO tmp_train_dir 
 SELECT DISTINCT a.* FROM basic.train_dir a,tmp_query_info b
 WHERE a.train_code = b.train_code;
 
 if out_in=9 then
   select '31_1_1====select * from DJ50_train_sale_define',l_board_bureau_code,l_today,sale_mode_in;
--   select * from tmp_stop_time;
 -- show create table DS60_ticket_left_tmp_train_para_define;
 
--  select '31_2===select * from tmp_query_info';
--  select * from tmp_query_info;
 end if;
/*查询车次预售期,判断车次的预售期*/
INSERT INTO DS60_ticket_left_tmp_train_para_define 
 SELECT * FROM basic.DJ50_train_sale_define 
   WHERE inner_code   = l_board_bureau_code 
   AND start_date  <= l_today
   AND stop_date   >= l_today
   AND ticket_type NOT IN (3,12) 
   AND flag1 IN ('*',sale_mode_in)
   AND flag2 IN ('*','');

 if out_in=9 then
  select '31_2====select * from DS60_ticket_left_tmp_train_para_define';
--  select * from DS60_ticket_left_tmp_train_para_define;
 end if;

/*下载始发管理的车次售票时间定义.20121025.zzq*/
INSERT INTO DS60_ticket_left_tmp_train_para_define 
 SELECT * FROM basic.DJ50_train_sale_define 
   WHERE start_date  <= l_today
   AND stop_date   >= l_today
   AND train_code  IN (SELECT train_code FROM tmp_query_info)
   AND station_telecode = '*'
   AND flag1 IN ('*',sale_mode_in)
   AND flag2 = '1';

 if out_in=9 then
 select '31_3====select * from DS60_ticket_left_tmp_train_para_define';
  select * from DS60_ticket_left_tmp_train_para_define;
 end if;
/*为上海大卖场大屏余票显示增加的特殊处理,提前20分钟显示余票.20110111.zzq*/
UPDATE DS60_ticket_left_tmp_train_para_define SET ahead_time = 0
WHERE inner_code = 'H';

#select * from tmp_query_info;
#select count(*) from tmp_stop_time;
#select count(*) from tmp_train_dir;
#select * from DS60_ticket_left_tmp_train_para_define;

/*获取车次的调令*/
INSERT INTO tmp_center_notice1 SELECT a.* FROM basic.CJ30_center_notice a,tmp_query_info b 
 WHERE a.train_no = b.train_no
 AND a.command_code IN ('S','U','Q','R','V','W','0','1','M')        
 AND a.command_enable = 0 
 AND a.stop_date  >= date_add(now(),interval -2 day)
 AND ((l_to_station != '%') OR (l_to_station = '%' AND a.station_telecode IN (l_from_station,'*')));

/*-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_center_notice1' and INDEX_NAME='notice_idx';
-- select @cnt;
-- if @cnt=0 THEN
select count(*),'tmp_center_notice1' from tmp_center_notice1;
  CREATE INDEX notice_idx ON tmp_center_notice1(train_no,station_telecode);
-- end if;*/

#select purpose_code_in;

/*增加取消以远站的缓存.20091121.zzq*/
/*优化口径改成乘车局或站.20150114.zzq*/
/*改成乘车日期段.20130329.zzq*/
-- select '31_1====';
INSERT INTO tmp_cancel_limit_define 
 SELECT a.* FROM basic.DJ50_cancel_limit_define a , tmp_query_train_info b
 WHERE a.inner_code IN (l_from_station,l_board_bureau_code)
   AND a.start_date <= l_max_train_date    
   AND a.stop_date  >= l_min_train_date
   AND (a.train_code = b.train_code OR a.train_code = '*' OR b.train_code LIKE a.train_code)  
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (a.purpose_code   = '*' OR instr( purpose_code_in,a.purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND a.cancel_office_no   = '%'
   AND a.cancel_window_no   = 0;
-- select '31_2====';
INSERT INTO tmp_cancel_limit_define
 SELECT a.* FROM basic.DJ50_cancel_limit_define a  , tmp_query_train_info b
 WHERE inner_code IN (SELECT station_telecode FROM tmp_stop_time where station_telecode<>l_from_station) 
   AND a.start_date <= l_max_train_date    
   AND a.stop_date  >= l_min_train_date
   AND (a.train_code = b.train_code OR a.train_code = '*' OR b.train_code LIKE a.train_code)  
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (a.purpose_code   = '*' OR instr( purpose_code_in,a.purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND a.cancel_office_no   = '%'
   AND a.cancel_window_no   = 0;
-- select '31_3====';
/*INSERT INTO tmp_cancel_limit_define 
 SELECT * FROM basic.DJ50_cancel_limit_define a
 WHERE inner_code IN (l_from_station,l_board_bureau_code)
   AND start_date <= l_max_train_date    
   AND stop_date  >= l_min_train_date
   AND (train_code IN (SELECT train_code FROM tmp_query_train_info) OR train_code = '*' OR EXISTS(SELECT 1 FROM tmp_query_train_info WHERE train_code LIKE a.train_code))  
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (purpose_code   = '*' OR instr( purpose_code_in,purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND cancel_office_no   = '%'
   AND cancel_window_no   = 0
 UNION                              #改成UNION,相同的自动排除掉.20130526.zzq 
 SELECT * FROM basic.DJ50_cancel_limit_define a
 WHERE inner_code IN (SELECT station_telecode FROM tmp_stop_time) 
   AND start_date <= l_max_train_date 
   AND stop_date  >= l_min_train_date
   AND (train_code IN (SELECT train_code FROM tmp_query_train_info) OR train_code = '*' OR EXISTS(SELECT 1 FROM tmp_query_train_info WHERE train_code LIKE a.train_code)) 
   AND sale_mode IN (sale_mode_in,'*')                                  #判售票方式.20130526.zzq
   AND (purpose_code   = '*' OR instr( purpose_code_in,purpose_code) % 2  = 1 )                     #增加用途处理.20130526.zzq
   AND cancel_office_no   = '%'
   AND cancel_window_no   = 0;
*/


/*-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_cancel_limit_define' and INDEX_NAME='cancel_limit_idx';
-- if @cnt=0 THEN
select count(*),'tmp_cancel_limit_define' from tmp_cancel_limit_define;
  CREATE INDEX cancel_limit_idx ON tmp_cancel_limit_define (train_code,station_telecode);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_train_dir' and INDEX_NAME='train_dir_idx';
-- if @cnt=0 THEN
select count(*),'tmp_train_dir' from tmp_train_dir;
  CREATE INDEX train_dir_idx ON tmp_train_dir (train_code);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_stop_time' and INDEX_NAME='stop_time_idx';
-- if @cnt=0 THEN
select count(*),'tmp_stop_time' from tmp_stop_time;
  CREATE INDEX stop_time_idx ON tmp_stop_time (train_no,station_telecode);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_union_station' and INDEX_NAME='union_idx';
-- if @cnt=0 THEN
select count(*),'tmp_union_station' from tmp_union_station;
  CREATE INDEX union_idx ON tmp_union_station (station_telecode);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='DS60_ticket_left_tmp_train_para_define' and INDEX_NAME='define_idx';
-- if @cnt=0 THEN
select count(*),'DS60_ticket_left_tmp_train_para_define' from DS60_ticket_left_tmp_train_para_define;
  CREATE INDEX define_idx ON DS60_ticket_left_tmp_train_para_define (inner_code,station_telecode,purpose_code);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_query_train_info' and INDEX_NAME='query_idx';
-- if @cnt=0 THEN
select count(*),'tmp_query_train_info' from tmp_query_train_info;
  CREATE INDEX query_idx ON tmp_query_train_info (train_date,train_no,train_code,from_station,to_station);
-- end if;
-- select count(*) into @cnt from information_schema.STATISTICS where TABLE_NAME='tmp_query_info' and INDEX_NAME='query_idx';
-- if @cnt=0 THEN
select count(*),'tmp_query_info' from tmp_query_info;
  CREATE INDEX query_idx ON tmp_query_info (train_no,train_code);
-- end if;*/



#select * from tmp_center_notice1;
#select * from tmp_cancel_limit_define;

/*建缓存时间*/
set l_t2 = 0
 ,  l_d2 = now()
 ,  l_t3 = 0
 ,  l_t4 = 0
 ,  l_t5 = 0
 ,  l_t6 = 0
 ,  l_t7 = 0
 ,  l_t8 = 0
 ,  l_t9 = 0;

/*************************************************begin.逐趟车计算余票信息*****************************************************************/
if out_in=9 then
 select '101====select * from tmp_query_train_info';
  select * from tmp_query_train_info;
end if;
lab_left:
WHILE 1 = 1 do
 if out_in=9 then
  select '101_1 is here';
  end if;
 IF NOT EXISTS(SELECT 1 FROM tmp_query_train_info WHERE flag = 0 ) Then
    --  if out_in=9 THEN
   --   select '101===is here';
   -- end if;
       LEAVE lab_left;
  End If;

 set l_d3 = now(),l_cancel_purpose = '';

 /*获取车次基本信息*/
 SELECT train_date,train_no,from_station,to_station,train_code
 into l_train_date,l_train_no,l_from_station,l_to_station,l_train_code
  FROM tmp_query_train_info
  WHERE flag = 0 limit 1;

#select l_train_date,l_train_no,l_from_station,l_to_station,l_train_code;

 UPDATE tmp_query_train_info SET flag = 1
  WHERE train_date  = l_train_date 
    AND train_no  = l_train_no
    AND train_code = l_train_code
    AND from_station = l_from_station
    AND to_station  = l_to_station
    AND flag = 0;

 /*计算最小站序*/
 SELECT min(station_no) 
 into l_min_station_no
  FROM tmp_stop_time
  WHERE train_no = l_train_no;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 OR l_error !=0 Then
    if out_in=9 THEN
    select '101_2===is here';
    end if;
   Iterate lab_left;
 end if; 

 /*获取乘车站及乘车站信息*/
 IF l_from_station != '%' THEN 
  SELECT start_time,day_difference,subbureau_code,station_no
   into l_start_time,l_day_difference_from,l_board_subbureau_code,l_from_station_no
   FROM tmp_stop_time 
   WHERE train_no = l_train_no
    AND station_telecode = l_from_station LIMIT 1;

   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 OR l_error !=0 Then
      if out_in=9 THEN
        select '101_3===is here';
      end if;
     Iterate lab_left;
   end if; 

#select '1',l_start_time,l_day_difference_from,l_board_subbureau_code,l_from_station_no;

 ELSE #没有输入发站时按照售票站(车站必须是车次的停靠站)查询站车次等信息
  SELECT station_telecode,station_no,start_time,day_difference,subbureau_code
   into l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code
   FROM  tmp_stop_time
   WHERE train_no = l_train_no
    AND station_telecode = inner_code_in ;
  set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error !=0 Then
      if out_in=9 THEN
       select '101_4===is here';
      end if;
     Iterate lab_left;
   end if; 

#select '2',l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code;

  IF l_rowcount = 0 then #按照售票站同城车站(车站必须是车次的停靠站)查询站车次等信息,否则按照始发站查询
   SELECT station_telecode,station_no,start_time,day_difference,subbureau_code
    into l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code
    FROM  tmp_stop_time
    WHERE train_no = l_train_no
     AND station_telecode IN (SELECT station_telecode FROM tmp_union_station)
    ORDER BY station_no DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error !=0 Then
      if out_in=9 THEN
       select '101_5===is here';
      end if;
     Iterate lab_left;
   end if; 

#select '3',l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code;

   IF l_rowcount = 0 THEN
    SELECT station_telecode,station_no,start_time,day_difference,subbureau_code
     into l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code
     FROM  tmp_stop_time
     WHERE train_no = l_train_no
       AND station_no = l_min_station_no LIMIT 1;
    set l_error =  @@error_count,l_rowcount = row_count();
    IF l_rowcount = 0 OR l_error !=0 Then
       if out_in=9 THEN
        select '101_6===is here';
       end if;
      Iterate lab_left;
    end if; 

#select '4',l_from_station,l_from_station_no,l_start_time,l_day_difference_from,l_board_subbureau_code;

   END if;
  END if;
 End if;

#----------------------------------------------------------------------------modify by hzp 20140930 begin-------------------------------
#delete from tmp_train_group;
-- select 'inser into tmp_train_group';
-- set ccount1=ccount1+1;
-- select ccount1;
insert into tmp_train_group
select group_code
  from basic.DJ52_train_group_define
 where inner_code = l_board_bureau_code 
   and module_code='J' 
   and type_code='T' 
   and start_station_telecode = l_from_station;
     

#insert into tmp_train_group values ('*');

#select * from tmp_train_group;

#----------------------------------------------------------------------------modify by hzp 20140930 end-------------------------------

 set l_start_datetime = str_to_date( concat(l_train_date,l_start_time) ,'%Y%m%d%H%i');

 /*过滤掉过点的车次*/
 IF out_in != 1 THEN #大屏需要显示所有的余票
  IF l_train_date <= l_today THEN
   /*当天开车后10分钟的车次不再显示*/
   IF timediff( l_start_datetime , NOW()) <= -10 THEN
    -- if out_in=9 THEN
      --  select '101_7===is here';
      -- end if;
     Iterate lab_left;
   end if;
  END if;
 END if;
 /*计算始发日期.20110111.zzq*/
 set l_start_train_date = date_format(date_add(l_train_date, INTERVAL 0 - l_day_difference_from DAY),'%Y%m%d');
if out_in=9 THEN
 select '110=====select * from tmp_stop_time',l_to_station;
 select * from  tmp_stop_time;
end if; 
 /*获取到站信息*/
 IF l_to_station != '%' THEN
  SELECT day_difference,station_no
   into l_day_difference_to,l_to_station_no
   FROM  tmp_stop_time
   WHERE train_no = l_train_no
    AND station_telecode = l_to_station
   ORDER BY station_no  LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_rowcount = 0 OR l_error !=0 Then
     -- if out_in=9 THEN
      --  select '101_8===is here';
      -- end if;
     Iterate lab_left;
   end if; 
 END if;

 /*获取车次目录信息*/
 SELECT start_station_name,end_station_name,train_type_code,start_date 
  #增加开行规律的处理.20110218.zzq
  ,running_style,running_rule,train_class_code
  into l_start_station_name,l_end_station_name,l_train_type,l_start_date,l_running_style,l_running_rule,l_train_class_code
  FROM tmp_train_dir 
   WHERE train_code  = l_train_code
     AND subbureau_code = substring(l_train_no,1,2)
     AND double_id  = substring(l_train_no,11,1)
     AND schema_id  = substring(l_train_no,12,1);
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_rowcount = 0 OR l_error !=0 Then
    -- if out_in=9 THEN
      --  select '101_9===is here';
      --  select * from tmp_train_dir;
      -- end if;
    Iterate lab_left;
  end if; 

 /*增加开行规律的判断.20110218.zzq*/
 IF l_running_style != 1 THEN
  SET l_date_after = datediff(l_train_date,l_start_date) - l_day_difference_from ;
  SET l_date_after = l_date_after % l_running_style ;
  IF l_running_rule & power(2,l_date_after) = 0 THEN
   -- if out_in=9 THEN
     --   select '101_10===is here';
      -- end if;
    Iterate lab_left;
  end if; 
 END if;

 /*获取始发车次及始发终到站*/
 set l_train_code = l_train_no;
 if out_in=9 then
  select 'call arith.CS50_Get_Train_Parameter',l_train_code,l_start_station_telecode,l_end_station_telecode;
 end if;
 CALL arith.CS50_Get_Train_Parameter(l_train_code, l_start_station_telecode, l_end_station_telecode,NULL) ;
 if out_in=9 then
    select 'end call arith.CS50_Get_Train_Parameter';
 end if;

#select l_train_code,l_start_station_telecode,l_end_station_telecode;

 /*计算可查询票额的范围*/
 IF l_sale_bureau != l_board_bureau_code then 
   set l_From_Range = 4;
 ELSEIF l_sale_subbureau != l_board_subbureau_code THEN 
     set l_From_Range = 3;
 ELSEIF inner_code_in != l_from_station THEN
  if out_in=9 then
   select 'call arith.CS50_Same_City',l_train_date,inner_code_in,l_from_station,'1',return_out;
  end if;
  CALL arith.CS50_Same_City(l_train_date,inner_code_in,l_from_station,'1',return_out); #判断是否同城通售:1-同城通售,0-不同城通售
  if out_in=9 then
   select 'end call arith.CS50_Same_City',l_train_date,inner_code_in,l_from_station,'1',return_out;
  end if;
  IF return_out = 1 THEN 
    set l_From_Range = 1;              #可同城互售,联合站级,即同城通售
  ELSE 
    set l_From_Range = 2;
  end if;
 ELSE 
  set l_From_Range = 0;
 end if;

#select return_out,l_From_Range;

 /*获取指定车次在指定车站的管理局码(目前全部为始发管理).20121025.zzq*/
 SELECT inner_code into l_start_bureau_code
  FROM basic.DG50_train_admin_auth
   WHERE train_code      = l_train_code
     AND start_station_telecode = l_start_station_telecode
     AND end_station_telecode   = l_end_station_telecode
     AND station_telecode    = l_from_station;
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_rowcount = 0 then 
   set l_start_bureau_code = l_board_bureau_code;
  end if;
 
 #增加铁道部级查询主机的功能.20140111.zzq
 IF l_my_center_code = 'AD' THEN
  #异地票不允许查余票
  IF l_sale_bureau != l_board_bureau_code THEN
    -- if out_in=9 THEN
      --  select '101_11===is here';
      -- end if;
    Iterate lab_left;
  end if;
 END if;

#select l_start_bureau_code,l_rowcount,l_board_bureau_code,l_sale_bureau;

 IF l_show_time = 1 THEN
  select  '------------------------------------------------DBG.010.查询参数-----------------------------------------------------------------';
  SELECT l_train_date AS train_date,l_train_no AS train_no,l_from_station AS from_station,l_to_station AS to_station,l_train_code AS train_code
   , l_start_bureau_code AS start_bureau_code,l_From_Range AS From_Range;
 END if;
 -- select count(*) ,'tmp_cneter_notiec' from tmp_center_notice;
 delete from  tmp_center_notice;
 INSERT INTO tmp_center_notice SELECT * FROM tmp_center_notice1 WHERE train_no = l_train_no;
 IF row_count() = 0 THEN
   SET l_center_notice = '';
 ELSE 
   set l_center_notice = 'tmp_center_notice';
 end if;

#select count(*) from tmp_center_notice;

 /*发站的调令处理*/
 IF l_center_notice = 'tmp_center_notice' THEN #普通查询要判断发站是否封站
  SELECT command_code into l_command_code
   FROM  tmp_center_notice 
    WHERE train_no = l_train_no
    AND station_telecode = l_from_station
    AND command_code IN ('Q','R') #发站的封站&解封
    AND start_date   <= l_train_date
    AND stop_date    >= l_train_date
    AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
   ORDER BY operate_time DESC LIMIT 1;
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_error != 0 THEN 
   -- if out_in=9 THEN
      --  select '101_12===is here';
      -- end if;
    Iterate lab_left;
  end if;
  IF l_rowcount >= 1 AND l_command_code = 'Q' THEN
   
    Iterate lab_left;
  end if;

  /*增加停运及恢复的处理.20130619.zzq*/
  SELECT command_code into l_command_code
   FROM  tmp_center_notice 
    WHERE train_no = l_train_no
    AND command_code IN ('0','1') 
    AND start_date   <= l_start_train_date
    AND stop_date    >= l_start_train_date
    AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
   ORDER BY operate_time DESC limit 1;
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_error != 0 THEN 
    Iterate lab_left;
  end if;
  IF l_rowcount >= 1 AND l_command_code = '0'  THEN
    Iterate lab_left;
  end if;
  /*end.20130619.zzq*/

  /*指定到站的调令判断*/
  IF l_to_station != '%' THEN
   set l_arrive_date = date_format(Date_add(l_train_date,INTERVAL l_day_difference_to - l_day_difference_from DAY),'%Y%m%d');
   SELECT command_code into l_command_code
    FROM  tmp_center_notice 
     WHERE train_no = l_train_no
     AND station_telecode = l_to_station
     AND command_code   IN ('Q','R') #到站的封站&解封
     AND start_date   <= l_arrive_date
     AND stop_date    >= l_arrive_date
     AND running_rule & (power(2,datediff(l_arrive_date,start_date) % running_style)) > 0 
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'Q' THEN
     Iterate lab_left;
   end if;

   SELECT command_code into l_command_code
    FROM  tmp_center_notice 
     WHERE train_no = l_train_no
     AND station_telecode = l_to_station
     AND command_code   IN ('V','W') #到站的不可售到&恢复
     AND start_date   <= l_arrive_date
     AND stop_date    >= l_arrive_date
     AND running_rule & (power(2,datediff(l_arrive_date,start_date) % running_style)) > 0 
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'V' THEN
     Iterate lab_left;
   end if;


   #指定区间停售功能.20131022.zzq
   SELECT command_code into l_command_code
    FROM  basic.CJ30_center_notice 
     WHERE inner_code   = l_start_bureau_code    #管理局(目前为始发管理)
     AND train_no     IN (l_train_no,'*')
     AND station_telecode IN (l_from_station,'*')   #指定区间停售的发站电报码
     AND station_name   IN (l_to_station,'*')    #指定区间停售的到站电报码
     AND command_code   = 'M'          #指定车次及区间停售标志码
     AND start_date   <= l_start_train_date    #始发日期
     AND stop_date    >= l_start_train_date
     AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
    ORDER BY operate_time DESC limit 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'M' THEN
     Iterate lab_left;
   end if;

   SELECT command_code into l_command_code
    FROM  basic.CJ30_center_notice 
     WHERE inner_code   = l_start_train_date       #管理局(目前为始发管理)  start_train_date???
     AND l_train_code   LIKE train_no         #始发车次train_code
     AND station_telecode  = '*'            #指定区间停售的发站电报码
     AND station_name    = '*'            #指定区间停售的到站电报码
     AND command_code   = 'M'             #指定车次及区间停售标志码
     AND start_date   <= l_start_train_date       
     AND stop_date    >= l_start_train_date
     AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'M' THEN
     Iterate lab_left;
   end if;

   SELECT command_code into l_command_code
    FROM  basic.CJ30_center_notice 
     WHERE train_no    = '*'
     AND station_telecode  = l_from_station
     AND command_code   = 'Z'  #指定站停售
     AND start_date   <= l_train_date    #乘车日期
     AND stop_date    >= l_train_date
     AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
       AND  command_enable   = 0
    ORDER BY operate_time DESC LIMIT 1;
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount >= 1 AND l_command_code = 'Z' THEN
     Iterate lab_left;
   end if;

  END if;
  IF EXISTS(SELECT 1 FROM tmp_center_notice WHERE command_code IN ('S','U')) THEN  #优化停售的处理.20120316.zzq
   DELETE FROM tmp_center_notice WHERE command_code NOT IN ('S','U');
  ELSE
   set l_center_notice = '';
  end if;
 END if;

 IF l_show_time = 1 THEN
  select  '------------------------------------------------DBG.020.指定车次查询用途-----------------------------------------------------------------';
  SELECT l_train_date AS train_date,l_train_no AS train_no,l_from_station AS from_station,l_to_station AS to_station,l_train_code AS train_code
   , l_purpose_code_cache AS purpose_code_cache,l_purpose_list AS purpose_list;
 END if;
 /*--------------------------------------------新增预售期的判断.20100122.zzq---------------------------------------------------*/
 /*逐个用途判断.20120327.zzq*/
 set l_tmp_purpose = l_purpose_code_cache
  ,  l_purpose_cache = '';
 lab_control_day:
 WHILE NOT (l_tmp_purpose IS NULL OR l_tmp_purpose = '') DO
  set purpose_code_in = substring(l_tmp_purpose,1,2);
  set l_tmp_purpose  = ltrim(INSERT(l_tmp_purpose,1,2,''));

#select purpose_code_in,l_tmp_purpose;

  /*按席别判断预售期.20120107.zzq*/
  set l_train_period = 0;   #0-未到预售期,1-超过预售期

  /*增加车次售票时间始发管理的功能.20121025.zzq*/
  -- select '31_4====';
  SELECT control_day
   ,  lpad(ahead_time,4,'0')
   ,  control_train_day,
    from_period,
     control_min_date,
     start_date 
   , purpose_code    #update.20150114.zzq
   into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date,t_purpose_code
   FROM DS60_ticket_left_tmp_train_para_define
   WHERE inner_code   = l_start_bureau_code
    AND  train_code   = l_train_code AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name
    AND (station_telecode  in (l_from_station,'*')  and  group_code = '*'  #add  by hzp 20141116
       or                                                                 #add  by hzp 20141116
       station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) #add  by hzp 20141116
    AND train_type     IN (l_train_type,'*')
    AND purpose_code   IN (purpose_code_in,'*')
    AND flag1      IN (sale_mode_in,'*')   #售票方式
    AND flag2       = '1'        #始发管理标记.20121025.zzq
 #   AND seat_type_code   IN ('*')
 #   ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/

#----------------------------------------------------------------------------modify by hzp 20140930 begin-------------------------------
  #--cancel by zzq.20150114
  #  AND seat_type_code   IN (@seat_type_code,'*')
  #  AND group_code in ( select group_code from #train_group)
   AND (train_class = l_train_class_code OR train_class = "*")
    ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,table_range,seat_type_code,train_type,train_class,flag1;

#----------------------------------------------------------------------------modify by hzp 20140930 end-------------------------------
  set l_error =  @@error_count,l_rowcount = row_count();
  IF l_rowcount = 0 AND l_error = 0 THEN
   -- select '31_5====';
   SELECT control_day
    ,  lpad(ahead_time,4,'0')
    ,  control_train_day,
     from_period,
       control_min_date,
       start_date 
    , purpose_code    #update.20150114.zzq
    into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date,t_purpose_code
    FROM DS60_ticket_left_tmp_train_para_define
    WHERE inner_code = l_board_bureau_code
           AND (station_telecode  in (l_from_station,'*')  and  group_code = '*'  #add  by hzp 20141116
          or                                                                  #add  by hzp 20141116
          station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) #add  by hzp 20141116
     AND train_type     IN (l_train_type,'*')
     AND (train_code    IN (l_train_code,'*') OR (train_code != l_train_code AND l_train_code LIKE train_code) )
     AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
     AND flag1      IN (sale_mode_in,'*')   #售票方式
     AND flag2      IN ('*','')      #始发管理标记.20121025.zzq
  #   AND seat_type_code   IN ('*')
  #   ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/
#----------------------------------------------------------------------------modify by hzp 20140930 begin-------------------------------
  #cancel by zzq.20150114
  #  AND seat_type_code   IN (@seat_type_code,'*')
   #AND group_code in ( select group_code from #train_group)
    AND (train_class = l_train_class_code OR train_class = "*")
     ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,table_range ,seat_type_code,train_type,train_class,flag1 LIMIT 1;

#----------------------------------------------------------------------------modify by hzp 20140930 end-------------------------------
   set l_error =  @@error_count,l_rowcount = row_count();
  END if;

#select l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date,t_purpose_code,l_show_time,l_rowcount;

  IF l_show_time = 1 THEN
   select  '------------------------------------------------DBG.021.根据用途查询预售期.20150114.zzq-----------------------------------------------------------------';
   SELECT left(purpose_code_in,6) AS '查询用途',t_purpose_code AS '定义的用途',l_rowcount AS '查到的条数',l_max_day AS '预售期天数',tmp_start_time AS '起售时间',l_stop_date '截止时间';  
   SELECT flag2 AS '是否管理管理(1-是,其他-否)',purpose_code,control_day,control_train_day,DS60_ticket_left_tmp_train_para_define.* FROM DS60_ticket_left_tmp_train_para_define
    WHERE inner_code = l_board_bureau_code
           AND (station_telecode  in (l_from_station,'*')  and  group_code = '*'  #add  by hzp 20141116
          or                                                                  #add  by hzp 20141116
          station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) #add  by hzp 20141116
     AND train_type     IN (l_train_type,'*')
     AND (train_code    IN (l_train_code,'*') OR (train_code != @train_code AND @train_code LIKE train_code) )
     AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
     AND flag1      IN (sale_mode_in,'*')   #售票方式
    AND (train_class = l_train_class_code OR train_class = "*")
     ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,table_range ,seat_type_code,train_type,train_class,flag1;
  END if;

  IF l_rowcount > 0 THEN
   SET C_train_period = 0;
   -- SET l_date_after = datediff(l_train_date,now());
   SET l_date_after = timestampdiff(day,now(),l_train_date);
   IF l_date_after = l_max_day THEN
     SET tmp_start_datetime = str_to_date( concat(CURDATE(),tmp_start_time),'%Y-%m-%d%H%i' );
     IF (timediff( tmp_start_datetime, now()) < 0) THEN   #未到起售时间
      SET l_max_day = l_max_day - 1 ; #相对天数－1
     END if;
   END if;
   -- select l_date_after,l_max_day,l_train_date,l_stop_date;
   IF l_date_after > l_max_day THEN 
     set l_train_period = 1; #超过预售期的退出.20100920.zzq
   end if;
   IF l_train_date > l_stop_date then
     set l_train_period = 1;
   end if;

#select l_train_period;

#--------------以上判断是否超出变点后的预售期 20141011 hzp add begin ---------------------------
   SET l_now_datetime = DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s');
   SET l_start_datetime = str_to_date( concat(CURDATE() ,tmp_start_time),'%Y-%m-%d%H%i');
   
   if C_start_date = l_today and tmp_start_time <> "0000" THEN
    IF timediff(l_now_datetime,l_start_datetime) < 0 and l_train_date > C_control_min_date THEN  
      -- set l_max_day = datediff(C_control_min_date,now());
      set l_max_day = timestampdiff(day,now(),C_control_min_date);
    end if;
    if l_date_after > l_max_day then
      Set C_train_period = 1;
    end if;
   END if;

#select  l_max_day,C_train_period;

#--------------以上判断是否超出变点后的预售期 20141011 hzp add end ---------------------------
 
   /*预售期未到.20110929.zzq*/
   IF l_train_period = 1 or C_train_period = 1 THEN 
     set purpose_code_in = ''; #丢弃掉的用途 --20141011 hzp add 超出变点后预售期  或  变点前预售期有限制
   end if;
  END if;
  set l_purpose_cache = concat(rtrim(l_purpose_cache) , purpose_code_in , ',');

#select count(*) FROM tmp_cancel_limit_define;
#select l_to_station;
  
  /******************/
  -- select '31_6====';
  IF l_to_station  <> '%' then #@sale_bureau = @board_bureau_code and 
   SELECT ahead_time into l_ahead_time FROM tmp_cancel_limit_define
    WHERE inner_code IN (l_board_bureau_code,l_from_station)                        #口径改成乘车局或站.20150114.zzq
     and (train_code = l_train_code AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name OR train_code = '*' OR train_code != l_train_code AND l_train_code LIKE train_code) 
     AND  station_telecode IN (l_from_station,'*')
     AND  train_type IN ('*',l_train_type)                                #车次类型处理.20130526.zzq
     AND  purpose_code   IN ('*',purpose_code_in )                            #增加用途处理.20130526.zzq 
     AND start_date <= l_train_date      #增加乘车日期的处理.20130329.zzq
     AND stop_date >= l_train_date
     AND  sale_mode   IN ('*',sale_mode_in )
     AND running_rule & (power(2,datediff(l_train_date,start_date) % running_style)) > 0 
    ORDER BY level_flag ,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc ,ahead_time desc LIMIT 1; #增加排序.20090423.zzq
   set l_error =  @@error_count,l_rowcount = row_count();
   IF l_error != 0 THEN 
     Iterate lab_left;
   end if;
   IF l_rowcount = 0 then 
     set l_ahead_time = 0;
   end if;

   /*5.0规定时间内取消限售站的限制.20050418.zzq*/
   IF time_to_sec(timediff( l_start_datetime,now() ))/60 <= l_ahead_time THEN 
     set l_cancel_purpose = concat(l_cancel_purpose , purpose_code_in);      #@to_station_no_limit = '99'
   END if;
  END if;

  IF l_to_station  = '%' THEN
    set l_to_station_no = l_from_station_no,l_to_station_no_limit = '99';
  ELSE 
    set l_to_station_no_limit = l_to_station_no;   
  end if;

#select l_to_station_no,l_to_station_no_limit,l_cancel_purpose;

 END while lab_control_day;
 set purpose_code_in = l_purpose_cache;

#select purpose_code_in;

 IF l_show_time = 1 THEN
  select '------------------------------------------------DBG.020.指定车次可用的查询用途-----------------------------------------------------------------';
  SELECT purpose_code_in AS purpose_code,l_purpose_list AS purpose_list;
 END if;

 /*车次计算时间*/
 set l_d4 = now();
 set l_t3 = l_t3 ;

 /***************************************下载余票.20110228.zzq********************************************************/
 
 
 set l_start_date = l_start_train_date;

#select l_start_date,l_train_date;

/*SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
  ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
FROM center.left_base_center a
WHERE  a.train_no    = l_train_no
 AND a.train_date    = l_start_date
 AND a.station_no   <= l_from_station_no
 AND a.limit_station>= l_to_station_no
 AND a.range    >= l_From_Range
 AND a.range    <= l_To_Range
 AND instr(purpose_code_in,a.purpose_code) > 0
 AND a.ticket_quantity > 0
 AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
UNION ALL
SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
  ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
FROM center.left_base_AD a
WHERE  a.train_no    = l_train_no
 AND a.train_date    = l_start_date
 AND a.station_no   <= l_from_station_no 
 AND a.limit_station>= l_to_station_no
 AND a.range    >= l_From_Range
 AND a.range    <= l_To_Range
 AND instr(purpose_code_in,a.purpose_code) > 0
 AND a.ticket_quantity > 0
 AND a.station_no  < a.limit_station;*/

 WHILE l_start_date <= l_train_date DO 
 
   if out_in=9 then 
   select '51====',l_train_no,l_start_date,l_from_station_no,l_to_station_no,l_From_Range,l_To_Range,purpose_code_in;
   SELECT sql_no_cache a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
   ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
    UNION ALL
    SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_AD a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no 
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station;
   end if;
  -- select '1====',screen_flag_in;
  IF screen_flag_in = 0 THEN 
    
   set record_not_found = 0;
   begin -- 处理游标代码块
    DECLARE cursor_get_left CURSOR FOR 
    SELECT sql_no_cache a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
    UNION ALL
    SELECT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.range,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code,a.ticket_source
    FROM center.left_base_AD a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no 
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station; #优化到站为%的处理.20120411.zzq

    OPEN cursor_get_left;

    lab_get_left:
    WHILE 1 = 1 DO 
     FETCH cursor_get_left INTO
      t_train_no ,
      t_train_date ,
      t_station_no, 
      t_assign_station,
      t_far_from_station_no,
      t_limit_station,
      t_coach_no ,
      t_seat_type_code ,
      t_purpose_code ,
      t_range ,
      t_ticket_quantity ,
      t_up_quantity ,
      t_mid_quantity ,
      t_down_quantity ,
      t_wseat_type_code, 
      t_seat_feature,
      t_inner_code,
      t_ticket_source;
    
     if record_not_found = 1 THEN
       -- if out_in=9 THEN
       --  select '102===is here';
       -- end if;
       leave lab_get_left;
     end IF;
       
     INSERT INTO tmp_left_base VALUES
      (
       t_assign_station,
       t_train_no ,
       t_train_date ,
       t_station_no, 
       t_far_from_station_no,
       t_limit_station,
       t_coach_no ,
       t_seat_type_code ,
       t_purpose_code ,
       t_ticket_quantity ,
       t_up_quantity ,
       t_mid_quantity ,
       t_down_quantity ,
       t_ticket_source,
       t_range ,
       t_inner_code,
       t_wseat_type_code, 
       t_seat_feature
      );
    END while lab_get_left;
    CLOSE cursor_get_left;
   end;-- 结束游标cursor_get_left代码块
  ELSE #大屏调用.20130124.zzq

/*select '51====',l_train_no,l_start_date,l_from_station_no,l_to_station_no,l_From_Range,l_To_Range,purpose_code_in;
SELECT *
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station ;*/

/*INSERT INTO tmp_left_base(assign_station) SELECT assign_station FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station;
*/

   INSERT INTO  tmp_left_base(assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,
                purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,
                wseat_type_code,seat_feature) 
    SELECT sql_no_cache a.assign_station,a.train_no,a.train_date,a.station_no,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.ticket_source,a.range as table_range,a.inner_code,a.wseat_type_code,a.seat_feature
    FROM center.left_base_center a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station #优化到站为%的处理.20120411.zzq
    UNION 
    SELECT  a.assign_station,a.train_no,a.train_date,a.station_no,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
      ,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.ticket_source,a.range,a.inner_code,a.wseat_type_code,a.seat_feature
    FROM center.left_base_AD a
    WHERE  a.train_no    = l_train_no
     AND a.train_date    = l_start_date
     AND a.station_no   <= l_from_station_no 
     AND a.limit_station>= l_to_station_no
     AND a.range    >= l_From_Range
     AND a.range    <= l_To_Range
     AND instr(purpose_code_in,a.purpose_code) > 0
     AND a.ticket_quantity > 0
     AND a.station_no  < a.limit_station;  #优化到站为%的处理.20120411.zzq

  END if;
 
  set l_start_date = date_format(Date_add(l_start_date,interval 1 day),'%Y%m%d');
 END while;
 -- insert into tmp_left_base2 select * from tmp_left_base;
 
   if out_in=9 then
  select '52=====select * from tmp_left_base;';
  select * from tmp_left_base order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity;
   end if;

 /*下载余票时间*/
 set l_t4 = l_t4;
 /*无票的过滤*/
 IF NOT EXISTS(SELECT 1 FROM tmp_left_base) THEN 
   ITERATE lab_left;
 end if;
 set l_d5 = now();

 

 /**********************************************begin.查询余票信息*****************************************************/
 /*乘车站及乘车站联合站余票*/
 set l_cancel_purpose = trim(l_cancel_purpose);
  if out_in=9 then
  select '54===',l_train_date,l_train_no,l_from_station,l_to_station_no,l_to_station_no_limit,purpose_code_in,l_cancel_purpose,l_From_Range,l_To_Range;
  select * from tmp_left_base;
  
  select '54===查询完毕';
  select '54_1===select * from tmp_left_base_center';
        select * from tmp_left_base_center;
  end if;
  INSERT INTO tmp_left_base_center 
 SELECT * FROM tmp_left_base 
  WHERE train_date  = l_train_date
     AND train_no   = l_train_no
    AND assign_station = l_from_station
    AND limit_station >= l_to_station_no
    AND (far_from_station_no <= l_to_station_no_limit AND instr( l_cancel_purpose,purpose_code) % 2 = 0 or far_from_station_no <= '99' AND instr( l_cancel_purpose,purpose_code) % 2 = 1 ) 
    AND instr( purpose_code_in,purpose_code ) > 0 
   
    AND table_range >= l_From_Range
    AND table_range <= l_To_Range
    AND ticket_quantity >  0;
 /*INSERT INTO tmp_left_base_center 
 SELECT * FROM tmp_left_base 
  WHERE train_date  = l_train_date
     AND train_no   = l_train_no
    AND assign_station = l_from_station
    AND limit_station >= l_to_station_no
    AND far_from_station_no <= l_to_station_no_limit 
    AND instr( purpose_code_in,purpose_code ) > 0 
   AND instr( l_cancel_purpose,purpose_code) % 2 = 0
    AND table_range >= l_From_Range
    AND table_range <= l_To_Range
    AND ticket_quantity >  0
 UNION
 SELECT * FROM tmp_left_base2
  WHERE train_date = l_train_date
     AND train_no = l_train_no
    AND assign_station = l_from_station
    AND limit_station >= l_to_station_no
    AND far_from_station_no <= '99'  
    AND instr( purpose_code_in,purpose_code) > 0 
   AND instr( l_cancel_purpose,purpose_code) % 2 = 1 
    AND table_range >= l_From_Range
    AND table_range <= l_To_Range
    AND ticket_quantity >  0;*/
     
 set l_error =  @@error_count,l_rowcount = row_count();
 IF l_error != 0 THEN
   ITERATE lab_left;
 end if;
 /*取消限售以远后的以远站改成乘车站*/
 IF l_to_station != '%' AND l_to_station_no_limit = '99' then 
  UPDATE tmp_left_base_center 
   SET far_from_station_no = l_from_station_no;
 END if;
 if out_in=9 then 
  select '53===select * from tmp_left_base_center';
  select * from tmp_left_base_center;
 end if;

 set l_d6 = now();
 /*计算乘车站余票时间*/
 set l_t5 = l_t5;

 IF l_show_time = 1 then
  SELECT '------------------------------------------------DBG.030.指定车次本站余票信息-----------------------------------------------------------------';
  SELECT * FROM tmp_left_base_center;
 END if;

#select l_from_station_no,l_min_station_no;

 /**********************************************************begin.改造票额共用*********************************************************/
 IF flag_in = 0 AND l_from_station_no > l_min_station_no THEN #非始发站的共用查询
   SET l_transform_date   = l_train_date
    ,  l_transform_no   = l_from_station_no
    ,  range_in      = l_From_Range  
    ,  l_fetch_w_seat   = 0
    ,  l_seat_type_code   = '%'
    ,  l_share_flag    = '0' 
    ,  l_share_string   = '';

#SELECT l_transform_date ,l_train_no, l_from_station, l_seat_type_code, l_purpose_code_cache, range_in ,l_share_string , out_in, sale_mode_in , l_show_time,l_return_code;

  /*执行票额共用处理过程*/
     if out_in=9 then
    select '61=====call arith.DS50_Proc_Share_Pre',l_transform_date,l_train_no,l_from_station,l_seat_type_code,l_purpose_code_cache,
       range_in,l_share_string,out_in,sale_mode_in,l_show_time,l_return_code;
     end if;
   -- 为了调试方便，暂时将out_in写死了1了,liyang 20160128
   CALL arith.DS50_Proc_Share_Pre (l_transform_date ,l_train_no
    , l_from_station, l_seat_type_code
    , l_purpose_code_cache, range_in ,l_share_string 
    , 0,sale_mode_in #售票方式.20100317.zzq
    , l_show_time,l_return_code); 
    if out_in=9 then
    select '61====end call arith.DS50_Proc_Share_Pre',l_transform_date,l_train_no,l_from_station,l_seat_type_code,l_purpose_code_cache,
       range_in,l_share_string,out_in,sale_mode_in,l_show_time,l_return_code;
    end if;
   IF trim(l_share_string) IS NULL OR l_share_string = '' THEN
     SET l_share_flag = '0';
   ELSE 
     set l_share_flag = '1';
   end if;

   IF l_show_time = 1 THEN
    SELECT '########################DBG.040.共用定义查询################################-';
    SELECT train_date = l_transform_date,train_no = l_train_no,from_telecode = l_from_station,seat_type_code = l_seat_type_code
    , purpose_code = l_purpose_code_cache,table_range = range_in;
    SELECT '共用定义结果:' = concat('站码[3]日期[8]站序[2]无座席[1]范围[1]始车厢[2]止车厢[2]例外车厢[2]自动共用标记[1][1][1]用途[2]席别[1]' , char(10) , l_share_string);
   END if;

   IF l_share_flag = '1' THEN
     /*有票额共享定义*/
     /*获取车次类型.20110919.zzq*/
     -- select '31_7====';
     SELECT special_flag into l_train_type_code
     FROM basic.CG52_train_dir_appendix
      WHERE train_no = l_train_no;
     set l_error =  @@error_count,l_rowcount = row_count(); #缺省种类－普通车次.20100310.zzq

     set l_row = 0 ,l_to_station_no_limit = l_to_station_no;
     IF l_to_station = '%' THEN 
      set l_to_station_no_limit = '99';     #modify by zzq.20130725.zzq
     end if;
    --  select count(*),'tmp_left_center' from tmp_left_center;
     delete from tmp_left_center;
    if out_in=9 then
     select '55=========';
    end if;
     lab2:
     WHILE l_row < char_length(rtrim(l_share_string)) / 27  DO
      
      /*增加一位席别.借用end_seat_no字段.20100326.zzq*/
      set  l_original_station_telecode = substring(l_share_string,l_row * 27 + 1,3);
      set  l_transform_date      = substring(l_share_string,l_row * 27 + 1 + 3, 8);
      set  l_transform_no      = substring(l_share_string,l_row * 27 + 1 + 3 + 8, 2);
      set  l_fetch_w_seat      = CONVERT(substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2, 1),signed);
      set  l_tmp_range       = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1, 1);
      set  l_tmp_start_coach_no    = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1, 2);
      set  l_tmp_end_coach_no    = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2, 2);
      set  l_schedule_coach     = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2, 2); #车厢例外的处理.20110215.zzq
      set  l_auto_share      = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 4, 1);    #end_seat_no的第一位为:表示是按以远站自动共用的.20131105.zzq
      set  l_tmp_purpose      = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 5, 2);
      set  l_seat_type_code     = substring(l_share_string,l_row * 27 + 1 + 3 + 8 + 2 + 1 + 1 + 2 + 2 + 7, 1);
      /*席别为全部的处理*/
      IF l_seat_type_code = 'z' THEN set  l_seat_type_code = '%'; end if;
      IF l_tmp_purpose  = '**' then set  l_tmp_purpose  = l_purpose_code_cache; end if;
      set  l_cancel_purpose = '';

      /*共享票额查询20070530.zzq*/
      IF l_original_station_telecode <> l_from_station THEN
        #IF charindex(l_original_station_telecode,l_station_list) > 0 goto lab2 /*优化加快速度.20120316.zzq*/

        /*如果车站没有预分票额则直接计算下一条共用定义.20110303.zzq*/
        IF NOT EXISTS(SELECT  1 FROM tmp_left_base 
         WHERE train_date   = l_transform_date 
          AND train_no   = l_train_no 
          AND assign_station = l_original_station_telecode) then 
         set  l_row = l_row + 1;
         ITERATE lab2;
        end if;
        -- select '31_8====';
        SELECT bureau_code,start_time
        into l_original_bureau_code,l_start_time
        FROM tmp_stop_time 
        WHERE train_no  = l_train_no 
         AND station_no  = l_transform_no; 
             
        set  l_purpose_cache = '';
        
       -- select count(*) from tmp_train_group;
         --  李杨优化，如果没有数据不再truncate
         /*select count(*) into tmp_train_group_count from tmp_train_group;
         if tmp_train_group_count>0 then 
        -- set ccount2=ccount2+1;
        -- select ccount2;
        truncate table tmp_train_group;
         end if;*/
         delete from tmp_train_group;
        
        insert into tmp_train_group
        select group_code
         from basic.DJ52_train_group_define
        where inner_code = l_original_bureau_code 
         and module_code='J' 
         and type_code='T' 
         and start_station_telecode = l_original_station_telecode;
        
        /*begin.while.001*/  
        lab_while_001:
        WHILE NOT (l_tmp_purpose IS NULL OR l_tmp_purpose = '') DO
         -- select '1===';
         set  purpose_code_in = substring(l_tmp_purpose,1,2);           
         set  l_tmp_purpose  = Insert(l_tmp_purpose,1,2,null);
        
         /*按席别判断预售期.20120107.zzq*/
         set  l_train_period = 0;   #0-未到预售期,1-超过预售期
         /*逐个用途判断预售期 .20120704.hzp begin*/
         -- select '2===';
          -- select '31_8====';
         SELECT control_day
          ,  lpad(ahead_time,4,'0')
          ,  control_train_day,from_period,control_min_date,start_date    
          
          into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date
          FROM DS60_ticket_left_tmp_train_para_define a
          WHERE inner_code   = l_start_bureau_code
          AND  train_code   = l_train_code AND start_station_name = l_start_station_name AND end_station_name = l_end_station_name
           AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'  ##add  by hzp 20141116
            or                                                                  ##add  by hzp 20141116
            station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) ##add  by hzp 20141116
          AND train_type     IN (l_train_type,'*')
          AND purpose_code   IN (purpose_code_in,'*')
          AND flag1      IN (sale_mode_in,'*')   #售票方式
          AND flag2       = '1'        #始发管理标记.20121025.zzq
         #   AND seat_type_code   IN ('*')
          #ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/

      ######################################modify by hzp 20140930 begin###############-
          #update.20150114.zzq
          AND (l_seat_type_code != '%' AND seat_type_code   IN (l_seat_type_code,'*') OR l_seat_type_code = '%')
          #AND group_code in ( select group_code from #train_group)
         ORDER BY level_flag  ,train_code ,station_telecode ,group_code,ticket_type,purpose_code,a.table_range,seat_type_code,train_type,train_class,flag1;
         -- select '3===';
      ######################################modify by hzp 20140930 begin###############-
         set l_error =  @@error_count,l_rowcount = row_count();
         IF l_rowcount = 0 AND l_error = 0 THEN
           /* select '31_10====';
            SELECT  *
            FROM DS60_ticket_left_tmp_train_para_define a
            WHERE inner_code = l_board_bureau_code
             AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'  ##add  by hzp 20141116
              or                                                                  ##add  by hzp 20141116
              station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) ##add  by hzp 20141116
            AND train_type     IN (l_train_type,'*')
            AND (train_code    IN (l_train_code,'*') OR (train_code != l_train_code AND l_train_code LIKE train_code) )
            AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
            AND flag1      IN (sale_mode_in,'*')   #售票方式
            AND flag2      IN ('*','')  
            AND (l_seat_type_code != '%' AND seat_type_code   IN (l_seat_type_code,'*') OR l_seat_type_code = '%');*/
           SELECT  control_day
            ,  lpad(ahead_time,4,'0')
            ,  control_train_day,
            from_period,
              control_min_date,
              start_date
            into l_max_day,tmp_start_time,l_stop_date,C_from_period,C_control_min_date,C_start_date
            FROM DS60_ticket_left_tmp_train_para_define a
            WHERE inner_code = l_board_bureau_code
             AND (station_telecode  in (l_original_station_telecode,'*')  and  group_code = '*'  ##add  by hzp 20141116
              or                                                                  ##add  by hzp 20141116
              station_telecode = '*'  and group_code in ( select group_code from tmp_train_group)) ##add  by hzp 20141116
            AND train_type     IN (l_train_type,'*')
            AND (train_code    IN (l_train_code,'*') OR (train_code != l_train_code AND l_train_code LIKE train_code) )
            AND purpose_code   IN (purpose_code_in,'*')  #20111115.zzq.完善预售期的处理
            AND flag1      IN (sale_mode_in,'*')   #售票方式
            AND flag2      IN ('*','')      #始发管理标记.20121025.zzq
           #   AND seat_type_code   IN ('*')
            #ORDER BY train_code,station_telecode,ticket_type,purpose_code,range,seat_type_code,train_type,flag1 /*flag1=sale_mode车次,站码的优先级依次高20080704.zzq*/
       ######################################modify by hzp 20140930 begin###############-
           #update.20150114.zzq
           AND (l_seat_type_code != '%' AND seat_type_code   IN (l_seat_type_code,'*') OR l_seat_type_code = '%')
            #AND group_code in ( select group_code from #train_group)
           ORDER BY level_flag desc ,train_code desc ,station_telecode desc,group_code desc,ticket_type desc,purpose_code desc,a.table_range desc,seat_type_code desc,train_type desc,train_class desc,flag1 desc limit 1;
           -- select '6===';
       ######################################modify by hzp 20140930 begin###############-
           set l_error =  @@error_count,l_rowcount = row_count();
         END if;
         -- select '7===';
         IF l_rowcount > 0  then
           set  C_train_period = 0;
           -- set  l_date_after = datediff(l_transform_date,now());
           set  l_date_after = timestampdiff(day,now(),l_transform_date);
           IF l_date_after = l_max_day THEN
             set  tmp_start_datetime = str_to_date( concat(CURDATE() , tmp_start_time),'%Y-%m-%d%H%i' );
             IF (timestampdiff(minute, tmp_start_datetime,now()) < 0) THEN 
               #未到起售时间
               set  l_max_day = l_max_day - 1; #相对天数－1
             END if;
           END if;
           IF l_date_after > l_max_day  THEN set  l_train_period = 1; end if;#超过预售期的退出.20100920.zzq
           IF l_transform_date > l_stop_date THEN set  l_train_period = 1; end if;

           -- set  l_now_datetime = concat(trim(date_format(now(),'%Y/%m/%d')) , ' ' ,  trim(date_format(now(),'%H:%i:%s')));
           set  l_now_datetime = date_format(now(),'%Y/%m/%d %H:%i:%s');
           set  l_start_datetime = str_to_date( concat(CURDATE() , tmp_start_time) ,'%Y-%m-%d%H%i');
           
           if C_start_date = l_today and tmp_start_time <> "0000" THEN
            IF timestampdiff( second,l_start_datetime,l_now_datetime) < 0 and l_train_date > C_control_min_date THEN  
              -- set  l_max_day = datediff(C_control_min_date,now());
              set  l_max_day = timestampdiff(day,now(),C_control_min_date);
            end if;
            if l_date_after > l_max_day THEN
              set  C_train_period = 1;
            end if;
           END if;


         
           /*预售期未到.20110929.zzq*/
           IF l_train_period = 1 or C_train_period = 1 THEN 
             set  purpose_code_in = ''; #丢弃掉的用途
           end if;
         END if;
         -- select '8===';
         set  l_purpose_cache = concat(rtrim(l_purpose_cache) , purpose_code_in , ',');          
         /*逐个用途判断预售期 .20120704.hzp end*/
         
         /*逐个判断取消限售 .20120704.hzp begin*/
         set  l_start_datetime = str_to_date( concat(l_transform_date, l_start_time) ,'%Y%m%d%H%i' );
         
         IF l_to_station  <> '%' THEN  #l_sale_bureau = l_original_bureau_code and  
         -- select '31_11====';
          SELECT ahead_time into l_ahead_time FROM tmp_cancel_limit_define
          WHERE inner_code IN (l_original_bureau_code,l_original_station_telecode)               #口径改成被共用站及局码.20150114.zzq
           and (train_code = l_train_code 
             AND start_station_name = l_start_station_name 
             AND end_station_name = l_end_station_name 
            OR train_code = '*' 
            OR l_train_code LIKE train_code) 
           AND  station_telecode IN (l_original_station_telecode,'*')
           AND  train_type IN ('*',l_train_type)                                       #车次类型处理.20130526.zzq
           AND  purpose_code   IN ('*',purpose_code_in )                            #增加用途处理.20130526.zzq 
           AND start_date <= l_transform_date      #增加乘车日期的处理.20130329.zzq
           AND stop_date >= l_transform_date
           AND  sale_mode   IN ('*',sale_mode_in )
           AND running_rule & (power(2,datediff(l_transform_date,start_date) % running_style)) > 0 
          ORDER BY level_flag ,purpose_code desc,train_code desc,station_telecode desc ,train_type desc,sale_mode desc,ahead_time desc limit 1; #增加排序.20090423.zzq
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_error != 0 THEN ITERATE lab_while_001; end if;
          IF l_rowcount = 0 THEN set  l_ahead_time = 0; end if;
         
          /*5.0规定时间内取消限售站的限制.20050418.zzq*/
          IF timediff( l_start_datetime,now() ) <= l_ahead_time THEN
           set  l_cancel_purpose = concat(trim(l_cancel_purpose) , purpose_code_in);                  #l_to_station_no_limit = '99'
           #-hzphzp
          END if;
         END if;
         /*****************/
        END WHILE lab_while_001;
        /*end.while.001*/
        set  purpose_code_in = l_purpose_cache;
        set  l_cancel_purpose = trim(l_cancel_purpose);
        /****************/
       -- select '10===',l_auto_share;
        IF l_auto_share = ':' THEN   #按以远站自动共用处理.20131105.zzq
         IF l_show_time = 1 THEN
           SELECT '########################DBG.045.以远站作为乘车站自动共用的余票################################-';
           SELECT * FROM tmp_left_base
           WHERE train_date      = l_transform_date
           AND train_no       = l_train_no
           AND assign_station    = l_original_station_telecode
           AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
           AND far_from_station_no  = l_from_station_no
           AND instr( purpose_code_in,purpose_code ) > 0
           AND coach_no    >= l_tmp_start_coach_no
           AND coach_no     <= l_tmp_end_coach_no
           AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq
           AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
           AND table_range      >= l_From_Range
           AND table_range      <= l_To_Range
           AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
           AND ticket_quantity   >= 1
           AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);
         END if;
         -- select '11===';
         INSERT INTO tmp_left_center 
         SELECT * FROM tmp_left_base
          WHERE train_date      = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          AND far_from_station_no  = l_from_station_no
          AND instr( purpose_code,purpose_code_in ) > 0
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
          OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
          OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);
         -- select '12===';
        ELSE
          /*select '13===',l_transform_date,l_train_no,l_original_station_telecode,l_to_station_no,l_to_station_no_limit,
             purpose_code_in,l_cancel_purpose,l_tmp_start_coach_no,l_tmp_end_coach_no,l_schedule_coach,l_fetch_w_seat,l_seat_type_code,
             l_From_Range,l_To_Range,l_tmp_range,l_to_station;*/
         -- select '13====';
         INSERT INTO tmp_left_center 
         SELECT distinct * FROM tmp_left_base
          WHERE train_date       = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          
          AND instr( purpose_code_in,purpose_code ) > 0
          AND (far_from_station_no <= l_to_station_no_limit AND instr( l_cancel_purpose,purpose_code) % 2 = 0   or
            far_from_station_no <= '99' AND instr( l_cancel_purpose,purpose_code) % 2 = 1
           )
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq    
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);
         -- select '14===';
         /*SELECT  * FROM tmp_left_base
          WHERE train_date       = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          
          AND instr( purpose_code_in,purpose_code ) > 0
          AND far_from_station_no <= l_to_station_no_limit AND instr( l_cancel_purpose,purpose_code) % 2 = 0 
            
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq    
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no)
         UNION
         SELECT * FROM tmp_left_base2
          WHERE train_date       = l_transform_date
          AND train_no       = l_train_no
          AND assign_station    = l_original_station_telecode
          AND limit_station   >= l_to_station_no        #票额限售站必须是长于乘车站的票额
          AND far_from_station_no <= '99'
          AND instr( purpose_code_in,purpose_code ) > 0
          AND instr( l_cancel_purpose,purpose_code) % 2 = 1
          AND coach_no    >= l_tmp_start_coach_no
          AND coach_no     <= l_tmp_end_coach_no
          AND coach_no     != l_schedule_coach     #增加共用余票查询时车厢例外的处理.20110215.zzq
          AND ((l_fetch_w_seat  = 1 AND seat_type_code LIKE l_seat_type_code AND seat_type_code <> "W") #增加共用席别的处理.for V1.20130814.zzq
           OR (l_fetch_w_seat = 9 AND seat_type_code = "W")
           OR (l_fetch_w_seat = 0 AND (seat_type_code LIKE l_seat_type_code OR seat_type_code = "W")) )
          AND table_range      >= l_From_Range
          AND table_range      <= l_To_Range
          AND (l_tmp_range = '9' OR table_range = CONVERT(l_tmp_range,signed))
          AND ticket_quantity   >= 1
          AND (l_to_station = '%' AND limit_station > l_to_station_no OR l_to_station != '%' AND limit_station >= l_to_station_no);*/
            
        END if;
        set l_error =  @@error_count,l_rowcount = row_count();
        IF l_rowcount = 0 OR l_error != 0 THEN 
        set  l_row = l_row + 1;
        ITERATE lab2; 
       end if;
        set  l_station_list = concat(rtrim(l_station_list) , ',' , l_original_station_telecode); #缓存已经算过共用余票的车站.20120316.zzq
       -- select '16======',count(*) from tmp_left_center;
       IF out_in=9 then
        select '15===',l_transform_date,l_train_no,l_original_station_telecode;
       --  select * from tmp_left_center;
        select * from tmp_left_center 
        WHERE train_date    = l_transform_date 
         AND train_no    = l_train_no 
         AND assign_station = l_original_station_telecode;
        end if;
        /*****************************************逐个席别,用途计算是否有停售和预售期是否未到.20110218.zzq********************************************/
        /*如果没有符合条件的记录,直接计算下一个站的余票.20110218.zzq*/
        IF NOT EXISTS(SELECT 1 FROM tmp_left_center 
        WHERE train_date    = l_transform_date 
         AND train_no    = l_train_no 
         AND assign_station = l_original_station_telecode) THEN
          -- select '15_1===';
          set  l_row = l_row + 1;
          ITERATE lab2; 
        end if;
       --  select '16===';
        /******************************增加按席别停售及预售期判断的处理.20110218.zzq*********************************************/
      
        /************************************************************************************************************************
            begin.增加硬座和混编硬座共用时有座自动变成无座是否执行的判断处理.20101228.zzq
            share_to_wseat = 0:生成有座；1:生成无座
        *************************************************************************************************************************/
        /*计算票额共用是否要有座席变成无座.20110111.zzq*/
         -- select '31_12====',l_start_train_date,l_train_code,l_start_station_telecode,l_end_station_telecode;
        SELECT reuse_flag into l_share_to_wseat FROM basic.DJ50_reuse_train_define
        WHERE  train_code      = l_train_code
        AND start_station_telecode = l_start_station_telecode
        AND end_station_telecode  = l_end_station_telecode
        AND start_date      <= l_start_train_date
        AND stop_date      >= l_start_train_date
        
        AND seat_type_code     IN ('1','B','*') 
        AND running_rule & (power(2,datediff(l_start_train_date,start_date) % running_style)) > 0 
        ORDER BY seat_type_code desc limit 1;
        -- select '17===';
        set l_error =  @@error_count,l_rowcount = row_count();
        IF l_rowcount = 0 AND l_error = 0 THEN
          /*没有定义时读取缺省定义*/
          -- select '31_13====';
          SELECT reuse_flag INTO l_share_to_wseat FROM basic.DJ60_reuse_para_define
          WHERE start_date   <= l_start_train_date
          AND stop_date   >= l_start_train_date
          AND start_train_code  IN (l_train_code,'*')
          AND special_flag   = l_train_type_code   #增加动车类型的处理.20110919.zzq
          AND seat_type_code  IN ('1','B','*')
          ORDER BY seat_type_code desc limit 1;
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount = 0 AND l_error = 0 THEN set  l_share_to_wseat = '0';  end if; #1->0,缺省共用成有座.20131011.zzq
        END if;
       -- select '31_13====';
        IF l_share_to_wseat = '1' THEN
          /*增加'同城车站'共用不按照复用策略执行的例外处理.20110104.zzq*/
          SELECT city_code into l_city_code FROM basic.station_divide_dictionary 
          WHERE station_telecode = l_original_station_telecode #被共用车站
          AND start_date     <= l_train_date
          AND   stop_date    >= l_train_date;
          set l_error =  @@error_count,l_rowcount = row_count();
          IF l_rowcount != 0 AND l_error = 0 THEN
            SELECT city_code INTO l_city_code FROM basic.station_divide_dictionary 
            WHERE station_telecode = l_from_station    #共用车站
            AND city_code   = l_city_code
            AND start_date     <= l_train_date
            AND   stop_date    >= l_train_date;
            set l_error =  @@error_count,l_rowcount = row_count();
            IF l_rowcount != 0 AND l_error = 0 THEN set  l_share_to_wseat = '0'; end if;
          END if;
        END if;
       -- select '19===',l_train_date,l_from_station,l_from_station_no,l_transform_date,l_train_no,l_original_station_telecode;
          -- select * from tmp_left_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
        /*将共用票额变成乘车站票额*/
        UPDATE tmp_left_center 
         SET train_date  = l_train_date
         , assign_station = l_from_station         
         , inner_code  = concat(trim(inner_code) , station_no , far_from_station_no , limit_station) -- 记录原来票额的信息,防止distinct丢数.20110218.zzq
         , far_from_station_no = 
         ( CASE 
          WHEN far_from_station_no < l_from_station_no THEN l_from_station_no
          ELSE far_from_station_no
          END
         )
         , seat_type_code = (CASE WHEN l_share_to_wseat = '1' AND seat_type_code IN ('1','B','O') THEN 'W' ELSE seat_type_code END)
         , station_no  = l_from_station_no
         WHERE train_date    = l_transform_date 
         AND train_no    = l_train_no 
         AND assign_station = l_original_station_telecode;
       -- select '19_2===';
       -- select * from tmp_left_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
      END if;
     set  l_row = l_row + 1;
     END WHILE lab2;  ######while end for share
    -- select '21===';
     IF l_show_time = 1 THEN
     SELECT '########################DBG.049.指定车次的乘车余票信息################################-';
     SELECT * FROM tmp_left_base_center;
     END if;
      
      if out_in=9 then 
      -- select '71===select * from tmp_left_base_center';
                        -- select * from tmp_left_base_center;
                        select '72===select * from  tmp_left_center';
                         select * from tmp_left_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
     end if;
     /*过滤掉重复的信息.20100125.zzq*/
     INSERT INTO tmp_left_base_center SELECT DISTINCT * FROM tmp_left_center;
     if out_in=9 then 
     select '73===select * from tmp_left_base_center';
                    select * from tmp_left_base_center order by assign_station,train_no,train_date,station_no,far_from_station_no,limit_station,coach_no,seat_type_code,purpose_code,ticket_quantity,up_quantity,mid_quantity,down_quantity,ticket_source,table_range,inner_code,wseat_type_code,seat_feature;
                      
     end if;
    -- select '23===';
     set l_error =  @@error_count,l_rowcount = row_count();
     IF l_rowcount > 0 AND l_error = 0 THEN set  l_share_train_flag = 1 ; end if; #有共用票额表示

     /*恢复inner_code的值.20110218.zzq*/
     UPDATE tmp_left_base_center SET inner_code = substring(inner_code,1,1)
     where length(trim(inner_code)) > 1;

     IF l_show_time = 1 THEN
     SELECT '########################DBG.050.指定车次共用余票信息################################-';
     SELECT * FROM tmp_left_base_center;
     END if;
   END if;
 END if;
 /*计算共用余票时间*/
 set  l_t6 = l_t6;
 set  l_d6 = now();
 /*******************************************************end.余票查询中的票额共用处理.20070530.zzq*********************************************/

#select * from tmp_center_notice WHERE train_no = l_train_no;

  /*#####################大屏余票查询指定区间停售处理.20130730.zzq#############################-*/
  IF EXISTS(SELECT 1 FROM tmp_center_notice WHERE train_no = l_train_no) THEN 
  DELETE a
   FROM tmp_left_base_center a,tmp_center_notice b
   WHERE a.train_no    = b.train_no
   AND a.assign_station  = b.station_telecode
   AND a.limit_station  = b.station_no
   AND b.command_code  = 'M'
   AND a.train_date   >= b.start_date
   AND a.train_date  <= b.stop_date
   AND running_rule & (power(2,datediff(a.train_date,b.start_date) % running_style)) > 0 ;
  END if;
  /*****************************************逐个席别,用途计算是否有停售和预售期是否未到.20110218.zzq********************************************/
  -- TRUNCATE TABLE tmp_seat_info ;
  delete from tmp_seat_info;
  INSERT INTO tmp_seat_info 
  SELECT DISTINCT seat_type_code,purpose_code,table_range 
   FROM tmp_left_base_center
   WHERE train_date   = l_train_date 
    AND train_no   = l_train_no
    AND assign_station = l_from_station;

#select * from tmp_seat_info;
  
  /*获取无座席的归属席别.20110907.zzq*/
  SELECT wseat_type_code into l_w_seat_type
  FROM tmp_left_base_center
   WHERE train_date   = l_train_date 
    AND train_no   = l_train_no
    AND assign_station = l_from_station
    AND seat_type_code = 'W' LIMIT 1;

#select l_w_seat_type;

  /*逐条处理*/
  WHILE EXISTS(SELECT 1 FROM tmp_seat_info) DO
   SELECT seat_type_code,purpose_code,table_range INTO l_seat_type_code,l_tmp_purpose,l_ticket_range FROM tmp_seat_info LIMIT 1;
   DELETE from tmp_seat_info WHERE seat_type_code = l_seat_type_code AND purpose_code = l_tmp_purpose AND table_range = l_ticket_range;

   /******************************增加按席别停售及预售期判断的处理.20110218.zzq*********************************************/
   SET l_fetch_w_seat = 0
    ,  l_delete_flag  = 0;
   if out_in=9 then
     select 'call arith.DS60_Notice_Period',l_train_date
        , l_train_no
        , l_train_code
        , l_from_station
        , l_seat_type_code
        , l_fetch_w_seat   
        , l_tmp_purpose
        , l_ticket_range
        , sale_mode_in
        , l_center_notice   #调令缓存表
        , ''       #预售期缓存表
        , l_train_type
        , l_board_bureau_code 
        , l_return_code;
  end if;
   CALL arith.DS60_Notice_Period
    (l_train_date
    , l_train_no
    , l_train_code
    , l_from_station
    , l_seat_type_code
    , l_fetch_w_seat   
    , l_tmp_purpose
    , l_ticket_range
    , sale_mode_in
    , l_center_notice   #调令缓存表
    , ''       #预售期缓存表
    , l_train_type
    , l_board_bureau_code 
    , l_return_code);
    if out_in=9 then
   select 'end call arith.DS60_Notice_Period',l_train_date
        , l_train_no
        , l_train_code
        , l_from_station
        , l_seat_type_code
        , l_fetch_w_seat   
        , l_tmp_purpose
        , l_ticket_range
        , sale_mode_in
        , l_center_notice   #调令缓存表
        , ''       #预售期缓存表
        , l_train_type
        , l_board_bureau_code 
        , l_return_code;
   end if;
#select l_return_code,l_fetch_w_seat,l_seat_type_code;

   set lab_lable_s = 1;
   lab_lable:loop
   if lab_lable_s = 0 THEN
     -- if out_in=9 THEN
      --  select '103===is here';
      -- end if;
     leave lab_lable;
   end if;

   /*停售*/
   IF l_return_code = 0 THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '104===is here';
       end if;
    leave lab_lable;
   /*未到预售期*/
   ELSEIF l_return_code = 1 THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '105===is here';
       end if;
    leave lab_lable;
   END if;
   
   /*只售有座席*/
   IF l_fetch_w_seat = 1 AND l_seat_type_code = 'W' THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '107===is here';
       end if;
    leave lab_lable;
   /*只售无座席*/
   ELSEIF l_fetch_w_seat = 9 AND l_seat_type_code != 'W' THEN
    SET l_delete_flag = 1;
     if out_in=9 THEN
       select '108===is here';
       end if;
    leave lab_lable;
   END if;

   /*无座席归属席别有票时,清理掉无座席.20110907.zzq*/
  #  IF l_w_seat_type = l_seat_type_code BEGIN
  #   DELETE FROM #tmp_left_base_center 
  #    WHERE train_date   = l_train_date 
  #      AND train_no   = l_train_no 
  #      AND assign_station = l_from_station
  #      AND seat_type_code = 'W'
  #  END

   set lab_lable_s = 0;
   end loop lab_lable;

   IF l_delete_flag = 1 THEN
    /*删除不符合条件的余票*/
    DELETE FROM tmp_left_base_center 
    WHERE train_date   = l_train_date 
     AND train_no   = l_train_no 
     AND assign_station = l_from_station
     AND seat_type_code = l_seat_type_code 
     AND purpose_code  = l_tmp_purpose 
     AND table_range    = l_ticket_range;
   END if;
  END WHILE;
  /******************************增加按席别停售及预售期判断的处理.20110218.zzq*********************************************/
  /*按席别计算停售及预售期时间*/
  SET l_t7 = l_t7 + timediff(now(),l_d6);







End While lab_left;

set lab1_s = 0;
end loop lab1;

#SELECT * FROM tmp_left_base_center WHERE limit_station > station_no;
-- if out_in=9 THEN
-- select * from tmp_left_base_center;
-- end if;
IF table_name_in != '' THEN
 SET @l_SQL = concat('INSERT INTO ' , table_name_in , ' SELECT * FROM tmp_left_base_center WHERE limit_station > station_no');
END if;

IF out_in = 2 THEN
 /*直接输出结果select结果级*/
  SELECT * FROM tmp_left_base_center WHERE limit_station > station_no;
ELSE 
 prepare stmt_1 from @l_SQL;
 EXECUTE stmt_1;
 DROP prepare stmt_1;

 SET l_rowcount = row_count();
END if;

/*调优20060713.BXP.zzq*/
/*truncate table DS60_ticket_left_tmp_train_para_define;
-- drop table DS60_ticket_left_tmp_train_para_define;
truncate table tmp_union_station;
-- drop table tmp_union_station;
truncate table tmp_left_center;
-- drop table tmp_left_center;
truncate table tmp_left_base_center;
-- drop table tmp_left_base_center;
truncate table tmp_cancel_limit_define;
-- drop table tmp_cancel_limit_define;
truncate table tmp_center_notice;
-- drop table tmp_center_notice;
truncate table tmp_center_notice1;
-- drop table tmp_center_notice1;*/

/*耗费总时间*/
SET l_t0 = timediff( now(),l_d1);

#IF object_id('center..DS50_Train_Info_Statist') IS NOT NULL
# INSERT INTO center..DS50_Train_Info_Statist VALUES
# (
#   @temp_board_station
#  , @temp_end_station
#  , @temp_board_train_date
#  , @temp_directions                         
#  , @temp_telecode_list
#  , @temp_station_train_code
#  , @temp_purposes
#  , @temp_inner_code
#  , @temp_range
#  , @temp_flag
#  , @temp_seat_type_list
#    ,  0
#  , @temp_kind
#    ,  getdate()
#    ,rtrim(CONVERT(CHAR,@t0))   /*t0-总时间*/
#    ,rtrim(CONVERT(CHAR,@t1))   /*t1-建立缓存表时间*/
#    ,rtrim(CONVERT(CHAR,@t2))   /*t2-建调令,停靠站等表缓存时间*/
#    ,rtrim(CONVERT(CHAR,@t3))    /*t3-计算车次时间*/
#    ,rtrim(CONVERT(CHAR,@t4))    /*t4-余票缓存时间*/
#  ,@rowcount        /*计算后的余票数量*/
#      ,@t5          /*t5-计算乘车站余票时间*/
#    ,@t6          /*t6-计算共用余票时间*/
#      ,@t7          /*t7-按席别计算停售及预售期时间*/
#      ,@t8          /*t8-*/
#      ,@t9          /*t9-*/
# )


IF l_show_time = 1 THEN
 SET l_SQL = concat('车次计算时间:' , rtrim(CONVERT(l_t3,CHAR)) , 'ms,下载余票时间:' , rtrim(CONVERT(l_t4,CHAR)) , 'ms,计算共用时间:' , rtrim(CONVERT(l_t6,CHAR))
    , 'ms,分席别计算预售期和停售时间:' , rtrim(CONVERT(l_t7,CHAR)));
 SET l_SQL = concat(rtrim(l_SQL) , 'Consume Time:' , rtrim(CONVERT(datediff( NOW(), l_d1),CHAR)) , 'mi');
 SELECT l_SQL;
END if;



SET return_out = l_share_train_flag; #0-没有共用票额go1-有共用票额
#select return_out;

Commit;
leave empty_tmp_table_lab;
end loop empty_tmp_table_lab;

End

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_total_price`(total_distance  INT
 , train_date   CHAR(8)
 , train_no    CHAR(12)
 , start_station_no CHAR(2)
 , to_station_no  CHAR(2)
 , seat_type_code  CHAR(1)
 , bed_level    CHAR(1)
 , ticket_type   TINYINT UNSIGNED
 , seat_feature   CHAR(1)
 , special_visa   TINYINT UNSIGNED  
 , relay_ticket_type TINYINT UNSIGNED 
 , INOUT ticket_price  INT  
 , output2    TINYINT UNSIGNED ,INOUT SWP_Ret_Value INT)
BEGIN
   DECLARE rowcount SMALLINT;
   DECLARE error SMALLINT;
   DECLARE price_procedure VARCHAR(60);
   declare v_sql varchar(1000);
   
   
    
   
    

   IF special_visa is null then
      set special_visa = 0;
   END IF;
   IF relay_ticket_type is null then
      set relay_ticket_type = 0;
   END IF;
   IF ticket_price is null then
      set ticket_price = 0;
   END IF;
   IF output2 is null then
      set output2 = 0;
   END IF;
   if output2=2 then
  select '11111=========',train_date,train_no,start_station_no,to_station_no,seat_type_code,bed_level,ticket_type;
 end if;
   select   DS60_price_cache.ticket_price 
   INTO ticket_price 
   FROM center.DS60_price_cache 
   WHERE DS60_price_cache.train_date  = train_date
    AND DS60_price_cache.train_no   = train_no
    AND DS60_price_cache.start_station_no = start_station_no
    AND DS60_price_cache.to_station_no  = to_station_no
    AND DS60_price_cache.seat_type_code  = seat_type_code
    AND DS60_price_cache.bed_level   = bed_level
    AND DS60_price_cache.ticket_type   = ticket_type   
   ORDER BY DS60_price_cache.cache_time DESC LIMIT 1;
   SET rowcount = ROW_COUNT();
   SET error = @SWV_Error;
   if output2=2 then
  select rowcount,error;
 end if;
   IF rowcount = 0 OR error != 0 then 
      SET ticket_price = -1;
   end if;



   IF ticket_price = -1 then 
      select   CG40_price_system.price_procedure 
      INTO price_procedure 
      FROM basic.CG40_price_system 
      WHERE CG40_price_system.start_date <= train_date
       AND CG40_price_system.stop_date  >= train_date
       AND CG40_price_system.module_code = 1   
      LIMIT 1;
      SET rowcount = ROW_COUNT();
      SET error = @SWV_Error;
      IF rowcount = 0 OR error != 0 then 
         SET price_procedure = "arith.DG50_total_price";
      ELSE 
         SET price_procedure = CONCAT("arith.",ltrim(rtrim(price_procedure)));
      end if;
      SET @SWV_Error = 0;
      
   
      
  
  set @preference_style =null;
  set @preference_rate =null;
  set @distance =null;
  set @ticket_price =ticket_price;
  set @belong_line1 =null;
  set @distance1 =null;
  set @ticket_price1 =null;
  set @belong_line2 =null;
  set @distance2 =null;
  set @ticket_price2 =null;
  set @belong_line3 =null;
  set @distance3 =null;
  set @ticket_price3 =null;
  set @belong_line4 =null;
  set @distance4 =null;
  set @ticket_price4 =null;
  set @belong_line5 =null;
  set @distance5 =null;
  set @ticket_price5 =null;
  set @relay_distance =null;
  set @relay_price =null;
  set @addition_cost =null;
  set @bed_reserve_cost =null;
  set @service_cost =null;
  set @air_condition_price =null;
  set @train_air_condition =null;
  set @total_base_price =null;
  set @discount =null;
  set @agent_fee =null;
  set @preference_price =null;
  set @basic_price =null;
  set @ticket_price_obtion =null;
  set @preference_word =null;
  set @qz_add_price =null;
  set @SWP_Ret_Value=null;
  
  set v_sql = concat('CALL ',price_procedure,'(0,',
        '\'',train_date,'\',',
  '\'',train_no,'\',',
  '\'',start_station_no,'\',',
  '\'',to_station_no,'\',',
  '\'',seat_type_code,'\',',
  '\'',bed_level,'\',',
       ticket_type,',',
  '\'',seat_feature,'\',',
  special_visa,',',
  relay_ticket_type,',',
  '@preference_style
  ,@preference_rate 
  , \'0\' 
  ,@distance 
  ,@ticket_price 
  ,@belong_line1 
  ,@distance1 
  ,@ticket_price1  
  ,@belong_line2  
  ,@distance2 
  ,@ticket_price2 
  ,@belong_line3  
  ,@distance3  
  ,@ticket_price3  
  ,@belong_line4 
  ,@distance4 
  ,@ticket_price4  
  ,@belong_line5  
  ,@distance5  
  ,@ticket_price5  
  ,@relay_distance 
  ,@relay_price 
  ,@addition_cost  
  ,@bed_reserve_cost  
  ,@service_cost  
  ,@air_condition_price 
  ,@train_air_condition  
  ,@total_base_price  
  ,@discount 
  ,@agent_fee 
  ,@preference_price 
  ,@basic_price 
  ,@ticket_price_obtion 
  ,@preference_word 
  ,@qz_add_price ',
  ',',output2,
  ',@SWP_Ret_Value);');
   if output2=2 then
   select 'v_sql===',v_sql;
   end if;
        set @v_sql=v_sql;   
      prepare stmt_DS60_total_price from @v_sql;  
      EXECUTE stmt_DS60_total_price;      
  if output2=2 then
   select concat('call ',price_procedure,' end'); 
   select ticket_price,@ticket_price;
  end if;
  set ticket_price=@ticket_price;
      deallocate prepare stmt_DS60_total_price;     
  
  set @preference_style =null;
  set @preference_rate =null;
  set @distance =null;
  set @ticket_price =null;
  set @belong_line1 =null;
  set @distance1 =null;
  set @ticket_price1 =null;
  set @belong_line2 =null;
  set @distance2 =null;
  set @ticket_price2 =null;
  set @belong_line3 =null;
  set @distance3 =null;
  set @ticket_price3 =null;
  set @belong_line4 =null;
  set @distance4 =null;
  set @ticket_price4 =null;
  set @belong_line5 =null;
  set @distance5 =null;
  set @ticket_price5 =null;
  set @relay_distance =null;
  set @relay_price =null;
  set @addition_cost =null;
  set @bed_reserve_cost =null;
  set @service_cost =null;
  set @air_condition_price =null;
  set @train_air_condition =null;
  set @total_base_price =null;
  set @discount =null;
  set @agent_fee =null;
  set @preference_price =null;
  set @basic_price =null;
  set @ticket_price_obtion =null;
  set @preference_word =null;
  set @qz_add_price =null;
  
        set @SWP_Ret_Value=null;
   
      

 
      INSERT INTO center.DS60_price_cache
  VALUES(train_date,
   train_no,
   start_station_no,
   to_station_no,
   seat_type_code,
   bed_level,
   ticket_type,
   seat_feature,
   special_visa,
   relay_ticket_type,
   ticket_price,
   total_distance,
   CURRENT_TIMESTAMP);
   end if;

   IF output2 = 1 or output2=2 then 
      SELECT ticket_price;
   end if;

   SET SWP_Ret_Value = 0;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_Train_Time`(IN `train_date_in` CHAR(8),IN `train_no_in` CHAR(12),IN `train_code_in` CHAR(8),IN `seat_type_code_in` CHAR(1),IN `range_in` tinyint,IN `purpose_code_in` CHAR(2),IN `ticket_num_ary_in` CHAR(36),OUT `range1_in` tinyint,OUT `range2_in` tinyint,OUT `range3_in` tinyint,OUT `range4_in` tinyint,OUT `range5_in` tinyint,IN `output_in` tinyint,IN `station_telecode_in` CHAR(3),IN `flag_in` tinyint,IN `sale_mode_in` CHAR(1),IN `return_out` int)
BEGIN
 DECLARE l_Version CHAR(30)
 ;DECLARE  l_return_code  SMALLINT  ;DECLARE  l_rowcount   SMALLINT   ;DECLARE    l_error    SMALLINT
 
 ;DECLARE l_cache_flag    char(1)  
  ;DECLARE l_change_time   datetime  
  ;DECLARE l_modify_time   datetime  
  ;DECLARE l_my_modify_time  datetime  
  ;DECLARE l_diff_time1    integer  
  ;DECLARE l_diff_time2    integer  
  ;DECLARE l_table_change_time integer  
  ;DECLARE l_table_modify_time integer  
  ;DECLARE l_table_flag    char(1)  
  ;DECLARE l_cur_change_time  datetime;  
 
 Set Transaction Isolation Level Read uncommitted;

 set l_Version = "Ver20120410.10:27" ;

 
 set l_table_change_time = 600 
  ,  l_table_modify_time = 120 
  ,  l_table_flag    = '2'; 

 
 SELECT range1
  ,  range2
  ,  range3
  ,  range4
  ,  range5
  , change_time
  , modify_time
  , cache_flag
  INTO range1_in,range2_in,range3_in,range4_in,range5_in,l_change_time,l_modify_time,l_cache_flag
  FROM center.DS50_Train_Time_Cache a
  WHERE train_date     = train_date_in
  AND  train_no     =  train_no_in
  AND station_telecode  = station_telecode_in
  AND seat_type_code   = seat_type_code_in
  AND a.range      = range_in
  AND purpose_code    = purpose_code_in
  AND ticket_num_ary   = ticket_num_ary_in
  AND sale_mode    = sale_mode_in
  AND flag      = flag_in
  AND out_put     = output_in limit 1;
 IF row_count() = 0 THEN set l_table_flag = '0'; 
 ELSE
   set l_my_modify_time = now();
   set l_diff_time1 = timediff(l_my_modify_time,l_change_time)
   ,   l_diff_time2 = timediff(l_my_modify_time,l_modify_time)
   ,  l_table_flag = '1' ;     

   
   IF l_cache_flag = '0' AND l_diff_time1 > l_table_change_time THEN 
    UPDATE center.DS50_Train_Time_Cache a SET cache_flag = '1', modify_time = l_my_modify_time
     WHERE train_date     = train_date_in
     AND  train_no     =  train_no_in
     AND station_telecode  = station_telecode_in
     AND seat_type_code   = seat_type_code_in
     AND a.range      = range_in
     AND purpose_code    = purpose_code_in
     AND ticket_num_ary   = ticket_num_ary_in
     AND sale_mode    = sale_mode_in
     AND flag      = flag_in
     AND out_put     = output_in
     AND  cache_flag     = '0' LIMIT 1;
   ELSEIF l_cache_flag = '1' THEN 
    IF l_diff_time2 > l_table_modify_time THEN 
     UPDATE center.DS50_Train_Time_Cache a SET modify_time = l_my_modify_time
     WHERE train_date     = train_date_in
      AND  train_no     =  train_no_in
      AND station_telecode  = station_telecode_in
      AND seat_type_code   = seat_type_code_in
      AND a.range      = range_in
      AND purpose_code    = purpose_code_in
      AND ticket_num_ary   = ticket_num_ary_in
      AND sale_mode    = sale_mode_in
      AND flag      = flag_in
      AND out_put     = output_in
      AND  cache_flag     = '1' LIMIT 1;
   END if;
   
   ELSE set l_table_flag = '2' ; 
   end if;
   
 END if;
 

 
 IF l_table_flag != '2' THEN 
   
   CALL arith.DS50_Train_Time (train_date_in,train_no_in,train_code_in,seat_type_code_in,range_in,purpose_code_in,ticket_num_ary_in_in
   ,  range1_in, range2_in, range3_in , range4_in,  range5_in
   , 1, station_telecode_in,1,sale_mode_in,l_return_code);
 END if;
 

 
 IF l_table_flag != '2' THEN
   
   IF l_table_flag = '0' THEN
    IF NOT EXISTS(SELECT 1 FROM center.DS50_Train_Time_Cache a WHERE train_date = train_date_in
     AND  train_no     =  train_no_in
     AND station_telecode  = station_telecode_in
     AND seat_type_code   = seat_type_code_in
     AND a.range      = range_in
     AND purpose_code    = purpose_code_in
     AND ticket_num_ary   = ticket_num_ary_in
     AND sale_mode    = sale_mode_in
     AND flag      = flag_in
     AND out_put     = output_in) THEN

      INSERT INTO center.DS50_Train_Time_Cache
       VALUES(train_date_in,train_no_in,train_code_in,station_telecode_in,seat_type_code_in,range_in,purpose_code_in,ticket_num_ary_in,sale_mode_in,flag_in
        , output_in, range1_in, range2_in, range3_in, range4_in, range5_in,now(), now(), '0' );
    end if;
   ELSE
    UPDATE center.DS50_Train_Time_Cache  a
     SET  range1 =  range1_in,range2 =  range2_in,range3 =  range3_in,range4 =  range4_in,range5 =  range5_in
     , change_time = now(), modify_time = now(), cache_flag  = '0'
     WHERE train_date     = train_date_in
     AND  train_no     =  train_no_in
     AND station_telecode  = station_telecode_in
     AND seat_type_code   = seat_type_code_in
     AND a.range      = range_in
     AND purpose_code    = purpose_code_in
     AND ticket_num_ary   = ticket_num_ary_in
     AND sale_mode    = sale_mode_in
     AND flag      = flag_in
     AND out_put     = output_in
     AND  cache_flag     =  '1'
     AND  modify_time    =  l_my_modify_time LIMIT 1;
   END if;
   
 END if;
 

 IF  range1_in = 255 AND  range2_in = 255 AND  range3_in = 255 AND  range4_in = 255 AND  range5_in = 255 THEN set l_return_code = 0;
 ELSE set l_return_code = 1;
 end if;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_ZC_fetch_train`(train_date_in    CHAR(8),
 from_station_in   CHAR(10),
 to_station_in   CHAR(10),
 filter_list_in   VARCHAR(255),
 inner_code_in    CHAR(3),
 direction_code_in  CHAR(10),
 purpose_list_in   VARCHAR(255))
BEGIN



   DECLARE yp_query_flag INT;
   DECLARE seat_type_code_list VARCHAR(30);
   DECLARE train_count INT;
   DECLARE time_range INT;
   DECLARE head_string VARCHAR(10);
   DECLARE filter_list_in_1 VARCHAR(255);
   DECLARE filter_list_in_2 VARCHAR(255);
   DECLARE filter_list_in_3 VARCHAR(255);
   DECLARE train_head CHAR(1);
   DECLARE train_order INT;
   DECLARE train_order_max INT;
   DECLARE time_delay INT;
   DECLARE real_start_time DATETIME;
   DECLARE train_code CHAR(8);

   DECLARE from_station_in_name CHAR(10);
   DECLARE from_pingyin CHAR(20);
   DECLARE to_station_name CHAR(10);
   DECLARE to_pingyin CHAR(20);
   DECLARE train_class CHAR(1); 
   DECLARE seat_int INT;     
   DECLARE start_time CHAR(4); 
   DECLARE arrive_time CHAR(4); 
   DECLARE train_no CHAR(12);
   DECLARE from_station_in_no CHAR(2); 
   DECLARE to_station_no CHAR(2); 
   DECLARE station_train_code CHAR(8); 
   DECLARE from_station_in_telecode CHAR(3); 
   DECLARE from_bureau CHAR(1); 
   DECLARE from_subbureau CHAR(2); 
   DECLARE to_station_telecode CHAR(3); 
   DECLARE to_bureau CHAR(1); 
   DECLARE to_subbureau CHAR(2); 
   DECLARE source_code CHAR(11);
   DECLARE locate_site CHAR(2); 
   DECLARE day_difference INT;     
   DECLARE arrive_date CHAR(8); 
   DECLARE yp_info CHAR(255);
   DECLARE control_day INT;
   DECLARE sale_time CHAR(4);
   DECLARE control_train_day CHAR(8);
   DECLARE start_date CHAR(8);
   DECLARE from_day_difference INT;
   DECLARE start_train_code VARCHAR(8);

declare proc_stat_start datetime;
   declare proc_stat_end datetime;
   declare proc_stat_time_diff int;
   declare open_statistics varchar(20);
 






   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE SWV_head_string_Str VARCHAR(10);
   declare call_return_value int;
   declare cur_ZZ_fetch_train  cursor for
   select distinct tt_left_zc.from_station_name, tt_left_zc.from_pingyin, tt_left_zc.to_station_name, tt_left_zc.to_pingyin, tt_left_zc.train_class, tt_left_zc.seat_int, tt_left_zc.start_time, tt_left_zc.arrive_time, tt_left_zc.train_no, tt_left_zc.from_station_no, tt_left_zc.to_station_no, tt_left_zc.station_train_code, tt_left_zc.from_station_telecode, tt_left_zc.from_bureau, tt_left_zc.from_subbureau, tt_left_zc.to_station_telecode, tt_left_zc.to_bureau, tt_left_zc.to_subbureau, tt_left_zc.source_code, tt_left_zc.locate_site, tt_left_zc.day_difference, tt_left_zc.arrive_date, tt_left_zc.yp_info, tt_left_zc.control_day, tt_left_zc.sale_time, tt_left_zc.control_train_day from tt_left_zc;
   
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;

select parameter_value into open_statistics from arith.parameters where parameter_code='open_statistics';
if open_statistics='1' then
 set proc_stat_start = now();
end if;

   null_tail:loop
   
      SET train_count = 200;



      SET time_range = 1440;


      SET filter_list_in_3 = CONCAT(ltrim(rtrim(SUBSTRING(filter_list_in_1,LOCATE('#',filter_list_in_1)+1,255))),'%');      
      SET head_string = rtrim(ltrim(filter_list_in_3));
      SET start_date = train_date_in;
      SET purpose_list_in = '0002';



      
      create TEMPORARY table IF not EXISTS DS60_ZC_fetch_train_tt_train_order
      (
         train_head CHAR(1),
         train_order INT
      );
      truncate table DS60_ZC_fetch_train_tt_train_order;
      SET train_order_max = 9;
      SET train_head = '*';
      SET head_string = ltrim(rtrim(head_string));
      while head_string <> '' and train_head is not null and train_head <> '' DO
         SET train_head = SUBSTRING(head_string,1,1);
         SET SWV_head_string_Str = SUBSTRING(head_string,2,10);
         SET head_string = SWV_head_string_Str;
         SET train_order = train_order_max;
         SET train_order_max = train_order_max -1;
         if not exists(select 1 from DS60_ZC_fetch_train_tt_train_order where DS60_ZC_fetch_train_tt_train_order.train_head = train_head) and train_head is not null and train_head <> '' then
 
   
            insert into DS60_ZC_fetch_train_tt_train_order  values(train_head,train_order);
         end if;
      END WHILE;
     
      SET yp_query_flag = 14;
      SET seat_type_code_list = 'W0123456789ABCDTFGHIJKLMOPQS';
      
      create TEMPORARY table IF not EXISTS tt_left_zc
      (
         from_station_name CHAR(10),
         from_pingyin CHAR(20),
         to_station_name CHAR(10),
         to_pingyin CHAR(20),
         train_class CHAR(1),
         seat_int INT,
         start_time CHAR(4),
         arrive_time CHAR(4),
         train_no CHAR(12),
         from_station_no CHAR(2),
         to_station_no CHAR(2),
         station_train_code CHAR(8),
         from_station_telecode CHAR(3),
         from_bureau CHAR(1),
         from_subbureau CHAR(2),
         to_station_telecode CHAR(3),
         to_bureau CHAR(1),
         to_subbureau CHAR(2),
         source_code CHAR(11),
         locate_site CHAR(2),
         day_difference INT,
         arrive_date CHAR(8),
         yp_info CHAR(255),
         control_day INT,
         sale_time CHAR(4),
         control_train_day CHAR(8)
      );
   truncate table tt_left_zc;
      
      create TEMPORARY table IF not EXISTS DS60_ZC_fetch_train_tt_result
      (
         train_code CHAR(8),
         from_day_difference INT,
         from_station_name CHAR(10),
         from_pingyin CHAR(20),
         to_station_name CHAR(10),
         to_pingyin CHAR(20),
         train_class CHAR(1),
         seat_int INT,
         start_time CHAR(4),
         arrive_time CHAR(4),
         train_no CHAR(12),
         from_station_no CHAR(2),
         to_station_no CHAR(2),
         station_train_code CHAR(8),
         from_station_telecode CHAR(3),
         from_bureau CHAR(1),
         from_subbureau CHAR(2),
         to_station_telecode CHAR(3),
         to_bureau CHAR(1),
         to_subbureau CHAR(2),
         source_code CHAR(11),
         locate_site CHAR(2),
         day_difference INT,
         arrive_date CHAR(8),
         yp_info CHAR(255),
         control_day INT,
         sale_time CHAR(4),
         control_train_day CHAR(8),
         train_order INT,
         start_train_code CHAR(8)
      );
   truncate table DS60_ZC_fetch_train_tt_result;
      if train_date_in > DATE_FORMAT(TIMESTAMPADD(DAY,1,CURRENT_TIMESTAMP),'%Y%m%d')
      or
      train_date_in < DATE_FORMAT(TIMESTAMPADD(DAY,-1,CURRENT_TIMESTAMP),'%Y%m%d') then
         LEAVE null_tail;
      end if;
   
  
      CALL DS60_ZC_Train_Info(
  from_station_in,
  to_station_in,
  train_date_in,
  '*',
  '',
  '%',
  purpose_list_in,
  inner_code_in,
  4,
  yp_query_flag,
  seat_type_code_list,
  0,
  'tt_left_zc',
  null,null,null,call_return_value);
  
  
  


















  
 
      open cur_ZZ_fetch_train;
      SET NO_DATA = 0;
      fetch cur_ZZ_fetch_train into  from_station_in_name,from_pingyin,to_station_name,to_pingyin,train_class,
      seat_int,start_time,arrive_time,train_no,from_station_in_no,to_station_no,
      station_train_code,from_station_in_telecode,from_bureau,from_subbureau,
      to_station_telecode,to_bureau,to_subbureau,source_code,locate_site,
      day_difference,arrive_date,yp_info,control_day,sale_time,control_train_day;
      SWL_Label2:
      while NO_DATA <> 2 DO
         SET time_delay = 0;
         SET real_start_time = str_to_date(CONCAT(train_date_in,start_time) ,'%Y%m%d%H%i');
         SET time_delay = TIMESTAMPDIFF(MINUTE,CURRENT_TIMESTAMP,real_start_time);
      


































         SET train_head = SUBSTRING(station_train_code,1,1);
         if not exists(select 1 from DS60_ZC_fetch_train_tt_train_order where DS60_ZC_fetch_train_tt_train_order.train_head = train_head) then
            SET train_order = 0;
         else
            select   DS60_ZC_fetch_train_tt_train_order.train_order INTO train_order from DS60_ZC_fetch_train_tt_train_order where DS60_ZC_fetch_train_tt_train_order.train_head = train_head;
         end if;
         select   stop_time.day_difference INTO from_day_difference from basic.stop_time where stop_time.train_no = train_no
         and stop_time.station_no = from_station_in_no;
         select   stop_time.station_train_code INTO start_train_code from basic.stop_time where stop_time.train_no = train_no   order by stop_time.station_no LIMIT 1;
         insert into DS60_ZC_fetch_train_tt_result
       values('',
        from_day_difference,
      from_station_in_name,
      from_pingyin,
      to_station_name,
      to_pingyin,
      train_class,
      seat_int,
      start_time,
      arrive_time,
      train_no,
      from_station_in_no,
      to_station_no,
      station_train_code,
      from_station_in_telecode,
      from_bureau,
      from_subbureau,
      to_station_telecode,
      to_bureau,
      to_subbureau,
      source_code,
      locate_site,
      day_difference,
      arrive_date,
      yp_info,
      control_day,
      sale_time,
      control_train_day,
      train_order,
      start_train_code);
       
         SET NO_DATA = 0;
         fetch cur_ZZ_fetch_train into
         from_station_in_name,from_pingyin,to_station_name,to_pingyin,train_class,
         seat_int,start_time,arrive_time,train_no,from_station_in_no,to_station_no,
         station_train_code,from_station_in_telecode,from_bureau,from_subbureau,
         to_station_telecode,to_bureau,to_subbureau,source_code,locate_site,
         day_difference,arrive_date,yp_info,control_day,sale_time,control_train_day;
         ITERATE SWL_Label2;
      END WHILE;
      close cur_ZZ_fetch_train;
  
      UPDATE DS60_ZC_fetch_train_tt_result SET train_code =(CASE WHEN SUBSTRING(train_no,3,6) = '000000' THEN SUBSTRING(train_no,9,2)
      WHEN SUBSTRING(train_no,3,5) = '00000'  THEN SUBSTRING(train_no,8,3)
      WHEN SUBSTRING(train_no,3,4) = '0000'  THEN SUBSTRING(train_no,7,4)
      WHEN SUBSTRING(train_no,3,3) = '000'  THEN SUBSTRING(train_no,6,5)
      WHEN SUBSTRING(train_no,3,2) = '00'  THEN SUBSTRING(train_no,5,6)
      WHEN SUBSTRING(train_no,3,1) = '0'   THEN SUBSTRING(train_no,4,7)
      ELSE train_no
      END);





   
   leave null_tail;
   end loop null_tail;
   

   select 
   DS60_ZC_fetch_train_tt_result.train_no,
     DS60_ZC_fetch_train_tt_result.start_time,
     DS60_ZC_fetch_train_tt_result.arrive_time,
     DS60_ZC_fetch_train_tt_result.from_station_name,
     DS60_ZC_fetch_train_tt_result.from_pingyin,
     DS60_ZC_fetch_train_tt_result.to_station_name,
    DS60_ZC_fetch_train_tt_result.to_pingyin,
     DS60_ZC_fetch_train_tt_result.from_station_telecode,
     DS60_ZC_fetch_train_tt_result.to_station_telecode,
     DS60_ZC_fetch_train_tt_result.locate_site,
     DS60_ZC_fetch_train_tt_result.station_train_code,
     DATE_FORMAT(TIMESTAMPADD(DAY,DS60_ZC_fetch_train_tt_result.day_difference,train_date_in),'%Y%m%d') as arrive_date,
     DS60_ZC_fetch_train_tt_result.yp_info,
     train_date_in as start_date
   from DS60_ZC_fetch_train_tt_result
   where DS60_ZC_fetch_train_tt_result.start_train_code = filter_list_in
    
    
    
    
   order by DS60_ZC_fetch_train_tt_result.train_order desc,start_date,DS60_ZC_fetch_train_tt_result.start_time limit train_count;
  
   
   if open_statistics='1' then
    set proc_stat_end =now();
    set proc_stat_time_diff = timestampdiff(SECOND,proc_stat_start,proc_stat_end);
    insert into proc_stat values('DS60_ZC_fetch_train',proc_stat_start,proc_stat_end,proc_stat_time_diff);
  end if;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `DS60_ZC_Train_Info`(    
board_station_in      CHAR(10)   ,            
   end_station_in      CHAR(10)   ,
   board_train_date_in     CHAR(8)    ,
   directions_in       CHAR(10)   ,
   telecode_list_in     VARCHAR(255) ,                   
   station_train_code_in   VARCHAR(255) ,                                                                                                                               
   purposes_in       VARCHAR(255) ,
   inner_code_in      CHAR(3)   , 
   range_in        TINYINT UNSIGNED   ,
   flag_in        TINYINT UNSIGNED    ,     
   seat_type_list_in     VARCHAR(255) ,
   out_in        TINYINT UNSIGNED    ,                                      
   kind_in        VARCHAR(50)  ,
   purpose_mode_in     TINYINT UNSIGNED   ,     
   tno_in        CHAR(12)       
 , debug_in        TINYINT UNSIGNED   ,
 INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE Version CHAR(30);
   DECLARE temp_board_station CHAR(10);        
   DECLARE t_train_no CHAR(12);     
   DECLARE t_down_quantity INT;          
   DECLARE cancel_station VARCHAR(1024);     
   DECLARE temp_end_station CHAR(10);        
   DECLARE t_train_date CHAR(8);      
   DECLARE t_wseat_type_code CHAR(1);      
   DECLARE start_name CHAR(10);    
   DECLARE temp_board_train_date CHAR(8);         
   DECLARE t_station_no CHAR(2);      
   DECLARE t_seat_feature CHAR(1);      
   DECLARE end_name CHAR(10);    
   DECLARE temp_directions CHAR(10);        
   DECLARE t_assign_station CHAR(3);      
   DECLARE t_inner_code CHAR(7);      
   DECLARE ticket_limit INT;    
   DECLARE temp_telecode_list VARCHAR(255);    
   DECLARE t_far_from_station_no CHAR(2);      
   DECLARE range_in1 TINYINT UNSIGNED;   
   DECLARE cancel_seat_type VARCHAR(255);  
   DECLARE temp_station_train_code VARCHAR(255);   
   DECLARE t_limit_station CHAR(2);      
   DECLARE range_in2 TINYINT UNSIGNED;     
   DECLARE cancel_purpose VARCHAR(255);  
   DECLARE temp_purposes VARCHAR(255);    
   DECLARE t_coach_no CHAR(2);      
   DECLARE range_in3 TINYINT UNSIGNED;   
   DECLARE relation_code CHAR(3);
   DECLARE temp_inner_code CHAR(3);         
   DECLARE t_seat_type_code CHAR(1);      
   DECLARE range_in4 TINYINT UNSIGNED;   
   DECLARE auto_share CHAR(1);
   DECLARE temp_range TINYINT UNSIGNED;         
   DECLARE t_purpose_code CHAR(2);      
   DECLARE range_in5 TINYINT UNSIGNED;  
   DECLARE temp_flag TINYINT UNSIGNED;         
   DECLARE t_range TINYINT UNSIGNED;      
   DECLARE center_notice1 VARCHAR(50); 
   DECLARE temp_seat_type_list VARCHAR(255);    
   DECLARE t_ticket_quantity INT;          
   DECLARE notice_flag CHAR(1);     
   DECLARE temp_out TINYINT UNSIGNED;         
   DECLARE t_up_quantity INT;          
   DECLARE tmp_seat_type_list VARCHAR(255);
   DECLARE temp_kind CHAR(10);        
   DECLARE t_mid_quantity INT;        
   DECLARE seat_type_cache VARCHAR(64);            
   DECLARE rowcount INT;    
  
   DECLARE transform_station_telecode CHAR(3);    
   DECLARE original_station_telecode CHAR(3);                                                          
   DECLARE start_date CHAR(8);    
   DECLARE stop_date CHAR(8);               
   DECLARE share_flag CHAR(1);        
   DECLARE seat_cache TINYINT UNSIGNED;                                                                   
   DECLARE start_station_name CHAR(10);    
   DECLARE start_station_telecode CHAR(3);        
   DECLARE share_string VARCHAR(8192);  
   DECLARE transform_date CHAR(8);                                                                            
   DECLARE end_station_in_name CHAR(10);    
   DECLARE end_station_in_telecode CHAR(3);         
   DECLARE transform_no CHAR(2);     
   DECLARE transform_bureau_code CHAR(1);                                                                      
   DECLARE train_class_code CHAR(1);     
   DECLARE subbureau_code CHAR(2);             
   DECLARE transform_subbureau_code CHAR(2);    
   DECLARE sale_bureau CHAR(1);                                                                   
   DECLARE double_id CHAR(1);     
   DECLARE schema_id CHAR(1);               
   DECLARE sale_subbureau CHAR(2);    
   DECLARE old_range TINYINT UNSIGNED;                                                                     
   DECLARE seat_types INT;    
   DECLARE start_time CHAR(4);               
   DECLARE old_sale_station CHAR(3);    
   DECLARE fetch_w_seat TINYINT UNSIGNED;                                                                     
   DECLARE train_code CHAR(8);    
   DECLARE train_no CHAR(12);              
   DECLARE day_difference_from TINYINT UNSIGNED;    
   DECLARE tmp_range SMALLINT;                                                                  
   DECLARE start_station_no CHAR(2);    
   DECLARE end_station_in_no CHAR(2);               
   DECLARE tmp_start_coach_no CHAR(2);    
   DECLARE tmp_end_coach_no CHAR(2);                                                                   
   DECLARE arrive_time CHAR(4);    
   DECLARE board_train_code CHAR(8);              
   DECLARE cache_info_list VARCHAR(1024);  
   DECLARE train_default TINYINT UNSIGNED;                                                                 
   DECLARE start_telecode CHAR(3);    
   DECLARE start_bureau_code CHAR(1);               
   DECLARE start_city_code CHAR(4);    
   DECLARE end_city_code CHAR(4);                                                                   
   DECLARE start_subbureau_code CHAR(2);    
   DECLARE end_telecode CHAR(3);               
   DECLARE station_telecode CHAR(3);    
   DECLARE end_tele_list VARCHAR(255);                                                              
   DECLARE end_bureau_code CHAR(1);    
   DECLARE end_subbureau_code CHAR(2);               
   DECLARE overtime INT;    
   DECLARE cache_time DATETIME;                                                                        
   DECLARE direction_code CHAR(1);    
   DECLARE day_difference1 TINYINT UNSIGNED;               
   DECLARE old_start_telecode CHAR(3);    
   DECLARE old_end_telecode CHAR(3);                                                                   
   DECLARE day_difference2 TINYINT UNSIGNED;    
   DECLARE day_difference TINYINT UNSIGNED;               
   DECLARE ls_to_range CHAR(3);    
   DECLARE ls_from_range CHAR(3);                                                                     
   DECLARE board_datetime DATETIME;    
   DECLARE arrive_train_date CHAR(8);               
   DECLARE d5 DATETIME;    
   DECLARE ls_purposes VARCHAR(255);                                                                    
   DECLARE ticket_office CHAR(7);    
   DECLARE SQL2 VARCHAR(2000);         
   DECLARE city_code CHAR(4);    
   DECLARE TVM_Flag TINYINT UNSIGNED;                                                                         
   DECLARE board_subbureau_code CHAR(2);    
   DECLARE board_center_code CHAR(2);             
   DECLARE ls_tmp_range CHAR(3);     
   DECLARE ls_From_To_Flag CHAR(3);                                                                 
   DECLARE area_center_code CHAR(2);    
   DECLARE location_code CHAR(2);               
   DECLARE ahead_time INT;     
   DECLARE to_station_no_limit CHAR(2);                                                                  
   DECLARE today CHAR(8);    
   DECLARE start_datetime DATETIME;              
   DECLARE end_start_time CHAR(4);    
   DECLARE my_center_code CHAR(2);                                                                       
   DECLARE max_day SMALLINT;    
   DECLARE bureau_code CHAR(1);               
   DECLARE corporation_code CHAR(3);    
   DECLARE corporation_name CHAR(10);                                                                 
   DECLARE To_Range TINYINT UNSIGNED;    
   DECLARE union_flag CHAR(1);               
   DECLARE corporation_type CHAR(1);    
   DECLARE sale_mode CHAR(1);                                                                     
   DECLARE From_To_Flag SMALLINT;    
   DECLARE diff_day SMALLINT;              
   DECLARE train_type_code CHAR(1);    
   DECLARE tbs_info VARCHAR(255);                                                                  
   DECLARE union_end_no CHAR(2);    
   DECLARE union_train_code CHAR(8);               
   DECLARE start_flag CHAR(1);    
   DECLARE d6 DATETIME;                                                                          
   DECLARE temp_train_code CHAR(12);    
   DECLARE command_code CHAR(1);               
   DECLARE d7 DATETIME;    
   DECLARE d8 DATETIME;                                                                            
   DECLARE seat_feature CHAR(1);    
   DECLARE tmp_seat_type CHAR(1);               
   DECLARE t0 INT;     
   DECLARE purpose_cache VARCHAR(50);                                                                     
   DECLARE seat_type_code VARCHAR(30);   
   DECLARE bed_level CHAR(1);               
   DECLARE t1 INT;    
   DECLARE t2 INT;                                                                               
   DECLARE ticket_type TINYINT UNSIGNED;    
   DECLARE special_visa TINYINT UNSIGNED;               
   DECLARE t3 INT;    
   DECLARE t4 INT;                                                                               
   DECLARE relay_ticket_type TINYINT UNSIGNED;    
   DECLARE price_procedure VARCHAR(40);           
   DECLARE t5 INT;    
   DECLARE t6 INT;                                                                               
   DECLARE ticket_price SMALLINT;    
   DECLARE total INT;               
   DECLARE t7 INT;    
   DECLARE d9 DATETIME;                                                                              
   DECLARE up INT;    
   DECLARE mid INT;               
   DECLARE t8 INT;    
   DECLARE t9 INT;                                                                               
   DECLARE down INT;    
   DECLARE Is_Bed TINYINT UNSIGNED;               
   DECLARE d10 DATETIME;    
   DECLARE d11 DATETIME;                                                                        
   DECLARE bed_code_list VARCHAR(30);    
   DECLARE soft_code_list VARCHAR(30);         
   DECLARE start_pycode VARCHAR(20);   
   DECLARE end_pycode VARCHAR(20);                                                                 
   DECLARE Is_soft TINYINT UNSIGNED;    
   DECLARE belong_seat_type_code CHAR(1);            
   DECLARE cache_used INT;    
   DECLARE delete_flag TINYINT UNSIGNED;                                                                       
   DECLARE train_info_list VARCHAR(255);  
   DECLARE row INT;               
   DECLARE ticket_num INT;    
   DECLARE GS_MODE TINYINT UNSIGNED;                                                                       
   DECLARE start_tele_list VARCHAR(255);  
   DECLARE tmp_list VARCHAR(255);          
   DECLARE phone_reserve_flag INT;    
   DECLARE tmp_purpose VARCHAR(60);                                                                     
   DECLARE start_tele_list1 VARCHAR(255);  
   DECLARE end_tele_list1 VARCHAR(255);          
   DECLARE num_limit INT;    
   DECLARE wseat_type_code CHAR(1);                                                                     
   DECLARE d1 DATETIME;    
   DECLARE d2 DATETIME;              
   DECLARE running_style INT;    
   DECLARE running_rule INT;                                                                     
   DECLARE d3 DATETIME;      
   DECLARE d4 DATETIME;              
   DECLARE date_after INT;    
   DECLARE return_code INT;                                                                       
   DECLARE fetch_range TINYINT UNSIGNED;    
   DECLARE union_start_telecode VARCHAR(255);         
   DECLARE purpose_code CHAR(2);    
   DECLARE ticket_range TINYINT UNSIGNED;                                                                       
   DECLARE default_flag TINYINT UNSIGNED;    
   DECLARE original_default_num INT;     
 DECLARE SQL_SELECT_LIMIT INT;    
   DECLARE schedule_coach CHAR(2);    
   DECLARE 12306_flag TINYINT UNSIGNED;                                                                       
   DECLARE tmp_start_time CHAR(4);    
   DECLARE tmp_arrive_time CHAR(4);               
   DECLARE share_to_wseat CHAR(1);    
   DECLARE start_train_date CHAR(8);                                                                     
   DECLARE w_seat_type CHAR(1);    
   DECLARE train_type CHAR(1);               
   DECLARE train_stop_sale TINYINT UNSIGNED;    
   DECLARE center_notice VARCHAR(30);                                                               
   DECLARE train_seat_cache TINYINT UNSIGNED;    
   DECLARE train_modify_time DATETIME;           
   DECLARE train_para_define VARCHAR(30);   
   DECLARE original_bureau_code CHAR(1);                                                                 
   DECLARE network_train_brand VARCHAR(255);  
   DECLARE train_period TINYINT UNSIGNED;           
   DECLARE sale_flag TINYINT UNSIGNED;    
   DECLARE old_seat_feature CHAR(1);                                                                     
   DECLARE train_period_flag TINYINT UNSIGNED;    
   DECLARE tmp_start_datetime DATETIME;           
   DECLARE network_mode TINYINT UNSIGNED;    
   DECLARE network_mode1 TINYINT UNSIGNED;                                                 
   DECLARE is_student TINYINT UNSIGNED;    
   DECLARE w_flag CHAR(1);               
   DECLARE seat_info_flag TINYINT UNSIGNED;    
   DECLARE my_modify_time DATETIME; 
   DECLARE input_purposes VARCHAR(255);  
   DECLARE t10 INT;      
   DECLARE t11 INT;    
   DECLARE t12 INT;
   DECLARE management_bureau CHAR(1);    
   DECLARE Train_Time_Proc VARCHAR(30);      
   DECLARE tmp_start_time1 CHAR(4);    
   DECLARE From_Range TINYINT UNSIGNED; 
   DECLARE default_num INT;        
   DECLARE command_list VARCHAR(255);     
   DECLARE pos INT;        
   DECLARE interval_num INT;             
   DECLARE minute INT;    
   DECLARE train_brand_list VARCHAR(255);    
   DECLARE train_brand VARCHAR(2);   
   DECLARE syn_flag INT;
   DECLARE interval_time DATETIME;    
   DECLARE cache_flag INT;       
   DECLARE init_train_period_flag TINYINT UNSIGNED; 
   DECLARE R_original_station_bureau CHAR(1); 
   DECLARE R_original_subbureau_code CHAR(2);
   DECLARE R_sale_bureau CHAR(1); 
   DECLARE R_sale_subbureau CHAR(2); 
   DECLARE C_from_period TINYINT UNSIGNED;
   DECLARE C_control_min_date CHAR(8);
   DECLARE C_start_date CHAR(8);
   DECLARE C_train_period TINYINT UNSIGNED; 
   DECLARE now_datetime VARCHAR(30);
   DECLARE declare_day CHAR(8);
   DECLARE now_time_char CHAR(4);
   DECLARE control_day INT;
   DECLARE min_time_flag CHAR(1);
   DECLARE min_time CHAR(4);
   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE SWV_train_brand_list_Str VARCHAR(255);
   DECLARE SWV_station_train_code_in_Str VARCHAR(255);
   DECLARE SWV_command_list_Str VARCHAR(255);
   DECLARE SWV_CurNum INT DEFAULT 0;
   declare call_return_value int;
  
  
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   IF board_station_in is null then
      set board_station_in = 'ÄÏ¾©';
   END IF;
   IF end_station_in is null then
      set end_station_in = 'ÉÏº£';
   END IF;
   IF board_train_date_in is null then
      set board_train_date_in = '20090105';
   END IF;
   IF directions_in is null then
      set directions_in = '*';
   END IF;
   IF telecode_list_in is null then
      set telecode_list_in = 'SHH:SNH';
   END IF;
   IF station_train_code_in is null then
      set station_train_code_in = '#5#1440#DTK';
   END IF;
   IF purposes_in is null then
      set purposes_in = '00';
   END IF;
   IF inner_code_in is null then
      set inner_code_in = "SHH";
   END IF;
   IF range_in is null then
      set range_in = 4;
   END IF;
   IF flag_in is null then
      set flag_in = 0;
   END IF;
   IF seat_type_list_in is null then
      set seat_type_list_in = "1234MO";
   END IF;
   IF out_in is null then
      set out_in = 0;
   END IF;
   IF kind_in is null then
      set kind_in = '';
   END IF;
   IF purpose_mode_in is null then
      set purpose_mode_in = 2;
   END IF;
   IF tno_in is null then
      set tno_in = '%';
   END IF;
   IF debug_in is null then
      set debug_in = 0;
   END IF;

   
   SET Version = "Ver 20141223.12:00";    
                
               
 
   SET temp_board_station = board_station_in;
   SET temp_end_station = end_station_in;
   SET temp_board_train_date = board_train_date_in;
   SET temp_directions = directions_in;
   SET temp_telecode_list = telecode_list_in;
   SET temp_station_train_code = station_train_code_in;
   SET temp_purposes = purposes_in;
   SET temp_inner_code = inner_code_in;
   SET temp_range = range_in;
   SET temp_flag = flag_in;
   SET temp_seat_type_list = seat_type_list_in;
   SET temp_out = out_in;
   SET temp_kind = kind_in;  

  SET d1 = CURRENT_TIMESTAMP;
   SET cache_used = 0;
   SET sale_mode = 'A';
   SET network_mode1 = 0;
   SET is_student = 0;
   SET ticket_limit = 20;
   SET Train_Time_Proc = 'arith.DS60_Train_Time';

   SET today = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
   SET board_datetime = CAST(board_train_date_in AS DATETIME);
   SET now_time_char = CONCAT(SUBSTRING(DATE_FORMAT(CURRENT_TIMESTAMP,'%h:%i:%s'),1,2),SUBSTRING(DATE_FORMAT(CURRENT_TIMESTAMP,'%h:%i:%s'),4,2));


   IF flag_in BETWEEN 5 AND 9 then 
      SET sale_flag = 1;
   ELSE 
      SET sale_flag = 0;
   end if;


   IF flag_in IN(13,14) then 
      SET network_mode = 1;
 
     
  SET network_train_brand = '[CDGZTK1234567089LYA].+';
      IF LOCATE('0X',purposes_in)%2 = 1 then 
         SET is_student = 1;
      ELSE 
         SET is_student = 0;
      end if;
   ELSE 
      SET network_mode = 0;
      
   SET network_train_brand = '.+';
   end if;


   IF flag_in = 12 then 
      SET flag_in = 11;
      SET 12306_flag = 1;
   ELSE 
      SET 12306_flag = 0;
   end if;
       
   IF flag_in = 11 then 
      SET phone_reserve_flag = 1;
      SET sale_mode = 'E';
      SET 12306_flag = 1; 
      SET phone_reserve_flag = 0;
   end if;

   if  flag_in in(11,0) then  

      IF LOCATE('0X',purposes_in)%2 = 1 then 
         SET is_student = 1;
      ELSE 
         SET is_student = 0;
      end if;
   end if;

   IF 12306_flag = 1 then 
      SET sale_mode = 'E';
   end if; 

   IF flag_in < 5 then 
      SET TVM_Flag = 1;
      SET num_limit = 5;
      SET sale_mode = 'B';
      IF LOCATE('W',seat_type_list_in) = 0 then 
         SET seat_type_list_in = CONCAT('W',ltrim(rtrim(seat_type_list_in)));
      end if;
      IF LOCATE('Q',seat_type_list_in) = 0 then 
         SET seat_type_list_in = CONCAT(ltrim(rtrim(seat_type_list_in)),'Q');
      end if;  
      IF LOCATE('S',seat_type_list_in) = 0 then 
         SET seat_type_list_in = CONCAT(ltrim(rtrim(seat_type_list_in)),'S');
      end if;
   ELSE 
      SET TVM_Flag = 0;
      SET num_limit = 1;
   end if;


   IF network_mode = 1 then 
      SET num_limit = 1;
      SET TVM_Flag = 1;
      SET sale_mode = 'E';
   end if;


   IF sale_mode != 'E' then 
      BEGIN 
 
         select   dg.relation_code 
   INTO relation_code FROM basic.DG50_purpose_relate_define as dg
   WHERE dg.inner_code = 'AD'
         AND dg.start_date <= today
         AND dg.stop_date  >= today
         AND dg.station_telecode = "***"
         AND LOCATE(dg.purpose_code,purposes_in)%2 = 1     
         AND ltrim(rtrim(dg.obligate1)) = '1'   
  ORDER BY dg.relation_code LIMIT 1;
         
         SET rowcount = ROW_COUNT();
 
  
  set transaction ISOLATION LEVEL READ UNCOMMITTED;
  begin
  DECLARE purpose_cursor CURSOR FOR
     SELECT  dg.purpose_code FROM basic.DG50_purpose_relate_define as dg
     WHERE dg.inner_code = 'AD' 
     AND dg.start_date <= today
     AND dg.stop_date  >= today
     AND dg.relation_code = relation_code
     AND ltrim(rtrim(dg.obligate1)) >= '1'
     
     ORDER BY dg.obligate1           
    ;
    OPEN purpose_cursor;
    SWL_Label2:
    WHILE 1 = 1 DO
    SET NO_DATA = 0;
    FETCH purpose_cursor INTO t_purpose_code;
    IF NO_DATA >= 1 then 
       LEAVE SWL_Label2;
    end if;
    IF LOCATE(t_purpose_code,purposes_in)%2 = 0 then 
       SET purposes_in = CONCAT(rtrim(purposes_in),t_purpose_code);
    end if;
    END WHILE;
    CLOSE purpose_cursor;
  end;
  set transaction ISOLATION LEVEL READ COMMITTED;
      END;
   end if;


   IF LOCATE('00',purposes_in)%2 = 1 AND LOCATE('02',purposes_in)%2 = 0 then  
      SET purposes_in = CONCAT(rtrim(purposes_in),'02');
   end if;
   IF LOCATE('1C',purposes_in)%2 = 1 AND LOCATE('2C',purposes_in)%2 = 0 then  
      SET purposes_in = CONCAT(rtrim(purposes_in),'2C');
   end if;


   IF flag_in = 10 then     
      IF SUBSTRING(station_train_code_in,1,1) = '%' AND SUBSTRING(station_train_code_in,2,1) = '#' then 
         SET GS_MODE = 1;
         SET flag_in = 1;
         SET SWV_station_train_code_in_Str = SUBSTRING(station_train_code_in,2,12);
         SET station_train_code_in = SWV_station_train_code_in_Str;
      end if;
      IF LOCATE('W',seat_type_list_in) = 0 then 
         SET seat_type_list_in = CONCAT('W',ltrim(rtrim(seat_type_list_in)));
      end if;
   ELSE 
      SET GS_MODE = 0;
      SET flag_in = 0;
   end if;

   CREATE TEMPORARY TABLE if not exists ds60_zc_train_info_tt_stop_time
   ( 
      start_station_name CHAR(10), 
      end_station_name CHAR(10),  
      train_class_code CHAR(1),  
      seat_types INT,  
      start_time CHAR(4),  
      arrive_time CHAR(4),  
      train_no CHAR(12), 
      start_station_no CHAR(2),  
      end_station_no CHAR(2),  
      board_train_code CHAR(8),  
      start_telecode CHAR(3),  
      start_bureau_code CHAR(1),  
      start_subbureau_code CHAR(2), 
      end_telecode CHAR(3), 
      end_bureau_code CHAR(1), 
      end_subbureau_code CHAR(2), 
      ticket_office CHAR(7), 
      location_code CHAR(2), 
      day_difference INT, 
      arrive_date CHAR(8), 
      info_list VARCHAR(255), 
      default_flag TINYINT UNSIGNED, 
      start_tele_list VARCHAR(255), 
      end_tele_list VARCHAR(255), 
      start_pycode VARCHAR(20), 
      end_pycode VARCHAR(20), 
      train_code CHAR(8), 
      train_type CHAR(1), 
      seat_feature CHAR(1), 
      board_train_date CHAR(8),  
  cache_time DATETIME, 
      start_code CHAR(10),  
   end_code CHAR(10),  
   start_date CHAR(8),  
   purposes VARCHAR(50), 
      to_limit_no CHAR(2), 
      notice_flag CHAR(1), 
      start_name CHAR(10), 
   end_name CHAR(10), 
      management_bureau CHAR(1), 
   control_day INT ,   
   sale_time CHAR(4), 
   control_train_day CHAR(8), 
   cancel_purpose_code VARCHAR(255),
   index idx_query(train_no,start_telecode,end_telecode)
   );
   truncate table ds60_zc_train_info_tt_stop_time;
   

   

   create TEMPORARY table if not exists ds60_zc_tt_temp_union_station
   (
      my_tele_code CHAR(3) NOT NULL,
   index idx_union (my_tele_code)
   );
   truncate table ds60_zc_tt_temp_union_station;
   

   

   create TEMPORARY table if not exists tmp_ds60_zc_tt_train_no 
   (
      train_no CHAR(12) NOT NULL,
      num INT NOT NULL,
      flag CHAR(8) NOT NULL,
   index idx_train (train_no)
   );
   truncate table tmp_ds60_zc_tt_train_no;
   

   SET bed_code_list = "3456ACFGHL";
   SET soft_code_list = "246789ADEFGHIJL";

                          
   SET default_num = -1;
   SET original_default_num = -1;
   SET minute = 0;
   SET train_brand_list = NULL;
   SET train_brand = "";
   SET overtime = 1440;

   IF SUBSTRING(station_train_code_in,1,1) = '#' then  
      SET train_default = 1;
      IF network_mode = 1 then 
         SET train_default = 0;
      end if;
      SET command_list = station_train_code_in;
      SET station_train_code_in = '%';
      SET SWV_command_list_Str = SUBSTRING(command_list,2,LENGTH(command_list));
      SET command_list = SWV_command_list_Str;
      SET pos = LOCATE('#',command_list);
      IF pos = 0 then 
         SET default_num = cast(command_list as SIGNED INTEGER);
      ELSE
         SET default_num = cast(SUBSTRING(command_list,1,pos -1) as SIGNED INTEGER);
         SET SWV_command_list_Str = SUBSTRING(command_list,pos+1,LENGTH(command_list));
         SET command_list = SWV_command_list_Str;
         SET pos = LOCATE('#',command_list);
         IF pos = 0 then 
            SET minute = cast(command_list as SIGNED INTEGER);
         ELSE
            SET minute = cast(SUBSTRING(command_list,1,pos -1) as SIGNED INTEGER);
            SET SWV_command_list_Str = SUBSTRING(command_list,pos+1,LENGTH(command_list));
            SET command_list = SWV_command_list_Str;
            SET train_brand_list = CONCAT(command_list,'%');
         end if;
      end if;
      IF default_num = 0 then 
         SET default_num = -1;
      end if;
      SET original_default_num = default_num;
   ELSE 
      SET train_default = 0;
   end if;  
 null_return:loop
 
 
   IF LENGTH(rtrim(ltrim(board_station_in))) = 3 then 
      SET start_telecode = board_station_in;
      
   set transaction ISOLATION LEVEL READ UNCOMMITTED;
      select   station_dictionary.station_name, station_dictionary.bureau_code, 
        station_dictionary.subbureau_code, station_dictionary.city_code 
      INTO board_station_in,bureau_code,
        subbureau_code,city_code 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = board_station_in
      AND station_dictionary.start_date <= board_train_date_in
      AND station_dictionary.stop_date >= board_train_date_in;
   SET rowcount = ROW_COUNT();
   set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount = 0 then 
         LEAVE null_return;
      end if;
   ELSE
      
   set transaction ISOLATION LEVEL READ UNCOMMITTED;
      select   station_dictionary.station_telecode, station_dictionary.bureau_code, 
        station_dictionary.subbureau_code, station_dictionary.city_code 
      INTO start_telecode,bureau_code,
        subbureau_code,city_code 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_name = board_station_in
      AND station_dictionary.start_date <= board_train_date_in
      AND station_dictionary.stop_date >= board_train_date_in;
       SET rowcount = ROW_COUNT();
   set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount = 0 then 
         LEAVE null_return;
      end if;
   end if;
   IF LENGTH(rtrim(ltrim(end_station_in))) = 3 then 
      SET end_telecode = end_station_in;
      
   set transaction ISOLATION LEVEL READ UNCOMMITTED;
      select   station_dictionary.station_name 
      INTO end_station_in 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = end_station_in
      AND station_dictionary.start_date <= board_train_date_in
      AND station_dictionary.stop_date >= board_train_date_in;
       SET rowcount = ROW_COUNT();
   set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount = 0 then 
         LEAVE null_return;
      end if;
   ELSE
      
   set transaction ISOLATION LEVEL READ UNCOMMITTED;
      select   station_dictionary.station_telecode 
      INTO end_telecode 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_name = end_station_in
      AND station_dictionary.start_date <= board_train_date_in
      AND station_dictionary.stop_date >= board_train_date_in;
      SET rowcount = ROW_COUNT();
   set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount = 0 then 
         LEAVE null_return;
      end if;
   end if;

   SET old_start_telecode = start_telecode;
   SET old_end_telecode = end_telecode;
                               
   SET From_To_Flag = 1;
   SET default_flag = 0;

   IF flag_in != 1 then 
      SET price_procedure = "arith.DS60_total_price";
   end if;

   SET To_Range = range_in;
   SET delete_flag = 0;                                   


   IF sale_mode NOT IN('E','9') then 
      
   set transaction ISOLATION LEVEL READ UNCOMMITTED;
      select   station_dictionary.bureau_code, station_dictionary.subbureau_code, station_dictionary.city_code 
      INTO bureau_code,subbureau_code,city_code 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = inner_code_in
      AND station_dictionary.start_date <= board_train_date_in
      AND station_dictionary.stop_date >= board_train_date_in;
       SET rowcount = ROW_COUNT();
   set transaction ISOLATION LEVEL READ COMMITTED;
       
      
   IF rowcount != 1 then
         LEAVE null_return;
      end if;
   ELSE 
      SET inner_code_in = '***';
   end if;  
              
   SET union_flag = "0"; 
   IF flag_in != 1 AND sale_mode NOT IN('E','9') then  
      INSERT INTO ds60_zc_tt_temp_union_station
      SELECT DG50_same_city_dictionary.station_telecode FROM basic.DG50_same_city_dictionary
      WHERE DG50_same_city_dictionary.start_date <= board_train_date_in
      AND DG50_same_city_dictionary.stop_date >= board_train_date_in
      AND DG50_same_city_dictionary.city_code = city_code
      AND  DG50_same_city_dictionary.station_telecode <> inner_code_in
      AND  DG50_same_city_dictionary.union_flag  = "1";
      IF ROW_COUNT() > 0 then 
         SET union_flag = "1";
      end if;
   end if;
                      

   SET From_Range = 0;             
   IF (start_telecode <> inner_code_in) AND sale_mode NOT IN('E','9') then  
      
   set transaction ISOLATION LEVEL READ UNCOMMITTED;
      select   station_dictionary.bureau_code, station_dictionary.subbureau_code 
      INTO start_bureau_code,start_subbureau_code 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = start_telecode
      AND station_dictionary.start_date <= board_train_date_in
      AND station_dictionary.stop_date >= board_train_date_in   LIMIT 1;
      SET rowcount = ROW_COUNT();
       set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount = 0 then 
         LEAVE null_return;
      end if;
      IF bureau_code != start_bureau_code then 
         SET From_Range = 4;
      ELSE
         SET From_Range = 3;
         IF union_flag = '1' then 
            IF EXISTS(SELECT 1 FROM ds60_zc_tt_temp_union_station WHERE ds60_zc_tt_temp_union_station.my_tele_code = start_telecode) then
               SET From_Range = 1;
            end if;
         end if;
      end if;
   ELSE 
      SET start_bureau_code = bureau_code;
   end if; 
        
   SET interval_num = 24;                     
   SET interval_time = TIMESTAMPADD(HOUR,-interval_num,CURRENT_TIMESTAMP);
                

   IF debug_in = 9 then 
       select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.20-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';
  
   end if;
                             



   IF flag_in != 1 then 
      select   DG30_my_center.my_center_code INTO my_center_code FROM center.DG30_my_center;
      SET rowcount = ROW_COUNT();
      
      IF rowcount = 0 then 
   
         LEAVE null_return;
      end if;
   end if;


   IF NOT (my_center_code = 'Q1' AND phone_reserve_flag = 1) then 
      
   set transaction ISOLATION LEVEL READ unCOMMITTED;
      select   DS60_same_city_cache.telecode_list, DS60_same_city_cache.telecode_list1 
      INTO start_tele_list,start_tele_list1 
      FROM center.DS60_same_city_cache 
      WHERE DS60_same_city_cache.station_telecode = start_telecode;
      SET rowcount = ROW_COUNT();
      set transaction ISOLATION LEVEL READ COMMITTED;
   
      IF rowcount = 0 then 
   
         select   sdd.city_code 
   INTO start_city_code 
   FROM basic.station_divide_dictionary as sdd
   WHERE sdd.station_name = board_station_in
         AND sdd.start_date <= board_train_date_in
         AND sdd.stop_date >= board_train_date_in;
         IF ROW_COUNT() = 0 then 
            SET start_city_code = 'AAAA';
         end if;  
  
         SET start_tele_list = "";
         SET start_tele_list1 = "";
         IF EXISTS(SELECT 1 FROM basic.station_divide_dictionary sdd WHERE sdd.city_code = start_city_code) then 
            BEGIN
  DECLARE cursorboardstation CURSOR FOR 
     SELECT DISTINCT sdd.station_telecode 
     FROM basic.station_divide_dictionary sdd
     WHERE sdd.city_code = start_city_code
     AND sdd.start_date <= board_train_date_in
     AND sdd.stop_date  >= board_train_date_in;
   
               OPEN cursorboardstation;
               SWL_Label3:
               WHILE 1 = 1 DO
                  SET NO_DATA = 0;
                  FETCH cursorboardstation INTO station_telecode;
                  IF NO_DATA >= 1 then 
                     LEAVE SWL_Label3;
                  end if;
                  IF start_tele_list = "" then 
                     SET start_tele_list = CONCAT(rtrim(start_tele_list),station_telecode);
                  ELSE 
                     SET start_tele_list = CONCAT(rtrim(start_tele_list),":",station_telecode);
                  end if;
                  IF start_tele_list1 = '' then 
                     SET start_tele_list1 = CONCAT('"',station_telecode,'"');
                  ELSE 
                     SET start_tele_list1 = CONCAT(rtrim(start_tele_list1),',','"',station_telecode,'"');
                  end if;
               END WHILE;
               CLOSE cursorboardstation;
   
            END;
         ELSE
            IF start_tele_list = "" then 
               SET start_tele_list = CONCAT(rtrim(start_tele_list),start_telecode);
            ELSE 
               SET start_tele_list = CONCAT(rtrim(start_tele_list),":",start_telecode);
            end if;
            IF start_tele_list1 = '' then 
               SET start_tele_list1 = CONCAT('"',start_telecode,'"');
            ELSE 
               SET start_tele_list1 = CONCAT(rtrim(start_tele_list1),',','"',start_telecode,'"');
            end if;
         end if;
         IF out_in != 3 then 
            INSERT INTO center.DS60_same_city_cache VALUES(start_telecode,start_tele_list,start_tele_list1,CURRENT_TIMESTAMP);
         end if;
      end if;
       set transaction ISOLATION LEVEL READ unCOMMITTED;
      select   DS60_same_city_cache.telecode_list, DS60_same_city_cache.telecode_list1 
      INTO end_tele_list,end_tele_list1 
      FROM center.DS60_same_city_cache 
      WHERE DS60_same_city_cache.station_telecode = end_telecode;
      SET rowcount = ROW_COUNT();
   set transaction ISOLATION LEVEL READ COMMITTED;
     
      IF rowcount = 0 then 
    
         select   sdd.city_code 
   INTO end_city_code 
   FROM basic.station_divide_dictionary sdd
   WHERE sdd.station_name = end_station_in
         AND sdd.start_date <= board_train_date_in
         AND sdd.stop_date >= board_train_date_in;
         IF ROW_COUNT() = 0 then 
            SET end_city_code = 'AAAA';
         end if;  
        
         SET end_tele_list = "";
         SET end_tele_list1 = "";
         IF EXISTS(SELECT 1 FROM basic.station_divide_dictionary sdd WHERE sdd.city_code = end_city_code) then 
            BEGIN
   DECLARE cursor_end_station CURSOR FOR 
     SELECT DISTINCT sdd.station_telecode 
     FROM basic.station_divide_dictionary sdd
     WHERE sdd.city_code = end_city_code
     AND sdd.start_date <= board_train_date_in
     AND sdd.stop_date  >= board_train_date_in;
   
               OPEN cursor_end_station;
               SWL_Label4:
               WHILE 1 = 1 DO
                  SET NO_DATA = 0;
                  FETCH cursor_end_station INTO station_telecode;
                  IF NO_DATA >= 1 then 
                     LEAVE SWL_Label4;
                  end if;
                  IF end_tele_list = "" then 
                     SET end_tele_list = CONCAT(rtrim(end_tele_list),station_telecode);
                  ELSE 
                     SET end_tele_list = CONCAT(end_tele_list,":",station_telecode);
                  end if;
                  IF end_tele_list1 = '' then 
                     SET end_tele_list1 = CONCAT('"',station_telecode,'"');
                  ELSE 
                     SET end_tele_list1 = CONCAT(rtrim(end_tele_list1),',','"',station_telecode,'"');
                  end if;
               END WHILE;
               CLOSE cursor_end_station;
   
            END;
         ELSE
            IF end_tele_list = "" then 
               SET end_tele_list = CONCAT(rtrim(end_tele_list),end_telecode);
            ELSE 
               SET end_tele_list = CONCAT(end_tele_list,":",end_telecode);
            end if;
            IF end_tele_list1 = '' then 
               SET end_tele_list1 = CONCAT('"',end_telecode,'"');
            ELSE 
               SET end_tele_list1 = CONCAT(rtrim(end_tele_list1),',','"',end_telecode,'"');
            end if;
         end if;
         IF out_in != 3 then 
            INSERT INTO center.DS60_same_city_cache VALUES(end_telecode,end_tele_list,end_tele_list1,CURRENT_TIMESTAMP);
         end if;
      end if;
   ELSE
      SET start_tele_list = start_telecode;
      SET end_tele_list = end_telecode;
      SET start_tele_list1 = CONCAT('"',start_telecode,'"');
      SET end_tele_list1 = CONCAT('"',end_telecode,'"');
   end if;

   IF LOCATE(start_telecode,end_tele_list) > 0 then 
      SET start_tele_list = start_telecode;
      SET end_tele_list = end_telecode;
      SET start_tele_list1 = CONCAT('"',start_telecode,'"');
      SET end_tele_list1 = CONCAT('"',end_telecode,'"');
   end if;


   IF sale_mode IN('E','9') AND 1 = 2 then  
      IF EXISTS(SELECT 1 FROM center.DS60_seat_cache 
        WHERE DS60_seat_cache.train_date = board_train_date_in 
   AND DS60_seat_cache.train_no = inner_code_in
         AND DS60_seat_cache.start_telecode = old_start_telecode 
   AND DS60_seat_cache.end_telecode = old_end_telecode 
   AND DS60_seat_cache.purpose_code = purposes_in
         AND DS60_seat_cache.seat_type_code = seat_type_list_in 
   AND DS60_seat_cache.`range` = range_in) then 
         SET inner_code_in = '***';
      ELSE
         select   DS60_seat_cache.start_telecode, DS60_seat_cache.end_telecode 
   INTO old_start_telecode,old_end_telecode 
   FROM center.DS60_seat_cache 
   WHERE DS60_seat_cache.train_date = board_train_date_in
         AND  DS60_seat_cache.train_no= inner_code_in
         AND LOCATE(DS60_seat_cache.start_telecode,start_tele_list) > 0
         AND  LOCATE(DS60_seat_cache.end_telecode,end_tele_list) > 0
         AND  DS60_seat_cache.purpose_code  = purposes_in
         AND  DS60_seat_cache.seat_type_code = seat_type_list_in
         AND  DS60_seat_cache.`range`= range_in;
         SET rowcount = ROW_COUNT();
        
    IF rowcount = 0 then 
            SET old_start_telecode = start_telecode;
            SET old_end_telecode = end_telecode;
         end if;
      end if;
   end if;

   IF UPPER(station_train_code_in) = 'DEL' then 
      DELETE FROM center.DS60_stop_time_cache
      WHERE DS60_stop_time_cache.train_date    = board_train_date_in
      AND DS60_stop_time_cache.start_tele_list = old_start_telecode
      AND DS60_stop_time_cache.end_tele_list  = old_end_telecode
      AND  DS60_stop_time_cache.inner_code  = inner_code_in
      AND  DS60_stop_time_cache.`range`    = range_in
      AND  DS60_stop_time_cache.purposes    = purposes_in
      AND  DS60_stop_time_cache.seat_type_list = seat_type_list_in;
      
      DELETE FROM center.DS60_seat_cache
      WHERE DS60_seat_cache.train_date    = board_train_date_in
      AND DS60_seat_cache.train_no   = inner_code_in
      AND DS60_seat_cache.start_telecode = old_start_telecode
      AND DS60_seat_cache.end_telecode  = old_end_telecode
      AND DS60_seat_cache.`range`    = range_in
      AND DS60_seat_cache.purpose_code  = purposes_in
      AND DS60_seat_cache.seat_type_code = seat_type_list_in;
      
      SET station_train_code_in = '%';
      SET delete_flag = 1;
   end if;

   SET d2 = CURRENT_TIMESTAMP;
   SET t1 = TIMESTAMPDIFF(MICROSECOND,d1,d2); 


   IF debug_in = 9 then 
      
 SELECT my_center_code AS my_center,old_start_telecode AS start_telecode,old_end_telecode AS end_telecode,start_tele_list AS start_tele_list,end_tele_list AS end_tele_list;
   end if;


   SET train_seat_cache = 9; 
   
 begin 
   declare tmp_train_info_list VARCHAR(255);
   declare tmp_tbs_info VARCHAR(255);
   declare tmp_cache_info_list VARCHAR(255);
    set tmp_train_info_list='';
    set tmp_tbs_info='';
    set tmp_cache_info_list='';
  if debug_in=9 then
   select '19===ds60_zc_train_info: call DS60_Proc_Seat_Cache', board_train_date_in,
     inner_code_in,
     old_start_telecode,
     old_end_telecode,
     purposes_in,
     seat_type_list_in,
     To_Range,
     tmp_train_info_list,
     tmp_tbs_info,
   tmp_cache_info_list,
     train_seat_cache,
     12306_flag,
     delete_flag,
     train_modify_time,
     '',
     '',
     '',
     '',0,'',4;
    end if;
    CALL arith.DS60_Proc_Seat_Cache(
    board_train_date_in,
    inner_code_in,
    old_start_telecode,
    old_end_telecode,
    purposes_in,
    seat_type_list_in,
    To_Range,
    tmp_train_info_list,
    tmp_tbs_info,
  tmp_cache_info_list,
    train_seat_cache,
    12306_flag,
    delete_flag,
    train_modify_time,
    '',
    '',
    '',
    '',0,'',4);
    if debug_in=9 then 
     select '20===ds60_zc_train_info: end call DS60_Proc_Seat_Cache', board_train_date_in,
     inner_code_in,
     old_start_telecode,
     old_end_telecode,
     purposes_in,
     seat_type_list_in,
     To_Range,
     tmp_train_info_list,
     tmp_tbs_info,
   tmp_cache_info_list,
     train_seat_cache,
     12306_flag,
     delete_flag,
     train_modify_time,
     '',
     '',
     '',
     '',0,'',4;
    end if;
   end ;

 
   IF train_seat_cache IN(1,2) then 
      
      INSERT INTO ds60_zc_train_info_tt_stop_time
      SELECT dstc.start_station_name,dstc.end_station_name,dstc.train_class_code,dstc.seat_types
        ,dstc.start_time,dstc.arrive_time,dstc.train_no,dstc.start_station_no
   , dstc.end_station_no,dstc.board_train_code,dstc.start_telecode,dstc.start_bureau_code
   ,dstc.start_subbureau_code,dstc.end_telecode,dstc.end_bureau_code,dstc.end_subbureau_code
   , dstc.ticket_office,dstc.location_code,dstc.day_difference,dstc.arrive_date,info_list
   ,0 default_flag,dstc.start_tele_list,dstc.end_tele_list,dstc.start_pycode,dstc.end_pycode
   , dstc.train_code,dstc.train_class_code train_type,dstc.seat_feature
   ,dstc.train_date,dstc.cache_time,'' start_code,'' end_code,'' start_date,'' purposes
   ,dstc.end_station_no,'0','','',''
   ,dstc.control_day,dstc.sale_time,dstc.control_train_day,''  
      FROM center.DS60_stop_time_cache dstc
      WHERE dstc.train_date   = board_train_date_in
      AND  dstc.start_tele_list = old_start_telecode
      AND  dstc.end_tele_list = old_end_telecode
      AND  dstc.inner_code  = inner_code_in
      AND  dstc.`range`    = range_in
      AND  dstc.purposes    = purposes_in
      AND  dstc.seat_type_list = seat_type_list_in
      AND  GS_MODE    = 0  
      AND  dstc.board_train_code REGEXP network_train_brand; 
      SET rowcount = ROW_COUNT();
      
      IF rowcount = 0 then 
         SET cache_flag = 0;
   
        SET SQL2 = CONCAT('INSERT INTO ds60_zc_train_info_tt_stop_time  SELECT DISTINCT a.station_name,b.station_name,"0" train_class_code,0 seat_types,a.start_time,
         b.arrive_time,a.train_no,a.station_no,b.station_no,a.station_train_code ,
         a.station_telecode,a.bureau_code,a.subbureau_code,b.station_telecode,b.bureau_code,b.subbureau_code ,
  CONCAT(a.bureau_code,"1",a.subbureau_code,a.station_telecode) ticket_office,"" location_code,cast(b.day_difference as signed) -cast(a.day_difference as signed) day_difference,
         "" arrive_date ,"" info_list,
         0 default_flag,"" start_tele_list,"" end_tele_list,"" start_pycode,"" end_pycode,
         SUBSTRING(a.train_no,3,8) train_code,"" train_type,"3" seat_feature ,
         "',board_train_date_in,'",CURRENT_TIMESTAMP,"" start_code,"" end_code,
         DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
         ''%Y%m%d'') start_date, "",b.station_no,"0","","","",
         0,"0000","',DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d'),'",'''' FROM basic.stop_time a,basic.stop_time b   WHERE a.train_no   = b.train_no  AND a.station_telecode IN( ',start_tele_list1,' ) AND b.station_telecode IN( ',end_tele_list1,' ) AND a.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
         ''%Y%m%d'') AND a.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
         ''%Y%m%d'')  AND a.station_no < b.station_no  AND a.station_name NOT LIKE "%*%" AND b.station_name NOT LIKE "%*%"  AND a.station_train_code REGEXP "',network_train_brand,'"');
         SET @ds60_zc_train_info_stmt_sql = SQL2;
    
         PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
         EXECUTE ds60_zc_train_info_stmt;
   SET rowcount = ROW_COUNT();
         DEALLOCATE PREPARE ds60_zc_train_info_stmt;
   SET @ds60_zc_train_info_stmt_sql=null;
    
         
         
   IF rowcount = 0  then 
  
            LEAVE null_return;
         end if; 
  
         UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.train_code =
   (CASE WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,6) = '000000' THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,6,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,5) = '00000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,5,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,4) = '0000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,4,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,3) = '000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,3,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,2) = '00'   THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,2,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,1) = '0'   THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,1,'')
         ELSE ds60_zc_train_info_tt_stop_time.train_code
         END);
      ELSE 
         IF train_seat_cache = 1 then  
            SET cache_flag = 1;
            IF cast(SUBSTRING(DATE_FORMAT(CURRENT_TIMESTAMP,'%h:%i:%s'),4,2) as SIGNED INTEGER)%5 = 0 then 
               select   min(ds60_zc_train_info_tt_stop_time.cache_time) 
        INTO cache_time 
        FROM ds60_zc_train_info_tt_stop_time;
               IF TIMESTAMPDIFF(MINUTE,cache_time,CURRENT_TIMESTAMP) > 8 then  
                  SET SQL2 = CONCAT('INSERT INTO tmp_ds60_zc_tt_train_no SELECT a.train_no,0,SUBSTRING(a.train_no,3,8) FROM basic.stop_time a,basic.stop_time b  WHERE a.train_no   = b.train_no  AND a.station_telecode IN( ',start_tele_list1,' ) AND b.station_telecode IN( ',end_tele_list1,' ) AND a.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
                  ''%Y%m%d'') AND a.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
                  ''%Y%m%d'')  AND a.station_no < b.station_no  AND a.station_name NOT LIKE "%*%" AND b.station_name NOT LIKE "%*%"  AND a.station_train_code REGEXP "',network_train_brand,'"');
                  SET @ds60_zc_train_info_stmt_sql = SQL2;
      
                  PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
                  EXECUTE ds60_zc_train_info_stmt;
                  DEALLOCATE PREPARE ds60_zc_train_info_stmt;
      set @ds60_zc_train_info_stmt_sql=null;
      
      
      
      
      
      
    
                  UPDATE tmp_ds60_zc_tt_train_no SET tmp_ds60_zc_tt_train_no.flag =
      (CASE WHEN SUBSTRING(tmp_ds60_zc_tt_train_no.flag,1,6) = '000000' THEN INSERT(tmp_ds60_zc_tt_train_no.flag,1,6,'')
                  WHEN SUBSTRING(tmp_ds60_zc_tt_train_no.flag,1,5) = '00000'  THEN INSERT(tmp_ds60_zc_tt_train_no.flag,1,5,'')
                  WHEN SUBSTRING(tmp_ds60_zc_tt_train_no.flag,1,4) = '0000'  THEN INSERT(tmp_ds60_zc_tt_train_no.flag,1,4,'')
                  WHEN SUBSTRING(tmp_ds60_zc_tt_train_no.flag,1,3) = '000'  THEN INSERT(tmp_ds60_zc_tt_train_no.flag,1,3,'')
                  WHEN SUBSTRING(tmp_ds60_zc_tt_train_no.flag,1,2) = '00'   THEN INSERT(tmp_ds60_zc_tt_train_no.flag,1,2,'')
                  WHEN SUBSTRING(tmp_ds60_zc_tt_train_no.flag,1,1) = '0'   THEN INSERT(tmp_ds60_zc_tt_train_no.flag,1,1,'')
                  ELSE tmp_ds60_zc_tt_train_no.flag
                  END);
    
                  select   count(distinct SUBSTRING(train_no,1,10)) 
      INTO total 
      FROM tmp_ds60_zc_tt_train_no a 
      WHERE EXISTS(SELECT 1 FROM basic.train_dir 
      where train_dir.subbureau_code = SUBSTRING(a.train_no,1,2) 
     AND train_dir.train_code = a.flag
                        AND train_dir.double_id = SUBSTRING(a.train_no,11,1) 
     AND train_dir.schema_id = SUBSTRING(a.train_no,12,1)
                        AND train_dir.running_rule &(power(2,TIMESTAMPDIFF(DAY,train_dir.start_date,board_train_date_in)%train_dir.running_style)) > 0);
                  select   count(distinct ds60_zc_train_info_tt_stop_time.train_no) 
     INTO rowcount FROM ds60_zc_train_info_tt_stop_time;
                  IF rowcount != total then  
                     
      
      DELETE FROM center.DS60_stop_time_cache   
      WHERE DS60_stop_time_cache.train_date = board_train_date_in 
      AND DS60_stop_time_cache.start_tele_list = old_start_telecode 
      AND DS60_stop_time_cache.end_tele_list   = old_end_telecode;
                     IF ROW_COUNT() > 0 then 
                        SET cache_flag = 0;
                     end if;       
 
     
         truncate table ds60_zc_train_info_tt_stop_time;
                     SET SQL2 = CONCAT('INSERT INTO ds60_zc_train_info_tt_stop_time  SELECT DISTINCT a.station_name,b.station_name,"0" train_class_code,0 seat_types,a.start_time,
                     b.arrive_time,a.train_no,a.station_no,b.station_no,a.station_train_code ,
                     a.station_telecode,a.bureau_code,a.subbureau_code,b.station_telecode,
                     b.bureau_code,b.subbureau_code ,CONCAT(a.bureau_code,"1",a.subbureau_code,a.station_telecode) ticket_office,"" location_code,cast(b.day_difference as signed) -cast(a.day_difference as signed) day_difference,
                     "" arrive_date ,"" info_list,
                     0 default_flag,"" start_tele_list,"" end_tele_list,"" start_pycode,"" end_pycode,
                     SUBSTRING(a.train_no,3,8) train_code,"" train_type,"3" seat_feature ,
                     "',board_train_date_in,'",CURRENT_TIMESTAMP,"" start_code,"" end_code,
                     DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
                     ''%Y%m%d'') start_date,"",b.station_no,"0","","","",
                     0,"0000","',DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d'),'",'''' FROM basic.stop_time a,basic.stop_time b   WHERE a.train_no   = b.train_no  AND a.station_telecode IN( ',start_tele_list1,' ) AND b.station_telecode IN( ',end_tele_list1,' ) AND a.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
                     ''%Y%m%d'') AND a.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
                     ''%Y%m%d'')  AND a.station_no < b.station_no  AND a.station_name NOT LIKE "%*%" AND b.station_name NOT LIKE "%*%"  AND a.station_train_code REGEXP "',network_train_brand,'"');
                     SET @ds60_zc_train_info_stmt_sql = SQL2;
       
                     PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
                     EXECUTE ds60_zc_train_info_stmt;
      SET rowcount = ROW_COUNT();
                     DEALLOCATE PREPARE ds60_zc_train_info_stmt;
      set @ds60_zc_train_info_stmt_sql=null;
      
      
      
                     
                     
      IF rowcount = 0 then 
      
                        LEAVE null_return;
                     end if;  
     
                     UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.train_code =
      (CASE WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,6) = '000000' THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,6,'')
                     WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,5) = '00000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,5,'')
                     WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,4) = '0000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,4,'')
                     WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,3) = '000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,3,'')
                     WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,2) = '00'   THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,2,'')
                     WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,1) = '0'   THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,1,'')
                     ELSE ds60_zc_train_info_tt_stop_time.train_code
                     END);
                  end if;
               end if;
            end if;
         end if;
      end if;
      IF cache_flag = 0 then 
         SET train_seat_cache = 0;
      end if;

   ELSE 
      IF train_seat_cache = 0 then  
         SET cache_flag = 0;
    
         SET SQL2 = CONCAT('INSERT INTO ds60_zc_train_info_tt_stop_time  SELECT DISTINCT a.station_name,b.station_name,"0" train_class_code,0 seat_types,a.start_time,
         b.arrive_time,a.train_no,a.station_no,b.station_no,a.station_train_code ,
         a.station_telecode,a.bureau_code,a.subbureau_code,b.station_telecode,
         b.bureau_code,b.subbureau_code ,CONCAT(a.bureau_code,"1",a.subbureau_code,a.station_telecode) ticket_office,CONCAT(a.bureau_code,"1") location_code,
         cast(b.day_difference as signed) -cast(a.day_difference as signed) day_difference,"" arrive_date ,
         "" info_list,0 default_flag,"" start_tele_list,"" end_tele_list,
         "" start_pycode,"" end_pycode,SUBSTRING(a.train_no,3,8) train_code,
         "" train_type,"3" seat_feature ,"',board_train_date_in,'",CURRENT_TIMESTAMP,
         "" start_code,"" end_code,DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
         ''%Y%m%d'') start_date,"",b.station_no,
         "0","","","",0,"0000","',DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d'),'",
         '''' FROM basic.stop_time a,basic.stop_time b   WHERE a.train_no   = b.train_no  AND a.station_telecode IN( ',start_tele_list1,' ) AND b.station_telecode IN( ',end_tele_list1,' ) AND a.start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
         ''%Y%m%d'') AND a.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(a.day_difference as signed),"',board_train_date_in,'"),
         ''%Y%m%d'')  AND a.station_no < b.station_no  AND a.station_name NOT LIKE "%*%" AND b.station_name NOT LIKE "%*%"  AND a.station_train_code REGEXP "',network_train_brand,'"');
         SET @ds60_zc_train_info_stmt_sql = SQL2;
    
         PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
         EXECUTE ds60_zc_train_info_stmt;
   SET rowcount = ROW_COUNT();
   SET @ds60_zc_train_info_stmt_sql=NULL;
         DEALLOCATE PREPARE ds60_zc_train_info_stmt;
   if debug_in=9 then 
   select '200===',start_tele_list1,end_tele_list1,board_train_date_in,network_train_brand;
   
  
  end if;
   
  
   
   if debug_in=9 then 
   select '201====select * from ds60_zc_train_info_tt_stop_time;';
   
  end if;
   
         
        
  IF rowcount = 0  then   
    
            LEAVE null_return;
         end if; 

         UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.train_code =
   (CASE WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,6) = '000000' THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,6,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,5) = '00000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,5,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,4) = '0000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,4,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,3) = '000'  THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,3,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,2) = '00'   THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,2,'')
         WHEN SUBSTRING(ds60_zc_train_info_tt_stop_time.train_code,1,1) = '0'   THEN INSERT(ds60_zc_train_info_tt_stop_time.train_code,1,1,'')
         ELSE ds60_zc_train_info_tt_stop_time.train_code
         END);
      end if;
   end if;

   SET d3 = CURRENT_TIMESTAMP;
   SET t2 = TIMESTAMPDIFF(MICROSECOND,d2,d3); 

   delete FROM ds60_zc_train_info_tt_stop_time                                       
   where ds60_zc_train_info_tt_stop_time.train_no in(SELECT DG50_train_lock.train_no
   FROM basic.DG50_train_lock
   where DG50_train_lock.lock_status = '1');


   SET input_purposes = purposes_in; 
   
   IF train_seat_cache != 2 then 
      BEGIN 
 
          DROP TEMPORARY TABLE IF EXISTS ds60_zc_train_info_tt_stop_time_train;
         CREATE TEMPORARY TABLE  ds60_zc_train_info_tt_stop_time_train
         (
            start_date CHAR(8) NOT NULL,
            stop_date CHAR(8) NOT NULL,
            train_no CHAR(12) NOT NULL,
            station_no CHAR(2) NOT NULL,
            station_name CHAR(10) NOT NULL,
            station_shortcode CHAR(3) NOT NULL,
            station_telecode CHAR(3) NOT NULL,
            station_train_code CHAR(8) NOT NULL,
            route_tele_code CHAR(3) NOT NULL,
            segment_code CHAR(4) NOT NULL,
            bureau_code CHAR(1) NOT NULL,
            subbureau_code CHAR(2) NOT NULL,
            day_difference TINYINT UNSIGNED NOT NULL,
            arrive_time CHAR(4) NOT NULL,
            start_time CHAR(4) NOT NULL,
            distance SMALLINT NOT NULL,
            distance1 SMALLINT NOT NULL,
            distance2 SMALLINT NOT NULL,
            distance3 SMALLINT NOT NULL,
            distance4 SMALLINT NOT NULL,
            distance5 SMALLINT NOT NULL,
            line_alter1 CHAR(7) NOT NULL,
            line_alter2 CHAR(7) NOT NULL,
            line_alter3 CHAR(7) NOT NULL,
            line_alter4 CHAR(7) NOT NULL,
            origin CHAR(2) NOT NULL
   
         );
  
  

 
         
         create TEMPORARY table if not exists ds60_zc_train_info_tt_share
         ( 
            station_telecode CHAR(8) NOT NULL, 
            transform_date CHAR(8) NOT NULL, 
            transform_no CHAR(2) NOT NULL, 
            fetch_w_seat TINYINT UNSIGNED NOT NULL, 
            `range` TINYINT UNSIGNED NOT NULL, 
            start_coach_no CHAR(2) NOT NULL, 
            end_coach_no CHAR(2) NOT NULL, 
            schedule_coach CHAR(2) NOT NULL, 
            purpose_code VARCHAR(60) NOT NULL, 
            seat_type_code CHAR(30) NOT NULL, 
            train_no CHAR(12) NOT NULL, 
            to_station_limit CHAR(2) NOT NULL, 
            old_purposes VARCHAR(60) NOT NULL, 
            wseat_type_code CHAR(1) NOT NULL 
 , 
            cancel_seat_type VARCHAR(255) NOT NULL  
 , 
            cancel_purpose_code VARCHAR(255) NOT NULL, 
            from_range TINYINT UNSIGNED NOT NULL
         );
   truncate table ds60_zc_train_info_tt_share;
         IF purpose_mode_in = 2 then 
  
            
            CREATE TEMPORARY TABLE if not exists ds60_zc_tt_train_para_define
            (
               inner_code CHAR(3) NOT NULL,
               start_date CHAR(8) NOT NULL,
               stop_date CHAR(8) NOT NULL,
               train_code CHAR(8) NOT NULL,
               start_station_name CHAR(10) NOT NULL,
               end_station_name CHAR(10) NOT NULL,
               station_telecode CHAR(3) NOT NULL,
               train_type CHAR(1) NOT NULL,
               seat_type_code CHAR(1) NOT NULL,
               ticket_type TINYINT UNSIGNED NOT NULL,
               purpose_code CHAR(2) NOT NULL,
               `range` TINYINT UNSIGNED NOT NULL,
               control_day TINYINT UNSIGNED NOT NULL,
               control_train_day CHAR(8) NOT NULL,
               ahead_time INT NOT NULL,
               location_code CHAR(2) NOT NULL,
               office_no CHAR(7) NOT NULL,
               window_no TINYINT UNSIGNED NOT NULL,
               operater_no CHAR(4) NOT NULL,
               operater_time DATETIME NOT NULL,
               flag1 CHAR(10) NOT NULL,
               flag2 CHAR(10) NOT NULL,
               group_code CHAR(20) NOT NULL,
               level_flag CHAR(1) NOT NULL,
               from_period TINYINT UNSIGNED NOT NULL,
               control_min_date CHAR(8) NOT NULL,
               train_class CHAR(1) NOT NULL,
               demand_id CHAR(18) NOT NULL,
               flag3 CHAR(30) NOT NULL,
               flag4 CHAR(30) NOT NULL,
               flag5 CHAR(30) NOT NULL,
               flag6 CHAR(30) NOT NULL,
               flag7 CHAR(30) NOT NULL,
               flag8 CHAR(30) NOT NULL 
            );
   truncate table ds60_zc_tt_train_para_define;
         end if;
         
         create TEMPORARY table if not exists ds60_zc_tt_seat_info
         ( 
            train_date CHAR(8) NOT NULL,
            train_no CHAR(12) NOT NULL,
            seat_type_code CHAR(1) NOT NULL,
            purpose_code VARCHAR(60) NOT NULL,
            `range` TINYINT UNSIGNED NOT NULL,
            period_flag TINYINT UNSIGNED NOT NULL, 
            ticket_num INT NOT NULL, 
            to_limit_no CHAR(2) NOT NULL, 
            wseat_type_code CHAR(1) NOT NULL,
            flag TINYINT UNSIGNED NOT NULL  
         );
   truncate table ds60_zc_tt_seat_info;
         
         create TEMPORARY table if not exists ds60_zc_tt_seat_type_info
         ( 
            train_date CHAR(8) NOT NULL,
            train_no CHAR(12) NOT NULL,
            seat_type_code CHAR(1) NOT NULL,
            wseat_type_code CHAR(1) NOT NULL,
            ticket_num INT NOT NULL, 
            flag TINYINT UNSIGNED NOT NULL  
         );
   truncate table ds60_zc_tt_seat_type_info;
          DROP TEMPORARY TABLE IF EXISTS ds60_zc_tt_cancel_limit_define;
         CREATE TEMPORARY TABLE ds60_zc_tt_cancel_limit_define
         (
            inner_code CHAR(3) NOT NULL,
            start_date CHAR(8) NOT NULL,
            stop_date CHAR(8) NOT NULL,
            train_code CHAR(8) NOT NULL,
            start_station_name CHAR(10) NOT NULL,
            end_station_name CHAR(10) NOT NULL,
            station_telecode CHAR(3) NOT NULL,
            cancel_office_no CHAR(7) NOT NULL,
            cancel_window_no TINYINT UNSIGNED NOT NULL,
            ahead_time INT NOT NULL,     
            location_code CHAR(2) NOT NULL,
            office_no CHAR(7) NOT NULL,
            window_no TINYINT UNSIGNED NOT NULL,
            operater_no CHAR(4) NOT NULL,
            operater_time DATETIME NOT NULL,
            flag1 CHAR(10) NOT NULL,
            flag2 CHAR(10) NOT NULL,
            running_style TINYINT UNSIGNED NOT NULL,    
            running_rule INT NOT NULL,
            seat_type_code CHAR(1) NOT NULL,
            purpose_code CHAR(2) NOT NULL,
            train_type CHAR(1) NOT NULL,
            sale_mode CHAR(1) NOT NULL,
            far_from_station CHAR(3) NOT NULL,
            level_flag INT NOT NULL
         );
   
   
         DROP TEMPORARY TABLE IF EXISTS ds60_zc_tt_center_notice;
         CREATE TEMPORARY TABLE  ds60_zc_tt_center_notice
         (
            inner_code CHAR(3) NOT NULL,
            start_date CHAR(8) NOT NULL,
            stop_date CHAR(8) NOT NULL,
            train_no CHAR(12) NOT NULL,
            running_style TINYINT UNSIGNED NOT NULL,
            running_rule INT NOT NULL,
            station_no CHAR(2) NOT NULL,
            station_telecode CHAR(3) NOT NULL,
            station_name CHAR(10) NOT NULL,
            board_train_code CHAR(8) NOT NULL,
            command_no CHAR(7) NOT NULL,
            command_code CHAR(1) NOT NULL,
            inform_type CHAR(1) NOT NULL,
            day_difference TINYINT UNSIGNED NOT NULL,
            arrive_time CHAR(4) NOT NULL,
            start_time CHAR(4) NOT NULL,
            time_interval TINYINT UNSIGNED NOT NULL,
            command_id CHAR(16) NOT NULL,
            operate_time DATETIME NOT NULL,
            operater_no CHAR(4) NOT NULL,
            operater_name CHAR(8) NOT NULL,
            command_enable TINYINT UNSIGNED NOT NULL
         );
   
   

 
         
         CREATE TEMPORARY TABLE if not exists ds60_zc_tt_ticket_left
         (
            assign_station CHAR(3) NOT NULL,
            train_no CHAR(12) NOT NULL,
            train_date CHAR(8) NOT NULL,
            station_no CHAR(2) NOT NULL,
            far_from_station_no CHAR(2) NOT NULL,
            limit_station CHAR(2) NOT NULL,
            coach_no CHAR(2) NOT NULL,
            seat_type_code CHAR(1) NOT NULL,
            purpose_code CHAR(2) NOT NULL,
            `range` TINYINT UNSIGNED not null,
            ticket_quantity INT NOT NULL,
            up_quantity INT NOT NULL,
            mid_quantity INT NOT NULL,
            down_quantity INT NOT NULL,
            wseat_type_code CHAR(1) NOT NULL,
            seat_feature CHAR(1) NOT NULL,
            inner_code CHAR(7) NOT NULL
         );
   truncate table ds60_zc_tt_ticket_left;
        
         create TEMPORARY table if not exists ds60_zc_tt_train_cache 
         (
            train_no CHAR(12),
            train_code CHAR(8),
            flag TINYINT UNSIGNED
         );
   truncate table ds60_zc_tt_train_cache;
         
   create TEMPORARY table if not exists ds60_zc_tt_train_cache2
         (
            train_no CHAR(12),
            train_code CHAR(8),
            flag TINYINT UNSIGNED
         );
   
         CREATE TEMPORARY TABLE if not exists ds60_zc_tt_train_group 
         (
            group_code CHAR(20) 
         );
   truncate table ds60_zc_tt_train_group;


 
   
  if debug_in=9 then
   select 'ds60_zc_train_info:209====';
   select count(*) FROM basic.stop_time a,ds60_zc_train_info_tt_stop_time b                
    WHERE a.train_no = b.train_no;
   end if;
         INSERT INTO ds60_zc_train_info_tt_stop_time_train
         SELECT a.start_date, a.stop_date, a.train_no, a.station_no, a.station_name, a.station_shortcode, a.station_telecode, a.station_train_code, a.route_tele_code, a.segment_code, a.bureau_code, a.subbureau_code, a.day_difference, a.arrive_time, a.start_time, a.distance, a.distance1, a.distance2, a.distance3, a.distance4, a.distance5, a.line_alter1, a.line_alter2, a.line_alter3, a.line_alter4, a.origin 
   FROM basic.stop_time a,ds60_zc_train_info_tt_stop_time b                
         WHERE a.train_no = b.train_no;
         CREATE INDEX train_query_idx ON ds60_zc_train_info_tt_stop_time_train 
         (train_no,
         station_telecode);

  

   
 
         IF train_seat_cache = 1 then  
            UPDATE ds60_zc_train_info_tt_stop_time a,ds60_zc_train_info_tt_stop_time_train b SET a.start_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(b.day_difference as signed),board_train_date_in),
            '%Y%m%d')
            WHERE a.train_no = b.train_no
            AND  a.start_telecode = b.station_telecode;
            SET rowcount = ROW_COUNT();
           
         end if;
 
       
   if debug_in=9 then
   select 'ds60_zc_train_info:210===',tno_in;
   
    SELECT DISTINCT a.train_no,a.train_code,0 
   FROM ds60_zc_train_info_tt_stop_time a
    WHERE EXISTS(SELECT 1 FROM basic.train_dir 
    where train_dir.train_code = a.train_code 
     AND train_dir.subbureau_code = SUBSTRING(a.train_no,1,2)
              AND train_dir.double_id = SUBSTRING(a.train_no,11,1) 
     AND train_dir.schema_id = SUBSTRING(a.train_no,12,1)
              AND train_dir.running_rule &(power(2,TIMESTAMPDIFF(DAY,train_dir.start_date,a.start_date)%train_dir.running_style)) > 0
              AND train_dir.start_date <= a.start_date AND train_dir.stop_date >= a.start_date   
   )
   AND a.train_no LIKE tno_in;
   end if;
         INSERT INTO ds60_zc_tt_train_cache
         SELECT DISTINCT a.train_no,a.train_code,0 
  FROM ds60_zc_train_info_tt_stop_time a
         WHERE EXISTS(SELECT 1 FROM basic.train_dir 
    where train_dir.train_code = a.train_code 
     AND train_dir.subbureau_code = SUBSTRING(a.train_no,1,2)
              AND train_dir.double_id = SUBSTRING(a.train_no,11,1) 
     AND train_dir.schema_id = SUBSTRING(a.train_no,12,1)
              AND train_dir.running_rule &(power(2,TIMESTAMPDIFF(DAY,train_dir.start_date,a.start_date)%train_dir.running_style)) > 0
              AND train_dir.start_date <= a.start_date AND train_dir.stop_date >= a.start_date   
   )
         AND a.train_no LIKE tno_in;    
         SET rowcount = ROW_COUNT();
        
         IF rowcount > 0 then   
            select    count(*) INTO total FROM ds60_zc_train_info_tt_stop_time;
            IF rowcount != total then 
               DELETE FROM ds60_zc_train_info_tt_stop_time WHERE ds60_zc_train_info_tt_stop_time.train_no NOT IN(SELECT ds60_zc_tt_train_cache.train_no FROM ds60_zc_tt_train_cache);
            end if;
         end if;

 
         IF train_seat_cache = 0 then 
            TRUNCATE table tmp_ds60_zc_tt_train_no;
            
            INSERT INTO tmp_ds60_zc_tt_train_no(train_no,num,flag)
            SELECT ds60_zc_train_info_tt_stop_time.train_no,count(*),'0' 
   FROM ds60_zc_train_info_tt_stop_time
            GROUP BY ds60_zc_train_info_tt_stop_time.train_no
            HAVING count(*) > 1;
            SET rowcount = ROW_COUNT();
            
   IF rowcount > 0  then    
               WHILE EXISTS(SELECT 1 FROM tmp_ds60_zc_tt_train_no) DO
                  select tmp_ds60_zc_tt_train_no.train_no INTO train_no FROM tmp_ds60_zc_tt_train_no    LIMIT 1;
                  DELETE FROM tmp_ds60_zc_tt_train_no WHERE tmp_ds60_zc_tt_train_no.train_no = train_no;

  
                  IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time 
     WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
     AND ds60_zc_train_info_tt_stop_time.start_telecode = old_start_telecode 
     AND ds60_zc_train_info_tt_stop_time.end_telecode = old_end_telecode) 
    then 
                     DELETE FROM ds60_zc_train_info_tt_stop_time WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
      AND NOT (ds60_zc_train_info_tt_stop_time.start_telecode = old_start_telecode AND ds60_zc_train_info_tt_stop_time.end_telecode = old_end_telecode);
     
                  ELSE 
                     IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time 
      WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
      AND ds60_zc_train_info_tt_stop_time.start_telecode = old_start_telecode) 
     then 
      if debug_in=9 then
       select 'ds60_zc_train_info:211===';
      end if;
                        select  ds60_zc_train_info_tt_stop_time.end_telecode 
      INTO end_telecode 
      FROM ds60_zc_train_info_tt_stop_time 
      WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
      AND ds60_zc_train_info_tt_stop_time.start_telecode = old_start_telecode   
      ORDER BY ds60_zc_train_info_tt_stop_time.end_station_no LIMIT 1;  
                        
      DELETE FROM ds60_zc_train_info_tt_stop_time 
      WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
      AND NOT (ds60_zc_train_info_tt_stop_time.start_telecode = old_start_telecode AND ds60_zc_train_info_tt_stop_time.end_telecode = end_telecode);
    
                     ELSE 
                        IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time 
      WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
      AND ds60_zc_train_info_tt_stop_time.end_telecode = old_end_telecode) 
   then 
      if debug_in=9 then
       select 'ds60_zc_train_info:212===';
      end if;
                           select   ds60_zc_train_info_tt_stop_time.start_telecode 
         INTO start_telecode 
         FROM ds60_zc_train_info_tt_stop_time 
         WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
       AND ds60_zc_train_info_tt_stop_time.end_telecode = old_end_telecode   
         ORDER BY ds60_zc_train_info_tt_stop_time.start_station_no LIMIT 1; 
                           
         DELETE FROM ds60_zc_train_info_tt_stop_time WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
       AND NOT (ds60_zc_train_info_tt_stop_time.start_telecode = start_telecode AND ds60_zc_train_info_tt_stop_time.end_telecode = old_end_telecode);
    
                        ELSE
       if debug_in=9 then
       select 'ds60_zc_train_info:213===';
      end if;
                           select ds60_zc_train_info_tt_stop_time.start_telecode, ds60_zc_train_info_tt_stop_time.end_telecode 
         INTO start_telecode,end_telecode 
         FROM ds60_zc_train_info_tt_stop_time WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no   
         ORDER BY ds60_zc_train_info_tt_stop_time.start_station_no,ds60_zc_train_info_tt_stop_time.end_station_no LIMIT 1;
      
                           DELETE FROM ds60_zc_train_info_tt_stop_time 
         WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no 
       AND NOT (ds60_zc_train_info_tt_stop_time.start_telecode = start_telecode AND ds60_zc_train_info_tt_stop_time.end_telecode = end_telecode);
                        end if;
                     end if;
                  end if;
               END WHILE;
            end if;
         end if;

 
         UPDATE ds60_zc_train_info_tt_stop_time a,basic.train_dir b SET a.seat_feature =(CASE WHEN b.service_type = '0' THEN '0' ELSE '3' END),a.start_code = b.start_station_name,a.end_code = b.end_station_name, 
         a.seat_types = b.seat_types,a.train_class_code = b.train_class_code
         WHERE a.train_code = b.train_code AND b.subbureau_code = SUBSTRING(a.train_no,1,2)
         AND b.double_id = SUBSTRING(a.train_no,11,1) AND b.schema_id = SUBSTRING(a.train_no,12,1);
         SET rowcount = ROW_COUNT();
         

 
         UPDATE ds60_zc_train_info_tt_stop_time a,basic.station_dictionary b SET a.start_code = b.station_telecode,a.start_name = b.station_name  
   ,a.management_bureau = b.bureau_code                
         WHERE a.start_code = b.station_name;
         SET rowcount = ROW_COUNT();
         

 
         UPDATE ds60_zc_train_info_tt_stop_time a,basic.station_dictionary b SET a.end_code = b.station_telecode,a.end_name = b.station_name  
         WHERE a.end_code = b.station_name;
         SET rowcount = ROW_COUNT();
         

 
         UPDATE ds60_zc_train_info_tt_stop_time a,basic.CG52_train_dir_appendix b SET a.train_type = b.special_flag
         WHERE a.train_no = b.train_no;
         SET rowcount = ROW_COUNT();
         
         IF train_seat_cache = 0 then 
  
            UPDATE ds60_zc_train_info_tt_stop_time a,basic.station_dictionary b SET a.start_pycode = b.station_pycode
            WHERE a.start_telecode = b.station_telecode;
            SET rowcount = ROW_COUNT();
            
            UPDATE ds60_zc_train_info_tt_stop_time a,basic.station_dictionary b SET a.end_pycode = b.station_pycode
            WHERE a.end_telecode = b.station_telecode;
            SET rowcount = ROW_COUNT();
            
   
  
            UPDATE ds60_zc_train_info_tt_stop_time a,ds60_zc_train_info_tt_stop_time_train b SET a.day_difference =(CASE WHEN a.day_difference < 0 THEN 0
            WHEN b.arrive_time > b.start_time AND a.day_difference >= 1 THEN a.day_difference -1 
            ELSE a.day_difference END)
            WHERE a.train_no = b.train_no
            AND a.end_telecode = b.station_telecode;  
            SET rowcount = ROW_COUNT();
            
 
  
            UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.arrive_date = DATE_FORMAT(TIMESTAMPADD(DAY,ds60_zc_train_info_tt_stop_time.day_difference,board_train_date_in),'%Y%m%d');
            SET rowcount = ROW_COUNT();
            
  
  
            UPDATE ds60_zc_train_info_tt_stop_time a,basic.DG50_train_location_auth b SET a.location_code = b.location_code
            WHERE a.train_code = b.train_code
            AND a.start_code = b.start_station_telecode
            AND a.end_code  = b.end_station_telecode
            AND b.start_date  <= board_train_date_in
            AND  b.stop_date   >= board_train_date_in;
            SET rowcount = ROW_COUNT();
           
         end if;
   

 
              
         SET SQL2 = CONCAT('INSERT INTO ds60_zc_tt_center_notice SELECT a.* FROM basic.CJ30_center_notice a,ds60_zc_tt_train_cache b WHERE a.train_no = b.train_no AND a.station_telecode IN( ',
  start_tele_list1,' , ',end_tele_list1,
  ' ) AND a.command_code IN("O","P","Q","R","V","W","S","U","M")  AND a.command_enable = 0  AND a.stop_date >= "',
  board_train_date_in,'"');
         SET @ds60_zc_train_info_stmt_sql = SQL2;
         PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
         EXECUTE ds60_zc_train_info_stmt;
         DEALLOCATE PREPARE ds60_zc_train_info_stmt;
   SET @ds60_zc_train_info_stmt_sql=NULL;
   
   
   
         IF flag_in != 1 then 
            IF sale_mode IN('E','9') then 
               SET station_telecode = start_telecode;
            ELSE 
               SET station_telecode = inner_code_in;
            end if;

   
  
  truncate table ds60_zc_tt_train_cache2;
  insert into ds60_zc_tt_train_cache2 select * from ds60_zc_tt_train_cache;
  
  
            INSERT INTO ds60_zc_tt_cancel_limit_define
            SELECT distinct a.inner_code, a.start_date, a.stop_date, a.train_code, a.start_station_name, 
      a.end_station_name, a.station_telecode, a.cancel_office_no, a.cancel_window_no, 
   a.ahead_time, a.location_code, a.office_no, a.window_no, a.operater_no, a.operater_time, 
   a.flag1, a.flag2, a.running_style, a.running_rule, a.seat_type_code, a.purpose_code, a.train_type, 
   a.sale_mode, a.far_from_station, a.level_flag                                              
   FROM basic.DJ50_cancel_limit_define a
            WHERE (a.inner_code IN(bureau_code,station_telecode) or a.inner_code IN(SELECT tt.start_telecode FROM ds60_zc_train_info_tt_stop_time tt) )
            AND a.start_date <= board_train_date_in      
            AND a.stop_date  >= board_train_date_in
            AND (a.train_code IN(SELECT ds60_zc_tt_train_cache.train_code FROM ds60_zc_tt_train_cache) 
      OR a.train_code = '*' OR EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache2 tt WHERE tt.train_code LIKE a.train_code)) 
            AND a.running_rule &(power(2,TIMESTAMPDIFF(DAY,a.start_date,board_train_date_in)%a.running_style)) > 0                
            AND a.sale_mode IN(sale_mode,'*')                                  
            AND (a.seat_type_code = '*' OR LOCATE(a.seat_type_code,seat_type_list_in) > 0)                    
            AND (a.purpose_code   = '*' OR LOCATE(a.purpose_code,purposes_in)%2  = 1)                     
            AND a.cancel_office_no   = '%'
            AND a.cancel_window_no   = 0;
           
            IF purpose_mode_in = 2 then 
   
   if debug_in=9 then
    select '214_02====',start_bureau_code,today,purposes_in,seat_type_list_in,sale_mode;
    
     SELECT a.inner_code, a.start_date, a.stop_date, a.train_code, a.start_station_name, 
     a.end_station_name, a.station_telecode, a.train_type, a.seat_type_code, 
    a.ticket_type, a.purpose_code, a.`range`, a.control_day, a.control_train_day, 
    a.ahead_time, a.location_code, a.office_no, a.window_no, a.operater_no, a.operater_time, 
    a.flag1, a.flag2, a.group_code, a.level_flag, a.from_period, a.control_min_date, a.train_class, 
    a.demand_id, a.flag3, a.flag4, a.flag5, a.flag6, a.flag7, a.flag8 
      FROM basic.DJ50_train_sale_define a
       WHERE a.inner_code  = start_bureau_code
       AND a.start_date   <= today
       AND a.stop_date    >= today
       AND (a.purpose_code = '*' OR LOCATE(a.purpose_code,purposes_in)%2 = 1)  
       AND (a.seat_type_code = '*' OR LOCATE(a.seat_type_code,seat_type_list_in) > 0) 
       AND (a.train_code IN(SELECT tt.train_code FROM ds60_zc_tt_train_cache tt) 
     OR a.train_code = '*' OR EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache2 tt1 WHERE tt1.train_code LIKE a.train_code))
       AND (is_student = 1 OR (is_student = 0 AND a.ticket_type  NOT IN(3,12)))  
       AND a.flag1    IN(sale_mode,'*')               
       AND a.flag2    IN('*','');
       SELECT a.inner_code, a.start_date, a.stop_date, a.train_code, a.start_station_name, 
      a.end_station_name, a.station_telecode, a.train_type, a.seat_type_code, 
     a.ticket_type, a.purpose_code, a.`range`, a.control_day, a.control_train_day, 
     a.ahead_time, a.location_code, a.office_no, a.window_no, a.operater_no, a.operater_time, 
     a.flag1, a.flag2, a.group_code, a.level_flag, a.from_period, a.control_min_date, a.train_class, 
     a.demand_id, a.flag3, a.flag4, a.flag5, a.flag6, a.flag7, a.flag8 
    FROM basic.DJ50_train_sale_define a
        WHERE a.start_date   <= today
        AND a.stop_date    >= today
        AND a.train_code IN(SELECT tt.train_code FROM ds60_zc_tt_train_cache tt)
        AND a.station_telecode = '*'                   
        AND (a.purpose_code   = '*' OR LOCATE(a.purpose_code,purposes_in)%2 = 1)  
        AND (a.seat_type_code  = '*' OR LOCATE(a.seat_type_code,seat_type_list_in) > 0)  
        AND (is_student = 1 OR (is_student = 0 AND a.ticket_type  NOT IN(3,12)))   
        AND a.flag1    IN(sale_mode,'*')                
        AND a.flag2     = '1';
   end if;
    
               INSERT INTO ds60_zc_tt_train_para_define
               SELECT a.inner_code, a.start_date, a.stop_date, a.train_code, a.start_station_name, 
          a.end_station_name, a.station_telecode, a.train_type, a.seat_type_code, 
   a.ticket_type, a.purpose_code, a.`range`, a.control_day, a.control_train_day, 
   a.ahead_time, a.location_code, a.office_no, a.window_no, a.operater_no, a.operater_time, 
   a.flag1, a.flag2, a.group_code, a.level_flag, a.from_period, a.control_min_date, a.train_class, 
   a.demand_id, a.flag3, a.flag4, a.flag5, a.flag6, a.flag7, a.flag8 
        FROM basic.DJ50_train_sale_define a
               WHERE a.inner_code  = start_bureau_code
               AND a.start_date   <= today
               AND a.stop_date    >= today
               AND (a.purpose_code = '*' OR LOCATE(a.purpose_code,purposes_in)%2 = 1)  
               AND (a.seat_type_code = '*' OR LOCATE(a.seat_type_code,seat_type_list_in) > 0) 
               AND (a.train_code IN(SELECT tt.train_code FROM ds60_zc_tt_train_cache tt) 
          OR a.train_code = '*' OR EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache2 tt1 WHERE tt1.train_code LIKE a.train_code))
               AND (is_student = 1 OR (is_student = 0 AND a.ticket_type  NOT IN(3,12)))  
               AND a.flag1    IN(sale_mode,'*')               
               AND a.flag2    IN('*','');                 
   
    
               INSERT INTO ds60_zc_tt_train_para_define
               SELECT a.inner_code, a.start_date, a.stop_date, a.train_code, a.start_station_name, 
          a.end_station_name, a.station_telecode, a.train_type, a.seat_type_code, 
   a.ticket_type, a.purpose_code, a.`range`, a.control_day, a.control_train_day, 
   a.ahead_time, a.location_code, a.office_no, a.window_no, a.operater_no, a.operater_time, 
   a.flag1, a.flag2, a.group_code, a.level_flag, a.from_period, a.control_min_date, a.train_class, 
   a.demand_id, a.flag3, a.flag4, a.flag5, a.flag6, a.flag7, a.flag8 
  FROM basic.DJ50_train_sale_define a
               WHERE a.start_date   <= today
               AND a.stop_date    >= today
               AND a.train_code IN(SELECT tt.train_code FROM ds60_zc_tt_train_cache tt)
               AND a.station_telecode = '*'                   
               AND (a.purpose_code   = '*' OR LOCATE(a.purpose_code,purposes_in)%2 = 1)  
               AND (a.seat_type_code  = '*' OR LOCATE(a.seat_type_code,seat_type_list_in) > 0)  
               AND (is_student = 1 OR (is_student = 0 AND a.ticket_type  NOT IN(3,12)))   
               AND a.flag1    IN(sale_mode,'*')                
               AND a.flag2     = '1';
            end if;
            CREATE INDEX idx_limit ON ds60_zc_tt_cancel_limit_define
            (start_date,
            stop_date,
            train_code,
            station_telecode);
            CREATE INDEX idx_notice ON ds60_zc_tt_center_notice
            (train_no,
            station_telecode,
            command_code,
            start_date,
            stop_date);
         end if;
         SET d4 = CURRENT_TIMESTAMP;
         SET t3 = TIMESTAMPDIFF(MICROSECOND,d3,d4); 
 
   if debug_in=9 then
   select '214_0===';
   select * from ds60_zc_tt_train_para_define;
   select count(*) from ds60_zc_tt_train_cache;
   end if;
         SWL_Label6:
         WHILE EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache tt WHERE tt.flag = 0) DO
            BEGIN
               
                  select   tt.train_no 
      INTO train_no 
      FROM ds60_zc_tt_train_cache tt
      WHERE tt.flag = 0   LIMIT 1;
    
                  UPDATE ds60_zc_tt_train_cache SET ds60_zc_tt_train_cache.flag = 1 WHERE ds60_zc_tt_train_cache.train_no = train_no AND ds60_zc_tt_train_cache.flag = 0;
                  SET cancel_purpose = '';
     if debug_in=9 then
        select 'ds60_zc_train_info:214===';
     end if;
                  select   tt.start_time, 
     tt.board_train_code, 
     tt.start_station_name, 
     tt.train_code, 
     tt.start_telecode, 
     tt.start_subbureau_code, 
     tt.start_bureau_code, 
     tt.start_station_no, 
     tt.arrive_time, 
     tt.end_telecode, 
     tt.end_subbureau_code, 
     tt.end_bureau_code, 
     tt.end_station_no, 
     tt.ticket_office, 
     tt.location_code, 
     tt.day_difference, 
     tt.arrive_date, 
     tt.train_class_code, 
     tt.seat_types, 
     tt.end_station_name, 
     tt.info_list, 
     tt.start_pycode, 
     tt.end_pycode, 
     tt.start_date, 
     tt.train_type, 
     tt.start_name, 
     tt.end_name, 
     tt.management_bureau 
      INTO start_time,board_train_code,board_station_in,train_code,start_telecode,
                  start_subbureau_code,start_bureau_code,start_station_no,arrive_time,end_telecode,
                  end_subbureau_code,end_bureau_code,end_station_in_no,ticket_office,
                  location_code,day_difference,arrive_train_date,train_class_code,
                  seat_types,end_station_in,cache_info_list,start_pycode,end_pycode,start_train_date,
                  train_type_code,start_name,end_name,management_bureau 
      FROM ds60_zc_train_info_tt_stop_time tt
      WHERE tt.board_train_date = board_train_date_in
                  AND tt.train_no = train_no;
                  SET train_stop_sale = 0;
                  SET purposes_in = input_purposes;
                  SET ls_purposes = input_purposes;
                  SET purpose_cache = '';
  
                  IF purpose_mode_in = 1 then 
   
                     WHILE NOT (ls_purposes IS NULL OR ls_purposes = '') DO
                        SET purpose_code = SUBSTRING(ls_purposes,1,2);
                        SET ls_purposes = INSERT(ls_purposes,1,2,'');
    
                        SET t_range = 0;
                        SET range_in1 = 0;
                        SET range_in2 = 1;
                        SET range_in3 = 2;
                        SET range_in4 = 3;
                        SET range_in5 = 4;
                        SET return_code = 0;
                        SET t_seat_type_code = 'z';
                        SET return_code = `@Train_Time_Proc`(board_train_date_in,train_no,train_code,t_seat_type_code,t_range,purpose_code,
                        '100000000000000000000000000000001000',range_in1,range_in2,range_in3,
                        range_in4,range_in5,1,start_telecode,1,sale_mode);
                        IF return_code = 0 then 
                           SET purpose_code = '';
                        end if;
                        SET purpose_cache = CONCAT(rtrim(purpose_cache),purpose_code);
                     END WHILE;
                     SET purposes_in = purpose_cache;
                     IF purposes_in = '' OR rtrim(purposes_in) IS NULL then 
                        SET train_period = 1;
                     end if;
  
                  ELSE 
                     IF purpose_mode_in = 2 then 
   
                        WHILE NOT (ls_purposes IS NULL OR ls_purposes = '') DO
                           SET purpose_code = SUBSTRING(ls_purposes,1,2);
                           SET ls_purposes = INSERT(ls_purposes,1,2,'');
    
    
                           SET train_period = 0;   
    

                           delete FROM ds60_zc_tt_train_group; 
    
                           insert into ds60_zc_tt_train_group 
                           select dj.group_code
                           from basic.DJ52_train_group_define dj
                           where dj.inner_code = bureau_code
                           and dj.module_code = 'J'
                           and dj.type_code = 'T'
                           and dj.start_station_telecode = start_telecode;
         
     
       if debug_in=9 then
        select 'ds60_zc_train_info:215===';
        select * from ds60_zc_tt_train_group;
        
         select  *
           FROM ds60_zc_tt_train_para_define tt
           WHERE tt.inner_code= management_bureau
           AND tt.train_code= train_code 
           AND tt.start_station_name = start_name 
           AND tt.end_station_name = end_name
           AND (tt.station_telecode  in(start_telecode,'*')  and  tt.group_code = '*'  
            or                                                                  
            tt.station_telecode = '*'  and tt.group_code in(select ds60_zc_tt_train_group.group_code from ds60_zc_tt_train_group)) 
           AND tt.train_type IN(train_type_code,'*')
           AND tt.purpose_code  IN(purpose_code,'*')
           AND tt.flag1 IN(sale_mode,'*')   
           AND tt.flag2 = '1'        
           and tt.train_class   IN(train_class_code,'*')   
         ORDER BY tt.level_flag,tt.train_code,tt.station_telecode,tt.group_code,tt.ticket_type,tt.purpose_code,
           tt.`range`,tt.seat_type_code,tt.train_type,tt.train_class,tt.flag1;
       end if;
                           select   tt.control_day, 
       lpad(tt.ahead_time ,4,'0'), 
       tt.control_train_day, 
       tt.from_period, 
       tt.control_min_date, 
       tt.start_date, 
       '1'   
         INTO max_day,tmp_start_time,stop_date,C_from_period,C_control_min_date,C_start_date, min_time_flag 
         FROM ds60_zc_tt_train_para_define tt
         WHERE tt.inner_code= management_bureau
                           AND tt.train_code= train_code 
         AND tt.start_station_name = start_name 
         AND tt.end_station_name = end_name
                           AND (tt.station_telecode  in(start_telecode,'*')  and  tt.group_code = '*'  
                            or                                                                  
                            tt.station_telecode = '*'  and tt.group_code in(select ds60_zc_tt_train_group.group_code from ds60_zc_tt_train_group)) 
                           AND tt.train_type IN(train_type_code,'*')
                           AND tt.purpose_code  IN(purpose_code,'*')
                           AND tt.flag1 IN(sale_mode,'*')   
                           AND tt.flag2 = '1'        
                           and tt.train_class   IN(train_class_code,'*')   
       ORDER BY tt.level_flag desc,tt.train_code desc,tt.station_telecode desc,tt.group_code desc,tt.ticket_type desc,tt.purpose_code desc,
                           tt.`range` desc,tt.seat_type_code desc,tt.train_type desc,tt.train_class desc,tt.flag1 desc limit 1;
                           SET rowcount = ROW_COUNT();
                           
                           IF debug_in = 9 then
    
                              select 11111,management_bureau,train_code,start_name,end_name,start_telecode,
           train_type_code,purpose_code,sale_mode,train_class_code;
                              
       end if;
                          
         IF rowcount = 0  then 
       
       
       select   tt.control_day, 
        lpad(tt.ahead_time ,4,'0'), 
        tt.control_train_day, 
        tt.from_period,  
        tt.control_min_date, 
        tt.start_date, 
        '2' 
       INTO max_day,tmp_start_time,stop_date,C_from_period,C_control_min_date,C_start_date, min_time_flag 
         FROM ds60_zc_tt_train_para_define tt
         WHERE tt.inner_code   =  start_bureau_code
                              AND (tt.station_telecode  in(start_telecode,'*')  and  tt.group_code = '*'  
                               or                                                                    
                               tt.station_telecode = '*'  and tt.group_code in(select ds60_zc_tt_train_group.group_code from ds60_zc_tt_train_group)) 
                              AND tt.train_type      IN(train_type_code,'*')
                              AND (tt.train_code = train_code OR tt.train_code = '*' 
        OR (tt.train_code != train_code AND train_code LIKE tt.train_code))
                              AND tt.purpose_code  IN(purpose_code,'*')
                              AND tt.flag1  IN(sale_mode,'*')   
                              AND tt.flag2 IN('*','')
                              and tt.train_class  IN(train_class_code,'*')  
        ORDER BY tt.level_flag desc,tt.train_code desc,tt.station_telecode desc,tt.group_code desc,tt.ticket_type desc,tt.purpose_code desc,
        tt.`range` desc,tt.seat_type_code desc,tt.train_type desc,tt.train_class desc,tt.flag1 desc limit 1; 
       
                              SET rowcount = ROW_COUNT();
                              
                           end if;
                           
       IF rowcount > 0  then         
                              BEGIN
                                 
         
                                    SET date_after = TIMESTAMPDIFF(DAY,CURRENT_TIMESTAMP,board_train_date_in);
                                    SET train_stop_sale = max_day;
                                    IF date_after = max_day then 
                                      
            SET tmp_start_datetime = str_to_date(CONCAT(CURRENT_date,tmp_start_time),'%Y-%m-%d%H%i');
                                       IF (TIMESTAMPDIFF(MINUTE,tmp_start_datetime,CURRENT_TIMESTAMP) < 0) then   
                                          SET max_day = max_day -1;
                                       end if;
                                    end if;


                                    if min_time_flag = '1' then
                                       select   lpad(min(tt.ahead_time) ,4,'0')
            INTO min_time 
            FROM ds60_zc_tt_train_para_define tt
            WHERE tt.inner_code   = management_bureau
                                       AND tt.train_code    = train_code 
            AND tt.start_station_name = start_name 
            AND tt.end_station_name = end_name
                                       AND tt.station_telecode  = '*'
                                       AND tt.train_type      IN(train_type_code,'*')
                                       AND tt.purpose_code   IN(purpose_code,'*')
                                       AND tt.flag1       IN(sale_mode,'*')   
                                       AND tt.flag2       = '1'        
                                       and tt.train_class   IN(train_class_code,'*')
     
                                       and max_day       = tt.control_day
                                       and stop_date    = tt.control_train_day
                                       and C_from_period = tt.from_period 
                                       and C_control_min_date = tt.control_min_date 
                                       and C_start_date = tt.start_date;
                                    end if; 



                                    if min_time_flag = '2' then
                                       select   lpad(min(tt.ahead_time),4,'0') 
            INTO min_time 
            FROM ds60_zc_tt_train_para_define  tt
            WHERE tt.inner_code   =  start_bureau_code
                                       AND tt.station_telecode  IN(start_telecode,'*')
                                       AND tt.train_type      IN(train_type_code,'*')
                                       AND (tt.train_code = train_code OR tt.train_code = '*' 
           OR (tt.train_code != train_code AND train_code LIKE tt.train_code))
                                       AND tt.purpose_code   IN(purpose_code,'*')
                                       AND tt.flag1       IN(sale_mode,'*')   
                                       AND tt.flag2     IN('*','')
                                       and tt.train_class   IN(train_class_code,'*')
     
                                       and max_day       = tt.control_day
                                       and stop_date    = tt.control_train_day
                                       and C_from_period = tt.from_period
                                       and C_control_min_date = tt.control_min_date
                                       and C_start_date = tt.start_date;
                                    end if; 






                                    SET control_day = max_day;
                                    SET now_datetime = CURRENT_TIMESTAMP;
                                    SET tmp_start_datetime = str_to_date(CONCAT(CURRENT_date,tmp_start_time) ,'%Y-%m-%d%H%i');
                                    if C_start_date = today and tmp_start_time <> "0000" then
  
                                       IF TIMESTAMPDIFF(SECOND,tmp_start_datetime,now_datetime) < 0 and board_train_date_in > C_control_min_date then
                                          SET max_day = TIMESTAMPDIFF(DAY,CURRENT_TIMESTAMP,C_control_min_date);
                                       end if;
                                       if date_after > max_day then
                                          SET train_period = 1;
                                       end if;
                                    end if;

   


      
     
                                    IF date_after > max_day then 
                                       SET train_period = 1;
                                    end if; 
                                    IF board_train_date_in > stop_date then 
                                       SET train_period = 1;
                                    end if;
     
     
                                    select   train_dir.train_type_code INTO tmp_seat_type 
         FROM basic.train_dir 
         WHERE train_dir.train_code = train_code 
          AND train_dir.start_date <= start_train_date 
          AND train_dir.stop_date >= start_train_date   LIMIT 1;
                                    IF tmp_seat_type NOT IN('4','5') AND purpose_code = '1F' then 
                                       SET max_day = 0;
                                    end if;
     
                                    IF debug_in = 9 then 
                                         select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.40.»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';
           SELECT train_code train_code,tmp_seat_type,purpose_code purpose_code,max_day max_day,min_time_flag;
          
          
           
                                    end if;

     
                                    IF train_period = 1 then 
                                       SET purpose_code = '';
                                    end if; 

                            
      
                                    select   tt.ahead_time 
         INTO ahead_time 
         FROM ds60_zc_tt_cancel_limit_define tt
         WHERE  tt.inner_code IN(start_bureau_code,start_telecode)  
                                    AND tt.start_date <= board_train_date_in        
                                    AND tt.stop_date  >= board_train_date_in
                                    AND (tt.train_code = train_code AND tt.start_station_name = start_name 
         AND tt.end_station_name = end_name OR tt.train_code = "*" OR (tt.train_code != train_code AND train_code LIKE tt.train_code))  
                                    AND   tt.station_telecode IN(start_telecode,'*')
                                    AND   tt.train_type IN('*',train_type_code)                                       
                                    AND tt.purpose_code   IN('*',purpose_code)                            
                                    AND tt.sale_mode   IN('*',sale_mode)                            
                                    AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0   
         ORDER BY tt.level_flag desc,tt.purpose_code desc,tt.train_code desc,tt.station_telecode desc,
                                    tt.train_type desc,tt.sale_mode desc,tt.ahead_time desc LIMIT 1;
                                    SET rowcount = ROW_COUNT();
                                    
         IF rowcount > 0  then 
                                       IF ahead_time IS NULL then 
                                          SET ahead_time = 0;
                                       end if;
                                       SET start_datetime = str_to_date(CONCAT(board_train_date_in,start_time) ,'%Y%m%d%H%i');
                                       IF TIMESTAMPDIFF(MINUTE,CURRENT_TIMESTAMP,start_datetime) <= ahead_time then 
                                          SET cancel_purpose = CONCAT(cancel_purpose,purpose_code);
                                       end if;
                                    end if;

     
     
     
     
     
         web_tail:loop
                                    if now_time_char < tmp_start_time then
      
                                       SET declare_day = DATE_FORMAT(TIMESTAMPADD(DAY,control_day -1,CURRENT_TIMESTAMP),'%Y%m%d');  
                                       if declare_day > stop_date then
        
                                          SET declare_day = stop_date;
                                       end if;
                                       if C_start_date = today and declare_day > C_control_min_date then
        
                                          SET declare_day = C_control_min_date;
                                       end if;
                                       SET control_day = control_day;
                                       LEAVE web_tail;
                                    end if;
                                    if now_time_char >= tmp_start_time then
      
                                       SET declare_day = DATE_FORMAT(TIMESTAMPADD(DAY,control_day,CURRENT_TIMESTAMP),'%Y%m%d');  
                                       if declare_day > stop_date then
        
                                          SET declare_day = stop_date;
                                       end if;
                                    end if;
                                    if declare_day >= board_train_date_in then
    
                                       SET control_day = control_day;
                                    end if;
                                    if declare_day < board_train_date_in and board_train_date_in <= stop_date then
    
                                       SET control_day = control_day+TIMESTAMPDIFF(DAY,declare_day,board_train_date_in);
                                    end if;
                                    if declare_day < board_train_date_in and board_train_date_in > stop_date then
    
                                       SET control_day = TIMESTAMPDIFF(DAY,declare_day,stop_date);  
                                       if control_day < 0 then
                                          SET control_day = 0;
                                       end if;
                                    end if;
         leave web_tail;
         end loop web_tail;
                                 UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.control_day = control_day,



                     ds60_zc_train_info_tt_stop_time.sale_time   = min_time,





                      ds60_zc_train_info_tt_stop_time.control_train_day = stop_date,



                                 ds60_zc_train_info_tt_stop_time.cancel_purpose_code =(CASE WHEN TIMESTAMPDIFF(MINUTE,CURRENT_TIMESTAMP,start_datetime) <= ahead_time
                                 THEN IFNULL(ltrim(rtrim(cancel_purpose)),'')
                                 ELSE ds60_zc_train_info_tt_stop_time.cancel_purpose_code END)
                                 WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no;
                              END;
                           end if;
                           SET purpose_cache = CONCAT(rtrim(purpose_cache),purpose_code);
                        END WHILE;
                        SET purposes_in = purpose_cache;
                        IF purposes_in = '' OR rtrim(purposes_in) IS NULL then 
                           SET train_period = 1;
                        end if;
                     end if;
                  end if;


  
                  SET tmp_start_time = '';
                  SET tmp_arrive_time = '';
                  SET start_flag = '0';
                  SET delete_flag = 0;
  
  
     select   tt.command_code, tt.start_time 
     INTO command_code,tmp_start_time 
     FROM  ds60_zc_tt_center_notice tt 
     WHERE tt.train_no     = train_no
                  AND  tt.station_telecode  = start_telecode
                  AND tt.start_date     <= board_train_date_in
                  AND tt.stop_date      >= board_train_date_in
                  AND  tt.command_enable  = 0
                  AND tt.command_code     = 'P'
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount = 1  then 
                     IF command_code = 'P' then 
                        SET start_time = tmp_start_time;
                        SET start_flag = '1';
                     end if;
                  end if;

  
                  select   tt.command_code, tt.start_time 
      INTO command_code,tmp_start_time 
      FROM  ds60_zc_tt_center_notice tt 
      WHERE tt.train_no     = train_no
                  AND  tt.station_telecode  = start_telecode
                  AND tt.start_date     <= board_train_date_in
                  AND tt.stop_date      >= board_train_date_in
                  AND  tt.command_enable  = 0
                  AND tt.command_code    IN('O','P')
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0  
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount = 0  then
                     SET tmp_start_time = start_time;
                  end if;
                  SET start_datetime = str_to_date(CONCAT(board_train_date_in,tmp_start_time),'%Y%m%d%H%i');
                  IF today = board_train_date_in then  
                     IF TIMESTAMPDIFF(MINUTE,CURRENT_TIMESTAMP,start_datetime) <= overtime then 
                        SET overtime = overtime;
                     end if;
                  end if;
    Next_Train:loop
               
  
                  select   tt.command_code 
      INTO command_code 
      FROM  basic.CJ30_center_notice tt
      WHERE tt.train_no     = train_no
                  AND tt.start_date     <= start_train_date
                  AND tt.stop_date      >= start_train_date
                  AND  tt.command_enable  = 0
                  AND tt.command_code    IN('0','1')                     
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,start_train_date)%tt.running_style)) > 0  
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount = 1  then 
                     IF command_code = '0' then 
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
                  end if;
  



                  select   tt.command_code, tt.arrive_time 
      INTO command_code,tmp_arrive_time 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no     = train_no
                  AND  tt.station_telecode  = end_telecode
                  AND tt.start_date     <= arrive_train_date
                  AND tt.stop_date      >= arrive_train_date
                  AND  tt.command_enable  = 0
                  AND tt.command_code    IN('O','P')
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,arrive_train_date)%tt.running_style)) > 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount = 1  then
   
                     IF command_code = 'P' then 
                        SET arrive_time = tmp_arrive_time;
                        SET start_flag = '2';
                     end if;
                  end if;

   
                  set transaction ISOLATION LEVEL READ unCOMMITTED;
                  select   tt.command_code 
      INTO command_code 
      FROM  basic.CJ30_center_notice  tt
      WHERE tt.inner_code   = management_bureau       
                  AND tt.train_no     IN(train_no,'*')
                  AND tt.station_telecode IN(start_telecode,'*')      
                  AND tt.station_name   IN(end_telecode,'*')      
                  AND tt.command_code   = 'M'             
                  AND tt.start_date   <= start_train_date       
                  AND tt.stop_date    >= start_train_date
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,start_train_date)%tt.running_style)) > 0
                  AND  tt.command_enable   = 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount >= 1 AND command_code = 'M'  then 
                     SET delete_flag = 1;
                     LEAVE Next_Train;
                  end if;
   
                   set transaction ISOLATION LEVEL READ UNCOMMITTED;
                  select   tt.command_code tt
      INTO command_code 
      FROM  basic.CJ30_center_notice tt WHERE inner_code = management_bureau       
                  AND train_code   LIKE tt.train_no         
                  AND tt.station_telecode  = '*'            
                  AND tt.station_name    = '*'            
                  AND tt.command_code   = 'M'             
                  AND tt.start_date   <= start_train_date
                  AND tt.stop_date    >= start_train_date
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,start_train_date)%tt.running_style)) > 0
                  AND  tt.command_enable   = 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount >= 1 AND command_code = 'M'  then
                     SET delete_flag = 1;
                     LEAVE Next_Train;
                  end if;
   
                   set transaction ISOLATION LEVEL READ UNCOMMITTED;
                  select   tt.command_code 
      INTO command_code 
      FROM  basic.CJ30_center_notice tt
      WHERE tt.train_no    = '*'
                  AND tt.station_telecode  = start_telecode
                  AND tt.command_code   = 'Z'  
                  AND tt.start_date   <= board_train_date_in    
                  AND tt.stop_date    >= board_train_date_in
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0
                  AND  tt.command_enable   = 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  set transaction ISOLATION LEVEL READ COMMITTED;
     IF rowcount >= 1 AND command_code = 'Z'  then      
                     SET delete_flag = 1;
                     LEAVE Next_Train;
                  end if;
                  select   tt.command_code 
      INTO command_code 
      FROM  ds60_zc_tt_center_notice tt
      WHERE  tt.train_no   = train_no
                  AND  tt.station_telecode = start_telecode
                  AND tt.start_date   <= board_train_date_in
                  AND tt.stop_date   >= board_train_date_in
                  AND  tt.command_enable = 0
                  AND tt.command_code IN('Q','R')
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount >= 1 AND command_code = 'Q'  then 
                     SET delete_flag = 1;
                     LEAVE Next_Train;
                  end if;
                  select   tt.command_code 
      INTO command_code 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no   = train_no
                  AND  tt.station_telecode = end_telecode
                  AND tt.start_date  <= arrive_train_date
                  AND tt.stop_date  >= arrive_train_date
                  AND  tt.command_enable = 0
                  AND tt.command_code IN('Q','R')
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,arrive_train_date)%tt.running_style)) > 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
     IF rowcount >= 1 AND command_code = 'Q'  then      
                     SET delete_flag = 1;
                     LEAVE Next_Train;
                  end if;
                  select   tt.command_code 
      INTO command_code 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no   = train_no
                  AND  tt.station_telecode = end_telecode
                  AND tt.start_date  <= arrive_train_date
                  AND tt.stop_date  >= arrive_train_date
                  AND  tt.command_enable = 0
                  AND tt.command_code IN('V','W')
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,arrive_train_date)%tt.running_style)) > 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount >= 1 AND command_code = 'V' then 
                     SET delete_flag = 1;
                     LEAVE Next_Train;
                  end if;
  
    
                  select   tt.command_code, tt.start_time, 
      tt.arrive_time 
      INTO command_code,w_seat_type,w_flag 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no   = train_no
                  AND  tt.station_telecode = start_telecode
                  AND tt.start_date   <= board_train_date_in
                  AND tt.stop_date   >= board_train_date_in
                  AND  tt.command_enable = 0
                  AND tt.command_code IN('S','U')
                  AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0 
     ORDER BY tt.operate_time DESC LIMIT 1;
                  SET rowcount = ROW_COUNT();
                  
      IF rowcount >= 1  then
   
                     IF command_code = 'S' then
    
                        IF w_seat_type = '*' then
     
                           SET delete_flag = 1;
                           LEAVE Next_Train;
                        end if;
                     end if;
                  end if;





     
                  SET w_seat_type = '';
                  SET w_flag = '';  
  
  
                  IF flag_in != 1 AND EXISTS(SELECT 1 FROM ds60_zc_tt_center_notice WHERE train_no = train_no) then 
                     select   tt.command_code, tt.arrive_time 
      INTO command_code,tmp_arrive_time 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no     = train_no
                     AND tt.station_telecode  = end_telecode
                     AND tt.start_date     <= arrive_train_date
                     AND tt.stop_date      >= arrive_train_date
                     AND tt.command_enable  = 0
                     AND  tt.command_code    IN('O','P')
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,arrive_train_date)%tt.running_style)) > 0   
      ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                    
      IF rowcount = 1  then
                        IF command_code = 'P' then 
                           SET arrive_time = tmp_arrive_time;
                           SET start_flag = '2';
                        end if;
                     end if;

   
                     set transaction ISOLATION LEVEL READ UNCOMMITTED;
                     select   tt.command_code 
      INTO command_code 
      FROM  basic.CJ30_center_notice tt
      WHERE tt.inner_code   = management_bureau       
                     AND tt.train_no     IN(train_no,'*')
                     AND tt.station_telecode IN(start_telecode,'*')      
                     AND tt.station_name   IN(end_telecode,'*')      
                     AND tt.command_code   = 'M'             
                     AND tt.start_date   <= start_train_date       
                     AND tt.stop_date    >= start_train_date
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,start_train_date)%tt.running_style)) > 0
                     AND  tt.command_enable   = 0   
      ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                     set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount >= 1 AND command_code = 'M' then 
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
   
                     Set transaction ISOLATION LEVEL READ UNCOMMITTED;
                     select   tt.command_code 
      INTO command_code 
      FROM  basic.CJ30_center_notice tt
      WHERE tt.inner_code   = management_bureau       
                     AND train_code   LIKE tt.train_no         
                     AND tt.station_telecode  = '*'            
                     AND tt.station_name    = '*'            
                     AND tt.command_code   = 'M'             
                     AND tt.start_date   <= start_train_date
                     AND tt.stop_date    >= start_train_date
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,start_train_date)%tt.running_style)) > 0
                     AND  tt.command_enable   = 0   
      ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                    set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount >= 1 AND command_code = 'M'  then 
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
   
                    set transaction ISOLATION LEVEL READ UNCOMMITTED;
                     select   tt.command_code 
      INTO command_code 
      FROM  basic.CJ30_center_notice tt
       WHERE tt.train_no    = '*'
                     AND tt.station_telecode  = start_telecode
                     AND tt.command_code   = 'Z'   
                     AND tt.start_date   <= board_train_date_in    
                     AND tt.stop_date    >= board_train_date_in
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0
                     AND  tt.command_enable   = 0   
      ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                    set transaction ISOLATION LEVEL READ COMMITTED;
      IF rowcount >= 1 AND command_code = 'Z'  then 
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
                     select   tt.command_code 
      INTO command_code 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no   = train_no
                     AND  tt.station_telecode = start_telecode
                     AND tt.start_date   <= board_train_date_in
                     AND tt.stop_date   >= board_train_date_in
                     AND  tt.command_enable = 0
                     AND tt.command_code IN('Q','R')
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                    
      IF rowcount >= 1 AND command_code = 'Q' then 
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
                     select   tt.command_code 
      INTO command_code 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no   = train_no
                     AND  tt.station_telecode = end_telecode
                     AND tt.start_date  <= arrive_train_date
                     AND tt.stop_date  >= arrive_train_date
                     AND  tt.command_enable = 0
                     AND tt.command_code IN('Q','R')
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,arrive_train_date)%tt.running_style)) > 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                    
      IF rowcount >= 1 AND command_code = 'Q'  then 
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
                     select   tt.command_code 
      INTO command_code 
      FROM  ds60_zc_tt_center_notice tt
      WHERE tt.train_no   = train_no
                     AND  tt.station_telecode = end_telecode
                     AND tt.start_date  <= arrive_train_date
                     AND tt.stop_date  >= arrive_train_date
                     AND  tt.command_enable = 0
                     AND tt.command_code IN('V','W')
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,arrive_train_date)%tt.running_style)) > 0   
     ORDER BY tt.operate_time DESC LIMIT 1;
                     SET rowcount = ROW_COUNT();
                     
      IF rowcount >= 1 AND command_code = 'V' then
                        SET delete_flag = 1;
                        LEAVE Next_Train;
                     end if;
   
     select   tt.command_code, tt.start_time,  
     tt.arrive_time  
     INTO command_code,w_seat_type,w_flag 
     FROM  ds60_zc_tt_center_notice tt
     WHERE tt.train_no   = train_no
                     AND  tt.station_telecode = start_telecode
                     AND tt.start_date   <= board_train_date_in
                     AND tt.stop_date   >= board_train_date_in
                     AND  tt.command_enable = 0
                     AND tt.command_code IN('S','U')
                     AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,board_train_date_in)%tt.running_style)) > 0   ORDER BY operate_time DESC LIMIT 1;
      
                     SET rowcount = ROW_COUNT();
                     
      IF rowcount >= 1  then
                        IF command_code = 'S' then 
                           IF w_seat_type = '*' then 
                              SET delete_flag = 1;
                              LEAVE Next_Train;
                           ELSE 
                              SET center_notice = 'ds60_zc_tt_center_notice';
                           end if;
                        ELSE 
                           SET center_notice = 'ds60_zc_tt_center_notice';
                        end if;
                     end if;
                  ELSE 
                     SET center_notice = '';
                  end if;
      leave  Next_Train;
    end loop Next_Train;
               
      
               IF delete_flag = 1 then 
                  DELETE FROM ds60_zc_train_info_tt_stop_time WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no;
                  DELETE FROM ds60_zc_tt_train_cache WHERE ds60_zc_tt_train_cache.train_no = train_no;
                  ITERATE SWL_Label6;
               end if;
               SET to_station_no_limit = end_station_in_no;
  
  

  
               UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.purposes = purposes_in,ds60_zc_train_info_tt_stop_time.to_limit_no = to_station_no_limit,
      ds60_zc_train_info_tt_stop_time.start_time  =(CASE WHEN start_flag > '0' THEN start_time  ELSE ds60_zc_train_info_tt_stop_time.start_time  END),
      ds60_zc_train_info_tt_stop_time.arrive_time =(CASE WHEN start_flag > '0' THEN arrive_time ELSE ds60_zc_train_info_tt_stop_time.arrive_time END), 
               ds60_zc_train_info_tt_stop_time.notice_flag =(CASE WHEN center_notice != '' THEN '1' ELSE '0' END)      
               WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no;
            END;
         END WHILE;
 
 if debug_in=9 then
  select '280====';
 end if;

         SET d5 = CURRENT_TIMESTAMP;
           SET t4 = TIMESTAMPDIFF(MICROSECOND,d4,d5);
         SET t8 = 0;
         SET t9 = 0;
         SET t10 = 0;
         SET t11 = 0;
         SET t12 = 0;       
     
 
  WHILE EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache tt WHERE tt.flag = 1) DO
            BEGIN 
               SET d9 = CURRENT_TIMESTAMP;
               select   tt.train_no 
        INTO train_no 
        FROM ds60_zc_tt_train_cache tt 
        WHERE tt.flag = 1   LIMIT 1;
               UPDATE ds60_zc_tt_train_cache tt SET tt.flag = 2 WHERE tt.train_no = train_no AND tt.flag = 1;
               select   tt.start_time, tt.board_train_code, tt.train_code, tt.start_station_name, tt.start_telecode, 
          tt.start_subbureau_code, tt.start_bureau_code, tt.start_station_no, tt.arrive_time, tt.end_telecode, 
    tt.end_subbureau_code, tt.end_bureau_code, tt.end_station_no, tt.ticket_office, tt.location_code, 
    tt.day_difference, tt.arrive_date, tt.train_class_code, tt.seat_types, tt.start_station_name, 
    tt.end_station_name, tt.info_list, tt.start_tele_list, tt.end_tele_list, tt.start_pycode, 
    tt.end_pycode, tt.train_type, tt.seat_feature, tt.start_code, tt.end_code, tt.start_date, tt.purposes, 
    tt.to_limit_no, tt.notice_flag, tt.start_name, tt.end_name, tt.management_bureau, tt.cancel_purpose_code 
      INTO start_time,board_train_code,train_code,board_station_in,start_telecode,
                 start_subbureau_code,start_bureau_code,start_station_no,arrive_time,end_telecode,
                 end_subbureau_code,end_bureau_code,end_station_in_no,ticket_office,
                 location_code,day_difference,arrive_train_date,train_class_code,
                 seat_types,board_station_in,end_station_in,cache_info_list,start_tele_list,
                 end_tele_list,start_pycode,end_pycode,train_type_code,seat_feature,
                 start_station_telecode,end_station_in_telecode,
     start_train_date,purposes_in,
                 to_station_no_limit,notice_flag,start_name,
     end_name,management_bureau,
                 cancel_purpose 
      FROM ds60_zc_train_info_tt_stop_time tt
      WHERE tt.train_no = train_no   LIMIT 1;

  
               IF network_mode = 1 OR 12306_flag = 1 then 
                  SET fetch_range = 0; 
               ELSE
                  IF bureau_code != start_bureau_code then 
                     SET fetch_range = 4;
                  ELSE
                     SET fetch_range = 3;
                     IF inner_code_in != start_telecode then 
                        IF EXISTS(SELECT 1 FROM ds60_zc_tt_temp_union_station tt WHERE tt.my_tele_code = start_telecode) then 
                           SET fetch_range = 1;
                        end if;
                     ELSE 
                        SET fetch_range = 0;
                     end if;
                  end if;
               end if;
               SET t12 = t12+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP); 

























































               SET d9 = CURRENT_TIMESTAMP;
  

               SET tmp_seat_type_list = '';
               SET seat_type_cache = '';   
  
  
               IF my_center_code = 'AD' then  
      
   begin 
                 
       
        DECLARE cursor_get_left CURSOR FOR 
       SELECT distinct tt.seat_type_code,tt.wseat_type_code,sum(tt.ticket_quantity) 
       FROM center.left_base_center tt  FORCE INDEX(l_b_c_idx)
       WHERE  tt.train_no  = train_no
       AND tt.train_date  = board_train_date_in
       AND tt.station_no  = start_station_no
       AND ((tt.far_from_station_no <= end_station_in_no AND LOCATE(tt.purpose_code,cancel_purpose)%2 = 0) 
      or 
      (tt.far_from_station_no <= '99' and LOCATE(tt.purpose_code,cancel_purpose)%2 = 1)
      )
       AND tt.limit_station >= end_station_in_no 
       AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0   
       AND LOCATE(tt.purpose_code,purposes_in)%2  = 1      
       AND tt.ticket_quantity > 0
       GROUP BY tt.seat_type_code,tt.wseat_type_code;
       set transaction ISOLATION LEVEL READ UNCOMMITTED;
     open cursor_get_left;
     set transaction ISOLATION LEVEL READ COMMITTED;
    SWL_Label10:
                 WHILE 1 = 1 DO
                    SET NO_DATA = 0;
                  
                       FETCH cursor_get_left INTO t_seat_type_code,w_seat_type,t_ticket_quantity;
                  
                    IF NO_DATA >= 1 then 
                       LEAVE SWL_Label10;
                    end if;
                    IF debug_in = 9 then 
                         select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.hhh2.»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';
        
                    end if;
      SET train_period_flag = 1;
                    SET fetch_w_seat = 0;
                    SET return_code = 0;
                    SET t_range = 0;
                    SET row = LOCATE(CONCAT(',',t_seat_type_code),seat_type_cache);  
                    IF row = 0 then 
                       IF notice_flag = '1' then 
        begin 
          declare tmp_purposes_in char(2);
          if length(purposes_in)<=2 then
           set tmp_purposes_in=purposes_in;
          else
           set tmp_purposes_in=substring(purposes_in,1,2);
          end if;  
         SET center_notice = 'ds60_zc_tt_center_notice';
         set call_return_value = null;
         if debug_in=9 then
          select 'ds60_zc_train_info:800===call DS60_Notice_Period',board_train_date_in,train_no,train_code,
           start_telecode,
           w_seat_type,fetch_w_seat,
           purposes_in,t_range,sale_mode,center_notice,
           '',
           train_type_code,
           start_bureau_code,call_return_value;
         end if;
         call arith.DS60_Notice_Period(board_train_date_in,train_no,train_code,
         start_telecode,
         w_seat_type,fetch_w_seat,
         tmp_purposes_in,t_range,sale_mode,center_notice,
         '',
         train_type_code,
         start_bureau_code,call_return_value);
         if debug_in=9 then
          select 'ds60_zc_train_info:801===end call DS60_Notice_Period',fetch_w_seat,call_return_value;
         end if;
        end;
        SET return_code =call_return_value;
      
                          IF return_code = 0 then 
                             SET train_period_flag = 0;
      
                          ELSE 
                             IF return_code = 1 then 
                                SET train_period_flag = 0;
                             ELSE                          
       
                                IF fetch_w_seat = 1 AND t_seat_type_code = 'W' then 
                                   SET train_period_flag = 0;
      
                                ELSE 
                                   IF fetch_w_seat = 9 AND t_seat_type_code != 'W' then 
                                      SET train_period_flag = 0;
                                   end if;
                                end if;
                             end if;
                          end if;
                       end if;
      
                       SET seat_type_cache = CONCAT(rtrim(seat_type_cache),',',t_seat_type_code,CAST(train_period_flag AS CHAR(1)));
                    ELSE
                       SET train_period_flag = cast(SUBSTRING(seat_type_cache,row+2,1) as SIGNED INTEGER);
                    end if;
     
                    IF NOT EXISTS(SELECT 1 FROM ds60_zc_tt_seat_info tt 
        WHERE tt.train_date = board_train_date_in 
       AND tt.train_no = train_no 
       AND tt.seat_type_code = t_seat_type_code 
       AND tt.wseat_type_code = w_seat_type) 
      then 
                       INSERT INTO ds60_zc_tt_seat_info VALUES(board_train_date_in,train_no,t_seat_type_code,purposes_in,t_range,train_period_flag,0,to_station_no_limit,w_seat_type,0);
    
                       SET tmp_seat_type_list = CONCAT(rtrim(tmp_seat_type_list),t_seat_type_code);
                    end if;
                    IF t_ticket_quantity = 0 OR train_period_flag = 0 then 
                       ITERATE SWL_Label10;
                    end if; 
    
                    IF EXISTS(SELECT 1 FROM ds60_zc_tt_seat_type_info tt
       WHERE tt.train_date = board_train_date_in 
       AND tt.train_no = train_no 
       AND tt.seat_type_code = t_seat_type_code 
       AND tt.wseat_type_code = w_seat_type) 
      then 
                     
                       UPDATE ds60_zc_tt_seat_type_info tt SET tt.ticket_num = tt.ticket_num+t_ticket_quantity
                       WHERE tt.train_date   = board_train_date_in
                       AND tt.train_no   = train_no
                       AND tt.seat_type_code = t_seat_type_code
                       AND  tt.wseat_type_code = w_seat_type;
                       SET rowcount = ROW_COUNT();
                       
                    ELSE
       
                       INSERT INTO ds60_zc_tt_seat_type_info VALUES(board_train_date_in,train_no,t_seat_type_code,w_seat_type,t_ticket_quantity,0);
                    end if;
                 END WHILE;
               
                    CLOSE cursor_get_left;
         end;
               ELSE 
         begin
   
   DECLARE cursor_get_left CURSOR  FOR 
   SELECT tt.seat_type_code,tt.wseat_type_code,sum(tt.ticket_quantity) 
      FROM center.left_base_center tt FORCE INDEX(l_b_c_idx)
      WHERE  tt.train_no  = train_no
      AND tt.train_date  = board_train_date_in
      AND tt.station_no  = start_station_no
      AND tt.far_from_station_no <= end_station_in_no
      AND tt.limit_station >= end_station_in_no 
      AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0     
      AND LOCATE(tt.purpose_code,purposes_in)%2  = 1   AND LOCATE(tt.purpose_code,cancel_purpose)%2 = 0   
      AND tt.ticket_quantity > 0
      GROUP BY tt.seat_type_code,tt.wseat_type_code
      UNION 
      SELECT tt.seat_type_code,tt.wseat_type_code,sum(tt.ticket_quantity)  
      FROM center.left_base_center tt  FORCE INDEX(l_b_c_idx)
      WHERE  tt.train_no  = train_no
      AND tt.train_date  = board_train_date_in
      AND tt.station_no  = start_station_no
      AND tt.far_from_station_no <= '99'                            
      AND tt.limit_station >= end_station_in_no 
      AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0     
      AND LOCATE(tt.purpose_code,purposes_in)%2  = 1   AND LOCATE(tt.purpose_code,cancel_purpose)%2 = 1   
      AND tt.ticket_quantity > 0
      GROUP BY tt.seat_type_code,tt.wseat_type_code
      UNION 
      SELECT tt.seat_type_code,tt.wseat_type_code,sum(tt.ticket_quantity) 
      FROM center.left_base_AD tt  FORCE INDEX(l_b_c_idx)
      WHERE  tt.train_no  = train_no
      AND tt.train_date  = board_train_date_in
      AND tt.station_no  = start_station_no
      AND tt.far_from_station_no <= end_station_in_no 
      AND tt.limit_station >= end_station_in_no 
      AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0     
      AND LOCATE(tt.purpose_code,purposes_in)%2  = 1   AND LOCATE(tt.purpose_code,cancel_purpose)%2 = 0   
      AND tt.ticket_quantity > 0
      GROUP BY tt.seat_type_code,tt.wseat_type_code
      UNION 
      SELECT tt.seat_type_code,tt.wseat_type_code,sum(tt.ticket_quantity) 
      FROM center.left_base_AD tt FORCE INDEX(l_b_c_idx)
      WHERE  tt.train_no  = train_no
      AND tt.train_date  = board_train_date_in
      AND tt.station_no  = start_station_no
      AND tt.far_from_station_no <= '99'                            
      AND tt.limit_station >= end_station_in_no 
      AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0     
      AND LOCATE(tt.purpose_code,purposes_in)%2  = 1   AND LOCATE(tt.purpose_code,cancel_purpose)%2 = 1   
      AND tt.ticket_quantity > 0
      GROUP BY tt.seat_type_code,tt.wseat_type_code;
      set transaction isolation LEVEL READ UNCOMMITTED;
      open cursor_get_left;
      set transaction ISOLATION LEVEL READ COMMITTED;
      SWL_Label10:
                 WHILE 1 = 1 DO
                    SET NO_DATA = 0;
                  
                       FETCH cursor_get_left INTO t_seat_type_code,w_seat_type,t_ticket_quantity;
                  
                    IF NO_DATA >= 1 then 
                       LEAVE SWL_Label10;
                    end if;
                    IF debug_in = 9 then 
                         select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.hhh2.»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';
       
                    end if;
      SET train_period_flag = 1;
                    SET fetch_w_seat = 0;
                    SET return_code = 0;
                    SET t_range = 0;
                    SET row = LOCATE(CONCAT(',',t_seat_type_code),seat_type_cache);  
                    IF row = 0 then 
                       IF notice_flag = '1' then 
        begin 
          declare tmp_purposes_in char(2);
          if length(purposes_in)<=2 then
           set tmp_purposes_in=purposes_in;
          else
           set tmp_purposes_in=substring(purposes_in,1,2);
          end if;  
         set call_return_value = null;          
         SET center_notice = 'ds60_zc_tt_center_notice';
         call arith.DS60_Notice_Period(board_train_date_in,train_no,train_code,
         start_telecode,
         w_seat_type,fetch_w_seat,
         tmp_purposes_in,t_range,sale_mode,center_notice,
         '',
         train_type_code,
         start_bureau_code,call_return_value);
         set return_code=call_return_value;
        end;
      
                          IF return_code = 0 then 
                             SET train_period_flag = 0;
      
                          ELSE 
                             IF return_code = 1 then 
                                SET train_period_flag = 0;
                             ELSE                          
       
                                IF fetch_w_seat = 1 AND t_seat_type_code = 'W' then 
                                   SET train_period_flag = 0;
      
                                ELSE 
                                   IF fetch_w_seat = 9 AND t_seat_type_code != 'W' then 
                                      SET train_period_flag = 0;
                                   end if;
                                end if;
                             end if;
                          end if;
                       end if;
      
                       SET seat_type_cache = CONCAT(rtrim(seat_type_cache),',',t_seat_type_code,CAST(train_period_flag AS CHAR(1)));
                    ELSE
                       SET train_period_flag = cast(SUBSTRING(seat_type_cache,row+2,1) as SIGNED INTEGER);
                    end if;
    
                    IF NOT EXISTS(SELECT 1 FROM ds60_zc_tt_seat_info tt 
       WHERE tt.train_date = board_train_date_in 
        AND tt.train_no = train_no 
        AND tt.seat_type_code = t_seat_type_code 
        AND tt.wseat_type_code = w_seat_type) 
       then 
                       INSERT INTO ds60_zc_tt_seat_info VALUES(board_train_date_in,train_no,t_seat_type_code,purposes_in,t_range,train_period_flag,0,to_station_no_limit,w_seat_type,0);
    
                       SET tmp_seat_type_list = CONCAT(rtrim(tmp_seat_type_list),t_seat_type_code);
                    end if;
                    IF t_ticket_quantity = 0 OR train_period_flag = 0 then 
                       ITERATE SWL_Label10;
                    end if; 
    
                    IF EXISTS(SELECT 1 FROM ds60_zc_tt_seat_type_info tt 
       WHERE tt.train_date = board_train_date_in 
      AND tt.train_no = train_no 
      AND tt.seat_type_code = t_seat_type_code 
      AND tt.wseat_type_code = w_seat_type) 
     then 
                      
                       UPDATE ds60_zc_tt_seat_type_info tt SET tt.ticket_num = tt.ticket_num+t_ticket_quantity
                       WHERE tt.train_date   = board_train_date_in
                       AND tt.train_no   = train_no
                       AND tt.seat_type_code = t_seat_type_code
                       AND  tt.wseat_type_code = w_seat_type;
                       SET rowcount = ROW_COUNT();
                      
                    ELSE
                       INSERT INTO ds60_zc_tt_seat_type_info VALUES(board_train_date_in,train_no,t_seat_type_code,w_seat_type,t_ticket_quantity,0);
                    end if;
                 END WHILE;
               
                    CLOSE cursor_get_left; 
                  end;
               END IF;
      if debug_in=9 then
       select '2001====';
       select * from ds60_zc_tt_seat_type_info;
    end if;
               
  
               SET t8 = t8+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP); 

               SET d9 = CURRENT_TIMESTAMP;
  
               SET tmp_list = seat_type_list_in;
               IF network_mode = 1 OR TVM_Flag = 1 then 
                 while  EXISTS(SELECT 1 FROM ds60_zc_tt_seat_info tt
       WHERE tt.train_date = board_train_date_in 
       AND tt.train_no = train_no AND flag = 0) DO 
       
                     select   tt.seat_type_code, tt.period_flag 
      INTO t_seat_type_code,train_period_flag 
      FROM ds60_zc_tt_seat_info tt
      WHERE tt.train_date = board_train_date_in 
      AND tt.train_no = train_no AND tt.flag = 0   LIMIT 1;
   
                     UPDATE ds60_zc_tt_seat_info tt SET tt.flag = 1 
      WHERE tt.train_date = board_train_date_in AND tt.train_no = train_no 
      AND tt.seat_type_code = t_seat_type_code AND tt.flag = 0;
       
                     select   tt.ticket_num 
      INTO t_ticket_quantity 
      FROM ds60_zc_tt_seat_type_info tt
      WHERE tt.train_date = board_train_date_in AND tt.train_no = train_no 
      AND tt.seat_type_code = t_seat_type_code;
                     SET rowcount = ROW_COUNT();
                    
      IF rowcount = 0  then 
                        SET t_ticket_quantity = 0;
                     end if;
                     IF t_ticket_quantity >= ticket_limit OR train_period_flag = 0 then 
                        SET row = LOCATE(t_seat_type_code,tmp_list);
                        IF row > 0 then 
                           SET tmp_list = INSERT(tmp_list,row,1,'');
                        end if;
                     end if;
                  END WHILE;
               end if;
               SET t12 = t12+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP);

               IF debug_in = 9 then 
                   select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.hhh33.»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';

      
     
               end if;

  
               SET d9 = CURRENT_TIMESTAMP;
               TRUNCATE TABLE ds60_zc_train_info_tt_share;
               IF tmp_list IS NULL then 
                  SET tmp_list = '';
               end if;
               IF tmp_list != '' then 
   
                  IF start_station_telecode != start_telecode then 
     
                     SET range_in = 0;
                     SET fetch_w_seat = 0;
                     SET share_string = '';
                     SET cancel_station = '';  
      begin 
      declare l_out_in TINYINT unsigned;
      declare l_sale_mode_in char(1);
      declare l_DBG_in TINYINT unsigned;
      declare l_return_in int;
      set l_out_in = 0;
      set l_sale_mode_in='*';
      set l_DBG_in=0;
       if debug_in=9 then
       select 'ds60_zc_train_info:500===call DS50_Proc_Share_Pre',board_train_date_in,train_no,start_telecode,seat_type_list_in,purposes_in,
         range_in,share_string, l_out_in
          , l_sale_mode_in
          , l_DBG_in
          , l_return_in;
       end if;
       CALL arith.DS50_Proc_Share_Pre(board_train_date_in,train_no,start_telecode,seat_type_list_in,purposes_in,
        range_in,share_string, l_out_in
          , l_sale_mode_in
          , l_DBG_in
          , l_return_in);
       if debug_in=9 then
       select 'ds60_zc_train_info:501===end call DS50_Proc_Share_Pre',share_string;
       end if;
     end;
       IF share_string IS NULL then 
       SET share_string = '';
       end if;
    
                     IF share_string != '' then 
     
                        SET row = 0;
                        WHILE row < LENGTH(rtrim(share_string))/27 DO
                           BEGIN
                              
                                 SET original_station_telecode = SUBSTRING(share_string,row*27+1,3);
                                 SET transform_date = SUBSTRING(share_string,row*27+1+3,8);
                                 SET transform_no = SUBSTRING(share_string,row*27+1+3+8,2);
                                 SET fetch_w_seat = cast(SUBSTRING(share_string,row*27+1+3+8+2,1) as SIGNED INTEGER);
                                 SET tmp_range = cast(SUBSTRING(share_string,row*27+1+3+8+2+1,1) as SIGNED INTEGER);
                                 SET tmp_start_coach_no = SUBSTRING(share_string,row*27+1+3+8+2+1+1,2);
                                 SET tmp_end_coach_no = SUBSTRING(share_string,row*27+1+3+8+2+1+1+2,2);
                                 SET schedule_coach = SUBSTRING(share_string,row*27+1+3+8+2+1+1+2+2,2); 
                                 SET auto_share = SUBSTRING(share_string,row*27+1+3+8+2+1+1+2+2+4,1);  
                                 SET tmp_purpose = SUBSTRING(share_string,row*27+1+3+8+2+1+1+2+2+5,2);
                                 SET seat_type_code = SUBSTRING(share_string,row*27+1+3+8+2+1+1+2+2+7,1);
      
                                 select   tt.bureau_code, tt.subbureau_code 
         INTO R_original_station_bureau,R_original_subbureau_code 
         from basic.station_dictionary tt 
         where tt.station_telecode = original_station_telecode;
      
                                 select   tt.bureau_code, tt.subbureau_code 
         INTO R_sale_bureau,R_sale_subbureau 
         from basic.station_dictionary tt
         where tt.station_telecode = inner_code_in;


      
                                 IF R_original_station_bureau != R_sale_bureau then 
                                    SET From_Range = 4; 
                                 ELSE 
                                    IF R_original_subbureau_code != R_sale_subbureau then 
                                       SET From_Range = 3;
                                    ELSE 
                                       IF inner_code_in != original_station_telecode then 
           set call_return_value = null;
           
           call arith.CS50_Same_City(board_train_date_in,inner_code_in,original_station_telecode,'1',call_return_value);
           
                                          SET rowcount = call_return_value; 
                                          IF rowcount = 1 then 
                                             SET From_Range = 1;               
                                          ELSE 
                                             SET From_Range = 2;
                                          end if;
                                       ELSE 
                                          SET From_Range = 0;
                                       end if;
                                    end if;
                                 end if;
         
        share_lable:loop
                              
     
                                 SET w_seat_type = seat_type_code;
                                 IF w_seat_type = 'z' then 
                                    SET w_seat_type = '%';
                                 end if;           
                                 IF seat_type_code = 'z' then  
                                    SET seat_type_code = tmp_list;
                                 ELSE 
                                    IF LOCATE(seat_type_code,tmp_list) = 0 then 
                                       LEAVE share_lable;
                                    end if;
                                 end if;     
                                 IF tmp_purpose  = '**' then  
                                    SET tmp_purpose = purposes_in;
                                 end if;
                                 IF tmp_range    = 9 then   
                                    SET tmp_range = 255;
                                 end if;
                                 SET purpose_cache = tmp_purpose;
                                 IF fetch_w_seat = 9 then 
                                    SET seat_type_code = 'W';     
                                 ELSE 
                                    IF fetch_w_seat = 1 then          
                                       SET rowcount = LOCATE('W',seat_type_code);
                                       IF rowcount > 0 then 
                                          SET seat_type_code = INSERT(seat_type_code,rowcount,1,'');
                                       end if;
                                    end if;
                                 end if;

      
                                 SET cancel_seat_type = '';
                                 SET cancel_purpose = '';
                                 IF start_telecode != original_station_telecode then 
      
                                    IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_share tt 
          WHERE tt.station_telecode = original_station_telecode 
          AND tt.transform_date = transform_date 
          AND tt.transform_no = transform_no
          AND tt.fetch_w_seat = fetch_w_seat 
          AND tt.`range` = tmp_range 
          AND tt.start_coach_no = tmp_start_coach_no 
          AND tt.end_coach_no = tmp_end_coach_no
          AND tt.schedule_coach = schedule_coach 
          AND tt.seat_type_code = seat_type_code 
          AND tt.old_purposes = tmp_purpose  ) 
         then 
                                       LEAVE share_lable;
                                    end if; 
      
       
      
      
      
                                     set transaction ISOLATION LEVEL READ UNCOMMITTED;
                                    select   tt.bureau_code 
         INTO original_bureau_code 
         FROM basic.station_dictionary tt 
         WHERE tt.station_telecode = original_station_telecode;
        set transaction ISOLATION LEVEL READ COMMITTED;
       
                                    SET to_station_no_limit = end_station_in_no;
                                    IF bureau_code = original_bureau_code then    
     
                                       IF LOCATE(original_station_telecode,cancel_station) = 0 then 
                                          SET cancel_station = CONCAT(rtrim(cancel_station),original_station_telecode);

          
                                          INSERT INTO ds60_zc_tt_cancel_limit_define
                                          SELECT tt.inner_code, 
           tt.start_date, 
           tt.stop_date, 
           tt.train_code, 
           tt.start_station_name, 
           tt.end_station_name, 
           tt.station_telecode, 
           tt.cancel_office_no, 
           tt.cancel_window_no, 
           tt.ahead_time, 
           tt.location_code, 
           tt.office_no, 
           tt.window_no, 
           tt.operater_no, 
           tt.operater_time, 
           tt.flag1, 
           tt.flag2, 
           tt.running_style, 
           tt.running_rule, 
           tt.seat_type_code, 
           tt.purpose_code, 
           tt.train_type, 
           tt.sale_mode, 
           tt.far_from_station, 
           tt.level_flag     
          FROM basic.DJ50_cancel_limit_define tt
                                          WHERE tt.inner_code IN(original_station_telecode) 
                                          AND tt.start_date <= transform_date      
                                          AND tt.stop_date  >= transform_date
                                          AND (tt.train_code = train_code AND tt.start_station_name = start_name AND tt.end_station_name = end_name 
           OR tt.train_code = "*" OR (tt.train_code != train_code AND train_code LIKE tt.train_code)) 
                                          AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,transform_date)%tt.running_style)) > 0                       
                                          AND tt.sale_mode IN(sale_mode,'*')                                        
                                          AND (tt.seat_type_code = '*' OR LOCATE(tt.seat_type_code,seat_type_list_in) > 0)                          
                                          AND (tt.purpose_code   = '*' OR LOCATE(tt.purpose_code,tmp_purpose)%2  = 1)                          
                                          AND tt.cancel_office_no   = '%'
                                          AND tt.cancel_window_no   = 0;
                                       end if;
        
  
        
       
       
       
                                       select   tt.start_time,  tt.start_time 
            INTO tmp_start_time,tmp_start_time1 
            FROM ds60_zc_train_info_tt_stop_time_train tt
            WHERE  tt.train_no = train_no
                                        AND    tt.station_telecode = original_station_telecode limit 1;
                                       IF ROW_COUNT() = 0 then 
                                          SET tmp_start_time = '0000';
                                          SET tmp_start_time1 = '0000';
                                       end if;
                                    end if;
      
       
       
       

                                    IF purpose_mode_in = 2 AND start_bureau_code != original_bureau_code then  
                                       select   count(*) INTO rowcount FROM ds60_zc_tt_train_para_define tt
          WHERE  tt.inner_code = original_bureau_code;
                                       IF rowcount = 0 then 
         
          
         
         truncate table ds60_zc_tt_train_cache2;
         insert into ds60_zc_tt_train_cache2 select * from ds60_zc_tt_train_cache;
         
                                          INSERT INTO ds60_zc_tt_train_para_define
                                          SELECT a.inner_code, a.start_date, a.stop_date, a.train_code, 
           a.start_station_name, a.end_station_name, a.station_telecode, 
           a.train_type, a.seat_type_code, a.ticket_type, a.purpose_code, 
           a.`range`, a.control_day, a.control_train_day, a.ahead_time, 
           a.location_code, a.office_no, a.window_no, a.operater_no, 
           a.operater_time, a.flag1, a.flag2, a.group_code, a.level_flag, 
           a.from_period, a.control_min_date, a.train_class, a.demand_id, 
           a.flag3, a.flag4, a.flag5, a.flag6, a.flag7, a.flag8  
            FROM basic.DJ50_train_sale_define a
                                          WHERE a.inner_code  = original_bureau_code
                                          AND a.start_date   <= today
                                          AND a.stop_date    >= today
                                          AND a.flag1     IN(sale_mode,'*')              
                                          AND (a.purpose_code = '*' OR LOCATE(a.purpose_code,input_purposes)%2 = 1)  
                                          AND (a.seat_type_code = '*' OR LOCATE(a.seat_type_code,seat_type_list_in) > 0) 
                                          AND (a.train_code IN(SELECT tt.train_code FROM ds60_zc_tt_train_cache tt) OR a.train_code = '*' OR EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache2 t2 WHERE t2.train_code LIKE a.train_code))
                                          AND (is_student = 1 OR (is_student = 0 AND a.ticket_type  NOT IN(3,12)));
                                       end if;
                                    end if;
                                    delete FROM ds60_zc_tt_train_group;                                 
       
                                    insert into ds60_zc_tt_train_group                            
                                    select tt.group_code
                                    from basic.DJ52_train_group_define tt
                                    where tt.inner_code = original_bureau_code
                                    and tt.module_code = 'J'
                                    and tt.type_code = 'T'
                                    and tt.start_station_telecode = original_station_telecode;

    
                                    SET ls_purposes = tmp_purpose;
                                    SET purpose_cache = '';
    
   
    
    
   
                                    select   tt.purpose_code 
          INTO purpose_cache 
         FROM ds60_zc_train_info_tt_share tt
         WHERE tt.station_telecode = original_station_telecode 
          AND tt.transform_date = transform_date
          AND tt.seat_type_code = seat_type_code 
          AND tt.old_purposes = tmp_purpose limit 1;
                                    SET rowcount = ROW_COUNT();
                                    
                                    IF rowcount = 0  then 
     
                                       IF purpose_mode_in = 1 then 
                                          WHILE NOT (ls_purposes IS NULL OR ls_purposes = '') DO
                                             SET purpose_code = SUBSTRING(ls_purposes,1,2);
                                             SET ls_purposes = INSERT(ls_purposes,1,2,'');
      
                                             SET t_range = 0;
                                             SET range_in1 = 0;
                                             SET range_in2 = 1;
                                             SET range_in3 = 2;
                                             SET range_in4 = 3;
                                             SET range_in5 = 4;
                                             SET return_code = 0;
                                             SET t_seat_type_code = 'z';
                                             SET return_code = `@Train_Time_Proc`(transform_date,train_no,train_code,t_seat_type_code,t_range,purpose_code,
                                             '100000000000000000000000000000001000',range_in1,range_in2,range_in3,
                                             range_in4,range_in5,1,original_station_telecode,1,sale_mode);
                                             IF return_code = 0 then 
                                                SET purpose_code = '';
                                             end if;
                                             SET purpose_cache = CONCAT(rtrim(purpose_cache),purpose_code);
                                             if start_bureau_code = original_bureau_code then
           
                                   
      
      
      
                                                select   tt.ahead_time 
            INTO ahead_time 
            FROM ds60_zc_tt_cancel_limit_define tt 
            WHERE  tt.inner_code IN(start_bureau_code,original_station_telecode)  
             AND tt.start_date <= transform_date        
             AND  tt.stop_date  >= transform_date
             AND (tt.train_code = train_code 
              AND tt.start_station_name = start_name 
              AND tt.end_station_name = end_name 
              OR tt.train_code = "*" 
              OR (tt.train_code != train_code AND train_code LIKE tt.train_code)
              )  
             AND   tt.station_telecode IN(original_station_telecode,'*')
             AND   tt.train_type IN('*',train_type_code)                                       
                                                AND  tt.purpose_code   IN('*',purpose_code)                            
                                                AND  tt.sale_mode   IN('*',sale_mode)                            
                                                AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,transform_date)%tt.running_style)) > 0    
                                                ORDER BY tt.level_flag desc,tt.purpose_code desc,tt.train_code desc,tt.station_telecode desc, 
            tt.train_type desc,tt.sale_mode desc,tt.ahead_time desc LIMIT 1;
                                                SET rowcount = ROW_COUNT();
                                                
             IF rowcount > 0 then
           
                                                   IF ahead_time IS NULL then 
                                                      SET ahead_time = 0;
                                                   end if;
                                                   SET start_datetime = str_to_date(CONCAT(transform_date,tmp_start_time1) ,'%Y%m%d%H%i');
                                                   IF TIMESTAMPDIFF(MINUTE,CURRENT_TIMESTAMP,start_datetime) <= ahead_time then
            
                                                      SET cancel_purpose = CONCAT(cancel_purpose,purpose_code);
                                                   end if;
                                                end if;
                                             end if;
                                          END WHILE;
       
                                       ELSE 
      
                                          IF purpose_mode_in = 2 then 
                                             WHILE NOT (ls_purposes IS NULL OR ls_purposes = '') DO
                                                SET purpose_code = SUBSTRING(ls_purposes,1,2);
                                                SET ls_purposes = INSERT(ls_purposes,1,2,'');
        
      
                                                SET train_period = 0;   
         









               
           
           
           
           
                                                select   tt.control_day, 
             lpad(tt.ahead_time,4,'0'), 
             tt.control_train_day, tt.from_period, tt.control_min_date, tt.start_date 
            INTO max_day,tmp_start_time,stop_date,C_from_period,C_control_min_date,
             C_start_date 
            FROM ds60_zc_tt_train_para_define tt
            WHERE tt.inner_code= management_bureau
                                                AND tt.train_code= train_code AND tt.start_station_name = start_name AND tt.end_station_name = end_name
                                                AND (tt.station_telecode  in(original_station_telecode,'*')  and  tt.group_code = '*'         
                                                or                                                                                  
                                                tt.station_telecode = '*'  and tt.group_code in(select tt2.group_code from ds60_zc_tt_train_group tt2))   
                                                AND tt.train_type      IN(train_type_code,'*')
                                                AND tt.purpose_code   IN(purpose_code,'*')
                                                AND tt.flag1       IN(sale_mode,'*')   
                                                AND tt.flag2      = '1'    
                                                and tt.train_class   IN(train_class_code,'*')   
            ORDER BY tt.level_flag desc,tt.train_code desc,tt.station_telecode desc,tt.group_code desc,tt.ticket_type desc,tt.purpose_code desc,
                                                tt.`range` desc,tt.seat_type_code desc,tt.train_type desc,tt.train_class desc,tt.flag1 desc limit 1;
                                                SET rowcount = ROW_COUNT();
                                                
             IF rowcount = 0  then 
             
               select   tt.control_day, 
             lpad(tt.ahead_time,4,'0'), 
             tt.control_train_day, tt.from_period, tt.control_min_date, tt.start_date 
               INTO max_day,tmp_start_time,stop_date,C_from_period,
             C_control_min_date,C_start_date 
               FROM ds60_zc_tt_train_para_define tt 
               WHERE tt.inner_code   =  original_bureau_code    
                                                   AND (tt.station_telecode  in(original_station_telecode,'*')  and  tt.group_code = '*'             
                or                                                                                      
                tt.station_telecode = '*'  and tt.group_code in(select tt2.group_code from ds60_zc_tt_train_group tt2))       
                                                   AND tt.train_type      IN(train_type_code,'*')
                                                   AND (tt.train_code = train_code OR tt.train_code = '*' OR (tt.train_code != train_code AND train_code LIKE tt.train_code))
                                                   AND tt.purpose_code   IN(purpose_code,'*')
                                                   AND tt.flag1       IN(sale_mode,'*')   
                                                   AND tt.flag2     IN('*','')  
                                                   and tt.train_class   IN(train_class_code,'*')   
               ORDER BY tt.level_flag desc,tt.train_code desc,tt.station_telecode desc,tt.group_code desc,
             tt.ticket_type desc,tt.purpose_code desc,tt.`range` desc,tt.seat_type_code desc,tt.train_type desc,tt.train_class desc,tt.flag1 desc limit 1;
              
             
                                                   SET rowcount = ROW_COUNT();
                                                   
                                                end if;
                                                
            IF rowcount > 0  then 
                                                   SET date_after = TIMESTAMPDIFF(DAY,CURRENT_TIMESTAMP,board_train_date_in);
                                                   SET train_stop_sale = max_day;
                                                   IF date_after = max_day then 
                                                      SET tmp_start_datetime = str_to_date(CONCAT(CURRENT_date,tmp_start_time) ,'%Y-%m-%d%H%i');    
                                                      IF (TIMESTAMPDIFF(MINUTE,tmp_start_datetime,CURRENT_TIMESTAMP) < 0) then   
                                                         SET max_day = max_day -1;
                                                      end if;
                                                   end if;

      
                                                   
               SET now_datetime = CURRENT_TIMESTAMP;
                                                   SET tmp_start_datetime = str_to_date(CONCAT(CURRENT_date,tmp_start_time) ,'%Y-%m-%d%H%i');
                                                   if C_start_date = today and tmp_start_time <> "0000" then
           
                                                      IF TIMESTAMPDIFF(SECOND,tmp_start_datetime,now_datetime) < 0 and board_train_date_in > C_control_min_date then
                                                         SET max_day = TIMESTAMPDIFF(DAY,CURRENT_TIMESTAMP,C_control_min_date);
                                                      end if;
                                                      if date_after > max_day then
                                                         SET train_period = 1;
                                                      end if;
                                                   end if;
         
      
   

                                                   IF date_after > max_day then 
                                                      SET train_period = 1;
                                                   end if; 
                                                   IF board_train_date_in > stop_date then 
                                                      SET train_period = 1;
                                                   end if;
      
                                                   IF train_period = 1 then 
                                                      SET purpose_code = '';
                                                   end if;
                                                end if;
                                                SET purpose_cache = CONCAT(rtrim(purpose_cache),purpose_code);
                                                if start_bureau_code = original_bureau_code then
           
               
            
            
                                                   select   tt.ahead_time 
               INTO ahead_time 
               FROM ds60_zc_tt_cancel_limit_define tt
               WHERE tt.inner_code IN(start_bureau_code,original_station_telecode)  
                                                   AND tt.start_date <= transform_date        
                                                   AND  tt.stop_date  >= transform_date
                                                   AND (tt.train_code = train_code AND tt.start_station_name = start_name AND tt.end_station_name = end_name OR tt.train_code = "*" OR (tt.train_code != train_code AND train_code LIKE tt.train_code))  
                                                   AND   tt.station_telecode IN(original_station_telecode,'*')
                                                   AND   tt.train_type IN('*',train_type_code)                                       
                                                   AND  tt.purpose_code   IN('*',purpose_code)                            
                                                   AND  tt.sale_mode   IN('*',sale_mode)                            
                                                   AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,transform_date)%tt.running_style)) > 0   
             ORDER BY tt.level_flag desc,tt.purpose_code desc,tt.train_code desc,tt.station_telecode desc,
                                                   tt.train_type desc,tt.sale_mode desc,tt.ahead_time desc LIMIT 1;
                                                   SET rowcount = ROW_COUNT();
                                                   
               IF rowcount > 0  then
           
                                                      IF ahead_time IS NULL then 
                                                         SET ahead_time = 0;
                                                      end if;
                                                      SET start_datetime = str_to_date(CONCAT(transform_date,tmp_start_time1),'%Y%m%d%H%i');
                                                      IF TIMESTAMPDIFF(MINUTE,CURRENT_TIMESTAMP,start_datetime) <= ahead_time then
            
                                                         SET cancel_purpose = CONCAT(cancel_purpose,purpose_code);
                                                      end if;
                                                   end if;
                                                end if;
                                             END WHILE;
                                          end if;
                                       end if;
                                       IF purpose_cache = '' OR rtrim(purpose_cache) IS NULL then 
                                          SET train_period = 1;
                                       end if; 
                                       IF train_period = 1 then 
                                          LEAVE share_lable;
                                       end if;
                                    end if;
                                    IF auto_share = ':' then 
                                       SET to_station_no_limit = ':'; 
                                    ELSE 
                                       SET to_station_no_limit = end_station_in_no;
                                    end if;
                                    INSERT INTO ds60_zc_train_info_tt_share
        VALUES(original_station_telecode,transform_date,transform_no,fetch_w_seat,tmp_range
           ,tmp_start_coach_no,tmp_end_coach_no,schedule_coach,purpose_cache,seat_type_code,train_no,to_station_no_limit,tmp_purpose,w_seat_type
           ,cancel_seat_type,IFNULL(ltrim(rtrim(cancel_purpose)),'')  
            ,From_Range);
                                 end if;
         leave share_lable;
                              END loop share_lable;
                              
                              SET row = row+1;
                           END;
                        END WHILE;
                     end if;
                  end if;
                  SET t10 = t10+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP); 

   
                  IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_share) then 
                     BEGIN
                        SET d9 = CURRENT_TIMESTAMP;
                        SET seat_type_code = '';
    
   
                        IF my_center_code = 'AD' then  
      
      begin
       
       DECLARE cursor_get_left CURSOR  FOR 
       SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
          ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
         FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b            
         WHERE a.train_no    = train_no
         AND a.train_date   >= start_train_date
         AND a.train_date   <= board_train_date_in
         AND  a.train_date   = b.transform_date
         AND  a.train_no   = b.train_no
         AND a.assign_station = b.station_telecode
         AND a.station_no   = b.transform_no
         AND ((a.limit_station  >= end_station_in_no AND b.to_station_limit != ':'
         AND ((a.far_from_station_no <= end_station_in_no AND LOCATE(a.purpose_code,b.cancel_purpose_code)%2  = 0 ) 
          or (a.far_from_station_no <= '99' AND LOCATE(a.purpose_code,b.cancel_purpose_code)%2  = 1  )
         )
        )
        or (a.far_from_station_no = start_station_no AND b.to_station_limit = ':')
         
        )
         AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
             
         AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1 
              
         AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
         AND  a.coach_no != b.schedule_coach
             
         AND   (a.`range` <= b.`range` OR b.`range` = 255)
         and  a.`range` >= b.from_range 
         AND a.ticket_quantity > 0
         ORDER BY a.ticket_quantity DESC;                    
          
       set transaction isolation LEVEL READ UNCOMMITTED;
                         OPEN cursor_get_left;       
                         TRUNCATE TABLE ds60_zc_tt_ticket_left;
       set transaction isolation LEVEL READ COMMITTED;
                         SWL_Label15:
                         WHILE 1 = 1 DO
                            SET NO_DATA = 0;
                           
                         FETCH  cursor_get_left INTO 
        t_train_no,t_train_date,t_station_no,t_assign_station,t_far_from_station_no,
                         t_limit_station,t_coach_no,t_seat_type_code,t_purpose_code,t_range,
                         t_ticket_quantity,t_up_quantity,t_mid_quantity,t_down_quantity,t_wseat_type_code,
                         t_seat_feature,t_inner_code;
                                    
                            IF NO_DATA >= 1 then 
                               LEAVE SWL_Label15;
                            end if;
                            IF EXISTS(SELECT 1 FROM ds60_zc_tt_ticket_left tt
        WHERE tt.train_no = t_train_no 
         AND tt.train_date = t_train_date 
         AND tt.station_no = t_station_no 
         AND tt.assign_station = t_assign_station
                              AND tt.far_from_station_no = t_far_from_station_no 
         AND tt.limit_station = t_limit_station 
         AND tt.coach_no = t_coach_no 
         AND tt.seat_type_code = t_seat_type_code
                              AND tt.purpose_code = t_purpose_code 
         AND tt.`range` = t_range 
         AND tt.ticket_quantity = t_ticket_quantity 
         AND tt.up_quantity = t_up_quantity 
         AND tt.mid_quantity = t_mid_quantity
                              AND tt.down_quantity = t_down_quantity 
         AND tt.wseat_type_code = t_wseat_type_code 
         AND tt.seat_feature = t_seat_feature 
         AND tt.inner_code = t_inner_code) 
        then 
                               ITERATE SWL_Label15;
                            ELSE
                               IF network_mode = 1 OR TVM_Flag = 1 then  
                                  select   sum(tt.ticket_quantity) 
          INTO ticket_num 
          FROM ds60_zc_tt_ticket_left tt 
          WHERE tt.seat_type_code = t_seat_type_code;
                                  IF ticket_num >= ticket_limit then 
                                     ITERATE SWL_Label15;
                                  end if;
                               end if;

       
       
      
      
                               SET train_period_flag = 1; 
                               SET fetch_w_seat = 0;
                               SET return_code = 0;
                               SET row = LOCATE(CONCAT(',',t_seat_type_code),seat_type_cache); 
                               IF row = 0 then 
                                  IF notice_flag = '1' then 
          begin 
            declare tmp_purposes_in char(2);
            set call_return_value = null;
            if length(purposes_in)<=2 then
             set tmp_purposes_in=purposes_in;
            else
             set tmp_purposes_in=substring(purposes_in,1,2);
            end if;   
           SET center_notice = 'ds60_zc_tt_center_notice';
           call arith.DS60_Notice_Period(board_train_date_in,train_no,train_code,
           start_telecode,
           t_wseat_type_code,
           fetch_w_seat,tmp_purposes_in,t_range,sale_mode,
           center_notice,
           '',
           train_type_code,
           start_bureau_code,call_return_value);
           SET return_code =call_return_value;
          end;
         
        
                                     IF return_code = 0 then 
                                        SET train_period_flag = 0;
         
                                     ELSE 
                                        IF return_code = 1 then 
                                           SET train_period_flag = 0;
                                        ELSE 
          
                                           IF fetch_w_seat = 1 AND t_seat_type_code = 'W' then 
                                              SET train_period_flag = 0;
          
                                           ELSE 
                                              IF fetch_w_seat = 9 AND t_seat_type_code != 'W' then 
                                                 SET train_period_flag = 0;
                                              end if;
                                           end if;
                                        end if;
                                     end if;
                                  end if;
        
                                  SET seat_type_cache = CONCAT(rtrim(seat_type_cache),',',t_seat_type_code,CAST(train_period_flag AS CHAR(1)));
                               ELSE
                                  SET train_period_flag = cast(SUBSTRING(seat_type_cache,row+2,1) as SIGNED INTEGER);
                               end if;
                               INSERT INTO ds60_zc_tt_seat_info VALUES(board_train_date_in,train_no,t_seat_type_code,purposes_in,t_range,train_period_flag,0,to_station_no_limit,t_wseat_type_code,0);
      
                               SET tmp_seat_type_list = CONCAT(rtrim(tmp_seat_type_list),t_seat_type_code);
                               IF train_period_flag = 0 then 
                                  ITERATE SWL_Label15;
                               end if; 
      
                               IF t_ticket_quantity = 0 then 
                                  ITERATE SWL_Label15;
                               end if; 

 
                               INSERT INTO ds60_zc_tt_ticket_left VALUES(t_assign_station,t_train_no,t_train_date,t_station_no,t_far_from_station_no,t_limit_station,t_coach_no
        ,t_seat_type_code,t_purpose_code,t_range,t_ticket_quantity,t_up_quantity,t_mid_quantity,t_down_quantity,t_wseat_type_code,t_seat_feature,t_inner_code);
                            end if;
                         END WHILE;
                        
                            CLOSE cursor_get_left;
                     end;  
                           
                        ELSE  
       begin
    
    DECLARE cursor_get_left CURSOR  FOR 
    SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
       ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
       FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b           
       WHERE a.train_no    = train_no
       AND a.train_date   >= start_train_date
       AND a.train_date   <= board_train_date_in
       AND  a.train_date   = b.transform_date
       AND  a.train_no   = b.train_no
       AND a.assign_station = b.station_telecode
       AND a.station_no   = b.transform_no
       AND a.limit_station  >= end_station_in_no 
       AND a.far_from_station_no <= end_station_in_no
       AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
           
       AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1
       AND LOCATE(a.purpose_code,b.cancel_purpose_code)%2  = 0         
       AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
       AND  a.coach_no != b.schedule_coach
           
       AND   (a.`range` <= b.`range` OR b.`range` = 255)
       and  a.`range` >= b.from_range   
       AND a.ticket_quantity > 0
       AND b.to_station_limit != ':'                    
       UNION
       SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
           ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
       FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b           
       WHERE a.train_no    = train_no
       AND a.train_date   >= start_train_date
       AND a.train_date   <= board_train_date_in
       AND  a.train_date   = b.transform_date
       AND  a.train_no   = b.train_no
       AND a.assign_station = b.station_telecode
       AND a.station_no   = b.transform_no
       AND a.limit_station  >= end_station_in_no 
       AND a.far_from_station_no <= '99'                   
       AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
           
       AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1
       AND LOCATE(a.purpose_code,b.cancel_purpose_code)%2  = 1         
       AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
       AND  a.coach_no != b.schedule_coach
           
       AND   (a.`range` <= b.`range` OR b.`range` = 255)
       and  a.`range` >= b.from_range    
       AND a.ticket_quantity > 0
       AND b.to_station_limit != ':'                    
       UNION
       SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
           ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
       FROM center.left_base_center a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b           
       WHERE a.train_no    = train_no
       AND a.train_date   >= start_train_date
       AND a.train_date   <= board_train_date_in
       AND  a.train_date   = b.transform_date
       AND  a.train_no   = b.train_no
       AND a.assign_station = b.station_telecode
       AND a.station_no   = b.transform_no
       AND a.limit_station  >= end_station_in_no 
       AND a.far_from_station_no = start_station_no               
       AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
           
       AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1
           
       AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
       AND  a.coach_no != b.schedule_coach
           
       AND   (a.`range` <= b.`range` OR b.`range` = 255)
       and  a.`range` >= b.from_range 
       AND a.ticket_quantity > 0
       AND b.to_station_limit = ':'                    
       UNION
       SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
           ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
       FROM center.left_base_AD a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b             
       WHERE a.train_no    = train_no
       AND a.train_date   >= start_train_date
       AND a.train_date   <= board_train_date_in
       AND  a.train_date   = b.transform_date
       AND  a.train_no   = b.train_no
       AND a.assign_station = b.station_telecode
       AND a.station_no   = b.transform_no
       AND a.limit_station  >= end_station_in_no 
       AND a.far_from_station_no <= end_station_in_no 
       AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
           
       AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1
       AND LOCATE(a.purpose_code,b.cancel_purpose_code)%2  = 0         
       AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
       AND  a.coach_no != b.schedule_coach
           
       AND   (a.`range` <= b.`range` OR b.`range` = 255)
       and  a.`range` >= b.from_range 
       AND a.ticket_quantity > 0
       AND b.to_station_limit != ':'                    
       UNION
       SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
           ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
       FROM center.left_base_AD a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b             
       WHERE a.train_no    = train_no
       AND a.train_date   >= start_train_date
       AND a.train_date   <= board_train_date_in
       AND  a.train_date   = b.transform_date
       AND  a.train_no   = b.train_no
       AND a.assign_station = b.station_telecode
       AND a.station_no   = b.transform_no
       AND a.limit_station  >= end_station_in_no 
       AND a.far_from_station_no <= '99'                   
       AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
           
       AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1
       AND LOCATE(a.purpose_code,b.cancel_purpose_code)%2  = 1         
       AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
       AND  a.coach_no != b.schedule_coach
           
       AND   (a.`range` <= b.`range` OR b.`range` = 255)
       and  a.`range` >= b.from_range 
       AND a.ticket_quantity > 0
       AND b.to_station_limit != ':'                    
       UNION
       SELECT DISTINCT a.train_no,a.train_date,a.station_no,a.assign_station,a.far_from_station_no,a.limit_station,a.coach_no,a.seat_type_code,a.purpose_code
           ,a.`range`,a.ticket_quantity,a.up_quantity,a.mid_quantity,a.down_quantity,a.wseat_type_code,a.seat_feature,a.inner_code
       FROM center.left_base_AD a  FORCE INDEX(l_b_c_idx),ds60_zc_train_info_tt_share b             
       WHERE a.train_no    = train_no
       AND a.train_date   >= start_train_date
       AND a.train_date   <= board_train_date_in
       AND  a.train_date   = b.transform_date
       AND  a.train_no   = b.train_no
       AND a.assign_station = b.station_telecode
       AND a.station_no   = b.transform_no
       AND a.limit_station  >= end_station_in_no 
       AND a.far_from_station_no = start_station_no               
       AND LOCATE(a.seat_type_code,b.seat_type_code) > 0
           
       AND LOCATE(a.purpose_code,b.purpose_code)%2  = 1
           
       AND  a.coach_no >= b.start_coach_no AND a.coach_no <= b.end_coach_no
       AND  a.coach_no != b.schedule_coach
           
       AND   (a.`range` <= b.`range` OR b.`range` = 255)
       and  a.`range` >= b.from_range 
       AND a.ticket_quantity > 0
       AND b.to_station_limit = ':'                    
       ORDER BY ticket_quantity DESC;
       set transaction isolation LEVEL READ UNCOMMITTED;
                         OPEN cursor_get_left;
                        
                         TRUNCATE TABLE ds60_zc_tt_ticket_left;
       set transaction isolation LEVEL READ COMMITTED;
                         SWL_Label15:
                         WHILE 1 = 1 DO
                            SET NO_DATA = 0;
                           
                         FETCH  cursor_get_left INTO 
           t_train_no,t_train_date,t_station_no,t_assign_station,t_far_from_station_no,
                         t_limit_station,t_coach_no,t_seat_type_code,t_purpose_code,t_range,
                         t_ticket_quantity,t_up_quantity,t_mid_quantity,t_down_quantity,t_wseat_type_code,
                         t_seat_feature,t_inner_code;
                                    
                            IF NO_DATA >= 1 then 
                               LEAVE SWL_Label15;
                            end if;
                            IF EXISTS(SELECT 1 FROM ds60_zc_tt_ticket_left tt
        WHERE tt.train_no = t_train_no 
      AND tt.train_date = t_train_date 
      AND tt.station_no = t_station_no 
      AND tt.assign_station = t_assign_station
                              AND tt.far_from_station_no = t_far_from_station_no 
      AND tt.limit_station = t_limit_station 
      AND tt.coach_no = t_coach_no 
      AND tt.seat_type_code = t_seat_type_code
                              AND tt.purpose_code = t_purpose_code 
      AND tt.`range` = t_range 
      AND tt.ticket_quantity = t_ticket_quantity 
      AND tt.up_quantity = t_up_quantity 
      AND tt.mid_quantity = t_mid_quantity
                              AND tt.down_quantity = t_down_quantity 
      AND tt.wseat_type_code = t_wseat_type_code 
      AND tt.seat_feature = t_seat_feature 
      AND tt.inner_code = t_inner_code) 
       then 
                               ITERATE SWL_Label15;
                            ELSE
                               IF network_mode = 1 OR TVM_Flag = 1 then  
                                  select   sum(tt.ticket_quantity) 
      INTO ticket_num 
      FROM ds60_zc_tt_ticket_left tt
      WHERE tt.seat_type_code = t_seat_type_code;
                                  IF ticket_num >= ticket_limit then 
                                     ITERATE SWL_Label15;
                                  end if;
                               end if;

       
       
      
      
                               SET train_period_flag = 1; 
                               SET fetch_w_seat = 0;
                               SET return_code = 0;
                               SET row = LOCATE(CONCAT(',',t_seat_type_code),seat_type_cache); 
                               IF row = 0 then 
                                  IF notice_flag = '1' then 
          begin 
            declare tmp_purposes_in char(2);
            if length(purposes_in)<=2 then
             set tmp_purposes_in=purposes_in;
            else
             set tmp_purposes_in=substring(purposes_in,1,2);
            end if;
            set call_return_value = null;            
            SET center_notice = 'ds60_zc_tt_center_notice';
            call arith.DS60_Notice_Period(board_train_date_in,train_no,train_code,
            start_telecode,
            t_wseat_type_code,
            fetch_w_seat,tmp_purposes_in,t_range,sale_mode,
            center_notice,
            '',
            train_type_code,
            start_bureau_code,call_return_value);
            SET return_code =call_return_value;
          end;
          
        
                                     IF return_code = 0 then 
                                        SET train_period_flag = 0;
          
                                     ELSE 
                                        IF return_code = 1 then 
                                           SET train_period_flag = 0;
                                        ELSE 
          
                                           IF fetch_w_seat = 1 AND t_seat_type_code = 'W' then 
                                              SET train_period_flag = 0;
          
                                           ELSE 
                                              IF fetch_w_seat = 9 AND t_seat_type_code != 'W' then 
                                                 SET train_period_flag = 0;
                                              end if;
                                           end if;
                                        end if;
                                     end if;
                                  end if;
        
                                  SET seat_type_cache = CONCAT(rtrim(seat_type_cache),',',t_seat_type_code,CAST(train_period_flag AS CHAR(1)));
                               ELSE
                                  SET train_period_flag = cast(SUBSTRING(seat_type_cache,row+2,1) as SIGNED INTEGER);
                               end if;
                               INSERT INTO ds60_zc_tt_seat_info VALUES(board_train_date_in,train_no,t_seat_type_code,purposes_in,t_range,train_period_flag,0,to_station_no_limit,t_wseat_type_code,0);
      
                               SET tmp_seat_type_list = CONCAT(rtrim(tmp_seat_type_list),t_seat_type_code);
                               IF train_period_flag = 0 then 
                                  ITERATE SWL_Label15;
                               end if; 
      
                               IF t_ticket_quantity = 0 then 
                                  ITERATE SWL_Label15;
                               end if; 

 
                               INSERT INTO ds60_zc_tt_ticket_left VALUES(t_assign_station,t_train_no,t_train_date,t_station_no,t_far_from_station_no,t_limit_station,t_coach_no
        ,t_seat_type_code,t_purpose_code,t_range,t_ticket_quantity,t_up_quantity,t_mid_quantity,t_down_quantity,t_wseat_type_code,t_seat_feature,t_inner_code);
                            end if;
                         END WHILE;
                        
                            CLOSE cursor_get_left;
                     end;
     
                           
                        end if;



                       
    
    
                        SET t9 = t9+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP);

   
                        SET d9 = CURRENT_TIMESTAMP;
                        SET share_to_wseat = '0';
    
                        IF EXISTS(SELECT 1 FROM ds60_zc_tt_ticket_left tt WHERE tt.seat_type_code IN('1','B')) then 
      
                           set transaction ISOLATION LEVEL READ UNCOMMITTED; 
                           select   tt.reuse_flag 
         INTO share_to_wseat 
         FROM basic.DJ50_reuse_train_define tt 
         WHERE tt.start_date      <= start_train_date
                           AND tt.stop_date      >= start_train_date
                           AND tt.train_code      = train_code 
         AND tt.start_station_telecode = start_station_telecode 
         AND tt.end_station_telecode = end_station_in_telecode 
                           AND tt.seat_type_code     IN('1','B','*')
                           AND tt.running_rule &(power(2,TIMESTAMPDIFF(DAY,tt.start_date,start_train_date)%tt.running_style)) > 0   
       ORDER BY tt.seat_type_code desc,tt.start_date desc,tt.stop_date desc limit 1;
       
                             
       IF ROW_COUNT() = 0  then          
                              
                              select   tt.reuse_flag 
         INTO share_to_wseat 
         FROM basic.DJ60_reuse_para_define tt
         WHERE tt.start_date   <= start_train_date
                              AND tt.stop_date   >= start_train_date
                              AND (tt.start_train_code   = '*' OR (tt.start_train_code != '*' AND train_code BETWEEN tt.start_train_code AND tt.end_train_code))  
                              AND tt.special_flag   = train_type_code   
                              AND tt.seat_type_code  IN('1','B','*')   
        ORDER BY tt.seat_type_code,tt.start_train_code,tt.start_date,tt.stop_date;
                              
         IF ROW_COUNT() = 0  then 
                                 SET share_to_wseat = '0';
                              end if;
                           end if;
         set transaction ISOLATION LEVEL READ COMMITTED; 
                        end if;
      
    
                        SWL_Label16:
                        WHILE 1 = 1 DO
                           select   tt.train_date, tt.assign_station, tt.purpose_code, tt.seat_type_code, tt.wseat_type_code 
         INTO t_train_date,t_assign_station,t_purpose_code,t_seat_type_code,w_seat_type 
         FROM ds60_zc_tt_ticket_left tt 
         WHERE tt.inner_code != ''   
         ORDER BY tt.wseat_type_code LIMIT 1;
                           SET rowcount = ROW_COUNT();
                           
                           IF rowcount = 0 then 
                              LEAVE SWL_Label16;
                           end if;
                           SET seat_type_code = t_seat_type_code;
   
                           IF share_to_wseat = '1' AND t_seat_type_code IN('1','B') then 
                              select   tt.city_code 
          INTO city_code 
          FROM basic.station_divide_dictionary tt
          WHERE tt.station_telecode = t_assign_station  
                               AND tt.start_date     <= t_train_date
                               AND  tt.stop_date    >= t_train_date;
                              
         IF ROW_COUNT() != 0 then 
                                 select   tt.city_code 
         INTO city_code 
         FROM basic.station_divide_dictionary tt
         WHERE tt.station_telecode = start_telecode    
                                 AND tt.city_code   = city_code
                                 AND tt.start_date     <= t_train_date
                                 AND   tt.stop_date    >= t_train_date;
                                 
         IF ROW_COUNT() != 0  then 
                                    SET share_to_wseat = '0';
                                 end if;
                              end if;
    
                              IF share_to_wseat = '1' AND t_seat_type_code IN('1','B') then 
                                 SET seat_type_code = 'W';
                              end if;
                           end if;
                           UPDATE ds60_zc_tt_ticket_left tt SET tt.inner_code = '' 
                           WHERE tt.train_date = t_train_date AND tt.assign_station = t_assign_station 
       AND tt.purpose_code = t_purpose_code AND tt.wseat_type_code = w_seat_type
                           AND tt.seat_type_code = t_seat_type_code AND tt.inner_code != '';
                           SET ticket_num = 0;
                           select   sum(tt.ticket_quantity) 
         INTO ticket_num 
         FROM ds60_zc_tt_ticket_left tt
         WHERE tt.train_date = t_train_date 
         AND tt.assign_station = t_assign_station 
         AND tt.purpose_code = t_purpose_code
                           AND tt.wseat_type_code = w_seat_type 
       AND tt.seat_type_code = t_seat_type_code;
                           IF ticket_num IS NULL then 
                              SET ticket_num = 0;
                           end if;
                           IF seat_type_code = 'W' AND t_seat_type_code IN('1','B') then 
                              SET t_seat_type_code = 'W';
                           end if;

                           IF EXISTS(SELECT 1 FROM ds60_zc_tt_seat_type_info tt
       WHERE tt.train_date = board_train_date_in 
        AND tt.train_no = train_no 
        AND tt.wseat_type_code = w_seat_type 
        AND tt.seat_type_code = t_seat_type_code) 
         then 
                              
                              UPDATE ds60_zc_tt_seat_type_info tt SET tt.ticket_num = tt.ticket_num+ticket_num
                              WHERE tt.train_date  = board_train_date_in
                              AND tt.train_no  = train_no
                              AND tt.wseat_type_code = w_seat_type
                              AND tt.seat_type_code = t_seat_type_code;
                              SET rowcount = ROW_COUNT();
                              
                           ELSE
                              INSERT INTO ds60_zc_tt_seat_type_info VALUES(board_train_date_in,train_no,t_seat_type_code,w_seat_type,ticket_num,0);
                           end if;
                        END WHILE;
       if debug_in=9 then
         select '2002====';
         select * from ds60_zc_tt_seat_type_info;
      end if;
                        SET t12 = t12+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP);
                     END;
                  end if;
               end if; 
  
               SET d9 = CURRENT_TIMESTAMP;
               SET tmp_list = '';
  
               IF my_center_code = 'AD' then  
    begin
     
                   DECLARE cursor_get_left CURSOR  FOR 
       SELECT DISTINCT tt.seat_type_code,tt.wseat_type_code
        FROM center.left_base_center tt  FORCE INDEX(l_b_c_idx)
        WHERE  tt.train_no = train_no
        AND tt.train_date   >= start_train_date
        AND tt.train_date   <= board_train_date_in
        AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0
        AND LOCATE(tt.seat_type_code,tmp_seat_type_list) = 0  
        ORDER BY tt.seat_type_code;
      set transaction ISOLATION LEVEL READ UNCOMMITTED; 
     open cursor_get_left;
     set transaction ISOLATION LEVEL READ COMMITTED; 
                SWL_Label17:
                WHILE 1 = 1 DO
                   SET NO_DATA = 0;
                 
                   FETCH  cursor_get_left INTO t_seat_type_code,w_seat_type;
                             
                   IF NO_DATA >= 1 then 
                      LEAVE SWL_Label17;
                   end if;
    
                   SET train_period_flag = 1;
                   SET t_range = 0;
                   INSERT INTO ds60_zc_tt_seat_info VALUES(board_train_date_in,train_no,t_seat_type_code,purposes_in,t_range,train_period_flag,0,to_station_no_limit,w_seat_type,0);
                END WHILE;
               
                   CLOSE cursor_get_left;
               end;
               ELSE 
        begin
       
       DECLARE cursor_get_left CURSOR  FOR 
       SELECT DISTINCT tt.seat_type_code,tt.wseat_type_code
        FROM center.left_base_center tt  FORCE INDEX(l_b_c_idx)
        WHERE  tt.train_no = train_no
        AND tt.train_date   >= start_train_date
        AND tt.train_date   <= board_train_date_in
        AND LOCATE(tt.seat_type_code,seat_type_list_in) > 0
        AND LOCATE(tt.seat_type_code,tmp_seat_type_list) = 0  
     UNION
        
        SELECT DISTINCT tt2.seat_type_code,tt2.wseat_type_code
        FROM center.left_base_AD tt2  FORCE INDEX(l_b_c_idx)
        WHERE  tt2.train_no = train_no
        AND tt2.train_date   >= start_train_date
        AND tt2.train_date   <= board_train_date_in
        AND LOCATE(tt2.seat_type_code,seat_type_list_in) > 0
        AND LOCATE(tt2.seat_type_code,tmp_seat_type_list) = 0  
        ORDER BY seat_type_code;
         set transaction ISOLATION LEVEL READ UNCOMMITTED; 
        open cursor_get_left;
        set transaction ISOLATION LEVEL READ COMMITTED; 
                 SWL_Label17:
                 WHILE 1 = 1 DO
                    SET NO_DATA = 0;
                 
                    FETCH  cursor_get_left INTO t_seat_type_code,w_seat_type;
                             
                    IF NO_DATA >= 1 then 
                       LEAVE SWL_Label17;
                    end if;
     
                    SET train_period_flag = 1;
                    SET t_range = 0;
                    INSERT INTO ds60_zc_tt_seat_info VALUES(board_train_date_in,train_no,t_seat_type_code,purposes_in,t_range,train_period_flag,0,to_station_no_limit,w_seat_type,0);
                 END WHILE;
               
                    CLOSE cursor_get_left;
               end;
                  
               END IF;
        
  
               IF debug_in = 9 then 
                    select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.hhh44.üü»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';

       
      select ds60_zc_tt_seat_type_info.train_date, ds60_zc_tt_seat_type_info.train_no, ds60_zc_tt_seat_type_info.seat_type_code, 
      ds60_zc_tt_seat_type_info.wseat_type_code, ds60_zc_tt_seat_type_info.ticket_num, ds60_zc_tt_seat_type_info.flag 
      from ds60_zc_tt_seat_type_info;
               end if;
  
               IF sale_mode NOT IN('E','G') AND bureau_code != start_bureau_code then 
                  UPDATE ds60_zc_tt_seat_type_info tt SET tt.ticket_num = 0
                  WHERE tt.train_date   = board_train_date_in
                  AND tt.train_no   = train_no;
               end if;
               SET t11 = t11+TIMESTAMPDIFF(MICROSECOND,d9,CURRENT_TIMESTAMP); 
            END;
         END WHILE; 

         SET d6 = CURRENT_TIMESTAMP;
         SET t5 = TIMESTAMPDIFF(MICROSECOND,d5,d6);  
 
 
 if debug_in=9 then
  select '220====';
  select * from ds60_zc_tt_train_cache;
 end if;
      WHILE EXISTS(SELECT 1 FROM ds60_zc_tt_train_cache tt WHERE tt.flag = 2) DO
            select   tt.train_no INTO train_no 
   FROM ds60_zc_tt_train_cache tt
   WHERE tt.flag = 2   LIMIT 1;
     
            UPDATE ds60_zc_tt_train_cache tt SET tt.flag = 3 
   WHERE tt.train_no = train_no AND tt.flag = 2;
     
            select   tt.start_time, tt.board_train_code, tt.start_station_name, tt.train_code, 
      tt.start_telecode, tt.start_subbureau_code, tt.start_bureau_code, tt.start_station_no, 
   tt.arrive_time, tt.end_telecode, tt.end_subbureau_code, tt.end_bureau_code, tt.end_station_no, 
   tt.ticket_office, tt.location_code, tt.day_difference, tt.arrive_date, tt.train_class_code, 
   tt.seat_types, tt.start_station_name, tt.end_station_name, tt.info_list, tt.start_pycode, 
   tt.end_pycode, tt.start_date, tt.train_type, tt.seat_feature 
   INTO start_time,board_train_code,
    board_station_in,train_code,start_telecode,
             start_subbureau_code,start_bureau_code,start_station_no,
    arrive_time,end_telecode,end_subbureau_code,end_bureau_code,end_station_in_no,ticket_office,
             location_code,day_difference,arrive_train_date,train_class_code,
             seat_types,board_station_in,end_station_in,cache_info_list,start_pycode,
             end_pycode,start_train_date,train_type_code,seat_feature 
   FROM ds60_zc_train_info_tt_stop_time tt
   WHERE tt.board_train_date = board_train_date_in
             AND tt.train_no = train_no;
            SET ticket_num = 0;
            SET train_info_list = '';
            SET cache_info_list = '';
  
            WHILE flag_in != 1 AND EXISTS(SELECT 1 FROM ds60_zc_tt_seat_info tt WHERE tt.train_no = train_no) DO
               select   tt.seat_type_code, tt.wseat_type_code 
        INTO seat_type_code,w_seat_type 
        FROM ds60_zc_tt_seat_info tt 
        WHERE tt.train_date = board_train_date_in 
          AND tt.train_no = train_no   
        ORDER BY tt.seat_type_code LIMIT 1;
        
               DELETE FROM ds60_zc_tt_seat_info WHERE ds60_zc_tt_seat_info.train_date = board_train_date_in 
          AND ds60_zc_tt_seat_info.train_no = train_no 
   AND ds60_zc_tt_seat_info.seat_type_code = seat_type_code;
   

               if temp_flag in(12,13,14) and LOCATE('0X',temp_purposes)%2  = 1 then
                  SET init_train_period_flag = 0;
      begin 
       declare tmp_purposes_in char(2);
       if length(temp_purposes)<=2 then
        set tmp_purposes_in=temp_purposes;
       else
        set tmp_purposes_in=substring(temp_purposes,1,2);
       end if;
       set call_return_value = null;
        call arith.DS60_Notice_Period(board_train_date_in,train_no,train_code,
        start_telecode,
        seat_type_code,
          fetch_w_seat,tmp_purposes_in,t_range,sale_mode,
        '',
        'ds60_zc_tt_train_para_define',
        train_type_code,
       tart_bureau_code,call_return_value);
       SET return_code = call_return_value;
     end;
                  IF return_code = 1 then 
                     SET init_train_period_flag = 2;
                  end if;
               end if;

               SET ticket_price = 0;
               select   tt.ticket_num 
      INTO total 
      FROM ds60_zc_tt_seat_type_info tt
      WHERE tt.train_date = board_train_date_in 
      AND tt.train_no = train_no
               AND tt.seat_type_code = seat_type_code 
    AND tt.wseat_type_code = w_seat_type   LIMIT 1;  
               SET rowcount = ROW_COUNT();
              
      IF rowcount = 0  then 
                  SET total = 0;
               end if;
               IF debug_in = 9 then 
                    select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.hhh55.»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';
    
    
      
               end if;
  
               IF sale_mode IN('E','9','B','D') AND seat_type_code = 'W' then 
                  SET tmp_seat_type = w_seat_type;  
               ELSE 
                  SET tmp_seat_type = seat_type_code;
               end if;

 
               SET ticket_num = ticket_num+total;
               IF phone_reserve_flag = 1 then  
                  SET ticket_price = 0;
               ELSE
                  IF LOCATE(tmp_seat_type,bed_code_list) > 0 then 
                     SET Is_Bed = 1;
                  ELSE 
                     SET Is_Bed = 0;
                  end if;
                  IF LOCATE(tmp_seat_type,soft_code_list) > 0 then 
                     SET Is_soft = 1;
                  ELSE 
                     SET Is_soft = 0;
                  end if;
                  IF Is_Bed = 1 AND Is_soft = 0 then 
                     SET bed_level = '2';
                  ELSE 
                     IF Is_Bed = 1 AND Is_soft = 1 then 
                        SET bed_level = '1';
                     ELSE 
                        SET bed_level = '';
                     end if;
                  end if;
                  IF Is_Bed = 1 AND w_seat_type = '5' then 
                     SET bed_level = '1';
                  end if;
      if debug_in=9 then
     select '790====',train_seat_cache,cache_info_list,tmp_seat_type;
      end if;
                  IF train_seat_cache = 1 then 
                     BEGIN 
                        IF cache_info_list IS NULL then 
                           SET cache_info_list = '';
                        end if;
                        SWL_Label20:
                        WHILE SUBSTRING(cache_info_list,1,1) <> tmp_seat_type DO
                           IF ltrim(cache_info_list) IS NULL or ltrim(cache_info_list)='' then 
                              LEAVE SWL_Label20;
                           end if;
                           SET cache_info_list = INSERT(cache_info_list,1,10,'');
                        END WHILE;
                     END;
                  ELSE 
                     IF train_seat_cache = 0 then  
                        IF seat_type_code = 'W' then 
                           BEGIN 
                              SET cache_info_list = train_info_list;
                              SWL_Label21:
                              WHILE SUBSTRING(cache_info_list,1,1) <> tmp_seat_type DO
                                 IF ltrim(cache_info_list) IS NULL or ltrim(cache_info_list)='' then 
                                    LEAVE SWL_Label21;
                                 end if;
                                 SET cache_info_list = INSERT(cache_info_list,1,10,'');
                              END WHILE;
                           END;
                        end if;
                     end if;
                  end if;
                  SET ticket_price = 0;
                  IF SUBSTRING(cache_info_list,1,1) = tmp_seat_type then 
                     SET ticket_price = cast(SUBSTRING(cache_info_list,2,5) as SIGNED INTEGER);
                     IF ticket_price IS NULL then 
                        SET ticket_price = 0;
                     end if;
                  ELSE
                     SET relay_ticket_type = 9;
                     SET special_visa = 0;
                     SET ticket_type = 1;
                    
      if debug_in=9 then
      select 'ds60_zc_train_info:800===call  arith.DS60_total_price',0,
      board_train_date_in,
      train_no,
      start_station_no,
      end_station_in_no,
      tmp_seat_type,
      bed_level,
      ticket_type,
      seat_feature,
      special_visa,
      relay_ticket_type,
      ticket_price,
      0,
      call_return_value;
      end if;
      set call_return_value = null;
                     CALL arith.DS60_total_price(
      0,
      board_train_date_in,
      train_no,
      start_station_no,
      end_station_in_no,
      tmp_seat_type,
      bed_level,
      ticket_type,
      seat_feature,
      special_visa,
      relay_ticket_type,
      ticket_price,
      0,
      call_return_value);
      
     if debug_in=9 then 
      select 'ds60_zc_train_info:801=====end call DS60_total_price',ticket_price;
     end if;
                   
       IF ticket_price < 0 then 
                        SET ticket_price = 0;
                     end if;
                    
                  end if;
               end if;

   

               IF (TVM_Flag = 1 OR phone_reserve_flag = 1) AND seat_type_code = 'W' then
    
                  IF total < 3000 then 
                     SET total = 3000+total;
                  end if;
                  if init_train_period_flag = 2 then
                     SET total = 9999;
                  end if;  
                             
                  SET train_info_list = CONCAT(rtrim(train_info_list),tmp_seat_type,lpad(ticket_price,5,'0'),lpad(total,4,'0'));
               ELSE
                  if init_train_period_flag = 2 then
                     SET total = 9999;
                  end if;   
                  SET train_info_list = CONCAT(rtrim(train_info_list),seat_type_code,lpad(ticket_price,5,'0'),lpad(total,4,'0'));
               end if;
            END WHILE;
            IF train_info_list IS NULL then 
               SET train_info_list = "";
            end if;

 
   if debug_in=9 then 
    select '299===',cache_flag,12306_flag;
   end if;
            IF cache_flag = 1 AND 12306_flag = 0 then  
    if debug_in=9 then
    select 'ds60_zc_train_info:301===CALL arith.DS60_Proc_Seat_Cache',board_train_date_in,
     train_no,
     start_telecode,
     end_telecode,
     purposes_in,
     seat_type_list_in,
     fetch_range,
     train_info_list,
     tbs_info,
     cache_info_list,
     train_seat_cache, 
     12306_flag,
     delete_flag,
     my_modify_time,
     board_station_in,
     start_station_no,
     end_station_in,
     end_station_in_no,
     cache_flag,
     inner_code_in,
     To_Range;
    end if;
               CALL arith.DS60_Proc_Seat_Cache(
     board_train_date_in,
     train_no,
     start_telecode,
     end_telecode,
     purposes_in,
     seat_type_list_in,
     fetch_range,
     train_info_list,
     tbs_info,
     cache_info_list,
     train_seat_cache, 
     12306_flag,
     delete_flag,
     my_modify_time,
     board_station_in,
     start_station_no,
     end_station_in,
     end_station_in_no,
     cache_flag,
     inner_code_in,
     To_Range);
            end if;
    if debug_in=9 then
    select 'ds60_zc_train_info:302===end CALL arith.DS60_Proc_Seat_Cache',board_train_date_in,
     train_no,
     start_telecode,
     end_telecode,
     purposes_in,
     seat_type_list_in,
     fetch_range,
     train_info_list,
     tbs_info,
     cache_info_list,
     train_seat_cache, 
     12306_flag,
     delete_flag,
     my_modify_time,
     board_station_in,
     start_station_no,
     end_station_in,
     end_station_in_no,
     cache_flag,
     inner_code_in,
     To_Range;
    end if;
            IF ticket_num >= num_limit then 
               SET default_flag = 1;
            ELSE 
               SET default_flag = 0;
            end if;

  
   if debug_in=9 then
    select '303====',train_info_list;
   end if;
            UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.info_list = train_info_list,ds60_zc_train_info_tt_stop_time.default_flag = default_flag
            WHERE ds60_zc_train_info_tt_stop_time.train_no = train_no;
         END WHILE;

         SET d7 = CURRENT_TIMESTAMP;
         SET t6 = TIMESTAMPDIFF(MICROSECOND,d6,d7); 

 
         IF debug_in = 9 then 
              select  '-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- DBG.90.»º´æÐ´Èë.-- -- -- -- -- -- -- -- -- -- -- -- -- -- ';
   
            
            
   
            
            
         end if;

 

         IF out_in != 3 AND train_seat_cache = 0 AND (TVM_Flag = 1 OR flag_in = 0) then  
            IF EXISTS(SELECT 1 FROM center.DS60_stop_time_cache tt
            WHERE tt.train_date    = board_train_date_in
            AND tt.start_tele_list = old_start_telecode
            AND tt.end_tele_list  = old_end_telecode
            AND   tt.inner_code   = inner_code_in
            AND   tt.range = To_Range
            AND   tt.purposes    = input_purposes
            AND   tt.seat_type_list  = seat_type_list_in) then
  
   
               DELETE FROM center.DS60_stop_time_cache
               WHERE DS60_stop_time_cache.train_date    = board_train_date_in
               AND DS60_stop_time_cache.start_tele_list = old_start_telecode
               AND DS60_stop_time_cache.end_tele_list  = old_end_telecode
               AND   DS60_stop_time_cache.inner_code   = inner_code_in
               AND   DS60_stop_time_cache.range     = To_Range
               AND   DS60_stop_time_cache.purposes    = input_purposes
               AND   DS60_stop_time_cache.seat_type_list  = seat_type_list_in;
            end if;
 
  if debug_in=9 then
  select * from ds60_zc_train_info_tt_stop_time tt  ;
  end if;
            INSERT INTO center.DS60_stop_time_cache
            SELECT tt.board_train_date,tt.train_code,tt.start_station_name,tt.end_station_name,tt.train_class_code,
      tt.seat_types,tt.start_time,tt.arrive_time,tt.train_no,tt.start_station_no,tt.end_station_no,
   tt.board_train_code,tt.start_telecode,tt.start_bureau_code,tt.start_subbureau_code,tt.end_telecode,
   tt.end_bureau_code,tt.end_subbureau_code,tt.ticket_office,tt.location_code,tt.day_difference,
   tt.arrive_date,tt.info_list,tt.cache_time,
   old_start_telecode,
   old_end_telecode,
   tt.start_pycode,
   tt.end_pycode,tt.seat_feature,
   input_purposes,
   seat_type_list_in,
   To_Range,
   inner_code_in,
   tt.control_day,tt.sale_time,tt.control_train_day
            FROM ds60_zc_train_info_tt_stop_time tt;
         end if; 
   if debug_in=9 then
   select '300====';
  end if;
  
  begin 
   declare tmp_train_info_list VARCHAR(255);
   declare tmp_tbs_info VARCHAR(255);
   declare tmp_cache_info_list VARCHAR(255);
    set tmp_train_info_list='';
    set tmp_tbs_info='';
    set tmp_cache_info_list='';
    
         CALL arith.DS60_Proc_Seat_Cache(
   board_train_date_in,
   inner_code_in,
   old_start_telecode,
   old_end_telecode,
   input_purposes,
   seat_type_list_in,
   To_Range,
   tmp_train_info_list,
   tmp_tbs_info,
   tmp_cache_info_list,
   train_seat_cache,
   12306_flag,
   delete_flag,
   train_modify_time,
   '',
   '',
   '',
   '',0,'',4);
  end;
 
 
         SET d8 = CURRENT_TIMESTAMP;
         SET t7 = TIMESTAMPDIFF(MICROSECOND,d7,d8);
      END;
   end if;


   IF sale_flag = 1 then 
      UPDATE ds60_zc_train_info_tt_stop_time SET ds60_zc_train_info_tt_stop_time.train_class_code = ds60_zc_train_info_tt_stop_time.seat_feature;
   end if;
 
   SET d11 = CURRENT_TIMESTAMP;
   SET t0 = TIMESTAMPDIFF(MICROSECOND,d1,d11); 
   OK_return:loop 
   IF out_in = 2 then 
  leave OK_return;
 end if;
 NEXT_FETCH: LOOP
      SET train_brand = '%';
      IF network_mode = 0 then  
         IF LENGTH(train_brand_list) > 0 then 
            SET train_brand = SUBSTRING(train_brand_list,1,1);
            SET SWV_train_brand_list_Str = SUBSTRING(train_brand_list,2,LENGTH(train_brand_list));
            SET train_brand_list = SWV_train_brand_list_Str;
         end if;
      end if;
   
   
     
   IF original_default_num > 0 then 
         SET SQL_SELECT_LIMIT = original_default_num;
      
   
    IF phone_reserve_flag = 1 OR network_mode = 1 then  
    IF network_mode = 1 then 
    IF train_brand_list IS NULL then 
       SET SQL2 = CONCAT('INSERT INTO ',kind_in,' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code',
      ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code',
       ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date',
       ',info_list,control_day,sale_time,control_train_day  FROM ds60_zc_train_info_tt_stop_time WHERE board_train_code LIKE "', station_train_code_in,'" AND info_list != "" AND ((',network_mode1,' = 1 AND default_flag = 1) OR (',network_mode1,' = 0)) limit ',SQL_SELECT_LIMIT);
    ELSE
       SET SQL2 = CONCAT('INSERT INTO ',kind_in,' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code',
      ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code',
       ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date',
       ',info_list,control_day,sale_time,control_train_day FROM ds60_zc_train_info_tt_stop_time WHERE charindex(substring(board_train_code,1,1),"',train_brand_list,'") > 0 AND info_list != "" AND ((',network_mode1,' = 1 AND default_flag = 1) OR (',network_mode1,' = 0)) limit ',SQL_SELECT_LIMIT);
    end if;
    ELSE
    
    SET SQL2 = CONCAT('INSERT INTO ',kind_in,' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code',
   ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code',
    ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date',
    ',info_list FROM ds60_zc_train_info_tt_stop_time ',
   ' WHERE board_train_code LIKE "',station_train_code_in,'" limit ',SQL_SELECT_LIMIT);
    end if;
    SET @ds60_zc_train_info_stmt_sql = SQL2;
    PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
    EXECUTE ds60_zc_train_info_stmt;
    SET rowcount = ROW_COUNT();
    DEALLOCATE PREPARE ds60_zc_train_info_stmt;
    if debug_in=9 then
    select '250=====',SQL2;
    select * from ds60_zc_train_info_tt_stop_time;
    end if;
    set @ds60_zc_train_info_stmt_sql=null;
    
    
    ELSE 
    IF cache_flag = 1 OR original_default_num = -1 then 
    IF train_brand = '%' then 
   
       
       SELECT  tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode, tt.train_class_code,
     tt.seat_types, tt.start_time, tt.arrive_time, tt.train_no,tt.start_station_no,
     tt.end_station_no,tt.board_train_code,tt.start_telecode,tt.start_bureau_code,
     tt.start_subbureau_code,tt.end_telecode,tt.end_bureau_code,tt.end_subbureau_code,
     tt.ticket_office,tt.location_code,tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.board_train_code LIKE station_train_code_in
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
        (train_default = 0)) 
    ORDER BY tt.start_time limit SQL_SELECT_LIMIT;
    
       SET rowcount = found_rows();
      
   
    ELSE
       SET train_brand = CONCAT(train_brand,'%');
       IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time tt
        WHERE tt.board_train_code LIKE station_train_code_in
        AND tt.board_train_code LIKE train_brand
        AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode)
       OR
         (train_default = 0))) 
     then
   
   
      
       SELECT  tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode,tt.train_class_code,tt.seat_types,
      tt.start_time,tt.arrive_time,tt.train_no,tt.start_station_no,tt.end_station_no,tt.board_train_code,
      tt.start_telecode,tt.start_bureau_code,tt.start_subbureau_code, 
      tt.end_telecode,tt.end_bureau_code,tt.end_subbureau_code,tt.ticket_office,tt.location_code, 
      tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.board_train_code LIKE station_train_code_in
       AND tt.board_train_code LIKE train_brand
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode= old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
         (train_default = 0))
       ORDER BY tt.start_time limit SQL_SELECT_LIMIT;
       SET rowcount = found_rows();
       
   
       ELSE 
       SET rowcount = 0;
       end if;
    end if;
    ELSE
    IF train_brand = '%' then 
    
       
       SELECT tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode,tt.train_class_code,
     tt.seat_types,tt.start_time,
     tt.arrive_time,tt.train_no,tt.start_station_no,tt.end_station_no,tt.board_train_code,
     tt.start_telecode,tt.start_bureau_code,tt.start_subbureau_code,tt.end_telecode,tt.end_bureau_code,
     tt.end_subbureau_code,tt.ticket_office,tt.location_code,tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.board_train_code LIKE station_train_code_in
       AND ( (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR (train_default = 0))
 
 
       ORDER BY tt.start_time limit SQL_SELECT_LIMIT;
       SET rowcount = found_rows();
       
   
    ELSE
       SET train_brand = CONCAT(train_brand,'%');
       IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.default_flag = 1
       AND tt.board_train_code LIKE station_train_code_in
 
 
 
 
 
 
 
 
       AND tt.board_train_code LIKE train_brand
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode= old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
        (train_default = 0))) then
   
     
       
       SELECT tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode,
      tt.train_class_code,tt.seat_types,tt.start_time, tt.arrive_time,tt.train_no,
      tt.start_station_no,tt.end_station_no,tt.board_train_code,tt.start_telecode,
      tt.start_bureau_code,tt.start_subbureau_code,tt.end_telecode,
      tt.end_bureau_code,tt.end_subbureau_code,tt.ticket_office,tt.location_code, 
      tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.default_flag = 1
       AND tt.board_train_code LIKE station_train_code_in
 
 
 
 
 
 
 
 
       AND tt.board_train_code LIKE train_brand
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
         (train_default = 0))
       ORDER BY tt.start_time limit SQL_SELECT_LIMIT;
       SET rowcount = found_rows();
      
   
       ELSE 
       SET rowcount = 0;
       end if;
    end if;
    end if;
    end if;
  else 
    IF phone_reserve_flag = 1 OR network_mode = 1 then  
    IF network_mode = 1 then 
    IF train_brand_list IS NULL then 
       SET SQL2 = CONCAT('INSERT INTO ',kind_in,' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code',
      ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code',
       ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date',
       ',info_list,control_day,sale_time,control_train_day  FROM ds60_zc_train_info_tt_stop_time WHERE board_train_code LIKE "', station_train_code_in,'" AND info_list != "" AND ((',network_mode1,' = 1 AND default_flag = 1) OR (',network_mode1,' = 0))');
    ELSE
       SET SQL2 = CONCAT('INSERT INTO ',kind_in,' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code',
      ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code',
       ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date',
       ',info_list,control_day,sale_time,control_train_day FROM ds60_zc_train_info_tt_stop_time WHERE charindex(substring(board_train_code,1,1),"',train_brand_list,'") > 0 AND info_list != "" AND ((',network_mode1,' = 1 AND default_flag = 1) OR (',network_mode1,' = 0))');
    end if;
    ELSE
    
    SET SQL2 = CONCAT('INSERT INTO ',kind_in,' SELECT start_station_name,start_pycode,end_station_name,end_pycode,train_class_code',
   ',seat_types,start_time,arrive_time,train_no,start_station_no,end_station_no,board_train_code,start_telecode,start_bureau_code',
    ',start_subbureau_code,end_telecode,end_bureau_code,end_subbureau_code,ticket_office,location_code,day_difference,arrive_date',
    ',info_list FROM ds60_zc_train_info_tt_stop_time ',
   ' WHERE board_train_code LIKE "',station_train_code_in,'"');
    end if;
    SET @ds60_zc_train_info_stmt_sql = SQL2;
    PREPARE ds60_zc_train_info_stmt FROM @ds60_zc_train_info_stmt_sql;
    EXECUTE ds60_zc_train_info_stmt;
    SET rowcount = ROW_COUNT();
    DEALLOCATE PREPARE ds60_zc_train_info_stmt;
    if debug_in=9 then
    select '250=====',SQL2;
    select * from ds60_zc_train_info_tt_stop_time;
    end if;
    set @ds60_zc_train_info_stmt_sql=null;
    
    
    ELSE 
    IF cache_flag = 1 OR original_default_num = -1 then 
    IF train_brand = '%' then 
   
       
       SELECT  tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode, tt.train_class_code,
     tt.seat_types, tt.start_time, tt.arrive_time, tt.train_no,tt.start_station_no,
     tt.end_station_no,tt.board_train_code,tt.start_telecode,tt.start_bureau_code,
     tt.start_subbureau_code,tt.end_telecode,tt.end_bureau_code,tt.end_subbureau_code,
     tt.ticket_office,tt.location_code,tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.board_train_code LIKE station_train_code_in
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
        (train_default = 0)) 
    ORDER BY tt.start_time;
    
       SET rowcount = found_rows();
      
   
    ELSE
       SET train_brand = CONCAT(train_brand,'%');
       IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time tt
        WHERE tt.board_train_code LIKE station_train_code_in
        AND tt.board_train_code LIKE train_brand
        AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode)
       OR
         (train_default = 0))) 
     then
   
   
      
       SELECT  tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode,tt.train_class_code,tt.seat_types,
      tt.start_time,tt.arrive_time,tt.train_no,tt.start_station_no,tt.end_station_no,tt.board_train_code,
      tt.start_telecode,tt.start_bureau_code,tt.start_subbureau_code, 
      tt.end_telecode,tt.end_bureau_code,tt.end_subbureau_code,tt.ticket_office,tt.location_code, 
      tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.board_train_code LIKE station_train_code_in
       AND tt.board_train_code LIKE train_brand
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode= old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
         (train_default = 0))
       ORDER BY tt.start_time;
       SET rowcount = found_rows();
       
   
       ELSE 
       SET rowcount = 0;
       end if;
    end if;
    ELSE
    IF train_brand = '%' then 
    
       
       SELECT tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode,tt.train_class_code,
     tt.seat_types,tt.start_time,
     tt.arrive_time,tt.train_no,tt.start_station_no,tt.end_station_no,tt.board_train_code,
     tt.start_telecode,tt.start_bureau_code,tt.start_subbureau_code,tt.end_telecode,tt.end_bureau_code,
     tt.end_subbureau_code,tt.ticket_office,tt.location_code,tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.board_train_code LIKE station_train_code_in
       AND ( (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR (train_default = 0))
 
 
       ORDER BY tt.start_time;
       SET rowcount = found_rows();
       
   
    ELSE
       SET train_brand = CONCAT(train_brand,'%');
       IF EXISTS(SELECT 1 FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.default_flag = 1
       AND tt.board_train_code LIKE station_train_code_in
 
 
 
 
 
 
 
 
       AND tt.board_train_code LIKE train_brand
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode= old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
        (train_default = 0))) then
   
     
       
       SELECT tt.start_station_name,tt.start_pycode,tt.end_station_name,tt.end_pycode,
      tt.train_class_code,tt.seat_types,tt.start_time, tt.arrive_time,tt.train_no,
      tt.start_station_no,tt.end_station_no,tt.board_train_code,tt.start_telecode,
      tt.start_bureau_code,tt.start_subbureau_code,tt.end_telecode,
      tt.end_bureau_code,tt.end_subbureau_code,tt.ticket_office,tt.location_code, 
      tt.day_difference,tt.arrive_date,tt.info_list
       FROM ds60_zc_train_info_tt_stop_time tt
       WHERE tt.default_flag = 1
       AND tt.board_train_code LIKE station_train_code_in
 
 
 
 
 
 
 
 
       AND tt.board_train_code LIKE train_brand
       AND (  (train_default = 1 AND tt.start_telecode = old_start_telecode AND  tt.end_telecode = old_end_telecode AND (GS_MODE = 1 OR tt.info_list <> ''))
       OR
         (train_default = 0))
       ORDER BY tt.start_time;
       SET rowcount = found_rows();
      
   
       ELSE 
       SET rowcount = 0;
       end if;
    end if;
    end if;
    end if;
   end if;
      IF network_mode = 0 then  
         IF rowcount = 0 then 
            IF LENGTH(train_brand_list) > 0 then 
               ITERATE NEXT_FETCH;
            end if;
         end if;
      end if;
      LEAVE NEXT_FETCH;
 END LOOP NEXT_FETCH;

   
                
   
   leave OK_return;
 end loop OK_return;

















   IF out_in <> 0 then 
      SET SQL2 = CONCAT('total time=',rtrim(CAST(t0 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',PreData=',rtrim(CAST(t1 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchTrain=',rtrim(CAST(t2 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',BatchDeal=',rtrim(CAST(t3 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',NoticePeriod=',rtrim(CAST(t4 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchLeftTicket=',rtrim(CAST(t5 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',(FetchYFTicket=',rtrim(CAST(t8 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',CALShare=',rtrim(CAST(t10 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchGYTicket=',rtrim(CAST(t9 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchST=',rtrim(CAST(t11 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',GYAndOTJH=',rtrim(CAST(t12 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),'),CALTrainList=',rtrim(CAST(t6 AS CHAR(30))),'ms');
      
   end if;

   IF exists(select 1 from information_schema.tables where table_name = 'DS50_Train_Info_Statist' and TABLE_SCHEMA='center')  then
      INSERT INTO center.DS50_Train_Info_Statist VALUES(temp_board_station, temp_end_station, temp_board_train_date, temp_directions, temp_telecode_list, temp_station_train_code, temp_purposes, temp_inner_code, temp_range
  , temp_flag, temp_seat_type_list,  temp_out, temp_kind,  CURRENT_TIMESTAMP
  ,rtrim(CAST(t0 AS CHAR(30)))  
    ,rtrim(CAST(t1 AS CHAR(30)))   
    ,rtrim(CAST(t2 AS CHAR(30)))   
    ,rtrim(CAST(t3 AS CHAR(30)))    
    ,rtrim(CAST(t4 AS CHAR(30)))    
  ,rowcount        
      ,t5          
    ,t6          
      ,t7          
      ,t8          
      ,t9          
 );
   end if;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;
           
   leave null_return;
   end loop null_return;
   IF out_in = 2 then 















   IF out_in <> 0 then 
      SET SQL2 = CONCAT('total time=',rtrim(CAST(t0 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',PreData=',rtrim(CAST(t1 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchTrain=',rtrim(CAST(t2 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',BatchDeal=',rtrim(CAST(t3 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',NoticePeriod=',rtrim(CAST(t4 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchLeftTicket=',rtrim(CAST(t5 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',(FetchYFTicket=',rtrim(CAST(t8 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',CALShare=',rtrim(CAST(t10 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchGYTicket=',rtrim(CAST(t9 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchST=',rtrim(CAST(t11 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',GYAndOTJH=',rtrim(CAST(t12 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),'),CALTrainList=',rtrim(CAST(t6 AS CHAR(30))),'ms');
      
   end if;

   IF exists(select 1 from information_schema.tables where table_name = 'DS50_Train_Info_Statist' and TABLE_SCHEMA='center')  then
      INSERT INTO center.DS50_Train_Info_Statist VALUES(temp_board_station, temp_end_station, temp_board_train_date, temp_directions, temp_telecode_list, temp_station_train_code, temp_purposes, temp_inner_code, temp_range
  , temp_flag, temp_seat_type_list,  temp_out, temp_kind,  CURRENT_TIMESTAMP
  ,rtrim(CAST(t0 AS CHAR(30)))  
    ,rtrim(CAST(t1 AS CHAR(30)))   
    ,rtrim(CAST(t2 AS CHAR(30)))   
    ,rtrim(CAST(t3 AS CHAR(30)))    
    ,rtrim(CAST(t4 AS CHAR(30)))    
  ,rowcount        
      ,t5          
    ,t6          
      ,t7          
      ,t8          
      ,t9          
 );
   end if;



      SET SWP_Ret_Value = 0;
      LEAVE SWL_return;
   end if;
   IF phone_reserve_flag = 1 then 
















   IF out_in <> 0 then 
      SET SQL2 = CONCAT('total time=',rtrim(CAST(t0 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',PreData=',rtrim(CAST(t1 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchTrain=',rtrim(CAST(t2 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',BatchDeal=',rtrim(CAST(t3 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',NoticePeriod=',rtrim(CAST(t4 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchLeftTicket=',rtrim(CAST(t5 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',(FetchYFTicket=',rtrim(CAST(t8 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',CALShare=',rtrim(CAST(t10 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchGYTicket=',rtrim(CAST(t9 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',FetchST=',rtrim(CAST(t11 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),',GYAndOTJH=',rtrim(CAST(t12 AS CHAR(30))),'ms');
      SET SQL2 = CONCAT(rtrim(SQL2),'),CALTrainList=',rtrim(CAST(t6 AS CHAR(30))),'ms');
      
   end if;

   IF exists(select 1 from information_schema.tables where table_name = 'DS50_Train_Info_Statist' and TABLE_SCHEMA='center')  then
      INSERT INTO center.DS50_Train_Info_Statist VALUES(temp_board_station, temp_end_station, temp_board_train_date, temp_directions, temp_telecode_list, temp_station_train_code, temp_purposes, temp_inner_code, temp_range
  , temp_flag, temp_seat_type_list,  temp_out, temp_kind,  CURRENT_TIMESTAMP
  ,rtrim(CAST(t0 AS CHAR(30)))  
    ,rtrim(CAST(t1 AS CHAR(30)))   
    ,rtrim(CAST(t2 AS CHAR(30)))   
    ,rtrim(CAST(t3 AS CHAR(30)))    
    ,rtrim(CAST(t4 AS CHAR(30)))    
  ,rowcount        
      ,t5          
    ,t6          
      ,t7          
      ,t8          
      ,t9          
 );
   end if;

   SET SWP_Ret_Value = 0;
   LEAVE SWL_return;

   end if; 

   SELECT tt.start_station_name, tt.end_station_name, tt.train_class_code, tt.seat_types, tt.start_time, 
    tt.arrive_time, tt.train_no, tt.start_station_no, tt.end_station_no, tt.board_train_code, 
 tt.start_telecode, tt.start_bureau_code, tt.start_subbureau_code, tt.end_telecode, 
 tt.end_bureau_code, tt.end_subbureau_code, tt.ticket_office, tt.location_code, tt.day_difference, 
 tt.arrive_date, tt.info_list, tt.default_flag
   FROM ds60_zc_train_info_tt_stop_time tt
   WHERE 1 = 2;
   SET SWP_Ret_Value = 0;
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `locktest`()
BEGIN
 
  declare tt int;
 declare tt_tmp int;
 declare start_time datetime;
 declare end_time datetime;
 set tt =15;
 set start_time=now();
 
 stop_lab:
 while 1=1 do
  set end_time = now();
  set tt_tmp = timestampdiff(second,start_time,end_time);
  update test.abc set col2='abc2' where col1=1;
  if tt<tt_tmp then
   leave stop_lab;
  end if;
 end while stop_lab;
 
 
 
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `loopprocesslist`()
BEGIN
 
 declare sql_id int;
 declare aa int;
 declare loop_aa int default 0;
 declare info_count int;
 -- declare tt_tmp int;
 
 declare start_time datetime;
 declare end_time datetime;
 declare offon int default 0; 
 
 declare tmp_id int;
 declare tmp_user varchar(16);
 declare tmp_host varchar(64);
 declare tmp_db varchar(64);
 declare tmp_command varchar(16);
 declare tmp_state varchar(64);
 declare tmp_info varchar(2000);
 declare tmp_time int;
 
 
 declare tmp_info_length int;
 declare exe_time int; 
 declare done int DEFAULT false;
 declare cur cursor for select id,`user`,`host`,db,command,time,state,info 
  from information_schema.processlist  where command != 'Sleep'; 
  
 declare continue HANDLER for not found set done=true;
 
 -- set tmp_info_length=50;
 -- set exe_time = 120;
 
 -- set start_time=now();
 
 
 create  table if not exists sql_statistics(
   `ID` bigint(21) unsigned NOT NULL DEFAULT '0',
  `USER` varchar(16) NOT NULL DEFAULT '',
  `HOST` varchar(64) NOT NULL DEFAULT '',
  `DB` varchar(64) DEFAULT NULL,
  `COMMAND` varchar(16) NOT NULL DEFAULT '',
  `TIME` int(7) NOT NULL DEFAULT '0',
  `STATE` varchar(64) DEFAULT NULL,
  `INFO` varchar(2000),
  count int
 );

select 'start loop==========';

 stop_lab:
 while 1=1 do
  
  -- set tt_tmp = timestampdiff(second,start_time,end_time);
  -- select count(*) into aa from information_schema.processlist where command != 'Sleep';
  select concat('running processlist count=',aa);

  select 'open cur';
  open cur;
  read_loop:loop
   select 'start loop cur===';
   fetch cur into tmp_id,tmp_user,tmp_host,tmp_db,tmp_command,tmp_time,tmp_state,tmp_info  ;
   
   if done THEN
    select 'end cur=======';
    leave read_loop;
   end if;
   select count(*) into info_count from sql_statistics where info = tmp_info and state=tmp_state;
    if info_count>0 THEN  
     update sql_statistics set count = count+1 where info=tmp_info and state=tmp_state;
    ELSE
     insert into sql_statistics values(tmp_id,tmp_user,tmp_host,tmp_db,tmp_command,tmp_time,tmp_state,tmp_info,0);
    end if;
   end loop;
   select 'close cur';
   close cur;
   
  select statis_on.offon into offon from statis_on limit 1;
  if offon=1 then
   leave stop_lab;
  end if;
  
 end while stop_lab;

END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `loopprocesslist2`()
BEGIN
 
 declare sql_id int;
 declare aa int;
 declare loop_aa int default 0;
 declare info_count int;
 declare tt_tmp int;
 
 declare start_time datetime;
 declare end_time datetime;
 declare offon int default 0; 
 
 declare tmp_id int;
 declare tmp_user varchar(16);
 declare tmp_host varchar(64);
 declare tmp_db varchar(64);
 declare tmp_command varchar(16);
 declare tmp_state varchar(64);
 declare tmp_info varchar(2000);
 declare tmp_time int;
 
 
 declare tmp_info_length int;
 declare exe_time int; 
 declare continue handler for SQLEXCEPTION
 BEGIN
      SET @SWV_Error = 1;
      
   END;
 set tmp_info_length=50;
 set exe_time = 120;
 
 set start_time=now();
 
 
 create  table if not exists sql_statistics(
   `ID` bigint(21) unsigned NOT NULL DEFAULT '0',
  `USER` varchar(16) NOT NULL DEFAULT '',
  `HOST` varchar(64) NOT NULL DEFAULT '',
  `DB` varchar(64) DEFAULT NULL,
  `COMMAND` varchar(16) NOT NULL DEFAULT '',
  `TIME` int(7) NOT NULL DEFAULT '0',
  `STATE` varchar(64) DEFAULT NULL,
  `INFO` varchar(2000),
  count int
 );
 BEGIN
   declare done int default false;
   declare cur cursor for select id,`user`,`host`,db,command,time,state,info from information_schema.processlist  
    where user='root' and host='%' ;
   
   declare continue handler for not found set done=true;
   
   stop_lab:
   while 1=1 do
    set done=false;
    
     open cur;
     read_loop:loop
      fetch cur into tmp_id,tmp_user,tmp_host,tmp_db,tmp_command,tmp_time,tmp_state,tmp_info;
      if done then 
       leave read_loop;
      end if;
      select count(*) into info_count from sql_statistics where info = tmp_info;
      if info_count>0 THEN  
       update sql_statistics set count = count+1 where info=tmp_info;
      ELSE
       insert into sql_statistics values(tmp_id,tmp_user,tmp_host,tmp_db,tmp_command,tmp_time,tmp_state,tmp_info,0);
      end if;
     end loop read_loop;
     close cur;

    

     
    select statis_on.offon into offon from statis_on limit 1;
    if offon=1 then
     leave stop_lab;
    end if;
    
    end while stop_lab;
   
 end;

 

 
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `stop_180_sec`()
BEGIN
  declare tt int;
 declare tt_tmp int;
 declare start_time datetime;
 declare end_time datetime;
 set tt =180;
 set start_time=now();
 stop_lab:
 while 1=1 do
  set end_time = now();
  set tt_tmp = timestampdiff(second,start_time,end_time);
  if tt<tt_tmp then
   leave stop_lab;
  end if;
 end while stop_lab;
 select '20 sec finish...';
 
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`localhost` PROCEDURE `stop_20_sec`()
begin
 declare tt int;
 declare tt_tmp int;
 declare start_time datetime;
 declare end_time datetime;
 set tt =20;
 set start_time=now();
 stop_lab:
 while 1=1 do
  set end_time = now();
  set tt_tmp = timestampdiff(second,start_time,end_time);
  if tt<tt_tmp then
   leave stop_lab;
  end if;
 end while stop_lab;
 select '20 sec finish...';
 
end

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`localhost` PROCEDURE `testChar`(in name char(10))
begin
 select '====',name;
 select * from abc2 where col2='ÀîÑô';
end

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`%` PROCEDURE `WJK_get_train_auth`(operate_date_in CHAR(8),           
inner_code_in CHAR(7),           
admin_code_in CHAR(21),           
train_code_in CHAR(12),                        
user_class_in CHAR(1),           
check_flag_in CHAR(1),                                 
out_flag_in CHAR(1),INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE train_no CHAR(12);
   DECLARE station_telecode CHAR(3);
   DECLARE station_list NATIONAL VARCHAR(3000);         

   DECLARE my_center CHAR(2);                   
   DECLARE my_bureau CHAR(1);                 
   DECLARE my_center_list NATIONAL VARCHAR(3000);                 
   DECLARE location_center CHAR(2);                   
   DECLARE location_center_list NATIONAL VARCHAR(3000);                     
   DECLARE union_code VARCHAR(255);                 
   DECLARE special_admin_flag CHAR(1);                    
   DECLARE l_train_code CHAR(8);                                  
   DECLARE i INT;
   DECLARE l_station_list NATIONAL VARCHAR(3000);
   DECLARE l_station_telecode CHAR(3);


   DECLARE start_station_name CHAR(10);
   DECLARE end_station_name CHAR(10);
   DECLARE start_station_telecode CHAR(3);
   DECLARE end_station_telecode CHAR(3);
   DECLARE my_center_code CHAR(2);
   DECLARE my_location CHAR(40);
   DECLARE my_location_1 CHAR(2);

   DECLARE bureau_loca INT;
   DECLARE bureau_long INT;
   DECLARE version CHAR(20);
   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE SWV_CurNum INT DEFAULT 0;

declare proc_stat_start datetime;
   declare proc_stat_end datetime;
   declare proc_stat_time_diff int;
  declare open_statistics varchar(20);

   declare get_station cursor for select station_telecode from basic.DG50_train_admin_auth 
   where start_date <= operate_date_in and stop_date >= operate_date_in
   and train_code = l_train_code and inner_code = inner_code_in 
   and start_station_telecode = start_station_telecode and end_station_telecode = end_station_telecode
   and station_telecode in(select station_telecode from basic.stop_time where train_no like train_no);
   DECLARE get_station2 CURSOR  FOR select inner_code from DG50_management_auth where LOCATE(ltrim(rtrim(admin_code_in)),admin_code) = 1
   and LENGTH(ltrim(rtrim(admin_code))) = 15 and start_date <= operate_date_in and stop_date >= operate_date_in
   and inner_code in(select inner_code from tt_temp_inner);
   DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
   BEGIN
      SET NO_DATA = 1;
   END;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;

select parameter_value into open_statistics from arith.parameters where parameter_code='open_statistics';
if open_statistics='1' then
 set proc_stat_start = now();
end if;

   tail:
   BEGIN
      SET station_list = '';
      SET my_center_list = '';
      SET location_center_list = '';
      DROP TEMPORARY TABLE IF EXISTS tt_temp_inner;
      create TEMPORARY table tt_temp_inner
      (
         inner_code CHAR(3) not null
      );
      DROP TEMPORARY TABLE IF EXISTS tt_temp_location;
      create TEMPORARY table tt_temp_location
      (
         location_code CHAR(2) not null
      );


      select 'a', 'a', DG30_my_center.my_center_code from center.DG30_my_center;
      SET SWP_Ret_Value = 0;
   
if open_statistics='1' then
    set proc_stat_end =now();
   set proc_stat_time_diff = timestampdiff(SECOND,proc_stat_start,proc_stat_end);
   insert into proc_stat values('WJK_get_train_auth',proc_stat_start,proc_stat_end,proc_stat_time_diff);
end if;
      LEAVE SWL_return;




      SET version = '20080923,15:30';
      DROP TEMPORARY TABLE IF EXISTS tt_temp_train;
      create TEMPORARY table tt_temp_train
      (
         train_code CHAR(8),
         start_station CHAR(10),
         end_station CHAR(10),
         location_code CHAR(2)
      );
      DROP TEMPORARY TABLE IF EXISTS tt_temp_train_location;
      create TEMPORARY table tt_temp_train_location
      (
         location_code CHAR(2),
         train_no CHAR(12)
      );
      if admin_code_in is null or admin_code_in = '' then
         select   admin_code INTO admin_code_in from basic.DG50_management_auth where inner_code = inner_code_in
         and start_date <= operate_date_in and stop_date >= operate_date_in;
      end if;
      select   inner_code INTO my_bureau from basic.DG50_management_auth where admin_code = SUBSTRING(admin_code_in,1,6)
      and start_date <= operate_date_in and stop_date >= operate_date_in;
      SET my_center_code = CONCAT(my_bureau,'1');
      if train_code_in = '*' then

         if LENGTH(rtrim(ltrim(inner_code_in))) = 3 then
  
            insert into tt_temp_train select train_code,start_station_telecode,end_station_telecode,location_code from basic.DG50_train_location_auth
            where bureau_code = my_bureau
            and location_code <> my_center_code
            and end_station_telecode <> inner_code_in;
            UPDATE tt_temp_train A, station_dictionary  B
            set A.start_station = B.station_name
            where A.start_station = B.station_telecode;
            UPDATE tt_temp_train A, station_dictionary  B
            set A.end_station = B.station_name
            where A.end_station = B.station_telecode;
            insert into tt_temp_train_location select A.location_code,CONCAT(B.subbureau_code,right(CONCAT('00000000',rtrim(ltrim(B.train_code))),8),
            B.double_id,B.schema_id)   from tt_temp_train A,train_dir B
            where A.train_code = B.train_code
            and B.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,-3,operate_date_in),'%Y%m%d')
            and A.start_station = B.start_station_name
            and A.end_station = B.end_station_name;
            DROP TEMPORARY TABLE IF EXISTS tt_temp_loc;
            CREATE TEMPORARY TABLE tt_temp_loc AS select distinct  A.location_code   from tt_temp_train_location A,stop_time B
               where A.train_no = B.train_no
               and B.station_telecode = inner_code_in;
            if not exists(select 1 from tt_temp_loc where location_code = my_center_code) then
               insert into tt_temp_loc values(my_center_code);
            end if;
            while exists(select 1 from tt_temp_loc) DO
       
               select   location_code INTO my_location_1 from tt_temp_loc    LIMIT 1;
               delete from tt_temp_loc where location_code = my_location_1 LIMIT 1;
               SET my_location = CONCAT(rtrim(my_location),my_location_1);
            END WHILE;
            SET station_list = inner_code_in;
            SET my_center_list = my_center_code;
            SET location_center_list = my_location;
         else
            insert into tt_temp_location select distinct location_code from basic.DG50_train_location_auth
            where bureau_code = my_bureau and start_date <= operate_date_in and stop_date >= operate_date_in
            and (train_code not in(select train_code from basic.DG50_train_admin_auth
               where inner_code in(select inner_code from basic.DG50_management_auth
                  where admin_code not like CONCAT(admin_code_in,'%') and start_date <= operate_date_in and stop_date >= operate_date_in))
            or (train_code in(select distinct train_code from basic.DG50_train_admin_auth
               where inner_code in(select inner_code from basic.DG50_management_auth
                  where admin_code like CONCAT(admin_code_in,'%') and start_date <= operate_date_in and stop_date >= operate_date_in)
               and start_date <= operate_date_in and stop_date >= operate_date_in))) LIMIT 1;
            while exists(select 1 from tt_temp_location) DO
      
               select   location_code INTO location_center from tt_temp_location    LIMIT 1;
               SET location_center_list = CONCAT(location_center_list,location_center);
               delete from tt_temp_location where location_code = location_center LIMIT 1;
            END WHILE;
            DROP TEMPORARY TABLE IF EXISTS tt_temp_station;
            create TEMPORARY table tt_temp_station 
            (
               station_telecode CHAR(3) not null
            );
            if user_class_in <> '1' then
   
               insert into tt_temp_station select distinct inner_code
               from basic.DG50_management_auth where admin_code like CONCAT(ltrim(rtrim(admin_code_in)),'%')
               and LENGTH(ltrim(rtrim(admin_code))) = 15
               and start_date <= operate_date_in and stop_date >= operate_date_in;
               while exists(select 1 from tt_temp_station) DO
     
                  select   station_telecode INTO l_station_telecode from tt_temp_station    LIMIT 1;
                  SET station_list = CONCAT(station_list,l_station_telecode);
                  delete from tt_temp_station where station_telecode = l_station_telecode LIMIT 1;
               END WHILE;
            else
               select   union_code INTO station_list from basic.DG50_management_auth where admin_code = admin_code_in and start_date <= operate_date_in
               and stop_date >= operate_date_in;
            end if;
         end if;
         LEAVE tail;
      else
         if LENGTH(ltrim(rtrim(train_code_in))) <> 12 then
   
            SET train_no = ltrim(rtrim(train_code_in));
            CALL CJ30_train_code(operate_date_in,train_no,'*',0,'*');
            if train_no = '000000000000' then 
               LEAVE SWL_return;
            end if;
            SET l_train_code = train_code_in;
         else
            select   train_code INTO l_train_code from basic.train_dir where CONCAT(subbureau_code,right(CONCAT('00000000',ltrim(rtrim(train_code))),8),
            double_id,schema_id) = train_code_in;
            SET train_no = train_code_in;
         end if;
         select   start_station_name, end_station_name INTO start_station_name,end_station_name from basic.train_dir where CONCAT(subbureau_code,right(CONCAT('00000000',ltrim(rtrim(train_code))),8),
         double_id,schema_id) = train_no;
         select   station_telecode INTO start_station_telecode from basic.station_dictionary where station_name = start_station_name;
         select   station_telecode INTO end_station_telecode from basic.station_dictionary where station_name = end_station_name;
         if exists(select 1 from basic.DG50_train_admin_auth where start_date <= operate_date_in and stop_date >= operate_date_in
         and train_code = l_train_code and inner_code = inner_code_in
         and start_station_telecode = start_station_telecode and end_station_telecode = end_station_telecode) then
 
  
            SET SWV_CurNum = 0;
            IF SWV_CurNum = 0 THEN
               open get_station;
            ELSE
               OPEN get_station2;
            END IF;
            SET NO_DATA = 0;
            IF SWV_CurNum = 0 THEN
               fetch get_station into station_telecode;
            ELSE
               FETCH  get_station2 INTO station_telecode;
            END IF;
            while NO_DATA != 2 DO
               if NO_DATA = 1 then 
                  LEAVE SWL_return;
               end if;
               SET station_list = CONCAT(station_list,station_telecode);
               SET NO_DATA = 0;
               IF SWV_CurNum = 0 THEN
                  fetch get_station into station_telecode;
               ELSE
                  FETCH  get_station2 INTO station_telecode;
               END IF;
            END WHILE;
            IF SWV_CurNum = 0 THEN
               close get_station;
            ELSE
               CLOSE get_station2;
            END IF;
  
         else
            if user_class_in = '0' then
     
               if exists(select 1 from basic.stop_time where train_no like train_no and station_telecode like inner_code_in) then
                  SET station_list = inner_code_in;
               else
                  SET station_list = '';
                  SET my_center_list = '';
                  SET location_center_list = '';
                  LEAVE tail;
               end if;
            end if;
            if user_class_in = '1' then
   
               select   union_code INTO union_code from basic.DG50_management_auth where inner_code = inner_code_in
               and start_date <= operate_date_in and stop_date >= operate_date_in;
               SET station_list = ltrim(rtrim(union_code));
               SET i = 1;
               while i <= LENGTH(station_list)/3 DO
                  SET station_telecode = SUBSTRING(station_list,3*i -2,3);
                  if  exists(select 1 from basic.stop_time where train_no = train_no
                  and station_telecode  = station_telecode) then
                     SET l_station_list = CONCAT(l_station_list,station_telecode);
                  end if;
                  SET i = i+1;
               END WHILE;
               if l_station_list = '' then
   
                  SET station_list = '';
                  SET my_center_list = '';
                  SET location_center_list = '';
                  LEAVE tail;
               end if;
               SET station_list = l_station_list;
            end if;
            if user_class_in in('3','4') then
   
               select   special_admin_flag INTO special_admin_flag from basic.CD30_train_auth where train_code = ltrim(rtrim(l_train_code)) and start_station_name = start_station_name and end_station_name = end_station_name
               and start_date <= operate_date_in and stop_date >= operate_date_in;
               if special_admin_flag = '0' or special_admin_flag IS NULL or special_admin_flag = '' then
   
                  SET SWV_CurNum = 1;
                  insert into tt_temp_inner select station_telecode from basic.stop_time where train_no like train_no order by station_no;
                  IF SWV_CurNum = 0 THEN
                     open get_station;
                  ELSE
                     OPEN get_station2;
                  END IF;
                  SET NO_DATA = 0;
                  IF SWV_CurNum = 0 THEN
                     fetch get_station into station_telecode;
                  ELSE
                     FETCH  get_station2 INTO station_telecode;
                  END IF;
                  while NO_DATA != 2 DO
                     if NO_DATA = 1 then
                        LEAVE SWL_return;
                     end if;
                     SET station_list = CONCAT(station_list,ltrim(rtrim(station_telecode)));
                     SET NO_DATA = 0;
                     IF SWV_CurNum = 0 THEN
                        fetch get_station into station_telecode;
                     ELSE
                        FETCH  get_station2 INTO station_telecode;
                     END IF;
                  END WHILE;
               end if;
            end if;
         end if;
         CALL DJ50_train_auth(operate_date_in,train_code_in,station_list,my_center_list,location_center_list,
         '0');
      end if;
   END;
   if location_center_list like '%H5%' then

      SET bureau_loca = LOCATE('H5',location_center_list);
      SET bureau_long = LENGTH(location_center_list);
      SET location_center_list = CONCAT(left(location_center_list,bureau_loca -1),right(location_center_list,bureau_long -bureau_loca -1));
   end if;
   if out_flag_in = '1' then
      select station_list,my_center_list,location_center_list;
   end if;
 
    set proc_stat_end =now();
   set proc_stat_time_diff = timestampdiff(SECOND,proc_stat_start,proc_stat_end);
   insert into proc_stat values('WJK_get_train_auth',proc_stat_start,proc_stat_end,proc_stat_time_diff);
END

//
DELIMITER ;
DELIMITER //
 CREATE DEFINER=`root`@`localhost` PROCEDURE `WJK_LEFT_P_remain_ticket`(oi_train_days_in TINYINT UNSIGNED ,
    os_purposes_in   VARCHAR(40) ,
    assign_station_in VARCHAR(255) ,
    flag_in INT ,                 
    plan_train_no_in CHAR(12) ,
    plan_train_date_in CHAR(8),
 out_flag TINYINT UNSIGNED,
 INOUT SWP_Ret_Value INT)
SWL_return:
BEGIN
   DECLARE share_flag CHAR(1); 
   DECLARE range2 INT;
  
 
            
   DECLARE Version CHAR(20);
   DECLARE To_Range TINYINT UNSIGNED;
   DECLARE transform_no CHAR(2);
   DECLARE tmp_range TINYINT UNSIGNED;
   DECLARE tmp_start_coach_no CHAR(2);
   DECLARE tmp_end_coach_no CHAR(2);
   DECLARE transform_bureau_code CHAR(1);
   DECLARE transform_subbureau_code CHAR(2);
   DECLARE sale_bureau CHAR(1);
   DECLARE sale_subbureau CHAR(2);
   DECLARE old_sale_station CHAR(3);
   DECLARE transform_station_telecode CHAR(3);
   DECLARE old_range TINYINT UNSIGNED;

   DECLARE transform_date CHAR(8);
   DECLARE original_station_telecode CHAR(3);
   DECLARE share_string VARCHAR(1300);
   DECLARE ni_day TINYINT UNSIGNED;
   DECLARE error INT;
   DECLARE rowcount INT;

   DECLARE ns_train_no CHAR(12);
   DECLARE ns_station_train_code CHAR(8);
   DECLARE ns_station_no CHAR(2);
   DECLARE ns_train_date CHAR(8);

   DECLARE ns_train_code VARCHAR(8);
   DECLARE ns_limit_station_no CHAR(2);
   DECLARE ns_limit_station_name CHAR(10);

   DECLARE ns_start_station_name CHAR(10);
   DECLARE ns_end_station_name CHAR(10);
   DECLARE ns_direction_code CHAR(1);
   DECLARE ns_direction_name CHAR(10);

   DECLARE ns_arrive_time CHAR(4);
   DECLARE ns_start_time CHAR(4);
   DECLARE ns_station_telecode CHAR(3);

   DECLARE yz_types VARCHAR(20);
   DECLARE yw_types VARCHAR(20);
   DECLARE rz_types VARCHAR(20);
   DECLARE rw_types VARCHAR(20);
   DECLARE wz_types VARCHAR(5);
   DECLARE pTypes VARCHAR(3);

   DECLARE yz_yn CHAR(1);
   DECLARE yw_yn CHAR(1);
   DECLARE rz_yn CHAR(1);
   DECLARE rw_yn CHAR(1);
   DECLARE wz_yn CHAR(1);

   DECLARE yz_count SMALLINT;
   DECLARE yw_count SMALLINT;
   DECLARE rz_count SMALLINT;
   DECLARE rw_count SMALLINT;
   DECLARE wz_count SMALLINT;   

   DECLARE c_date1 CHAR(2);
   DECLARE c_date2 CHAR(2);
   DECLARE c_date CHAR(5);
   DECLARE c_current_date CHAR(4);
   DECLARE c_today CHAR(8);
   DECLARE c_train_no CHAR(12);
   DECLARE c_station_name CHAR(12);
   DECLARE c1_station_name CHAR(10);
   DECLARE c_tmp_date CHAR(8);
   DECLARE tmp_no INT;
   DECLARE single_assign_station CHAR(3);
   DECLARE c_count INT; 
   DECLARE tmp_train_code CHAR(8);
   DECLARE temp_date CHAR(8);
   DECLARE assign_station_name CHAR(20);
   DECLARE my_center_code CHAR(2);
   DECLARE my_bureau_code CHAR(1);
   DECLARE ns_location_code CHAR(2);

   DECLARE j INT;
   DECLARE seat_type_count INT;
   DECLARE i INT;
   DECLARE seat_name VARCHAR(255);
   DECLARE seat_type_belong CHAR(1);
   DECLARE seat_type CHAR(1);
   DECLARE seat_types INT;

   DECLARE ret_code INT;
   DECLARE nc_operate_time DATETIME;
   DECLARE nc_start_date CHAR(8);
   DECLARE nc_stop_date CHAR(8);
   DECLARE nc_train_no CHAR(12);
   DECLARE nc_station_no CHAR(2);
   DECLARE nc_station_telecode CHAR(3);
   DECLARE nc_station_name CHAR(10);
   DECLARE nc_board_train_code CHAR(8);
   DECLARE nc_command_code CHAR(1);
   DECLARE nc_day_difference TINYINT UNSIGNED;
   DECLARE nc_arrive_time CHAR(4);
   DECLARE nc_start_time CHAR(4);
   DECLARE nc_time_interval TINYINT UNSIGNED;
   DECLARE nc_running_style TINYINT UNSIGNED;
   DECLARE nc_running_rule INT;
   DECLARE tmp_limit_station_no CHAR(2);

   DECLARE sta_in_str VARCHAR(512);
   DECLARE sql_str VARCHAR(1024);
   DECLARE bureau_code CHAR(10);
   DECLARE control_day INT;
   DECLARE date_range_n_begin CHAR(8);
   DECLARE date_range_n_end CHAR(8);
   DECLARE date_range_f_begin CHAR(8);
   DECLARE date_range_f_end CHAR(8);
   DECLARE depart_date CHAR(8);
   DECLARE from_day_diff INT;
   DECLARE return_code INT;
   DECLARE train_no CHAR(12);
   DECLARE ll_max_station_no CHAR(2);
   DECLARE ll_end_station_telecode CHAR(3);
   DECLARE end_station_telecode CHAR(3);

   DECLARE NO_DATA INT DEFAULT 0;
   DECLARE SWV_ns_train_code_Str VARCHAR(8);
   DECLARE seat_type_string VARCHAR(50);
   declare return_out int; 
   
   

 
   DECLARE read_seattypes CURSOR FOR
   SELECT wjk_tt_tmp_seat_type_tmp.seat_type_code 
   FROM wjk_tt_tmp_seat_type_tmp
   WHERE LOCATE(wjk_tt_tmp_seat_type_tmp.belong_seat_type_code,pTypes) > 0;
   

   DECLARE cur_notice CURSOR FOR
   SELECT  wjk_tt_tmp_center_notice.operate_time,
     wjk_tt_tmp_center_notice.start_date,
  wjk_tt_tmp_center_notice.stop_date,
               wjk_tt_tmp_center_notice.train_no,
               wjk_tt_tmp_center_notice.station_no,
     wjk_tt_tmp_center_notice.station_telecode,
          wjk_tt_tmp_center_notice.station_name,
          wjk_tt_tmp_center_notice.board_train_code,
          wjk_tt_tmp_center_notice.command_code,
          wjk_tt_tmp_center_notice.day_difference,
          wjk_tt_tmp_center_notice.arrive_time,
          wjk_tt_tmp_center_notice.start_time,
          wjk_tt_tmp_center_notice.time_interval,
          wjk_tt_tmp_center_notice.running_style,
          wjk_tt_tmp_center_notice.running_rule
   FROM  wjk_tt_tmp_center_notice 
   where wjk_tt_tmp_center_notice.train_no = ns_train_no 
    and wjk_tt_tmp_center_notice.station_telecode = single_assign_station 
 and wjk_tt_tmp_center_notice.stop_date >= ns_train_date 
 and wjk_tt_tmp_center_notice.start_date <= ns_train_date  
   order by wjk_tt_tmp_center_notice.operate_time;

 
      DECLARE cur_train CURSOR FOR
      SELECT wjk_tt_tmp_stop_time.tmp_train_no,
       wjk_tt_tmp_stop_time.tmp_start_station_name,
    wjk_tt_tmp_stop_time.tmp_end_station_name
      FROM  wjk_tt_tmp_stop_time;
   
  
  
   DECLARE cur_dele CURSOR FOR
   SELECT wjk_tt_tmp.train_code 
   FROM wjk_tt_tmp;
   

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET NO_DATA = 2;
   IF oi_train_days_in is null then
      set oi_train_days_in = 3;
   END IF;
   IF os_purposes_in is null then
      set os_purposes_in = '00';
   END IF;
   IF assign_station_in is null then
      set assign_station_in = "LZJ";
   END IF;
   IF flag_in is null then
      set flag_in = 0;
   END IF;
   IF plan_train_no_in is null then
      set plan_train_no_in = '%';
   END IF;
   IF plan_train_date_in is null then
      set plan_train_date_in = '';
   END IF;
   SET Version = "Ver20101109";
     
   select   station_dictionary.bureau_code 
   INTO bureau_code 
   from basic.station_dictionary 
   where station_dictionary.station_telecode = SUBSTRING(assign_station_in,1,3);

   select   max(DJ50_train_sale_define.control_day) 
   INTO control_day 
   from basic.DJ50_train_sale_define 
   where DJ50_train_sale_define.stop_date >= DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d')
    and DJ50_train_sale_define.start_date <= DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d')
    and DJ50_train_sale_define.inner_code = bureau_code
    and DJ50_train_sale_define.ticket_type = 0
    and (DJ50_train_sale_define.purpose_code  = SUBSTRING(os_purposes_in,1,2) OR DJ50_train_sale_define.purpose_code = "*")
    and (DJ50_train_sale_define.flag1 = 'A' OR DJ50_train_sale_define.flag1 = '*')
    and DJ50_train_sale_define.train_code = '*';
  if out_flag=2 THEN
   select '2===== is here';
  end if;
   if plan_train_date_in = '' and flag_in in(2,3) then  
 
      if bureau_code <> 'P' then
  
         if oi_train_days_in >= 5 or oi_train_days_in < 1 then
            SET oi_train_days_in = 5;
         end if;
      end if;
      if bureau_code = 'P' then  
  
         if oi_train_days_in >= 6 or oi_train_days_in < 1 then
            SET oi_train_days_in = 6;
         end if;
      end if;
      SET date_range_n_begin = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
      SET date_range_n_end = DATE_FORMAT(TIMESTAMPADD(DAY,oi_train_days_in -1,CURRENT_TIMESTAMP),'%Y%m%d');
      SET date_range_f_begin = DATE_FORMAT(TIMESTAMPADD(DAY,control_day -oi_train_days_in+1,CURRENT_TIMESTAMP),
      '%Y%m%d');
      SET date_range_f_end = DATE_FORMAT(TIMESTAMPADD(DAY,control_day,CURRENT_TIMESTAMP),'%Y%m%d');
   end if;

   if plan_train_date_in = '' and flag_in not in(2,3) then  
 
      SET date_range_n_begin = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
      SET date_range_n_end = DATE_FORMAT(TIMESTAMPADD(DAY,oi_train_days_in -1,CURRENT_TIMESTAMP),'%Y%m%d');
      SET date_range_f_begin = '20991231';
      SET date_range_f_end = '20991231';

   end if;

   if plan_train_date_in <> '' then   
 
      SET date_range_n_begin = plan_train_date_in;
      SET date_range_n_end = plan_train_date_in;
      SET date_range_f_begin = '20991231';
      SET date_range_f_end = '20991231';

   end if;
  if out_flag=2 THEN
   select ('3=== is here');
  end if;      
   
 
   CREATE TEMPORARY TABLE IF not EXISTS wjk_tt_train_info
   (
      train_date CHAR(8) NOT NULL,  
      train_no CHAR(12) NOT NULL, 
      train_code CHAR(8) NOT NULL,  
      from_station CHAR(3) NOT NULL,  
      to_station CHAR(3) NOT NULL  
   );
   truncate table wjk_tt_train_info;
  if out_flag=2 THEN
   select ('4=== is here');
  end if;
 
   
   CREATE TEMPORARY TABLE   IF not EXISTS wjk_tt_tmp_left_base_center
   (

      assign_station CHAR(3) NOT NULL,
      train_no CHAR(12) NOT NULL,
      train_date CHAR(8) NOT NULL,
      station_no CHAR(2) NOT NULL,
      far_from_station_no CHAR(2) NOT NULL,
      limit_station CHAR(2) NOT NULL,
      coach_no CHAR(2) NOT NULL,
      seat_type_code CHAR(1) NOT NULL,
      purpose_code CHAR(2) NOT NULL,
      ticket_quantity INT NOT NULL,
      up_quantity INT NOT NULL,
      mid_quantity INT NOT NULL,
      down_quantity INT NOT NULL,
      ticket_source CHAR(1) NOT NULL,
      `range` TINYINT UNSIGNED NOT NULL,
      inner_code CHAR(7) NOT NULL,
      wseat_type_code CHAR(1),
      seat_feature CHAR(1),
   INDEX tmp_left_base_center_idx(train_no, 
    train_date, 
    limit_station)
   );
   truncate table wjk_tt_tmp_left_base_center;
     
               
   
               
   CREATE TEMPORARY TABLE IF not EXISTS  tt_WJK_LEFT_remain_ticket
   (
      station_telecode CHAR(3) NOT NULL,
      train_no CHAR(12) NOT NULL,
      train_code CHAR(8) NOT NULL,
      train_date CHAR(8) NOT NULL,
      start_station_name CHAR(10) NOT NULL,
      end_station_name CHAR(10) NOT NULL,
      limit_station_no CHAR(2),
      limit_station_name CHAR(10),
      direction_name CHAR(10),
      arrive_time CHAR(4) NOT NULL,
      start_time CHAR(4) NOT NULL,
      yz_count SMALLINT,
      yw_count SMALLINT,
      rz_count SMALLINT,
      rw_count SMALLINT,
      wz_count SMALLINT
   );
   truncate table tt_WJK_LEFT_remain_ticket;
         




    
   SET assign_station_in = ltrim(rtrim(assign_station_in));
 
   select   DG30_my_center.my_center_code 
   INTO my_center_code 
   from center.DG30_my_center;
   
   IF oi_train_days_in IS NULL then 
      SET oi_train_days_in = 3;
   end if;
   IF oi_train_days_in <= 0 then 
      SET oi_train_days_in = 3;
   end if;
   IF os_purposes_in IS NULL then 
      SET os_purposes_in = '00';
   end if;
   IF os_purposes_in = '' then 
      SET os_purposes_in = '00';
   end if;

   
   
   CREATE TEMPORARY TABLE IF not EXISTS  wjk_tt_tmp_seat_type_tmp 
   AS 
   select seat_type.seat_type_code,
     seat_type.seat_type_name,
  seat_type.belong_seat_type_code, 
 seat_type.belong_seat_type_name,
 seat_type.print_seat_type_name, 
 seat_type.display_seat_type_name
   from basic.seat_type; 
 
   update wjk_tt_tmp_seat_type_tmp
   set wjk_tt_tmp_seat_type_tmp.belong_seat_type_code = '1',
    wjk_tt_tmp_seat_type_tmp.belong_seat_type_name = 'Ó²×ù'
   where wjk_tt_tmp_seat_type_tmp.seat_type_code = 'O' 
    and wjk_tt_tmp_seat_type_tmp.belong_seat_type_name = 'Èí×ù';

 
   
   SET yz_types = '';
   SET pTypes = '1';
   SET @SWV_Error = 0;
   OPEN read_seattypes;
   IF @SWV_Error != 0 then 
      LEAVE SWL_return;
   end if;
   SET NO_DATA = 0;
 
   FETCH read_seattypes INTO wz_types;
   
   WHILE NO_DATA != 2 DO
      IF NO_DATA = 1 then
       
         SET @SWV_Error = 30101;
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
   
   if out_flag=2 THEN
   select '5==loop cursor read_seattypes',yz_types,wz_types;
   end if;
      IF wz_types IS NOT NULL then 
         SET yz_types = CONCAT(yz_types,wz_types);
      end if;
      SET NO_DATA = 0;
      FETCH read_seattypes INTO wz_types;
   END WHILE;
   CLOSE read_seattypes;
 
   SET yw_types = '';
   SET pTypes = '35';
   SET @SWV_Error = 0;
   OPEN read_seattypes;
   
   IF @SWV_Error != 0 then 
      LEAVE SWL_return;
   end if;
   SET NO_DATA = 0;
   FETCH read_seattypes INTO wz_types;
   WHILE NO_DATA != 2 DO
      IF NO_DATA = 1 then
       
         SET @SWV_Error = 30102;
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
   if out_flag=2 THEN
   select '6==loop cursor read_seattypes',yw_types,wz_types;
   end if;
      IF wz_types IS NOT NULL then 
         SET yw_types = CONCAT(yw_types,wz_types);
      end if;
      SET NO_DATA = 0;
      FETCH read_seattypes INTO wz_types;
   END WHILE;
   CLOSE read_seattypes;

   SET rz_types = '';
   SET pTypes = '2';
   SET @SWV_Error = 0;
   OPEN read_seattypes;
   IF @SWV_Error != 0 then 
      LEAVE SWL_return;
   end if;
   SET NO_DATA = 0;
   FETCH read_seattypes INTO wz_types;
   WHILE NO_DATA != 2 DO
      IF NO_DATA = 1 then
       
         SET @SWV_Error = 30103;
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
   if out_flag=2 THEN
   select '7==loop cursor read_seattypes',rz_types,wz_types;
   end if;
      IF wz_types IS NOT NULL then 
         SET rz_types = CONCAT(rz_types,wz_types);
      end if;
      SET NO_DATA = 0;
      FETCH read_seattypes INTO wz_types;
   END WHILE;
   CLOSE read_seattypes;

   SET rw_types = '';
   SET pTypes = '46';
   SET @SWV_Error = 0;
   OPEN read_seattypes;
   IF @SWV_Error != 0 then 
      LEAVE SWL_return;
   end if;
   SET NO_DATA = 0;
   FETCH read_seattypes INTO wz_types;
   WHILE NO_DATA != 2 DO
      IF NO_DATA = 1 then
    
         SET @SWV_Error = 30104;
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
   if out_flag=2 THEN
   select '8==loop cursor read_seattypes',rw_types,wz_types;
   end if;
      IF wz_types IS NOT NULL then 
         SET rw_types = CONCAT(rw_types,wz_types);
      end if;
      SET NO_DATA = 0;
      FETCH read_seattypes INTO wz_types;
   END WHILE;
   CLOSE read_seattypes;
    
 
   SET wz_types = 'W';

   

   CREATE TEMPORARY TABLE IF not EXISTS wjk_tt_tmp_stop_time
   (
      tmp_train_no CHAR(12) NOT NULL,
      tmp_station_no CHAR(2) NOT NULL,
      tmp_start_date CHAR(12) NOT NULL,
      tmp_stop_date CHAR(12) NOT NULL,
      tmp_arrive_time CHAR(4) NOT NULL,
      tmp_start_time CHAR(4) NOT NULL,
      tmp_station_telecode CHAR(3) NOT NULL,
      tmp_station_train_code CHAR(8) NOT NULL,
      tmp_day_difference SMALLINT,
      tmp_start_station_name CHAR(10),
      tmp_end_station_name CHAR(10),
      tmp_count SMALLINT,
   unique index tt_tmp_stop_time_idx (tmp_train_no)
   );
   truncate table wjk_tt_tmp_stop_time;
   

   

   CREATE TEMPORARY TABLE IF not EXISTS wjk_tt_tmp_stoptime
   (
      tmp_train_no CHAR(12) NOT NULL,
      tmp_station_no CHAR(2) NOT NULL,
      tmp_start_date CHAR(12) NOT NULL,
      tmp_stop_date CHAR(12) NOT NULL,
      tmp_arrive_time CHAR(4) NOT NULL,
      tmp_start_time CHAR(4) NOT NULL,
      tmp_station_telecode CHAR(3) NOT NULL,
      tmp_station_train_code CHAR(8) NOT NULL,
      tmp_day_difference SMALLINT,
      tmp_start_station_name CHAR(10),
      tmp_end_station_name CHAR(10),
      tmp_count SMALLINT,
    unique index tt_tmp_stop_time_idx1 (tmp_train_no)
   );
   truncate table wjk_tt_tmp_stoptime;
   

   

   CREATE TEMPORARY TABLE IF not EXISTS wjk_tt_tmp_center_notice 
   AS 
   SELECT  CJ30_center_notice.operate_time,
     CJ30_center_notice.start_date,
  CJ30_center_notice.stop_date,
    CJ30_center_notice.train_no,
    CJ30_center_notice.station_no,
    CJ30_center_notice.station_telecode,
    CJ30_center_notice.station_name,
    CJ30_center_notice.board_train_code,
    CJ30_center_notice.command_code,
    CJ30_center_notice.day_difference,
    CJ30_center_notice.arrive_time,
    CJ30_center_notice.start_time,
    CJ30_center_notice.time_interval,
    CJ30_center_notice.running_style,
    CJ30_center_notice.running_rule  
      FROM basic.CJ30_center_notice  WHERE 1 = 2;
      
      truncate table wjk_tt_tmp_center_notice;


   SET c_today = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
   SET c_date = DATE_FORMAT(now(),'%H%i');    
   SET c_date1 = left(c_date,2);
   SET c_date2 = right(c_date,2);
   SET c_current_date = CONCAT(c_date1,c_date2);
   SET c_tmp_date = DATE_FORMAT(TIMESTAMPADD(day,(oi_train_days_in -1),c_today),'%Y%m%d');
   SET temp_date = DATE_FORMAT(CURRENT_TIMESTAMP,'%Y%m%d');
   
   insert into wjk_tt_tmp_center_notice 
   select CJ30_center_notice.operate_time,
    CJ30_center_notice.start_date,
 CJ30_center_notice.stop_date,
 CJ30_center_notice.train_no,
 CJ30_center_notice.station_no,
        CJ30_center_notice.station_telecode,
 CJ30_center_notice.station_name,
 CJ30_center_notice.board_train_code,
 CJ30_center_notice.command_code,
 CJ30_center_notice.day_difference,
 CJ30_center_notice.arrive_time,
        CJ30_center_notice.start_time,
 CJ30_center_notice.time_interval,
 CJ30_center_notice.running_style,
 CJ30_center_notice.running_rule
   from basic.CJ30_center_notice
   where LOCATE(CJ30_center_notice.station_telecode,assign_station_in) > 0 
    and CJ30_center_notice.stop_date >= c_today 
 and CJ30_center_notice.start_date <= c_tmp_date 
 and CJ30_center_notice.command_enable = 0 
 and LOCATE(CJ30_center_notice.command_code,'P') > 0;


    if out_flag=2 then
  select '9=== is here';
 end if;

   SET tmp_no = 1;
  
   WHILE tmp_no <= LENGTH(assign_station_in)/3 DO
      SET single_assign_station = SUBSTRING(assign_station_in,3*tmp_no -2,3);
      select   station_dictionary.station_name, 
       station_dictionary.bureau_code 
      INTO assign_station_name,
       my_bureau_code 
      from basic.station_dictionary 
      where station_dictionary.station_telecode = single_assign_station;
      
      truncate table wjk_tt_tmp_stop_time;
      if plan_train_no_in = '%' then

         insert into wjk_tt_tmp_stop_time
         select distinct stop_time.train_no,
   stop_time.station_no,
   stop_time.start_date,
   stop_time.stop_date,
   stop_time.arrive_time,
   stop_time.start_time,
   stop_time.station_telecode,
   stop_time.station_train_code,
   stop_time.day_difference,
   '',
   '',
   0
         from basic.stop_time
         where stop_time.station_telecode = single_assign_station
          and stop_time.station_name NOT REGEXP '[\\_|\\*|-].*'
          
          AND stop_time.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(day_difference as signed),c_today),'%Y%m%d')
          AND stop_time.train_no not in(select CONCAT(train_dir.subbureau_code,right(CONCAT("00000000",rtrim(train_dir.train_code)),8),train_dir.double_id,train_dir.schema_id)
                from basic.train_dir 
     where train_dir.end_station_name = assign_station_name
                               
                               );
   if out_flag=2 then
   select '22_1====select * from wjk_tt_tmp_stop_time limit 10';
   select * from wjk_tt_tmp_stop_time ;
   end if;
      else
         insert into wjk_tt_tmp_stop_time
         select distinct stop_time.train_no,
   stop_time.station_no,
   stop_time.start_date,
   stop_time.stop_date,
   stop_time.arrive_time,
   stop_time.start_time,
   stop_time.station_telecode,
   stop_time.station_train_code,
   stop_time.day_difference,
   '',
   '',
   0
         from basic.stop_time
         where stop_time.train_no = plan_train_no_in 
   and stop_time.station_telecode = single_assign_station
          and stop_time.station_name NOT REGEXP '[\\_|\\*|-].*'
          
          AND stop_time.stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(day_difference as signed),c_today),'%Y%m%d')
          AND stop_time.train_no not in(select CONCAT(train_dir.subbureau_code,right(CONCAT("00000000",rtrim(train_dir.train_code)),8),train_dir.double_id,train_dir.schema_id)
                from basic.train_dir where train_dir.end_station_name = assign_station_name
                               
                               );
     if out_flag=2 then
   select '22_2====select * from wjk_tt_tmp_stop_time limit 10';
   
   end if;
      end if;
      SET ns_train_code = SUBSTRING(ns_train_no,3,8);
      WHILE LOCATE('0',ns_train_code) = 1 DO
         SET SWV_ns_train_code_Str = SUBSTRING(ns_train_code,2,8);
         SET ns_train_code = SWV_ns_train_code_Str;
      END WHILE;
      select   station_dictionary.bureau_code 
      INTO bureau_code 
      FROM basic.station_dictionary 
      WHERE station_dictionary.station_telecode = single_assign_station;
 
      open cur_train;
      
      SET NO_DATA = 0;
      fetch cur_train into ns_train_no,ns_start_station_name,ns_end_station_name;
      while NO_DATA != 2 DO
         if NO_DATA = 1 then
      
            SET @SWV_Error = 30111;
            SET SWP_Ret_Value = -1;
            LEAVE SWL_return;
         end if;
   if out_flag=3 then
   select '10=== open cursor cur_train ',ns_train_no,ns_start_station_name,ns_end_station_name;
  end if;
         SET ns_train_code = SUBSTRING(ns_train_no,3,8);
         WHILE LOCATE('0',ns_train_code) = 1 DO
            SET SWV_ns_train_code_Str = SUBSTRING(ns_train_code,2,8);
            SET ns_train_code = SWV_ns_train_code_Str;
         END WHILE;
         select   train_dir.start_station_name, 
   train_dir.end_station_name 
   INTO ns_start_station_name,
   ns_end_station_name 
   FROM basic.train_dir 
   WHERE train_dir.train_code = ns_train_code
          and train_dir.subbureau_code = SUBSTRING(ns_train_no,1,2)
          and train_dir.double_id = SUBSTRING(ns_train_no,11,1)
          and train_dir.schema_id = SUBSTRING(ns_train_no,12,1);
         IF @SWV_Error != 0 then 
            LEAVE SWL_return;
         end if;
   if out_flag=3 then
   select '11=== is here ',ns_train_no,ns_start_station_name,ns_end_station_name,my_bureau_code,c_tmp_date,c_today;
  end if;
         if not exists(select 1 from basic.DG50_train_location_auth
           where DG50_train_location_auth.train_code = ns_train_code
            and DG50_train_location_auth.start_station_telecode in(select station_dictionary.station_telecode 
                   from basic.station_dictionary
                     where station_dictionary.station_name = ns_start_station_name)
                                                
            and DG50_train_location_auth.end_station_telecode in(select station_dictionary.station_telecode 
                 from basic.station_dictionary
                   where station_dictionary.station_name = ns_end_station_name)
                                              
            and DG50_train_location_auth.bureau_code = my_bureau_code 
            AND DG50_train_location_auth.start_date <= c_tmp_date
            AND DG50_train_location_auth.stop_date >= c_today ) then
   
            SET ns_location_code = '00';
            if not exists(select 1 from basic.DG50_train_location_auth 
       where DG50_train_location_auth.train_code = ns_train_code
               and DG50_train_location_auth.start_station_telecode in(select station_dictionary.station_telecode 
        from basic.station_dictionary
                      where station_dictionary.station_name = ns_start_station_name)
                                                   
               and DG50_train_location_auth.end_station_telecode in(select station_dictionary.station_telecode 
        from basic.station_dictionary
                      where station_dictionary.station_name = ns_end_station_name)
                                                 
               AND DG50_train_location_auth.start_date <= c_tmp_date
               AND DG50_train_location_auth.stop_date >= c_today   ) then
               select   on_net_station.area_center_code 
        INTO ns_location_code 
        from basic.on_net_station 
        where on_net_station.station_telecode = single_assign_station;
            end if;
  




            update wjk_tt_tmp_stop_time 
   set tmp_start_station_name = ns_start_station_name,
    tmp_end_station_name = ns_end_station_name
            WHERE wjk_tt_tmp_stop_time.tmp_train_no = ns_train_no;
         else
            update wjk_tt_tmp_stop_time 
   set tmp_start_station_name = ns_start_station_name,
    tmp_end_station_name = ns_end_station_name
            WHERE wjk_tt_tmp_stop_time.tmp_train_no = ns_train_no;
         end if;
         SET NO_DATA = 0;
         fetch cur_train into ns_train_no,ns_start_station_name,ns_end_station_name;
      END WHILE;
      close cur_train;
       
      if plan_train_date_in <> '' then   
         SET oi_train_days_in = 1;
      end if;

      truncate table wjk_tt_train_info;
      truncate table wjk_tt_tmp_left_base_center;
      SET ni_day = 0;
      
      
      if plan_train_date_in <> '' then
         SET control_day = 0;
      end if;
      
      while (ni_day < control_day+1) DO
         SET ns_train_date = DATE_FORMAT(TIMESTAMPADD(day,ni_day,CURRENT_TIMESTAMP),'%Y%m%d');
   if out_flag=2 and ni_day<5 then
   select '21_1===',ns_train_date;
  end if;
         if plan_train_date_in <> '' then 
            SET ns_train_date = plan_train_date_in;
         end if;
         truncate table wjk_tt_train_info; 
  
         if ns_train_date between date_range_n_begin  and date_range_n_end
         or  ns_train_date between date_range_f_begin and date_range_f_end then  
    
            insert into wjk_tt_train_info
            select distinct ns_train_date,
    wjk_tt_tmp_stop_time.tmp_train_no,
    '',
    single_assign_station,
    '%'
            from wjk_tt_tmp_stop_time
            where wjk_tt_tmp_stop_time.tmp_station_telecode = single_assign_station 
             AND wjk_tt_tmp_stop_time.tmp_start_date <= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(wjk_tt_tmp_stop_time.tmp_day_difference as signed),ns_train_date),'%Y%m%d')
             AND wjk_tt_tmp_stop_time.tmp_stop_date >= DATE_FORMAT(TIMESTAMPADD(DAY,0 -cast(wjk_tt_tmp_stop_time.tmp_day_difference as signed),ns_train_date),'%Y%m%d');
         end if;
  if out_flag=2 and  ni_day<5 then
   
   select '21====,select * from wjk_tt_train_info limit 10;';
   
  end if;
         UPDATE wjk_tt_train_info 
   SET wjk_tt_train_info.train_code =(CASE WHEN SUBSTRING(wjk_tt_train_info.train_no,3,6) = '000000' THEN SUBSTRING(wjk_tt_train_info.train_no,9,2)
      WHEN SUBSTRING(wjk_tt_train_info.train_no,3,5) = '00000'  THEN SUBSTRING(wjk_tt_train_info.train_no,8,3)
      WHEN SUBSTRING(wjk_tt_train_info.train_no,3,4) = '0000'  THEN SUBSTRING(wjk_tt_train_info.train_no,7,4)
      WHEN SUBSTRING(wjk_tt_train_info.train_no,3,3) = '000'  THEN SUBSTRING(wjk_tt_train_info.train_no,6,5)
      WHEN SUBSTRING(wjk_tt_train_info.train_no,3,2) = '00'  THEN SUBSTRING(wjk_tt_train_info.train_no,5,6)
      WHEN SUBSTRING(wjk_tt_train_info.train_no,3,1) = '0'   THEN SUBSTRING(wjk_tt_train_info.train_no,4,7)
      ELSE wjk_tt_train_info.train_no
       END);
         
         begin
           declare cp_start_time datetime;
           declare cp_end_time datetime;
      if out_flag=2  then
      
      
        
       select concat('1====call arith.DS60_ticket_left(wjk_tt_train_info,\'',os_purposes_in,'\',\'',single_assign_station,'\',4,\'A\',\'wjk_tt_tmp_left_base_center\',0,1,1,@return_out);');
       select * from wjk_tt_train_info;
       
       set cp_start_time=now();
       end if;
      CALL arith.DS60_ticket_left('wjk_tt_train_info',
       os_purposes_in,
      single_assign_station,
      4,
      'A',
      'wjk_tt_tmp_left_base_center', 
              0, 
      1,
      1,
      return_out);
       if out_flag=2 and  ni_day<5 then
      
      
       select '1===end call arith.DS60_ticket_left finish,execute time:',TIMESTAMPDIFF(second,cp_start_time,cp_end_time);
       
       end if;
     end ;
         SET ni_day = ni_day+1;
      END WHILE;









      truncate table wjk_tt_tmp_stoptime;
 
      insert into wjk_tt_tmp_stoptime 
      select wjk_tt_tmp_stop_time.tmp_train_no, 
       wjk_tt_tmp_stop_time.tmp_station_no, 
  wjk_tt_tmp_stop_time.tmp_start_date, 
  wjk_tt_tmp_stop_time.tmp_stop_date, 
  wjk_tt_tmp_stop_time.tmp_arrive_time, 
  wjk_tt_tmp_stop_time.tmp_start_time, 
  wjk_tt_tmp_stop_time.tmp_station_telecode, 
  wjk_tt_tmp_stop_time.tmp_station_train_code, 
  wjk_tt_tmp_stop_time.tmp_day_difference, 
  wjk_tt_tmp_stop_time.tmp_start_station_name, 
  wjk_tt_tmp_stop_time.tmp_end_station_name, 
  wjk_tt_tmp_stop_time.tmp_count 
      from wjk_tt_tmp_stop_time;
  if out_flag=2 then
    select '11=== select * from wjk_tt_tmp_left_base_center;';
    select * from wjk_tt_tmp_left_base_center order by wjk_tt_tmp_left_base_center.train_no,wjk_tt_tmp_left_base_center.train_date,wjk_tt_tmp_left_base_center.station_no,wjk_tt_tmp_left_base_center.far_from_station_no,wjk_tt_tmp_left_base_center.limit_station,wjk_tt_tmp_left_base_center.coach_no,wjk_tt_tmp_left_base_center.seat_type_code,wjk_tt_tmp_left_base_center.purpose_code,wjk_tt_tmp_left_base_center.ticket_quantity;
    select * from wjk_tt_tmp_stoptime order by tmp_train_no;
  end if;
      while exists(select 1 from wjk_tt_tmp_stoptime) DO
         begin

       
            select   tmp_train_no, 
      tmp_station_no, 
   tmp_arrive_time, 
   tmp_start_time, 
   tmp_station_telecode, 
   tmp_station_train_code, 
   tmp_start_station_name, 
   tmp_end_station_name 
   INTO ns_train_no,
    ns_station_no,
   ns_arrive_time,
   ns_start_time,
   ns_station_telecode,
     ns_station_train_code,
   ns_start_station_name,
   ns_end_station_name 
   from wjk_tt_tmp_stoptime    
   LIMIT 1;
            delete from wjk_tt_tmp_stoptime LIMIT 1;
     
            SET ni_day = 0;

  
           
   
            while (ni_day < control_day+1) DO
               begin
     
                  step_two:loop
                  BEGIN
                     step_one:loop
                     BEGIN
                        SET ns_train_date = DATE_FORMAT(TIMESTAMPADD(day,ni_day,CURRENT_TIMESTAMP),'%Y%m%d');
                        if plan_train_date_in <> '' then 
                           SET ns_train_date = plan_train_date_in;
                        end if; 
      
                        if not exists(select 1 from wjk_tt_tmp_left_base_center 
                  where wjk_tt_tmp_left_base_center.train_no = ns_train_no 
                   and wjk_tt_tmp_left_base_center.train_date = ns_train_date) 
            then
       
                           SET yz_count = -1;
                           SET rz_count = -1;
                           SET yw_count = -1;
                           SET rw_count = -1;
                           SET wz_count = -1;
                           LEAVE step_two;
                        end if;
                        SET ns_train_code = SUBSTRING(ns_train_no,3,8);
                        WHILE LOCATE('0',ns_train_code) = 1 DO
                           SET SWV_ns_train_code_Str = SUBSTRING(ns_train_code,2,8);
                           SET ns_train_code = SWV_ns_train_code_Str;
                        END WHILE;
                        SET i = -1;
                        SET j = 1;
                        select   count(*) 
            INTO seat_type_count 
            from wjk_tt_tmp_seat_type_tmp;
   
                        select   train_dir.seat_types 
            INTO seat_types 
            from basic.train_dir 
            where train_dir.subbureau_code = SUBSTRING(ns_train_no,1,2)
                         and train_dir.train_code = ns_train_code
                         and train_dir.double_id = SUBSTRING(ns_train_no,11,1)
                         and train_dir.schema_id = SUBSTRING(ns_train_no,12,1);
                        SET yz_yn = 'n';
                        SET rz_yn = 'n';
                        SET yw_yn = 'n';
                        SET rw_yn = 'n';
                        SET wz_yn = 'n';
   
                        SET seat_type_string = '';
                        SET seat_type = '';
      
                        SWL_Label13:      
                        while i < seat_type_count DO
       
                           SET i = i+1;
                           SET j = j*2;
                           if i = 0 then 
                              SET j = 1;
                           end if;
                           if(seat_types & j) = 0 then 
                              ITERATE SWL_Label13;
                           end if;
                           if i = 23 then 
                              SET i = 24;
                           end if;
                           if i < 10 then 
                              SET seat_type = CAST(i AS char(1));
                           else 
                              SET seat_type = char(i+55);
                           end if;
                           SET seat_type_string = CONCAT(seat_type_string,seat_type);
      
                           select   wjk_tt_tmp_seat_type_tmp.belong_seat_type_code, 
              wjk_tt_tmp_seat_type_tmp.seat_type_name 
              INTO seat_type_belong,
              seat_name 
              from wjk_tt_tmp_seat_type_tmp 
              where wjk_tt_tmp_seat_type_tmp.seat_type_code = seat_type;
      
                           if (seat_type_belong in('1')) then      
                              SET yz_yn = 'y';
                           end if;
                           if (seat_type_belong in('2')) then      
                              SET rz_yn = 'y';
                           end if;
                           if (seat_type_belong in('3','5')) then  
                              SET yw_yn = 'y';
                           end if;
                           if (seat_type_belong in('4','6')) then  
                              SET rw_yn = 'y';
                           end if;
                           if (wz_types = 'W') then                 
                              SET wz_yn = 'y';
                           end if;
                        END WHILE SWL_Label13;
      
      
                        select   station_dictionary.station_name 
            INTO c_station_name 
            from basic.station_dictionary 
            where station_dictionary.station_telecode = ns_station_telecode;
      
                        SET c1_station_name = c_station_name;
                        SET c_station_name = CONCAT(ltrim(rtrim(c_station_name)),"Õ¾");
      
                        select distinct  CG40_station_group_train.direction_code 
            INTO ns_direction_code 
            from basic.CG40_station_group_train
            where CG40_station_group_train.train_code = ns_train_code
                         and ( (CG40_station_group_train.station_name = c_station_name) or (CG40_station_group_train.station_name = c1_station_name));
      
                        IF @SWV_Error != 0 then 
                           LEAVE SWL_return;
                        end if;
                        if ns_direction_code IS NULL then
                           SET ns_direction_name = " ";
                        else
       
                           select   direction.direction_name 
              INTO ns_direction_name 
              from center.direction 
              where direction.inner_code = ns_station_telecode
                            and direction.direction_code = ns_direction_code;
    
                           if @SWV_Error != 0 then 
                              LEAVE SWL_return;
                           end if;
                           if ns_direction_name IS NULL then 
                              SET ns_direction_name = " ";
                           end if;
                        end if;
                        if exists(select 1 from wjk_tt_tmp_center_notice
                          where wjk_tt_tmp_center_notice.start_date <= ns_train_date 
               and wjk_tt_tmp_center_notice.stop_date >= ns_train_date
                           and wjk_tt_tmp_center_notice.station_telecode = single_assign_station
                           and wjk_tt_tmp_center_notice.train_no = ns_train_no) 
            then
           
                           open cur_notice;
                           SET NO_DATA = 0;
                           fetch cur_notice into nc_operate_time,nc_start_date,nc_stop_date,nc_train_no,nc_station_no,nc_station_telecode,
                           nc_station_name,nc_board_train_code,nc_command_code,
                           nc_day_difference,nc_arrive_time,nc_start_time,nc_time_interval,nc_running_style,
                           nc_running_rule;
                           while NO_DATA != 2 DO
                              if NO_DATA = 1 then
             
                                 SET @SWV_Error = 30111;
                                 SET SWP_Ret_Value = -1;
                                 LEAVE SWL_return;
                              end if;
         if out_flag=2 then
        select '16====open cursor ',nc_operate_time,nc_start_date,nc_stop_date,nc_train_no,nc_station_no,nc_station_telecode,
           nc_station_name,nc_board_train_code,nc_command_code,
           nc_day_difference,nc_arrive_time,nc_start_time,nc_time_interval,nc_running_style,
           nc_running_rule;
       end if;
                              call arith.CJ30_check_running(ns_train_date,'0',0,single_assign_station,ns_train_date,ns_train_date,
                              nc_running_style,nc_running_rule,0,0,return_out);
                              SET ret_code = return_out;
                              IF ret_code > 0 then  
                                 SET ns_start_time = nc_start_time;
                              end if;
                              SET NO_DATA = 0;
                              fetch cur_notice into nc_operate_time,nc_start_date,nc_stop_date,nc_train_no,nc_station_no,nc_station_telecode,
                              nc_station_name,nc_board_train_code,nc_command_code,
                              nc_day_difference,nc_arrive_time,nc_start_time,nc_time_interval,nc_running_style,
                              nc_running_rule;
                           END WHILE;
                           close cur_notice;
                        end if;
                        SET ns_limit_station_no = '00';
                        SET ns_limit_station_name = ns_end_station_name;


       
                        select   stop_time.day_difference 
            INTO from_day_diff 
            from basic.stop_time 
            where stop_time.train_no = ns_train_no
                         and stop_time.station_telecode = single_assign_station;
                        SET depart_date = DATE_FORMAT(TIMESTAMPADD(DAY,0 -from_day_diff,ns_train_date),'%Y%m%d');
      if out_flag=2 then
        select '15_4====',ns_train_code,ns_start_station_name,ns_end_station_name,depart_date;
      end if;
      begin 
       declare tmp_row_count int;
        select  count(*)-1 INTO tmp_row_count 
            from basic.train_dir 
            where train_dir.train_code = ns_train_code
                         and train_dir.start_station_name = ns_start_station_name
                         and train_dir.end_station_name = ns_end_station_name
                         and train_dir.stop_date >= depart_date
                         and train_dir.start_date <= depart_date;
                        select   CONCAT(train_dir.subbureau_code,lpad(rtrim(train_dir.train_code),8,'0'),train_dir.double_id,train_dir.schema_id) 
            INTO train_no 
            from basic.train_dir 
            where train_dir.train_code = ns_train_code
                         and train_dir.start_station_name = ns_start_station_name
                         and train_dir.end_station_name = ns_end_station_name
                         and train_dir.stop_date >= depart_date
                         and train_dir.start_date <= depart_date limit tmp_row_count, 1;
      end;
      
                        select   station_dictionary.station_telecode 
            INTO end_station_telecode 
            from basic.station_dictionary 
            where station_dictionary.station_name = ns_end_station_name;
      
                        SET c_train_no = ns_train_code;
                        SET return_code = 0;
      if out_flag=2 then
       select '17_1====call arith.CJ30_train_code',ns_train_date,c_train_no,single_assign_station,out_flag;
      end if;
      begin 
       declare oo_single_assign_station varchar(20);
       set oo_single_assign_station = single_assign_station;
       CALL arith.CJ30_train_code(ns_train_date,c_train_no,oo_single_assign_station,out_flag,'',return_out);
      end;
      if out_flag=2 then
       select '17_2===end call arith.CJ30_train_code',ns_train_date,c_train_no,single_assign_station,out_flag;
      end if;
                        if c_train_no <> '000000000000' then
             
                           select   max(stop_time.station_no) 
              INTO ll_max_station_no 
              from basic.stop_time 
              where stop_time.train_no = c_train_no;
      
                           select   stop_time.station_telecode 
              INTO ll_end_station_telecode 
              from basic.stop_time 
              where stop_time.train_no = c_train_no 
              and stop_time.station_no = ll_max_station_no;
       
                           if ll_end_station_telecode <> end_station_telecode then
                              SET c_train_no = '000000000000';
                           end if;
                        end if;
      
                        if c_train_no = '000000000000' or c_train_no <> train_no then
         
                           SET c_train_no = '000000000000';
                        end if;

      
      
                        if c_train_no = '000000000000' then
     
                           SET yz_count = -1;
                           SET yw_count = -1;
                           SET rz_count = -1;
                           SET rw_count = -1;
                           SET wz_count = -1;
                           LEAVE step_two;
                        else 
                           if ns_train_date = c_today and ns_start_time < c_current_date then
     
                              SET yz_count = -2;
                              SET yw_count = -2;
                              SET rz_count = -2;
                              SET rw_count = -2;
                              SET wz_count = -2;
                              LEAVE step_one;
                           end if;
                        end if;
                        if flag_in in(0,2) then
     
                           select   max(stop_time.station_no) 
              INTO ns_limit_station_no 
              from basic.stop_time 
              where stop_time.train_no = ns_train_no;
      
                           if @SWV_Error != 0 then 
                              LEAVE SWL_return;
                           end if;
                           if ns_limit_station_no IS NULL then 
                              SET ns_limit_station_no = '00';
                           end if;
                           SET ns_limit_station_name = ns_end_station_name;
                           if (yz_yn = 'n') then
                              SET yz_count = -3;
                           else
                              select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
               INTO yz_count 
               from wjk_tt_tmp_left_base_center 
               where wjk_tt_tmp_left_base_center.train_no = ns_train_no
                               and wjk_tt_tmp_left_base_center.train_date = ns_train_date
                               and wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
                               and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,yz_types) > 0;
                              if @SWV_Error != 0 then 
                                 LEAVE SWL_return;
                              end if;
                              if (yz_count IS NULL or yz_count <= 0) then 
                                 SET yz_count = 0;
                              end if;
                           end if;
                           if (yw_yn = 'n') then
                              SET yw_count = -3;
                           else
                              select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
               INTO yw_count 
               from wjk_tt_tmp_left_base_center 
               where wjk_tt_tmp_left_base_center.train_no = ns_train_no
                               and wjk_tt_tmp_left_base_center.train_date = ns_train_date
                               and wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
                               and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,yw_types) > 0;
                              if @SWV_Error != 0 then 
                                 LEAVE SWL_return;
                              end if;
                              if (yw_count IS NULL or yw_count <= 0) then 
                                 SET yw_count = 0;
                              end if;
                           end if;
                           if (rz_yn = 'n') then
                              SET rz_count = -3;
                           else
                              select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
               INTO rz_count 
               from wjk_tt_tmp_left_base_center 
               where wjk_tt_tmp_left_base_center.train_no = ns_train_no
                               and wjk_tt_tmp_left_base_center.train_date = ns_train_date
                               and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
                               and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,rz_types) > 0;
                              if @SWV_Error != 0 then 
                                 LEAVE SWL_return;
                              end if;
                              if (rz_count IS NULL or rz_count <= 0) then 
                                 SET rz_count = 0;
                              end if;
                           end if;
                           if (rw_yn = 'n') then
                              SET rw_count = -3;
                           else
                              select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
               INTO rw_count 
               from wjk_tt_tmp_left_base_center 
               where wjk_tt_tmp_left_base_center.train_no = ns_train_no
                               and wjk_tt_tmp_left_base_center.train_date = ns_train_date
                              and wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
                               and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,rw_types) > 0;
                              if @SWV_Error != 0 then 
                                 LEAVE SWL_return;
                              end if;
                              if (rw_count IS NULL or rw_count <= 0) then 
                                 SET rw_count = 0;
                              end if;
                           end if;
                           if (wz_yn = 'n') then
                              SET wz_count = -3;
                           else
                              select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
               INTO wz_count 
               from wjk_tt_tmp_left_base_center 
               where wjk_tt_tmp_left_base_center.train_no = ns_train_no
                               and wjk_tt_tmp_left_base_center.train_date = ns_train_date
                               and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
                               and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,wz_types) > 0;
                              if @SWV_Error != 0 then 
                                 LEAVE SWL_return;
                              end if;
                              if (wz_count IS NULL or wz_count <= 0) then 
                                 SET wz_count = 0;
                              end if;
                           end if;
                           LEAVE step_one;
                        else
                           if not exists(select 1 from wjk_tt_tmp_left_base_center
                             where wjk_tt_tmp_left_base_center.train_date = ns_train_date 
               and wjk_tt_tmp_left_base_center.train_no = ns_train_no) 
              then
               
                              if (yz_yn = 'n') then 
                                 SET yz_count = -3;
                              else              
                                 SET yz_count = 0;
                              end if;
                              if (rz_yn = 'n') then 
                                 SET rz_count = -3;
                              else              
                                 SET rz_count = 0;
                              end if;
                              if (yw_yn = 'n') then 
                                 SET yw_count = -3;
                              else              
                                 SET yw_count = 0;
                              end if;
                              if (rw_yn = 'n') then 
                                 SET rw_count = -3;
                              else              
                                 SET rw_count = 0;
                              end if;
                              if (wz_yn = 'n') then 
                                 SET wz_count = -3;
                              else              
                                 SET wz_count = 0;
                              end if;
                              LEAVE step_one;
                           end if;
                           select   stop_time.station_no 
              INTO tmp_limit_station_no 
              from basic.stop_time 
              where stop_time.train_no = ns_train_no
                            and stop_time.station_telecode = single_assign_station
                            and stop_time.start_date <= ns_train_date and stop_date >= ns_train_date;
                           if tmp_limit_station_no IS NULL then 
                              SET tmp_limit_station_no = '00';
                           end if;
         begin
        
        
          DECLARE get_limit CURSOR FOR 
          SELECT distinct limit_station
          FROM wjk_tt_tmp_left_base_center
          where wjk_tt_tmp_left_base_center.train_date = ns_train_date 
        and wjk_tt_tmp_left_base_center.train_no = ns_train_no
        and wjk_tt_tmp_left_base_center.limit_station > tmp_limit_station_no;
    
          OPEN get_limit;
          SET NO_DATA = 0;
          FETCH get_limit INTO ns_limit_station_no;
          while NO_DATA != 2 DO
          if NO_DATA = 1 then
       
          SET @SWV_Error = 30111;
          SET SWP_Ret_Value = -1;
          LEAVE SWL_return;
          end if;
        
 
 


         
          select   stop_time.station_name 
                INTO ns_limit_station_name 
                from basic.stop_time 
                where stop_time.train_no = ns_train_no
         and stop_time.station_no = ns_limit_station_no;

 
 
 
 
 
          if @SWV_Error != 0 then 
          LEAVE SWL_return;
          end if;
          if ns_limit_station_no IS NULL then 
          SET ns_limit_station_no = '00';
          end if;
          if ns_limit_station_name IS NULL then 
          SET ns_limit_station_name = ' ';
          end if; 



 
 

           
          if (yz_yn = 'n') then
          SET yz_count = -3;
          else
          select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
          INTO yz_count 
          from wjk_tt_tmp_left_base_center 
          where wjk_tt_tmp_left_base_center.train_no = ns_train_no
          and wjk_tt_tmp_left_base_center.train_date = ns_train_date
          and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
          and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,yz_types) > 0;
          if @SWV_Error != 0 then 
          LEAVE SWL_return;
          end if;
          if (yz_count IS NULL or yz_count <= 0) then 
          SET yz_count = 0;
          end if;
          end if;
          if (yw_yn = 'n') then
          SET yw_count = -3;
          else
          select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
                  INTO yw_count 
                  from wjk_tt_tmp_left_base_center 
                  where wjk_tt_tmp_left_base_center.train_no = ns_train_no
          and wjk_tt_tmp_left_base_center.train_date = ns_train_date
          and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
          and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,yw_types) > 0;
          if @SWV_Error != 0 then 
          LEAVE SWL_return;
          end if;
          if (yw_count IS NULL or yw_count <= 0) then 
          SET yw_count = 0;
          end if;
          end if;
          if (rz_yn = 'n') then
          SET rz_count = -3;
          else
          select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
                  INTO rz_count 
                  from wjk_tt_tmp_left_base_center 
                  where wjk_tt_tmp_left_base_center.train_no = ns_train_no
          and wjk_tt_tmp_left_base_center.train_date = ns_train_date
          and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
          and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,rz_types) > 0;
          if @SWV_Error != 0 then 
          LEAVE SWL_return;
          end if;
          if (rz_count IS NULL or rz_count <= 0) then 
          SET rz_count = 0;
          end if;
          end if;
          if (rw_yn = 'n') then
          SET rw_count = -3;
          else
          select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
                  INTO rw_count 
                  from wjk_tt_tmp_left_base_center 
                  where wjk_tt_tmp_left_base_center.train_no = ns_train_no
          and wjk_tt_tmp_left_base_center.train_date = ns_train_date
          and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
          and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,rw_types) > 0;
          if @SWV_Error != 0 then 
          LEAVE SWL_return;
          end if;
          if (rw_count IS NULL or rw_count <= 0) then 
          SET rw_count = 0;
          end if;
          end if;
          if (wz_yn = 'n') then
          SET wz_count = -3;
          else
          select   sum(wjk_tt_tmp_left_base_center.ticket_quantity) 
                  INTO wz_count 
                  from wjk_tt_tmp_left_base_center 
                  where wjk_tt_tmp_left_base_center.train_no = ns_train_no
          and wjk_tt_tmp_left_base_center.train_date = ns_train_date
          and  wjk_tt_tmp_left_base_center.limit_station = ns_limit_station_no
          and LOCATE(wjk_tt_tmp_left_base_center.seat_type_code,wz_types) > 0;
          if @SWV_Error != 0 then 
          LEAVE SWL_return;
          end if;
          if (wz_count IS NULL or wz_count <= 0) then 
          SET wz_count = 0;
          end if;
          end if;


 
 
        
          insert into tt_WJK_LEFT_remain_ticket
                 values(ns_station_telecode,
                   ns_train_no,
                   ns_station_train_code,
                   ns_train_date,
                   ns_start_station_name,
                   ns_end_station_name,
                   ns_limit_station_no,
                   ns_limit_station_name,
                   ns_direction_name,
                   ns_arrive_time,
                   ns_start_time,
                   yz_count,
                   yw_count,
                   rz_count,
                   rw_count,
                   wz_count);
       
          SET NO_DATA = 0;
          FETCH get_limit INTO ns_limit_station_no;
          END WHILE;
          CLOSE get_limit;
       end;
                           LEAVE step_two;
                        end if;
                     END;
      leave step_one;
      end loop step_one;
     
                     insert into tt_WJK_LEFT_remain_ticket
             values(ns_station_telecode,
               ns_train_no,
               ns_station_train_code,
               ns_train_date,
               ns_start_station_name,
               ns_end_station_name,
               ns_limit_station_no,
               ns_limit_station_name,
               ns_direction_name,
               ns_arrive_time,
               ns_start_time,
               yz_count,
               yw_count,
               rz_count,
               rw_count,
               wz_count);
         

                  END;
         leave step_two;
         end loop step_two;
                  SET ni_day = ni_day+1;
               end;
            END WHILE;     
         end;
      END WHILE;       
      SET tmp_no = tmp_no+1;
   END WHILE;   
               
  
   CREATE TEMPORARY TABLE IF not EXISTS  wjk_tt_tmp 
   AS 
   select tt_WJK_LEFT_remain_ticket.train_code 
      from tt_WJK_LEFT_remain_ticket
      group by tt_WJK_LEFT_remain_ticket.train_code
      having count(*) >= 2; 
 
   
   open cur_dele;
   SET NO_DATA = 0;
   fetch cur_dele into tmp_train_code;
   while NO_DATA != 2 DO
      if NO_DATA = 1 then
   
         SET @SWV_Error = 30111;
         SET SWP_Ret_Value = -1;
         LEAVE SWL_return;
      end if;
   
      delete FROM tt_WJK_LEFT_remain_ticket
      where tt_WJK_LEFT_remain_ticket.train_code = tmp_train_code
       and tt_WJK_LEFT_remain_ticket.yz_count = -1 
  and tt_WJK_LEFT_remain_ticket.yw_count = -1 
  and tt_WJK_LEFT_remain_ticket.rz_count = -1 
  and tt_WJK_LEFT_remain_ticket.rw_count = -1 
  and tt_WJK_LEFT_remain_ticket.wz_count = -1;
      SET NO_DATA = 0;
      fetch cur_dele into tmp_train_code;
   END WHILE;
   close cur_dele;


 if out_flag=2 then
  select '21====',assign_station_in;
   end if;
   if LOCATE('BXP',assign_station_in) > 0 then  
      update tt_WJK_LEFT_remain_ticket 
      set tt_WJK_LEFT_remain_ticket.train_code = 'T97' 
      where tt_WJK_LEFT_remain_ticket.train_code = 'Q97';
   end if;    




   SET ns_train_date = DATE_FORMAT(TIMESTAMPADD(day,9,CURRENT_TIMESTAMP),'%Y%m%d');

  






   select tt_WJK_LEFT_remain_ticket.station_telecode,
    tt_WJK_LEFT_remain_ticket.train_no,
    tt_WJK_LEFT_remain_ticket.train_code,
    tt_WJK_LEFT_remain_ticket.train_date,
    tt_WJK_LEFT_remain_ticket.start_station_name,
    tt_WJK_LEFT_remain_ticket.end_station_name,
    tt_WJK_LEFT_remain_ticket.limit_station_name,
    tt_WJK_LEFT_remain_ticket.direction_name,
    tt_WJK_LEFT_remain_ticket.arrive_time,
    tt_WJK_LEFT_remain_ticket.start_time,
    tt_WJK_LEFT_remain_ticket.yz_count,
    tt_WJK_LEFT_remain_ticket.yw_count,
    tt_WJK_LEFT_remain_ticket.rz_count,
    tt_WJK_LEFT_remain_ticket.rw_count,
    tt_WJK_LEFT_remain_ticket.wz_count
   from tt_WJK_LEFT_remain_ticket 
   order by tt_WJK_LEFT_remain_ticket.station_telecode,tt_WJK_LEFT_remain_ticket.train_date,tt_WJK_LEFT_remain_ticket.train_no,
    tt_WJK_LEFT_remain_ticket.direction_name,tt_WJK_LEFT_remain_ticket.limit_station_name;

   SET SWP_Ret_Value = 0;
END

DELIMITER ;
