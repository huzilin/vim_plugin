import sys

sys.path.append("..")
from include import unpack_byte
from include import global_var


blob_type = {
    1: [249, 'TinyBlob/Tiny Text'],
    2: [252, 'Blob/Text'],
    3: [250, 'MediumBlob/Medium Text'],
    4: [251, 'LongBlob/Long Text']
}


class Table_Map_Event:
    """
    19
    table_id_len = 6
    flags_len = 2
    schema_name_length_len = 1
    schema_name = schema_name_length
    table_name_length_len = 1
    table_name = table_name_length
    column_count = lenenc_int
    column_type_def = column_count
    column_meta_def = lenenc_str
    nul_bitmap = (column_count + 7) / 8
    """

    def __init__(self, post_buf):
        self.parse = unpack_byte.Parse_Byte_Stream(post_buf)

        self.table_id = self.parse.get_uint48()
        self.flags = self.parse.get_uint16()

        database_len = self.parse.get_uint8()
        self.database_name = self.parse.get_char(database_len)
        assert(self.parse.get_uint8() == 0)

        table_name_len = self.parse.get_uint8()
        self.table_name = self.parse.get_char(table_name_len)
        assert(self.parse.get_uint8() == 0)

        self.column_count = self.parse.get_length_encoded_int()

        self.column_type_list = list()
        for each in range(1, self.column_count+1):
            self.column_type_list.append(self.parse.get_uint8())

        self.column_info = dict()
        self.metedata_len = self.parse.get_uint8()
        for column_num, item in enumerate(self.column_type_list, 1):
            if item == 1:
                self.column_info[column_num] =\
                    {'column_type_num': 1, 'column_type': 'TINYINT'}
                continue
            if item == 2:
                self.column_info[column_num] =\
                    {'column_type_num': 2, 'column_type': 'SMALLINT'}
                continue
            if item == 3:
                self.column_info[column_num] =\
                    {'column_type_num': 3, 'column_type': 'INTEGER'}
                continue
            if item == 4:
                self.sizeof_float_on_server = self.parse.get_uint8()
                self.column_info[column_num] =\
                    {'column_type_num': 4, 'column_type': 'FLOAT'}
                continue
            elif item == 5:
                self.sizeof_double_on_server = self.parse.get_uint8()
                self.column_info[column_num] =\
                    {'column_type_num': 5, 'column_type': 'DOUBLE'}
                continue
            if item == 6:
                self.column_info[column_num] =\
                    {'column_type_num': 6, 'column_type': 'NULL'}
                continue
            if item == 7:
                self.column_info[column_num] =\
                    {'column_type_num': 7, 'column_type': 'TIMESTAMP'}
                continue
            if item == 8:
                self.column_info[column_num] =\
                    {'column_type_num': 8, 'column_type': 'BIGINT'}
                continue
            if item == 9:
                self.column_info[column_num] =\
                    {'column_type_num': 9, 'column_type': 'MEDIUMINT'}
                continue
            if item == 10:
                self.column_info[column_num] =\
                    {'column_type_num': 10, 'column_type': 'DATE'}
                continue
            if item == 11:
                self.column_info[column_num] =\
                    {'column_type_num': 11, 'column_type': 'TIME'}
                continue
            if item == 12:
                self.column_info[column_num] =\
                    {'column_type_num': 12, 'column_type': 'DATETIME'}
                continue
            if item == 13:
                self.column_info[column_num] =\
                    {'column_type_num': 13, 'column_type': 'YEAR'}
                continue
            elif item == 15:
                length = self.parse.get_uint16()
                column_type_detailed = 'VARCHAR/VARBINARY(' + str(length) + ')'
                self.column_info[column_num] =\
                    {'column_type_num': 15,
                     'column_type': column_type_detailed,
                     'meta_length': length}
                continue
            elif item == 16:
                first_bitfield, second_bitfield = self.parse.get_uint8(2)
                meta_length = first_bitfield + second_bitfield * 8
                column_type_detailed = 'BIT(' + str(meta_length) + ')'
                self.column_info[column_num] =\
                    {'column_type_num': 16,
                     'column_type': column_type_detailed,
                     'meta_length': meta_length}
                continue
            elif item == 246:
                precision, decimals = self.parse.get_uint8(2)
                column_type_detailed =\
                    'DECIMAL(' + str(precision) + ',' + str(decimals) + ')'
                self.column_info[column_num] =\
                    {'column_type_num': 246,
                     'column_type': column_type_detailed,
                     'precision': precision,
                     'decimals': decimals}
                continue
            elif item == 252:
                blob_type_num = self.parse.get_uint8()
                self.column_info[column_num] =\
                    {'column_type_num': blob_type[blob_type_num][0],
                     'column_type': blob_type[blob_type_num][1]}
                continue
            elif item == 254:
                real_type_num, length = self.parse.get_uint8(2)
                if real_type_num == 254:
                    column_type_detailed = 'CHAR(' + str(length) + ')'
                    self.column_info[column_num] =\
                        {'column_type_num': real_type_num,
                         'column_type': column_type_detailed,
                         'meta_length': length}
                elif real_type_num == 247:
                    self.column_info[column_num] =\
                        {'column_type_num': real_type_num,
                         'column_type': 'ENUM',
                         'length': length,
                         'meta_length': length}
                elif real_type_num == 248:
                    self.column_info[column_num] =\
                        {'column_type_num': real_type_num,
                         'column_type': 'SET',
                         'length': length,
                         'meta_length': length}
                continue
            elif item == 255:
                length = self.parse.get_uint8()
                type = 'Geometry/Point/LineString/Polygon/MultiPoint\
/MultiLineString/MultiPolygon/GeometryCollection'
                self.column_info[column_num] =\
                    {'column_type_num': 255,
                     'column_type': type,
                     'length': length,
                     'meta_length': length}
                continue
            else:
                print item

        nul_map = ''
        full_bit = self.column_count / 8
        incomplete_bit = self.column_count % 8
        if full_bit:
            full_bit_list = self.parse.get_uint8(full_bit)
            if isinstance(full_bit_list, int):
                full_bit_list = [full_bit_list]

            for each in full_bit_list:
                nul_map = bin(each).split('b')[1].zfill(8) + nul_map

        if incomplete_bit:
            nul_map =\
                bin(self.parse.get_uint8())\
                .split('b')[1].zfill(incomplete_bit) + nul_map

        nul_column_list =\
            filter(lambda n: nul_map[n] == '1', range(0, self.column_count))
        nul_column_list = [self.column_count - x for x in nul_column_list]
#        print column_num
#        print nul_column_list
#        print self.column_info
        for column_num in range(1, self.column_count + 1):
            if column_num in nul_column_list:
                self.column_info[column_num]['null_flag'] = 1
            else:
                self.column_info[column_num]['null_flag'] = 0

    def event_output(self):
        set_var = global_var.GlobalVar()
        set_var.set_database(self.database_name)
        set_var.set_table(self.table_name)
        set_var.set_column_info(self.column_info)
        print "table_id: %d" % self.table_id
        print "flags: %d" % self.flags
        print "database_name: %s\ttable_name: %s" %\
            (self.database_name, self.table_name)
        print "column_count: %d\tmetedata_len: %d" %\
            (self.column_count, self.metedata_len)
        print "column_info:"
        output_list = ['column_type', 'null_flag']
        for column_num, info in self.column_info.items():
            print "\tcolumn %d" % column_num
            for key, value in info.items():
                if key in output_list:
                    print '\t\t%s: %s' % (key, value)
