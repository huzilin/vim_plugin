import sys
import binascii

sys.path.append("..")
from include import unpack_byte
from include import global_var




class Rows_Event:
    """
    header
        table_id_len = 6
        flags_len = 2

    post
        column_count = lenenc_int
        full_nul_bitmap_len = (column_count + 7) / 8

        row
            nul_bitmap_len = full_nul_bitmap_len
            column_data = defined in table-map
        event_type = ['write', 'update', 'delete']
    """
    flags = {
        1: "End of statement",
        2: "No foreign key checks",
        3: "No unique key checks",
        4: "Row has a columns"
    }

    extra_type_dic = {0: 'RW_V_EXTRAINFO_TAG'}

    def __init__(self, post_buf, version, event_type):
        self.parse = unpack_byte.Parse_Byte_Stream(post_buf)
        self.post_buf = post_buf
        self.buf_len = len(post_buf)
        self.version = version
        self.event_type = event_type

        """Post Header"""
        self.table_id = self.parse.get_uint48()
        self.flags = Rows_Event.flags[self.parse.get_uint16()]

        if self.version == 2:
            extra_data_len = self.parse.get_uint16() - 2
            if extra_data_len:
                self.extra_type =\
                    Rows_Event.extra_type_dic[self.parse.get_uint8()]
                if extra_data_len > 1:
                    self.type_specific =\
                        self.parse.get_char(extra_data_len - 1)

        """Post body"""
        self.column_count = self.parse.get_length_encoded_int()
        if self.event_type == 1:
            self.parse.pos += ((self.column_count + 7) / 8) * 2
        else:
            self.parse.pos += (self.column_count + 7) / 8

    def get_nul_bitmap(self):
        nul_bitmap = ''
        if self.full_nul_bitmap1:
            full_nul_bitmap_list = self.parse.get_uint8(self.full_nul_bitmap1)

            if isinstance(full_nul_bitmap_list, int):
                full_nul_bitmap_list = [full_nul_bitmap_list]

            for each in full_nul_bitmap_list:
                nul_bitmap =\
                    bin(each ^ 0xff).split('b')[1].zfill(8) + nul_bitmap

        if self.incomplete_nul_bitmap1:
            nul_bitmap =\
                bin(self.parse.get_uint8() ^ 0xff).split('b')[1]\
                .zfill(self.incomplete_nul_bitmap1) + nul_bitmap

        return nul_bitmap

    def get_tinyint(self):
        return self.parse.get_int8()

    def get_smallint(self):
        return self.parse.get_int16()

    def get_mediumint(self):
        return self.parse.get_int24()

    def get_int(self):
        return self.parse.get_int32()

    def get_bigint(self):
        return self.parse.get_int64()

    def get_year(self):
        ret = self.parse.get_uint8()
        if ret:
            value = '%04d' % (1900 + ret)
        else:
            value = "0000"
        return "'" + value + "'"

    def get_date(self):
        ret = self.parse.get_uint24()
        if ret:
            value = '%04d-%02d-%02d' %\
                    (ret / (16 * 32), ret / 32 % 16, ret % 32)
        else:
            value = "0000-00-00"
        return "'" + value + "'"

    def get_time(self):
        ret = self.parse.get_uint24()
        if ret:
            value = '%02d:%02d:%02d' % ((ret % 1000000) / 10000,
                                        (ret % 10000) / 100,
                                        (ret % 100))
        else:
            value = "00:00:00"
        return "'" + value + "'"

    def get_datetime(self):
        ret = self.parse.get_uint64()
        if ret:
            value = '%04d-%02d-%02d \
%02d:%02d:%02d' % (ret / 10000000000,
                   (ret % 10000000000) / 100000000,
                   (ret % 100000000) / 1000000,
                   (ret % 1000000) / 10000,
                   (ret % 10000) / 100,
                   (ret % 100))
        else:
            value = "0000-00-00 00:00:00"
        return "'" + value + "'"

    def get_char(self):
        length = self.parse.get_uint8()
        content = self.post_buf[self.parse.pos: self.parse.pos + length]
        value = str()
        for each in range(len(content)):
            hex_num = binascii.b2a_hex(content[each])
            dec_num = int(hex_num, 16)
            if dec_num < 32:
                value += r'\x' + hex_num
                self.parse.pos += 1
            elif dec_num > 127:
                value += '<' + hex_num + '>'
                self.parse.pos += 1
            else:
                value += self.parse.get_char()
        return "'" + value + "'"

    def get_varchar(self, meta_length):
        if meta_length < 256:
            length = self.parse.get_uint8()
        else:
            length = self.parse.get_uint16()
        content = self.post_buf[self.parse.pos: self.parse.pos + length]
        value = str()
        for each in range(len(content)):
            hex_num = binascii.b2a_hex(content[each])
            dec_num = int(hex_num, 16)
            if dec_num < 32:
                value += r'\x' + hex_num
                self.parse.pos += 1
            elif dec_num > 127:
                value += '<' + hex_num + '>'
                self.parse.pos += 1
            else:
                value += self.parse.get_char()
        return "'" + value + "'"

    def get_bit(self, meta_length):
        length = (meta_length + 7) / 8
        if length == 1:
            data = self.parse.get_uint8()
            value = "b'" + bin(data).split('b')[1] + "'"
        if length == 2:
            end_pos = self.parse.pos + length
            data = struct.unpack('>H',
                                 self.post_buf[self.parse.pos: end_pos])[0]
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        if length == 3:
            end_pos = self.parse.pos + length
            d1, d2 = struct.unpack('>BH',
                                   self.post_buf[self.parse.pos: end_pos])[0]
            data = d1 << 16 + d2
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        if length == 4:
            end_pos = self.parse.pos + length
            data = struct.unpack('>I',
                                 self.post_buf[self.parse.pos: end_pos])[0]
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        if length == 5:
            end_pos = self.parse.pos + length
            d1, d2 = struct.unpack('>BI',
                                   self.post_buf[self.parse.pos: end_pos])[0]
            data = d1 << 32 + d2
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        if length == 6:
            end_pos = self.parse.pos + length
            d1, d2 = struct.unpack('>HI',
                                   self.post_buf[self.parse.pos: end_pos])[0]
            data = d1 << 32 + d2
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        if length == 7:
            end_pos = self.parse.pos + length
            d1, d2, d3 =\
                struct.unpack('>BHI',
                              self.post_buf[self.parse.pos: end_pos])[0]
            data = d1 << 48 + d2 << 32 + d3
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        if length == 8:
            end_pos = self.parse.pos + length
            data = struct.unpack('>Q',
                                 self.post_buf[self.parse.pos: end_pos])[0]
            value = "b'" + bin(data).split('b')[1] + "'"
            self.parse.pos = end_pos
        return value

    def get_enum(self, meta_length):
        if meta_length == 1:
            value = self.parse.get_uint8()
        if meta_length == 2:
            value = self.parse.get_uint16()
        return value

    def get_set(self, meta_length):
        if meta_length == 1:
            data = self.parse.get_uint8()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 2:
            data = self.parse.get_uint16()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 3:
            data = self.parse.get_uint24()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 4:
            data = self.parse.get_uint32()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 5:
            data = self.parse.get_uint40()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 6:
            data = self.parse.get_uint48()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 7:
            data = self.parse.get_uint56()
            value = "b'" + bin(data).split('b')[1] + "'"
        if meta_length == 8:
            data = self.parse.get_uint64()
            value = "b'" + bin(data).split('b')[1] + "'"
        return value

    def get_tiny_blob(self):
        length = self.parse.get_uint8()
        value = self.parse.read(length)
        return "'" + value + "'"

    def get_blob(self):
        length = self.parse.get_uint16()
        value = self.parse.read(length)
        return "'" + value + "'"

    def get_medium_blob(self):
        length = self.parse.get_uint24()
        value = self.parse.read(length)
        return "'" + value + "'"

    def get_long_blob(self):
        length = self.parse.get_uint32()
        value = self.parse.read(length)
        return "'" + value + "'"

    def get_geometry(self, meta_length):
        if meta_length == 1:
            value = self.parse.get_uint8()
        if meta_length == 2:
            value = self.parse.get_uint16()
        if meta_length == 3:
            value = self.parse.get_uint24()
        if meta_length == 4:
            value = self.parse.get_uint32()
        self.parse.pos += value
        return "!! Don't know how to handle column type=255"

    def get_row_data(self, nul_bitmap, column_info):
        row_data = list()
        for num, info in column_info.items():
            if nul_bitmap[num - 1]:
                if info['column_type_num'] == 1:
                    row_data.append(self.parse.get_int8())
                if info['column_type_num'] == 2:
                    row_data.append(self.parse.get_int16())
                if info['column_type_num'] == 3:
                    row_data.append(self.parse.get_int32())
                if info['column_type_num'] == 4:
                    row_data.append(self.parse.get_float())
                if info['column_type_num'] == 5:
                    row_data.append(self.parse.get_double())
                if info['column_type_num'] == 7:
                    row_data.append(self.parse.get_timestamp())
                if info['column_type_num'] == 8:
                    row_data.append(self.parse.get_int64())
                if info['column_type_num'] == 9:
                    row_data.append(self.parse.get_int24())
                if info['column_type_num'] == 10:
                    row_data.append(self.get_date())
                if info['column_type_num'] == 11:
                    row_data.append(self.get_time())
                if info['column_type_num'] == 12:
                    row_data.append(self.get_datetime())
                if info['column_type_num'] == 13:
                    row_data.append(self.get_year())
                if info['column_type_num'] == 15:
                    data = self.get_varchar(column_info[num]['meta_length'])
                    row_data.append(data)
                if info['column_type_num'] == 16:
                    data = self.get_bit(column_info[num]['meta_length'])
                    row_data.append(data)
                if info['column_type_num'] == 246:
                    data =\
                        self.parse.get_decimal(column_info[num]['precision'],
                                               column_info[num]['decimals'])
                    row_data.append(data)
                if info['column_type_num'] == 247:
                    data = self.get_enum(column_info[num]['meta_length'])
                    row_data.append(data)
                if info['column_type_num'] == 248:
                    data = self.get_set(column_info[num]['meta_length'])
                    row_data.append(data)
                if info['column_type_num'] == 249:
                    row_data.append(self.get_tiny_blob())
                if info['column_type_num'] == 250:
                    row_data.append(self.get_medium_blob())
                if info['column_type_num'] == 251:
                    row_data.append(self.get_long_blob())
                if info['column_type_num'] == 252:
                    row_data.append(self.get_blob())
                if info['column_type_num'] == 254:
                    row_data.append(self.get_char())
                if info['column_type_num'] == 255:
                    data = self.get_geometry(column_info[num]['meta_length'])
                    row_data.append(data)
            else:
                row_data.append('Null')
        return row_data

    def get_write_or_delete_data(self, column_info):
        self.full_nul_bitmap1 = self.column_count / 8
        self.incomplete_nul_bitmap1 = self.column_count % 8

        rows_data = list()
        row = 0
        while self.parse.pos < self.buf_len:
            nul_bitmap = self.get_nul_bitmap()
            rows_data.append(self.get_row_data(nul_bitmap, column_info))
            row += 1
        if self.parse.pos == self.buf_len:
            return rows_data
        else:
            print "ERROR"
            print os.exit(1)

    def get_update_data(self, column_info):
        self.full_nul_bitmap1 = self.column_count / 8
        self.incomplete_nul_bitmap1 = self.column_count % 8

        pre_rows_data = list()
        modify_rows_data = list()
        row = 0
        while self.parse.pos < self.buf_len:
            nul_bitmap_pre = self.get_nul_bitmap()
            pre_rows_data.append(self.get_row_data(nul_bitmap_pre, column_info))
            nul_bitmap_modify = self.get_nul_bitmap()
            modify_rows_data.append(self.get_row_data(nul_bitmap_modify, column_info))
            row += 1
        if self.parse.pos == self.buf_len:
            return modify_rows_data, pre_rows_data
        else:
            print "ERROR"
            print os.exit(1)

    def event_output(self):
        get_var = global_var.GlobalVar()
        database_name = get_var.get_database()
        table_name = get_var.get_table()
        column_info = get_var.get_column_info()

        print "database_name:%s" % database_name
        print "table_name:%s" % table_name
        print "column_info:%s" % column_info
        if self.version == 2:
            if hasattr(self, 'extra_type'):
                print "extra_type: %s" % self.extra_type
            if hasattr(self, 'type_specific'):
                print "type_specific: %s" % self.type_specific

        if 'database_name' in locals().keys()\
           or 'table_name' in locals().keys():
            if self.event_type == 0:
                row_data = self.get_write_or_delete_data(column_info)
                for each_row in row_data:
                    print "insert into `%s`.`%s` values(" %\
                        (database_name, table_name)
                    for column_num, column_data in enumerate(each_row, 1):
                        print "\t@%d = %s" % (column_num, column_data),
                        if column_num != self.column_count:
                            print ","
                    print ");"
            elif self.event_type == 1:
                modify_rows_data, pre_rows_data = self.get_update_data(column_info)
                row_num = len(modify_rows_data,)
                for each in range(row_num):
                    modify_row, pre_row =\
                        modify_rows_data[each], pre_rows_data[each]
                    print "Update `%s`.`%s` where\nwhere" %\
                        (database_name, table_name)
                    for column_num, column_data in enumerate(pre_row, 1):
                        print "\t@%d = %s" % (column_num, column_data),
                        if column_num != self.column_count:
                            print "and"
                    print "\nset"
                    for column_num, column_data in enumerate(modify_row, 1):
                        print "\t@%d = %s" % (column_num, column_data),
                        if column_num != self.column_count:
                            print "and"
                    print ";"
            elif self.event_type == 2:
                row_data = self.get_write_or_delete_data(column_info)
                for each_row in row_data:
                    print "Delete from `%s`.`%s` where" %\
                        (database_name, table_name)
                    for column_num, column_data in enumerate(each_row, 1):
                        print "\t@%d = %s" % (column_num, column_data),
                        if column_num != self.column_count:
                            print "and"
                    print ";"
        else:
            print "Row event for unknown table!"


class Write_Rows_Event_V1(Rows_Event):
    """23"""
    def __init__(self, post_buf):
        Rows_Event.__init__(self, post_buf, 1, 0)


class Update_Rows_Event_V1(Rows_Event):
    """24"""
    def __init__(self, post_buf):
        Rows_Event.__init__(self, post_buf, 1, 1)


class Delete_Rows_Event_V1(Rows_Event):
    """25"""
    def __init__(self, post_buf):
        Rows_Event.__init__(self, post_buf, 1, 2)


class Write_Rows_Event_V2(Rows_Event):
    """30"""
    def __init__(self, post_buf):
        Rows_Event.__init__(self, post_buf, 2, 0)


class Update_Rows_Event_V2(Rows_Event):
    """31"""
    def __init__(self, post_buf):
        Rows_Event.__init__(self, post_buf, 2, 1)


class Delete_Rows_Event_V2(Rows_Event):
    """32"""
    def __init__(self, post_buf):
        Rows_Event.__init__(self, post_buf, 2, 2)
