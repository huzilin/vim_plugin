#!/usr/bin/python
# -*- coding: UTF-8 -*- 
from ssh import *
import config,re,sys,os,time,threading,getopt 
from get_info_from_install_and_my_cnf import *

run_dir = os.getcwd()

def usage():

    print("Usage:%s [-h] [--help|--thread] args...." % sys.argv[0]);


class New_SSHClient(paramiko.SSHClient):
    def __init__(self):
        paramiko.SSHClient.__init__(self)

    def exec_command(self, command, bufsize=-1, timeout=None, get_pty=False):
        chan = self._transport.open_session()
        if(get_pty):
            chan.get_pty()
        chan.settimeout(timeout)
        chan.exec_command(command)
        stdin = chan.makefile('wb', bufsize)
        stdout = chan.makefile('rb', bufsize)
        stderr = chan.makefile_stderr('rb', bufsize)
        stdreturn = chan.recv_exit_status()
        return stdin, stdout, stderr,stdreturn

class Install_Or_Init_Error(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class SSH_CMD_With_Report_Error(SSH_CMD):

    def __init__(self,error_dic,ip,user,password,port,cmd,db_port,need_stdout = False):
        self.error_dic = error_dic
        self.type = sys.getfilesystemencoding()
        self.db_port = db_port
        self.error = 1
        self.thread_stop = False
        self.stdreturn = 0
        SSH_CMD.__init__(self,ip,user,password,port,cmd,need_stdout=need_stdout)

    def run(self):
        ssh = New_SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(self.ip,self.port,self.user,self.password)
        while not self.thread_stop:
            stdin, stdout, stderr, self.stdreturn = ssh.exec_command(self.cmd)
            if self.stdreturn == 0:
                self.set_no_error()
                self.stop()
            else:
                self.stop()
                self.raise_error()
        ssh.close()
    
    def raise_error(self):
        my_error = Install_Or_Init_Error(self.error_dic[self.stdreturn])
        print "IP:%s\tPORT:%d\tERROR_NUM:%s" % (self.ip,self.db_port,self.stdreturn)
        raise my_error

error_dic={101:u"Basedir's parent directory has a file.",102:u"The installation package decompression directory file or directory exists ",103:u"Basedir's location has a file or directory.",104:u"Decompression failed.",105:u"Modify the unzipped directory permissions to fail.",106:u"Failed to create soft links.",107:u"Modify the basedir permission to fail.",201:u"Failed to create datadir.",202:u"Modify the datadir permission to fail.",203:u"Failed to create the directory with the socket",204:u"Modify the socket's directory permissions",205:u"Failed to create the redo_log's directory.",206:u"Modify the redo_log directory permissions to fail.",207:u"Failed to create the undo's directory.",208:u"Modify the undo directory permissions to fail.",209:u"Failed to create the error_log's directory.",210:u"Modify the error_log's directory permissions to fail",211:u"Failed to create directory of pid.",212:u"Modify the pid's directory permissions to fail.",213:u"Failed to create directory of tmp.",214:u"Modify the tmp's directory permissions to fail.",215:u"Failed to create directory of log_bin's directory.",216:u"Modify the log bin's directory permissions to fail.",217:u"Database initialization failed.",218:u"Failed to copy the configuration file to the specified directory.",219:u"Modify the configuration file permissions to fail.",220:u"Modify server_id failure.",221:u"Failed to start the database or timeout.",222:u"Failed to create a db_user.",223:u"Reset master to fail."}

if __name__ == "__main__":

    run_max_thread = 2

    try:
        opts,args = getopt.getopt(sys.argv[1:], "h", ["help", "thread="]);
        for opt,arg in opts:  
            if opt == ("--help") or opt == ("-h"):  
                usage();  
                sys.exit(1);  
            elif opt == ("--thread"):
                run_max_thread =  int(arg)
    
    except getopt.GetoptError:  
        print("getopt error!");  
        usage();  
        sys.exit(1);  

    run_dir = os.getcwd()
    all_info = get_server_and_cnf_info()
    server_list = all_info['server_list']
    server_info_dic = all_info['server_info_dic']
    cnf_info_dic = all_info['cnf_info_dic']
    main_dic = all_info['main_dic']

    for each_server in server_list:
        if server_info_dic[each_server]['db_port'] != cnf_info_dic[server_info_dic[each_server]['cnf']][2]['port']:
            print "安装配置文件中的%s的端口，同它使用的%s配置文件中的端口不一致！" % (each_server,server_info_dic[each_server]['cnf'])
            os._exit()

    def string_contrast(str1,str2,fuzzy_list):
        if len(str1) != len(str2):
            return 0
        for i in range(0,len(str1)):
            if str1[i] != str2[i]:
                if str1[i] not in fuzzy_list:
                    return 0
                elif str2[i] not in fuzzy_list:
                    return 0
            else:
                continue
        return 1

    fuzzy_list = ['-','_']
    modify_options_dic = {'interactive_timeout':'31536000','wait_timeout':'31536000','server_id':''}
    for each_cnf in cnf_info_dic.keys():
        cf = config.ConfigParser()
        cf.read(cnf_info_dic[each_cnf][0])
        cnf_mysqld_options = cf.options('mysqld')
        for each in modify_options_dic.keys():
            been_modify = 0
            for each_in_file in cnf_mysqld_options:
                if string_contrast(each,each_in_file,fuzzy_list):
                    cf.set('mysqld',each_in_file,modify_options_dic[each])
                    been_modify = 1
                if been_modify == 0:
                    cf.set('mysqld',each,modify_options_dic[each])
        cf.write(open(each_cnf,"w"))   

    rsync_dic = {}
    rsync_list = list()
    for each in server_list: 
        if [server_info_dic[each]['host'],server_info_dic[each]['tmp_dir']] not in rsync_dic.values():
            rsync_dic.setdefault(each,[server_info_dic[each]['host'],server_info_dic[each]['tmp_dir']])

    rsync_list = rsync_dic.keys()

    mysql_install_list = list()
    mysql_install_dic = {}
    for each in server_list:
        if [server_info_dic[each]['host'],cnf_info_dic[server_info_dic[each]['cnf']][2]['basedir']] not in mysql_install_dic.values():
            mysql_install_dic.setdefault(each,[server_info_dic[each]['host'],cnf_info_dic[server_info_dic[each]['cnf']][2]['basedir']])

    mysql_install_list = mysql_install_dic.keys()

    #sftp MySQL
    print '------------------------------------------------\n传输MySQL包'

    local_mysql_package = main_dic['packet_position']
    packet_name = os.path.basename(local_mysql_package)

   thread = list()
   thread_num = 0
    host_num = len(mysql_install_list)

    for each in mysql_install_list:
        remote_package_position = server_info_dic[each]['tmp_dir'] + '/' + packet_name
        sftp_mysql = SSH_SFTP(server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),remote_package_position,local_mysql_package)

        thread.append(sftp_mysql)
        thread_num += 1

        if len(thread) == run_max_thread or thread_num == host_num:
            for each_thread in thread:
                each_thread.setDaemon(True)
                each_thread.start()

            try_times = 1
            for each_thread in thread:
                while try_times < 40:
                    if each_thread.is_alive() == False:
                        break
                    else:
                        try_times += 1
                        time.sleep(10)

            for each_thread in thread:
                if each_thread.is_alive() == False:
                    continue
                else:
                    each_thread.error_stop()

            error = 0
            for each_thread in thread:
                if each_thread.error == 1:
                    each_thread.get_error()
                    error += 1
            
            if error != 0:
                exit(1)

            thread = list()

    print "传输MySQL完毕"

    #sftp mysql config
    print '------------------------------------------------\n传输MySQL配置文件'

    server_num = len(server_list)
    thread_num = 0

    for each in server_list:
        cnf_name = server_info_dic[each]['cnf']
        local_cnf_position = cnf_info_dic[cnf_name][0]
        remote_cnf_position = server_info_dic[each]['tmp_dir'] + '/' + cnf_name
        sftp_mysql_cnf = SSH_SFTP(server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),remote_cnf_position,local_cnf_position)

        thread.append(sftp_mysql_cnf)

        thread_num += 1

        if len(thread) == run_max_thread or thread_num == server_num:
            for each_thread in thread:
                each_thread.setDaemon(True)
                each_thread.start()

            try_times = 1
            for each_thread in thread:
                while try_times < 40:
                    if each_thread.is_alive() == False:
                        break
                    else:
                        try_times += 1
                        time.sleep(10)

            for each_thread in thread:
                if each_thread.is_alive() == False:
                    continue
                else:
                    each_thread.error_stop()

            error = 0
            for each_thread in thread:
                if each_thread.error == 1:
                    each_thread.get_error()
                    error += 1
            
            if error != 0:
                exit(1)

            thread = list()

    #sftp install_mysql.sh
    print '------------------------------------------------\n传输install_mysql.sh'

    local_install_mysql_sh = run_dir + '/install_mysql.sh'

    thread_num = 0
    rsync_num= len(rsync_list)

    for each in rsync_list:
        remote_install_mysql_sh = server_info_dic[each]['tmp_dir'] + '/install_mysql.sh'
        sftp_install_mysql_sh = SSH_SFTP(server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),remote_install_mysql_sh,local_install_mysql_sh)

        thread.append(sftp_install_mysql_sh)

        thread_num += 1

        if len(thread) == run_max_thread or thread_num == rsync_num:
            for each_thread in thread:
                each_thread.setDaemon(True)
                each_thread.start()

            try_times = 1
            for each_thread in thread:
                while try_times < 20:
                    if each_thread.is_alive() == False:
                        break
                    else:
                        try_times += 1
                        time.sleep(1)

            for each_thread in thread:
                if each_thread.is_alive() == False:
                    continue
                else:
                    each_thread.error_stop()

            error = 0
            for each_thread in thread:
                if each_thread.error == 1:
                    each_thread.get_error()
                    error += 1
            
            if error != 0:
                exit(1)

            thread = list()

    #sftp init_mysql.sh
    print '------------------------------------------------\n传输init_mysql.sh'

    local_init_mysql_sh = run_dir + '/init_mysql.sh'

    thread_num = 0

    for each in rsync_list:
        remote_init_mysql_sh = server_info_dic[each]['tmp_dir'] + '/init_mysql.sh'
        sftp_init_mysql_sh = SSH_SFTP(server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),remote_init_mysql_sh,local_init_mysql_sh)
        thread.append(sftp_init_mysql_sh)

        thread_num += 1

        if len(thread) == run_max_thread or thread_num == rsync_num:
            for each_thread in thread:
                each_thread.setDaemon(True)
                each_thread.start()

            try_times = 1
            for each_thread in thread:
                while try_times < 20:
                    if each_thread.is_alive() == False:
                        break
                    else:
                        try_times += 1
                        time.sleep(1)

            for each_thread in thread:
                if each_thread.is_alive() == False:
                    continue
                else:
                    each_thread.error_stop()

            error = 0
            for each_thread in thread:
                if each_thread.error == 1:
                    each_thread.get_error()
                    error += 1
            
            if error != 0:
                exit(1)

            thread = list()

    #chmod
    print '------------------------------------------------\n修改脚本权限'

    thread_num = 0

    for each in rsync_list:

        chmod_scripts_cmd = 'chmod a+x ' + server_info_dic[each]['tmp_dir'] + '/install_mysql.sh' + ' ' + server_info_dic[each]['tmp_dir'] + '/init_mysql.sh'
        chmod_start = SSH_CMD(server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),chmod_scripts_cmd)

        thread.append(chmod_start)

        thread_num += 1

        if len(thread) == run_max_thread or thread_num == rsync_num:
            for each_thread in thread:
                each_thread.setDaemon(True)
                each_thread.start()

            try_times = 1
            for each_thread in thread:
                while try_times < 20:
                    if each_thread.is_alive() == False:
                        break
                    else:
                        try_times += 1
                        time.sleep(1)

            for each_thread in thread:
                if each_thread.is_alive() == False:
                    continue
                else:
                    each_thread.error_stop()

            error = 0
            for each_thread in thread:
                if each_thread.error == 1:
                    print "IP:%s\tUSER:%s\t............" % (each.ip,each.user),
                    print '\033[1;31;40m',
                    print "[Chown Failed.]",
                    print '\033[0m'
                    error += 1

            if error != 0:
                exit(1)

            thread = list()

    print "chown 完毕"

   #Install MySQL 
    print '------------------------------------------------\n安装MySQL'
    thread = list()
    
    for each in mysql_install_list:
        install_cmd = server_info_dic[each]['tmp_dir'] + "/install_mysql.sh --basedir='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['basedir'] + "' --packet_name='" + os.path.basename(main_dic['packet_position']) + "' --remote_tmp_dir='" + server_info_dic[each]['tmp_dir'] + "'"
        install_start = SSH_CMD_With_Report_Error(error_dic,server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),install_cmd,int(server_info_dic[each]['db_port']),need_stdout=True)
        thread.append(install_start)

    for each in thread:
        each.setDaemon(True)
        each.start()

    try_times = 1
    for each in thread:
        while try_times < 20:
            if each.is_alive() == False:
                break
            else:
                try_times += 1
                time.sleep(10)

    for each in thread:
        if each.is_alive() == False:
            continue
        else:
            each.stop()

    error = 0
    for each in thread:
        if each.error == 1:
            print "IP:%s\tUSER:%s\t............" % (each.ip,each.user),
            print '\033[1;31;40m',
            print "[Install Failed.]",
            print '\033[0m'
            error += 1
    
    if error != 0:
        exit(1)

    print "安装MySQL完毕"

    #Init MySQL 
    print '------------------------------------------------\n初始化MySQL'
    thread = list()
    
    for each in server_list:
        server_id = server_info_dic[each]['host'].split('.')[3] + server_info_dic[each]['db_port']
        init_cmd = server_info_dic[each]['tmp_dir'] + "/init_mysql.sh --basedir='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['basedir'] + "' --datadir='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['datadir'] + "' --packet_name='" + os.path.basename(main_dic['packet_position']) + "' --remote_tmp_dir='" + server_info_dic[each]['tmp_dir'] + "' --socket='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['socket'] + "' --innodb_log_group_home_dir='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['innodb_log_group_home_dir'] + "' --innodb_undo_directory='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['innodb_undo_directory'] + "' --log_error='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['log_error'] + "' --tmpdir='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['tmpdir'] + "' --pid='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['pid_file'] + "' --log_bin='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['log_bin'] + "' --user='" + cnf_info_dic[server_info_dic[each]['cnf']][2]['user'] + "' --my_cnf_name='" + server_info_dic[each]['cnf'] + "' --cnf_remote_path='" + cnf_info_dic[server_info_dic[each]['cnf']][1] + "' --db_user_and_host=\"" + server_info_dic[each]['db_user'] + "\" --db_password=\"" + server_info_dic[each]['db_password'] + "\" --port='" + server_info_dic[each]['db_port'] + "' --ip='" + server_info_dic[each]['host'] + "' --server_id='" + server_id + "'  > /dev/null"
        print init_cmd
        init_start = SSH_CMD_With_Report_Error(error_dic,server_info_dic[each]['host'],server_info_dic[each]['ssh_user'],server_info_dic[each]['ssh_password'],int(server_info_dic[each]['ssh_port']),init_cmd,int(server_info_dic[each]['db_port']),need_stdout=True)
        thread.append(init_start)

    for each in thread:
        each.setDaemon(True)
        each.start()

    try_times = 1
    for each in thread:
        while try_times < 20:
            if each.is_alive() == False:
                break
            else:
                try_times += 1
                time.sleep(10)

    for each in thread:
        if each.is_alive() == False:
            continue
        else:
            each.stop()

    error = 0
    for each in thread:
        if each.error == 1:
            print each.stdreturn
            print "IP:%s\tUSER:%s\tDB_PORT:%s............" % (each.ip,each.user,each.db_port),
            print '\033[1;31;40m',
            print "[Init Failed.]",
            print '\033[0m'
            error += 1
    
    if error != 0:
        exit(1)
    
    print "解压MySQL,创建目录完毕"
    print "安装结束"
