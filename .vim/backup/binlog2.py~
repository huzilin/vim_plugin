#!/usr/bin/python2
#coding:utf-8

import struct
import binascii
import re


global CRC32_len, common_header_len
CRC32_len = 4
common_header_len = 19


def get_uint8(file_handler, num=1):
    if num > 1:
        return struct.unpack(num * 'B', file_handler.read(num * 1))
    elif num == 1:
        return struct.unpack(num * 'B', file_handler.read(num * 1))[0]


def get_uint16(file_handler, num=1):
    if num > 1:
        return struct.unpack('<' + num * 'H', file_handler.read(num * 2))
    elif num == 1:
        return struct.unpack('<' + num * 'H', file_handler.read(num * 2))[0]


def get_uint32(file_handler, num=1):
    if num > 1:
        return struct.unpack('<' + num * 'I', file_handler.read(num * 4))
    elif num == 1:
        return struct.unpack('<' + num * 'I', file_handler.read(num * 4))[0]


def get_uint64(file_handler, num=1):
    if num > 1:
        return struct.unpack('<' + num * 'Q', file_handler.read(num * 8))
    elif num == 1:
        return struct.unpack('<' + num * 'Q', file_handler.read(num * 8))[0]


def get_char(file_handler, num=1):
    return ''.join(struct.unpack(num * 'c', file_handler.read(num * 1)))


def get_reverse_byte_order(file_handler, num):
    byte_list = re.findall(r'.{1}', file_handler.read(num))
    byte_list.reverse()
    return int(binascii.b2a_hex(''.join(byte_list)), 16)

def get_double(file_handler, num=1):
    if num > 1:
        return struct.unpack(num * 'd', file_handler.read(num * 8))
    elif num == 1:
        return struct.unpack(num * 'd', file_handler.read(num * 8))[0]

class Event_Common_Header:

    timestamp_len = 4
    type_code_len = 1
    server_id_len = 4
    event_size_len = 4
    master_postion_len = 4
    flags_len = 2

    def __init__(self, file_handler):
        self.timestamp = int()
        self.type_code = int()
        self.server_id = int()
        self.event_size = int()
        self.master_position = int()
        self.flags = int()

        self.file_handler = file_handler

    def set_timestamp(self):
        self.timestamp = get_uint32(self.file_handler)

    def set_type_code(self):
        self.type_code = get_uint8(self.file_handler)

    def set_server_id(self):
        self.server_id = get_uint32(self.file_handler)

    def set_event_size(self):
        self.event_size = get_uint32(self.file_handler)

    def set_master_position(self):
        self.master_position = get_uint32(self.file_handler)

    def set_flags(self):
        self.flags = get_uint16(self.file_handler)

    def parse_common_header(self):

        self.set_timestamp()
        self.set_type_code()
        self.set_server_id()
        self.set_event_size()
        self.set_master_position()
        self.set_flags()
        return (self.timestamp, self.type_code, self.server_id,
                self.event_size, self.master_position, self.flags)


class Start_Event_V3:

    """1"""
    binlog_ver_len = 2
    server_ver_len = 50
    created_timestamp = 4

    def __init__(self, file_handler):
        self.binlog_ver = int()
        self.server_ver = str()
        self.created_timestamp = int()

        self.file_handler = file_handler

    def set_binlog_ver(self):
        self.binlog_ver = get_uint16(self.file_handler)

    def set_server_ver(self):
        self.server_ver = get_char(self.file_handler, Start_Event_V3.server_ver_len)

    def set_created_timestamp(self):
        self.created_timestamp = get_uint32(self.file_handler)

    def parse_event(self):
        self.set_binlog_ver()
        self.set_server_ver()
        self.set_created_timestamp()
        print "binlog_ver:V%d" % self.binlog_ver
        print "server_ver:%s" % self.server_ver
        print "created_timestamp:%d" % self.created_timestamp
        print self.file_handler.tell()


class Format_Description_Event(Start_Event_V3):

    """15"""
    event_header_len_size_len = 1
    event_type_header_len_size_len = 35
    """version > 5.6.1"""
    CRC32_flag_len = 1

    def __init__(self, file_handler, event_size):
        Start_Event_V3.__init__(self, file_handler)
        self.common_header_len = int()
        self.start_event_V3_len = int()
        self.query_event_len = int()
        self.stop_event_len = int()
        self.rotate_event_len = int()
        self.intvar_event_len = int()
        self.load_event_len = int()
        self.slave_event_len = int()
        self.create_file_event_len = int()
        self.append_block_event_len = int()
        self.exec_load_event_len = int()
        self.delete_file_event_len = int()
        self.new_load_event_len = int()
        self.rand_event_len = int()
        self.user_var_event_len = int()
        self.formate_description_event_len = int()
        self.xid_event_len = int()
        self.begin_load_query_event_len = int()
        self.execute_load_query_event_len = int()
        self.table_map_event_len = int()
        self.delete_rows_eventv0_len = int()
        self.delete_rows_eventv1_len = int()
        self.delete_rows_eventv2_len = int()
        self.update_rows_eventv0_len = int()
        self.update_rows_eventv1_len = int()
        self.update_rows_eventv2_len = int()
        self.write_rows_eventv0_len = int()
        self.write_rows_eventv1_len = int()
        self.write_rows_eventv2_len = int()
        self.incident_event_len = int()
        self.heartbeat_event_len = int()
        self.ignorable_log_event_len = int()
        self.rows_query_log_event_len = int()
        self.gtid_log_event_len = int()
        self.anonymous_gtid_log_event_len = int()
        self.previous_gtids_log_event_len = int()
        self.binlog_checksum = str()
        self.CRC32 = int()

        self.event_size = event_size

    def set_common_header_len(self):
        self.common_header_len = get_uint8(self.file_handler)

    def set_start_event_V3_len(self):
        self.start_event_V3_len = get_uint8(self.file_handler)

    def set_query_event_len(self):
        self.query_event_len = get_uint8(self.file_handler)

    def set_stop_event_len(self):
        self.stop_event_len = get_uint8(self.file_handler)

    def set_rotate_event_len(self):
        self.rotate_event_len = get_uint8(self.file_handler)

    def set_intvar_event_len(self):
        self.intvar_event_len = get_uint8(self.file_handler)

    def set_load_event_len(self):
        self.load_event_len = get_uint8(self.file_handler)

    def set_slave_event_len(self):
        self.slave_event_len = get_uint8(self.file_handler)

    def set_create_file_event_len(self):
        self.create_file_event_len = get_uint8(self.file_handler)

    def set_append_block_event_len(self):
        self.append_block_event_len = get_uint8(self.file_handler)

    def set_exec_load_event_len(self):
        self.exec_load_event_len = get_uint8(self.file_handler)

    def set_delete_file_event_len(self):
        self.delete_file_event_len = get_uint8(self.file_handler)

    def set_new_load_event_len(self):
        self.new_load_event_len = get_uint8(self.file_handler)

    def set_rand_event_len(self):
        self.rand_event_len = get_uint8(self.file_handler)

    def set_user_var_event_len(self):
        self.user_var_event_len = get_uint8(self.file_handler)

    def set_format_description_event_len(self):
        self.format_description_event_len = get_uint8(self.file_handler)

    def set_xid_event_len(self):
        self.xid_event_len = get_uint8(self.file_handler)

    def set_begin_load_query_event_len(self):
        self.begin_load_query_event_len = get_uint8(self.file_handler)

    def set_execute_load_query_event_len(self):
        self.execute_load_query_event_len = get_uint8(self.file_handler)

    def set_table_map_event_len(self):
        self.table_map_event_len = get_uint8(self.file_handler)

    def set_delete_rows_eventv0_len(self):
        self.delete_rows_eventv0_len = get_uint8(self.file_handler)

    def set_update_rows_eventv0_len(self):
        self.update_rows_eventv0_len = get_uint8(self.file_handler)

    def set_write_rows_eventv0_len(self):
        self.write_rows_eventv0_len = get_uint8(self.file_handler)

    def set_delete_rows_eventv1_len(self):
        self.delete_rows_eventv1_len = get_uint8(self.file_handler)

    def set_update_rows_eventv1_len(self):
        self.update_rows_eventv1_len = get_uint8(self.file_handler)

    def set_write_rows_eventv1_len(self):
        self.write_rows_eventv1_len = get_uint8(self.file_handler)

    def set_incident_event_len(self):
        self.incident_event_len = get_uint8(self.file_handler)

    def set_heartbeat_event_len(self):
        self.heartbeat_event_len = get_uint8(self.file_handler)

    def set_ignorable_log_event_len(self):
        self.ignorable_log_event_len = get_uint8(self.file_handler)

    def set_rows_query_log_event_len(self):
        self.rows_query_log_event_len = get_uint8(self.file_handler)

    def set_delete_rows_eventv2_len(self):
        self.delete_rows_eventv2_len = get_uint8(self.file_handler)

    def set_update_rows_eventv2_len(self):
        self.update_rows_eventv2_len = get_uint8(self.file_handler)

    def set_write_rows_eventv2_len(self):
        self.write_rows_eventv2_len = get_uint8(self.file_handler)

    def set_gtid_log_event_len(self):
        self.gtid_log_event_len = get_uint8(self.file_handler)

    def set_anonymous_gtid_log_event_len(self):
        self.anonymous_gtid_log_event_len = get_uint8(self.file_handler)

    def set_previous_gtids_log_event_len(self):
        self.previous_gtids_log_event_len = get_uint8(self.file_handler)

    def set_CRC32_flag(self):
        global CRC32_flag
        ver_list = self.server_ver.split('-')[0].split('.')
        checksum_version = (ver_list[0] * 256 + ver_list[1]) * 256 + ver_list[2]
        """#329217= (5*256 + 6) * 256 + 1  mysql_version => 5.6.1"""
        checksum_version_product = 329217
        if checksum_version < checksum_version_product:
            self.binlog_checksum = "BINLOG_CHECKSUM_ALG_UNDEF"
            CRC32_flag = 0
        elif get_uint8(self.file_handler):
            self.binlog_checksum = "BINLOG_CHECKSUM_ALG_CRC32"
            CRC32_flag = 1
            self.set_CRC32()
        else:
            self.binlog_checksum = "BINLOG_CHECKSUM_ALG_OFF"
            CRC32_flag = 0

    def set_CRC32(self):
        self.CRC32 = get_uint32(self.file_handler)

    def parse_event(self):

        if event_size != 16:
            print "Version does not support"
            sys.exit(1)
        self.set_binlog_ver()
        self.set_server_ver()
        self.set_created_timestamp()
        self.set_common_header_len()
        self.set_start_event_V3_len()
        self.set_query_event_len()
        self.set_stop_event_len()
        self.set_rotate_event_len()
        self.set_intvar_event_len()
        self.set_load_event_len()
        self.set_slave_event_len()
        self.set_create_file_event_len()
        self.set_append_block_event_len()
        self.set_exec_load_event_len()
        self.set_delete_file_event_len()
        self.set_new_load_event_len()
        self.set_rand_event_len()
        self.set_user_var_event_len()
        self.set_format_description_event_len()
        self.set_xid_event_len()
        self.set_begin_load_query_event_len()
        self.set_execute_load_query_event_len()
        self.set_table_map_event_len()
        self.set_delete_rows_eventv0_len()
        self.set_update_rows_eventv0_len()
        self.set_write_rows_eventv0_len()
        self.set_delete_rows_eventv1_len()
        self.set_update_rows_eventv1_len()
        self.set_write_rows_eventv1_len()
        self.set_incident_event_len()
        self.set_heartbeat_event_len()
        self.set_ignorable_log_event_len()
        self.set_rows_query_log_event_len()
        self.set_delete_rows_eventv2_len()
        self.set_update_rows_eventv2_len()
        self.set_write_rows_eventv2_len()
        self.set_gtid_log_event_len()
        self.set_anonymous_gtid_log_event_len()
        self.set_previous_gtids_log_event_len()

        print "binlog_ver:V%d" % self.binlog_ver
        print "server_ver:%s" % self.server_ver
        print "created_timestamp:%d" % self.created_timestamp
        print "common_header_len:%d" % self.common_header_len

        print "start_event_V3_len:%d" % self.start_event_V3_len
        print "query_event_len:%d" % self.query_event_len
        print "stop_event_len:%d" % self.stop_event_len
        print "rotate_event_len:%d" % self.rotate_event_len
        print "intvar_event_len:%d" % self.intvar_event_len
        print "load_event_len:%d" % self.load_event_len
        print "slave_event_len:%d" % self.slave_event_len
        print "create_file_event_len:%d" % self.create_file_event_len
        print "append_block_event_len:%d" % self.append_block_event_len
        print "exec_load_event_len:%d" % self.exec_load_event_len
        print "delete_file_event_len:%d" % self.delete_file_event_len
        print "new_load_event_len:%d" % self.new_load_event_len
        print "rand_event_len:%d" % self.rand_event_len
        print "user_var_event_len:%d" % self.rand_event_len
        print "format_description_event_len:%d" % self.format_description_event_len
        print "xid_event_len:%d" % self.xid_event_len
        print "begin_load_query_event_len:%d" % self.begin_load_query_event_len
        print "execute_load_query_event_len:%d" % self.execute_load_query_event_len
        print "table_map_event_len:%d" % self.table_map_event_len
        print "delete_rows_eventv0_len:%d" % self.delete_rows_eventv0_len
        print "update_rows_eventv0_len:%d" % self.update_rows_eventv0_len
        print "write_rows_eventv0_len:%d" % self.write_rows_eventv0_len
        print "delete_rows_eventv1_len:%d" % self.delete_rows_eventv1_len
        print "update_rows_eventv1_len:%d" % self.update_rows_eventv1_len
        print "write_rows_eventv1_len:%d" % self.write_rows_eventv1_len
        print "incident_event_len:%d" % self.incident_event_len
        print "heartbeat_event_len:%d" % self.heartbeat_event_len
        print "ignorable_log_event_len:%d" % self.ignorable_log_event_len
        print "rows_query_log_event_len:%d" % self.rows_query_log_event_len
        print "delete_rows_eventv2_len:%d" % self.delete_rows_eventv2_len
        print "update_rows_eventv2_len:%d" % self.update_rows_eventv2_len
        print "write_rows_eventv2_len:%d" % self.write_rows_eventv2_len
        print "gtid_log_event_len:%d" % self.gtid_log_event_len
        print "anonymous_gtid_log_event_len:%d" % self.anonymous_gtid_log_event_len
        print "previous_gtids_log_event_len:%d" % self.previous_gtids_log_event_len
        print "binlog_checksum:%s" % self.binlog_checksum
        if CRC32_flag:
            self.set_CRC32_flag()
            print "CRC32:%d" % self.CRC32

        print self.file_handler.tell()


class Query_Event:
    """2"""
    post_header_len = 13

    thread_id_len = 4
    exec_time_len = 4
    db_len_size_len = 1
    error_code = 2
    status_vars_len_size_len = 2

    flags2_len = 4
    sql_mode_len = 8
    auto_increment_len = 2 * 2
    charset_len = 3 * 2
    lc_time_names_number_len = 2
    charset_database_number_len = 2
    table_map_for_update_len = 8
    master_data_written_len = 4
    microseconds_len = 3

    """catalog_len: in variable-length string
       time_zone: in variable-length string
       invoker: in variable-length string
       update_db_name: 1-byte count + <count> \0 terminated string"""

    """db_name with \0 terminated string
       db_name_len = db_len + 1
       query_len = event_size - common_header_len - post_header_len - status_vars_len - db_name_len [- CRC32_len (if CRC32_flag == 1)]"""

    def __init__(self, file_handler, event_size):

        """post_header"""
        self.thread_id = int()
        self.exec_time = int()
        self.db_len_size = int()
        self.error_code = int()
        self.status_vars_len_size = int()

        """post_body"""
        """status_vars"""
        self.sql_auto_is_null = 'off'
        self.foreign_key_checks = 'on'
        self.unique_checks = 'on'
        self.autocommit = 'on'
        self.sql_mode = str()
        self.catalog = str()
        self.auto_increment_increment = 1
        self.auto_increment_offset = 1
        self.character_set_client = 0
        self.collation_connection = 0
        self.collation_server = 0
        self.time_zone = 'en_US'
        self.lc_time_names_number = 0
        self.charset_database_number = 0
        self.table_map_for_update = 0
        self.master_data_written = 0
        self.invoker_user = 'None'
        self.invoker_host = 'None'
        self.db_list = list()
        self.microseconds = 0

        self.db_name = str()
        self.query = str()
        self.CRC32 = int()

        self.file_handler = file_handler
        self.event_size = event_size

    def set_CRC32(self):
        self.CRC32 = get_uint32(self.file_handler)

    def set_thread_id(self):
        self.thread_id = get_uint32(self.file_handler)

    def set_exec_time(self):
        self.exec_time = get_uint32(self.file_handler)

    def set_db_len_size(self):
        self.db_len_size = get_uint8(self.file_handler)

    def set_error_code(self):
        self.error_code = get_uint16(self.file_handler)

    def set_status_vars_len_size(self):
        self.status_vars_len_size = get_uint16(self.file_handler)

    def get_code_num(self):
        code_num = get_uint8(self.file_handler)
        return code_num

    def set_flags2(self):
        flags2 = get_uint32(self.file_handler)
        if flags2 == 16384:
            self.sql_auto_is_null = 'on'
        if flags2 == 67108864:
            self.foreign_key_checks = 'off'
        if flags2 == 67125248:
            self.sql_auto_is_null = 'on'
            self.foreign_key_checks = 'off'
        if flags2 == 134217728:
            self.unique_checks = 'off'
        if flags2 == 134234112:
            self.sql_auto_is_null = 'on'
            self.unique_checks = 'off'
        if flags2 == 201326592:
            self.foreign_key_checks = 'off'
            self.unique_checks = 'off'
        if flags2 == 201342976:
            self.sql_auto_is_null = 'on'
            self.foreign_key_checks = 'off'
            self.unique_checks = 'off'

    def set_sql_mode(self):
        mode_num = str(bin(get_uint64(self.file_handler))).zfill(32)
        self.sql_mode = list()
        sql_num_list = filter(lambda n: mode_num[n] == '1', range(1, 33))
        for each in sql_num_list:
            self.sql_mode.append(sql_mode_dic[each])

    def set_catalog(self):
        catalog_len_size = get_uint8(self.file_handler)
        self.catalog = get_char(self.file_handler, catalog_len_size)
        return catalog_len_size + 1

    def set_auto_increment(self):
        self.auto_increment_increment, self.auto_increment_offset\
            = get_uint16(self.file_handler, 2)

    def set_charset(self):
        charset_num = get_uint16(self.file_handler, 3)
        self.character_set_client = charset_dic[charset_num[0]][0]
        self.collation_connection = charset_dic[charset_num[1]][1]
        self.collation_server = charset_dic[charset_num[2]][0]

    def set_time_zone(self):
        time_zone_len_size = get_uint8(self.file_handler)
        self.time_zone = ''.join(get_char(self.file_handler, time_zone_len_size))
        return time_zone_len_size + 1

    def set_lc_time_names_number(self):
        self.lc_time_names_number = get_uint16(self.file_handler)

    def set_charset_database_number(self):
        self.charset_database_number = get_uint8(self.file_handler, 2)

    def set_table_map_for_update(self):
        self.table_map_for_update = get_uint64(self.file_handler)

    def set_master_data_written(self):
        self.master_data_written = get_uint32(self.file_handler)

    def set_invoker(self):
        user_len_size = get_uint8(self.file_handler)
        self.invoker_user = get_char(self.file_handler, user_len_size)
        host_len_size = get_uint8(self.file_handler)
        self.invoker_host = get_char(self.file_handler, host_len_size)
        return 1 + user_len_size + 1 + host_len_size

    def set_update_db_name(self):
        start_pos = self.file_handler.tell()
        db_count = get_uint8(self.file_handler)
        db_list = list()
        db_num = 0
        db_name = ''
        while db_num < db_count:
            new_str = get_char(self.file_handler)
            if new_str == '\x00':
                self.db_list.append(db_name)
                db_name = ''
                db_num += 1
                continue
            db_name += new_str
        fin_pos = self.file_handler.tell()
        return fin_pos - start_pos

    def set_microseconds(self):
        self.microseconds = get_reverse_byte_order(self.file_handler, 3)

    def set_db_name(self):
        self.db_name = get_char(self.file_handler, self.db_len_size)
        self.file_handler.read(1)

    def set_query(self):
        if CRC32_flag == 1:
            self.query = get_char(self.file_handler,
                                  self.event_size - common_header_len - Query_Event.post_header_len -
                                  self.status_vars_len_size - self.db_len_size - 1 - CRC32_len)
            self.set_CRC32()
        else:
            self.query = get_char(self.file_handler,
                                  self.event_size - common_header_len - Query_Event.post_header_len -
                                  self.status_vars_len_size - self.db_len_len - 1)

    def parse_post_header(self):

        self.set_thread_id()
        self.set_exec_time()
        self.set_db_len_size()
        self.set_error_code()
        self.set_status_vars_len_size()
        return (self.thread_id, self.exec_time, self.db_len_size,
                self.error_code, self.status_vars_len_size)

    def parse_post_body(self):

        status_vars_remain = self.status_vars_len_size

        while status_vars_remain > 0:
            if status_vars_remain < 0:
                print "Binlog have something wrong."
                break

            code_num = self.get_code_num()

            if code_num == 0:
                self.set_flags2()
                status_vars_remain -= 1 + Query_Event.flags2_len
                continue
            elif code_num == 1:
                self.set_sql_mode()
                status_vars_remain -= 1 + Query_Event.sql_mode_len
                continue
            elif code_num == 6:
                code_len = self.set_catalog()
                status_vars_remain -= 1 + code_len
                continue
            elif code_num == 3:
                self.set_auto_increment()
                status_vars_remain -= 1 + Query_Event.auto_increment_len
                continue
            elif code_num == 4:
                self.set_charset()
                status_vars_remain -= 1 + Query_Event.charset_len
                continue
            elif code_num == 5:
                code_len = self.time_zone_len = set_time_zone()
                status_vars_remain -= 1 + code_len
                continue
            elif code_num == 7:
                self.set__lc_time_names_number()
                status_vars_remain -= 1 + Query_Event.lc_time_names_number_len
                continue
            elif code_num == 8:
                self.set_charset_database_number()
                status_vars_remain -= 1 + Query_Event.charset_database_number_len
                continue
            elif code_num == 9:
                self.set_table_map_for_update()
                status_vars_remain -= 1 + Query_Event.table_map_for_update_len
                continue
            elif code_num == 10:
                self.set_master_data_written()
                status_vars_remain -= 1 + Query_Event.master_data_written_len
                continue
            elif code_num == 11:
                code_len = self.set_invoker()
                status_vars_remain -= 1 + code_len
                continue
            elif code_num == 12:
                code_len = self.set_update_db_name()
                status_vars_remain -= 1 + code_len
                continue
            elif code_num == 13:
                self.set_microseconds()
                status_vars_remain -= 1 + Query_Event.microseconds_len
                continue
            else:
                print "Binlog have something wrong."

        self.set_db_name()
        self.set_query()

        print "sql_auto_is_null:%s" % self.sql_auto_is_null
        print "foreign_key_checks:%s" % self.foreign_key_checks
        print "unique_checks:%s" % self.foreign_key_checks
        print "sql_mode:%s" % self.sql_mode
        print "catalog:%s" % self.catalog
        print "auto_increment_increment:%s\nauto_increment_offset:%s" %\
            (self.auto_increment_increment, self.auto_increment_offset)
        print \
            "character_set_client:%s\ncollation_connection:%s\ncollation\
_server:%s" % (self.character_set_client, self.collation_connection,
            self.collation_server)
        print "time_zone:%s" % self.time_zone
        print "lc_time_names_number:%d" % self.lc_time_names_number
        print "charset_database_number:%d" % self.charset_database_number
        print "table_map_for_update:%d" % self.table_map_for_update
        print "master_data_written:%d" % self.master_data_written
        print "invoker_user:%s\ninvoker_host:%s" % (self.invoker_user,
                                                    self.invoker_host)
        print "db_list:%s" % self.db_list
        print "microseconds:%d" % self.microseconds
        print "db_name:%s" % self.db_name
        print "query:%s" % self.query
        if CRC32_flag:
            print "CRC32:%d" % self.CRC32
        print "event_end_pos:%s" % self.file_handler.tell()


class Stop_Event:

    """3"""

    def __init__(self, file_handler):
        self.file_handler = file_handler

    def set_CRC32(self):
        self.CRC32 = get_uint32(self.file_handler)

    def parse_event(self):
        if CRC32_flag:
            self.set_CRC32()
            print "CRC32:%d" % self.CRC32


class Rotate_Event:

    """4"""
    rotate_to_pos_len = 8
    """rotate_to_log_file_len = event_size - common_header_len - rotate_to_pos_len [- CRC32_len (if CRC32_flag == 1)]"""

    def __init__(self, file_handler, event_size):
#        self.rotate_to_pos = int()
#        self.rotate_to_log_file = str()

        self.file_handler = file_handler
        self.event_size = event_size

    def set_rotate_to_pos(self):
        self.rotate_to_pos = get_uint64(self.file_handler)

    def set_rotate_to_log_file(self):
        if CRC32_flag == 1:
            self.rotate_to_log_file = get_char(self.file_handler, self.event_size - common_header_len - Rotate_Event.rotate_to_pos_len - CRC32_flag_len)
        else:
            self.rotate_to_log_file = get_char(self.file_handler, self.event_size - common_header_len - Rotate_Event.rotate_to_pos_len)

    def set_CRC32(self):
        self.CRC32 = get_uint32(self.file_handler)

    def parse_event(self):
        self.set_rotate_to_pos()
        self.set_rotate_to_log_file()

        print "rotate_to_pos:%d" % self.rotate_to_pos
        print "rotate_to_log_file:%s" % self.rotate_to_log_file
        if CRC32_flag:
            self.set_CRC32()
            print "CRC32:%d" % self.CRC32


class Intvar_Event:

    """5"""
    intvar_type_len = 1
    intvar_id_len = 8
    intvar_type_dic = {1: "LAST_INSERT_ID_EVENT", 2: "INSERT_ID_EVENT"}

    def __init__(self, file_handler):
#        self.intvar_type = str()
#        self.intvar_id = int()

        self.file_handler = file_handler
        
    def set_intvar_type(self):
        intvar_type_num = get_uint8(self.file_handler)
        self.intvar_type = Intvar_Event.intvar_type_dic[intvar_type_num]

    def set_intvar_id(self):
        self.intvar_id = get_uint64(self.file_handler)

    def parse_event(self):
        self.set_intvar_type()
        self.set_intvar_id()

        print "intvar_type:%s" % self.intvar_type
        print "intvar_id:%d" % self.intvar_id
        print self.file_handler.tell()


class Load_Event:
    """6"""
    thread_id_len = 4
    exec_time_len = 4
    skip_liens_len = 4
    table_name_len = 1
    db_len_size_len = 1
    num_fields_len = 4


class New_Load_Event(Load_Event):
    """12"""
    def __init__(self, file_handler, event_size):
        """Post_Header"""
#        self.thread_id = int()
#        self.exec_time = int()
#        self.skip_lines = int()
#        self.table_name_len = int()
#        self.db_len_size = int()
#        self.num_fields_len = int()


        self.file_handler = file_handler
        self.event_size = event_size

    def set_thread_id(self):
        self.thread_id = get_uint32(self.file_handler)

    def set_exec_time(self):
        self.exec_time = get_uint32(self.file_handler)

    def set_skip_lines(self):
        self.skip_lines = get_uint32(self.file_handler)

    def set_table_name_len(self):
        self.table_name_len = get_uint8(self.file_handler)

    def set_db_len_size(self):
        self.db_len_size = get_uint8(self.file_handler)

    def set_num_fields(self):
        self.num_fields = get_uint32(self.file_handler)

    def parse_post_header(self):
        self.set_thread_id()
        self.set_exec_time()
        self.set_skip_lines()
        self.set_table_name_len()
        self.set_table_name_len()
        self.set_db_name()
        self.set_num_fields()
        print "thread_id:%d" % self.thread_id
        print "exec_time:%d" % self.exec_time
        print "skip_lines:%d" % self.skip_lines
        print "table_name_len:%d" % self.table_name_len
        print "db_len_size:%d" % self.db_len_size
        print "num_fields_len:%d" % self.num_fields_len


class Rand_Event:
    """13"""
    seed1_len = 8
    seed2_len = 8
    def __init__(self, file_handler):
        self.file_handler = file_handler

    def set_seed1(self):
        self.seed1 = get_uint64(self.file_handler)

    def set_seed2(self):
        self.seed2 = get_uint64(self.file_handler)

    def set_CRC32(self):
        self.CRC32 = get_uint32(self.file_handler)

    def parse_event(self):
        self.set_seed1()
        self.set_seed2()
        print "seed1:%d" % self.seed1
        print "seed2:%d" % self.seed2
        if CRC32_flag:
            self.set_CRC32()
            print "CRC32:%d" % self.CRC32


class User_Var_Event:
    """14"""
    user_var_len_size_len = 4
    user_var_is_null_len = 1
    user_var_type_size_len = 1
    user_charset_number_size_len = 4
    user_var_value_len_size_len = 4
    flags = 1

    def __init__(self, file_handler):
        self.file_handler = file_handler

        self.user_var_len_size = get_uint32(self.file_handler)
        self.user_var = get_char(self.file_handler, self.user_var_len_size)
        self.user_var_is_null = get_uint8(self.file_handler)
        if not self.user_var_is_null:
            self.user_var_type = get_uint8(self.file_handler)
            self.user_charset_number_size = get_uint32(self.file_handler)
            self.user_val_value_len_size = get_uint32(self.file_handler)
            if self.user_var_type == 0:
                self.user_var_value = get_char(self.file_handler, self.user_var_value_len_size)
            elif self.user_var_type == 1:
                self.user_var_value = get_double(self.file_handler)
            elif self.user_var_type == 2:
                self.user_var_value = get_reverse_byte_order(self.file_handler, self.user_var_value_len_size)
            elif self.user_var_type == 4:
                self.user_var_value = get_reverse_byte_order(self.file_handler, self.user_var_value_len_size)
            self.flags = get_uint8(self.file_handler)

        if CRC32_flag:
            self.CRC32 = get_uint32(self.file_handler)

    def parse_event(self):
        print "user_var_len_size:%d" % self.user_var_len_size
        print "user_var:%s" % self.user_var
        print "user_var_is_null:%d" % self.user_var_is_null
        if not self.user_var_is_null:
            print "user_var_type:%d" % self.user_var_type
            print "user_charset_number_size:%d" % self.user_charset_number_size
            print "user_var_value_len_size:%d" % self.user_var_value_len_size
            print "user_var_value:%s" % self.user_var_value
            print "flags:%d" % self.flags


        if CRC32_flag:
            print "CRC32:%d" % self.CRC32



global sql_mode_dic, charset_dic
sql_mode_dic = {
    32: 'MODE_REAL_AS_FLOAT',
    31: 'MODE_PIPES_AS_CONCAT',
    30: 'MODE_ANSI_QUOTES',
    29: 'MODE_IGNORE_SPACE',
    28: 'MODE_NOT_USED',
    27: 'MODE_ONLY_FULL_GROUP_BY',
    26: 'MODE_NO_UNSIGNED_SUBTRACTION',
    25: 'MODE_NO_DIR_IN_CREATE',
    24: 'MODE_POSTGRESQL',
    23: 'MODE_ORACLE',
    22: 'MODE_MSSQL',
    21: 'MODE_DB2',
    20: 'MODE_MAXDB',
    19: 'MODE_NO_KEY_OPTIONS',
    18: 'MODE_NO_TABLE_OPTIONS',
    17: 'MODE_NO_FIELD_OPTIONS',
    16: 'MODE_MYSQL323',
    15: 'MODE_MYSQL323',
    14: 'MODE_MYSQL40',
    13: 'MODE_ANSI',
    12: 'MODE_NO_AUTO_VALUE_ON_ZERO',
    11: 'MODE_NO_BACKSLASH_ESCAPES',
    10: 'MODE_STRICT_TRANS_TABLES',
    9: 'MODE_STRICT_ALL_TABLES',
    8: 'MODE_NO_ZERO_IN_DATE',
    7: 'MODE_NO_ZERO_DATE',
    6: 'MODE_INVALID_DATES',
    5: 'MODE_ERROR_FOR_DIVISION_BY_ZERO',
    4: 'MODE_TRADITIONAL',
    3: 'MODE_NO_AUTO_CREATE_USER',
    2: 'MODE_HIGH_NOT_PRECEDENCE',
    1: 'MODE_PAD_CHAR_TO_FULL_LENGTH'
}

charset_dic = {
    1: ('big5', 'big5_chinese_ci'),
    2: ('latin2', 'latin2_czech_cs'),
    3: ('dec8', 'dec8_swedish_ci'),
    4: ('cp850', 'cp850_general_ci'),
    5: ('latin1', 'latin1_german1_ci'),
    6: ('hp8', 'hp8_english_ci'),
    7: ('koi8r', 'koi8r_general_ci'),
    8: ('latin1', 'latin1_swedish_ci'),
    9: ('latin2', 'latin2_general_ci'),
    10: ('swe7', 'swe7_swedish_ci'),
    11: ('ascii', 'ascii_general_ci'),
    12: ('ujis', 'ujis_japanese_ci'),
    13: ('sjis', 'sjis_japanese_ci'),
    14: ('cp1251', 'cp1251_bulgarian_ci'),
    15: ('latin1', 'latin1_danish_ci'),
    16: ('hebrew', 'hebrew_general_ci'),
    18: ('tis620', 'tis620_thai_ci'),
    19: ('euckr', 'euckr_korean_ci'),
    20: ('latin7', 'latin7_estonian_cs'),
    21: ('latin2', 'latin2_hungarian_ci'),
    22: ('koi8u', 'koi8u_general_ci'),
    23: ('cp1251', 'cp1251_ukrainian_ci'),
    24: ('gb2312', 'gb2312_chinese_ci'),
    25: ('greek', 'greek_general_ci'),
    26: ('cp1250', 'cp1250_general_ci'),
    27: ('latin2', 'latin2_croatian_ci'),
    28: ('gbk', 'gbk_chinese_ci'),
    29: ('cp1257', 'cp1257_lithuanian_ci'),
    30: ('latin5', 'latin5_turkish_ci'),
    31: ('latin1', 'latin1_german2_ci'),
    32: ('armscii8', 'armscii8_general_ci'),
    33: ('utf8', 'utf8_general_ci'),
    34: ('cp1250', 'cp1250_czech_cs'),
    35: ('ucs2', 'ucs2_general_ci'),
    36: ('cp866', 'cp866_general_ci'),
    37: ('keybcs2', 'keybcs2_general_ci'),
    38: ('macce', 'macce_general_ci'),
    39: ('macroman', 'macroman_general_ci'),
    40: ('cp852', 'cp852_general_ci'),
    41: ('latin7', 'latin7_general_ci'),
    42: ('latin7', 'latin7_general_cs'),
    43: ('macce', 'macce_bin'),
    44: ('cp1250', 'cp1250_croatian_ci'),
    45: ('utf8mb4', 'utf8mb4_general_ci'),
    46: ('utf8mb4', 'utf8mb4_bin'),
    47: ('latin1', 'latin1_bin'),
    48: ('latin1', 'latin1_general_ci'),
    49: ('latin1', 'latin1_general_cs'),
    50: ('cp1251', 'cp1251_bin'),
    51: ('cp1251', 'cp1251_general_ci'),
    52: ('cp1251', 'cp1251_general_cs'),
    53: ('macroman', 'macroman_bin'),
    54: ('utf16', 'utf16_general_ci'),
    55: ('utf16', 'utf16_bin'),
    56: ('utf16le', 'utf16le_general_ci'),
    57: ('cp1256', 'cp1256_general_ci'),
    58: ('cp1257', 'cp1257_bin'),
    59: ('cp1257', 'cp1257_general_ci'),
    60: ('utf32', 'utf32_general_ci'),
    61: ('utf32', 'utf32_bin'),
    62: ('utf16le', 'utf16le_bin'),
    63: ('binary', 'binary'),
    64: ('armscii8', 'armscii8_bin'),
    65: ('ascii', 'ascii_bin'),
    66: ('cp1250', 'cp1250_bin'),
    67: ('cp1256', 'cp1256_bin'),
    68: ('cp866', 'cp866_bin'),
    69: ('dec8', 'dec8_bin'),
    70: ('greek', 'greek_bin'),
    71: ('hebrew', 'hebrew_bin'),
    72: ('hp8', 'hp8_bin'),
    73: ('keybcs2', 'keybcs2_bin'),
    74: ('koi8r', 'koi8r_bin'),
    75: ('koi8u', 'koi8u_bin'),
    77: ('latin2', 'latin2_bin'),
    78: ('latin5', 'latin5_bin'),
    79: ('latin7', 'latin7_bin'),
    80: ('cp850', 'cp850_bin'),
    81: ('cp852', 'cp852_bin'),
    82: ('swe7', 'swe7_bin'),
    83: ('utf8', 'utf8_bin'),
    84: ('big5', 'big5_bin'),
    85: ('euckr', 'euckr_bin'),
    86: ('gb2312', 'gb2312_bin'),
    87: ('gbk', 'gbk_bin'),
    88: ('sjis', 'sjis_bin'),
    89: ('tis620', 'tis620_bin'),
    90: ('ucs2', 'ucs2_bin'),
    91: ('ujis', 'ujis_bin'),
    92: ('geostd8', 'geostd8_general_ci'),
    93: ('geostd8', 'geostd8_bin'),
    94: ('latin1', 'latin1_spanish_ci'),
    95: ('cp932', 'cp932_japanese_ci'),
    96: ('cp932', 'cp932_bin'),
    97: ('eucjpms', 'eucjpms_japanese_ci'),
    98: ('eucjpms', 'eucjpms_bin'),
    99: ('cp1250', 'cp1250_polish_ci'),
    101: ('utf16', 'utf16_unicode_ci'),
    102: ('utf16', 'utf16_icelandic_ci'),
    103: ('utf16', 'utf16_latvian_ci'),
    104: ('utf16', 'utf16_romanian_ci'),
    105: ('utf16', 'utf16_slovenian_ci'),
    106: ('utf16', 'utf16_polish_ci'),
    107: ('utf16', 'utf16_estonian_ci'),
    108: ('utf16', 'utf16_spanish_ci'),
    109: ('utf16', 'utf16_swedish_ci'),
    110: ('utf16', 'utf16_turkish_ci'),
    111: ('utf16', 'utf16_czech_ci'),
    112: ('utf16', 'utf16_danish_ci'),
    113: ('utf16', 'utf16_lithuanian_ci'),
    114: ('utf16', 'utf16_slovak_ci'),
    115: ('utf16', 'utf16_spanish2_ci'),
    116: ('utf16', 'utf16_roman_ci'),
    117: ('utf16', 'utf16_persian_ci'),
    118: ('utf16', 'utf16_esperanto_ci'),
    119: ('utf16', 'utf16_hungarian_ci'),
    120: ('utf16', 'utf16_sinhala_ci'),
    121: ('utf16', 'utf16_german2_ci'),
    122: ('utf16', 'utf16_croatian_ci'),
    123: ('utf16', 'utf16_unicode_520_ci'),
    124: ('utf16', 'utf16_vietnamese_ci'),
    128: ('ucs2', 'ucs2_unicode_ci'),
    129: ('ucs2', 'ucs2_icelandic_ci'),
    130: ('ucs2', 'ucs2_latvian_ci'),
    131: ('ucs2', 'ucs2_romanian_ci'),
    132: ('ucs2', 'ucs2_slovenian_ci'),
    133: ('ucs2', 'ucs2_polish_ci'),
    134: ('ucs2', 'ucs2_estonian_ci'),
    135: ('ucs2', 'ucs2_spanish_ci'),
    136: ('ucs2', 'ucs2_swedish_ci'),
    137: ('ucs2', 'ucs2_turkish_ci'),
    138: ('ucs2', 'ucs2_czech_ci'),
    139: ('ucs2', 'ucs2_danish_ci'),
    140: ('ucs2', 'ucs2_lithuanian_ci'),
    141: ('ucs2', 'ucs2_slovak_ci'),
    142: ('ucs2', 'ucs2_spanish2_ci'),
    143: ('ucs2', 'ucs2_roman_ci'),
    144: ('ucs2', 'ucs2_persian_ci'),
    145: ('ucs2', 'ucs2_esperanto_ci'),
    146: ('ucs2', 'ucs2_hungarian_ci'),
    147: ('ucs2', 'ucs2_sinhala_ci'),
    148: ('ucs2', 'ucs2_german2_ci'),
    149: ('ucs2', 'ucs2_croatian_ci'),
    150: ('ucs2', 'ucs2_unicode_520_ci'),
    151: ('ucs2', 'ucs2_vietnamese_ci'),
    159: ('ucs2', 'ucs2_general_mysql500_ci'),
    160: ('utf32', 'utf32_unicode_ci'),
    161: ('utf32', 'utf32_icelandic_ci'),
    162: ('utf32', 'utf32_latvian_ci'),
    163: ('utf32', 'utf32_romanian_ci'),
    164: ('utf32', 'utf32_slovenian_ci'),
    165: ('utf32', 'utf32_polish_ci'),
    166: ('utf32', 'utf32_estonian_ci'),
    167: ('utf32', 'utf32_spanish_ci'),
    168: ('utf32', 'utf32_swedish_ci'),
    169: ('utf32', 'utf32_turkish_ci'),
    170: ('utf32', 'utf32_czech_ci'),
    171: ('utf32', 'utf32_danish_ci'),
    172: ('utf32', 'utf32_lithuanian_ci'),
    173: ('utf32', 'utf32_slovak_ci'),
    174: ('utf32', 'utf32_spanish2_ci'),
    175: ('utf32', 'utf32_roman_ci'),
    176: ('utf32', 'utf32_persian_ci'),
    177: ('utf32', 'utf32_esperanto_ci'),
    178: ('utf32', 'utf32_hungarian_ci'),
    179: ('utf32', 'utf32_sinhala_ci'),
    180: ('utf32', 'utf32_german2_ci'),
    181: ('utf32', 'utf32_croatian_ci'),
    182: ('utf32', 'utf32_unicode_520_ci'),
    183: ('utf32', 'utf32_vietnamese_ci'),
    192: ('utf8', 'utf8_unicode_ci'),
    193: ('utf8', 'utf8_icelandic_ci'),
    194: ('utf8', 'utf8_latvian_ci'),
    195: ('utf8', 'utf8_romanian_ci'),
    196: ('utf8', 'utf8_slovenian_ci'),
    197: ('utf8', 'utf8_polish_ci'),
    198: ('utf8', 'utf8_estonian_ci'),
    199: ('utf8', 'utf8_spanish_ci'),
    200: ('utf8', 'utf8_swedish_ci'),
    201: ('utf8', 'utf8_turkish_ci'),
    202: ('utf8', 'utf8_czech_ci'),
    203: ('utf8', 'utf8_danish_ci'),
    204: ('utf8', 'utf8_lithuanian_ci'),
    205: ('utf8', 'utf8_slovak_ci'),
    206: ('utf8', 'utf8_spanish2_ci'),
    207: ('utf8', 'utf8_roman_ci'),
    208: ('utf8', 'utf8_persian_ci'),
    209: ('utf8', 'utf8_esperanto_ci'),
    210: ('utf8', 'utf8_hungarian_ci'),
    211: ('utf8', 'utf8_sinhala_ci'),
    212: ('utf8', 'utf8_german2_ci'),
    213: ('utf8', 'utf8_croatian_ci'),
    214: ('utf8', 'utf8_unicode_520_ci'),
    215: ('utf8', 'utf8_vietnamese_ci'),
    223: ('utf8', 'utf8_general_mysql500_ci'),
    224: ('utf8mb4', 'utf8mb4_unicode_ci'),
    225: ('utf8mb4', 'utf8mb4_icelandic_ci'),
    226: ('utf8mb4', 'utf8mb4_latvian_ci'),
    227: ('utf8mb4', 'utf8mb4_romanian_ci'),
    228: ('utf8mb4', 'utf8mb4_slovenian_ci'),
    229: ('utf8mb4', 'utf8mb4_polish_ci'),
    230: ('utf8mb4', 'utf8mb4_estonian_ci'),
    231: ('utf8mb4', 'utf8mb4_spanish_ci'),
    232: ('utf8mb4', 'utf8mb4_swedish_ci'),
    233: ('utf8mb4', 'utf8mb4_turkish_ci'),
    234: ('utf8mb4', 'utf8mb4_czech_ci'),
    235: ('utf8mb4', 'utf8mb4_danish_ci'),
    236: ('utf8mb4', 'utf8mb4_lithuanian_ci'),
    237: ('utf8mb4', 'utf8mb4_slovak_ci'),
    238: ('utf8mb4', 'utf8mb4_spanish2_ci'),
    239: ('utf8mb4', 'utf8mb4_roman_ci'),
    240: ('utf8mb4', 'utf8mb4_persian_ci'),
    241: ('utf8mb4', 'utf8mb4_esperanto_ci'),
    242: ('utf8mb4', 'utf8mb4_hungarian_ci'),
    243: ('utf8mb4', 'utf8mb4_sinhala_ci'),
    244: ('utf8mb4', 'utf8mb4_german2_ci'),
    245: ('utf8mb4', 'utf8mb4_croatian_ci'),
    246: ('utf8mb4', 'utf8mb4_unicode_520_ci'),
    247: ('utf8mb4', 'utf8mb4_vietnamese_ci')
}

global CRC32_flag
#log_file = '/opt/mysql/data3/mybinlog.000005'
log_file = '/opt/mysql/data/mybinlog.000003'
#log_file = '/home/hu/Downloads/hu-bin.000001'
#log_file = '/opt/mysql/data2/mysql-relay-bin.000005'
#log_file = '/opt/mysql-4.1/data/mybinlog.000001'
#log_file = 'relay.000002'

log_stream = open(log_file, 'rb')

CRC32_flag = 1
#pos = 4
#pos = 95
#pos = 2525720
#pos = 1268266
#pos = 277
pos = 6716
#pos = 3467
log_stream.seek(pos, 0)
a = Event_Common_Header(log_stream)
b = a.parse_common_header()
print b
size = b[3]
if b[1] == 2:
    qe = Query_Event(log_stream, size)
    ret = qe.parse_post_header()
    print ret
    ret = qe.parse_post_body()
elif b[1] ==1:
    qe = Start_Event_V3(log_stream)
    qe.parse_event()
elif b[1] == 15:
    qe = Format_Description_Event(log_stream, size)
    qe.parse_event()
elif b[1] == 3:
    qe = Stop_Event(log_stream)
    qe.parse_event()
elif b[1] == 4:
    qe = Rotate_Event(log_stream, size)
    qe.parse_event()
elif b[1] == 5:
    qe = Intvar_Event(log_stream, size)
    qe.parse_event()
elif b[1] == 13:
    qe = Rand_Event(log_stream)
    qe.parse_event()
elif b[1] == 14:
    qe = User_Var_Event(log_stream)
    qe.parse_event()
print log_stream.tell()
