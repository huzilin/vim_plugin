import sys

sys.path.append("..")
from include.unpack_byte import *


common_header_flag = {
    0: '00',
    0x1: 'LOG_EVENT_BINLOG_IN_USE_F',
    0x4: 'LOG_EVENT_THREAD_SPECIFIC_F',
    0x8: 'LOG_EVENT_SUPPRESS_USE_F',
    0x20: 'LOG_EVENT_ARTIFICIAL_F',
    0x40: 'LOG_EVENT_RELAY_LOG_F',
    0x80: 'LOG_EVENT_IGNORABLE_F',
    0x100: 'LOG_EVENT_NO_FILTER_F',
    0x200: 'LOG_EVENT_MTS_ISOLATE_F'}


class Event_Common_Header:

    """
    timestamp_len = 4
    type_code_len = 1
    server_id_len = 4
    event_size_len = 4
    master_postion_len = 4
    flags_len = 2
    """

    def __init__(self, buf):
        self.parse = unpack_byte.Parse_Byte_Stream(buf)

        self.timestamp = self.parse.get_timestamp()
        self.type_code = self.parse.get_uint8()
        self.server_id = self.parse.get_uint32()
        self.event_size = self.parse.get_uint32()
        self.master_position = self.parse.get_uint32()
        self.flags = common_header_flag[self.parse.get_uint16()]

    def event_output(self):

        print "timestamp: %s\ttype_code: %d\tserver_id: %d\tevent_size: %d\t\
        master_position: %d\tflags: %s" % (self.timestamp, self.type_code,
                                           self.server_id, self.event_size,
                                           self.master_position, self.flags)
        return self.type_code, self.event_size

