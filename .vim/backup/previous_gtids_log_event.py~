import sys
import binascii

sys.path.append("..")
from include import unpack_byte


class Previous_Gtids_Log_Event:
    """
    35
    """
    def __init__(self, post_buf):
        self.parse = unpack_byte.Parse_Byte_Stream(post_buf)
        gtid_seq = self.parse.get_uint64()
        self.gtid_list = list()
        if gtid_seq:
            for each_server in range(gtid_seq):
                sid = "%s-%s-%s-%s-%s" %\
                    (binascii.b2a_hex(post_buf[self.parse.pos:
                                               self.parse.pos + 4]),
                     binascii.b2a_hex(post_buf[self.parse.pos + 4:
                                               self.parse.pos + 4 + 2]),
                     binascii.b2a_hex(post_buf[self.parse.pos + 4 + 2:
                                               self.parse.pos + 4 + 2 + 2]),
                     binascii.b2a_hex(post_buf[self.parse.pos + 4 + 2 + 2:
                                               self.parse.pos +
                                               4 + 2 + 2 + 2]),
                     binascii.b2a_hex(post_buf[self.parse.pos + 4 + 2 + 2 + 2:
                                               self.parse.pos +
                                               4 + 2 + 2 + 2 + 6]))
                self.parse.pos += 16
                gno = str()
                gno_seq = self.parse.get_uint64()
                for each_gno in range(gno_seq):
                    start_gno, end_gno =\
                        self.parse.get_uint64(), (self.parse.get_uint64() - 1)
                    if start_gno == end_gno:
                        gno += ":%s" % start_gno
                    else:
                        gno += ":%s-%s" % (start_gno, end_gno)
                self.gtid_list.append(sid + gno)
        else:
            self.gtid_list.append('empty')

    def event_output(self):
        for each in self.gtid_list:
            print each
